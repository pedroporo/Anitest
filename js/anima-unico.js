/* Modernizr 2.6.2 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-applicationcache-canvas-canvastext-draganddrop-hashchange-history-audio-video-indexeddb-input-inputtypes-localstorage-postmessage-sessionstorage-websockets-websqldatabase-webworkers-geolocation-inlinesvg-smil-svg-svgclippaths-touch-webgl-shiv-mq-cssclasses-addtest-prefixed-teststyles-testprop-testallprops-hasevent-prefixes-domprefixes-load
 */
;window.Modernizr=function(a,b,c){function D(a){j.cssText=a}function E(a,b){return D(n.join(a+";")+(b||""))}function F(a,b){return typeof a===b}function G(a,b){return!!~(""+a).indexOf(b)}function H(a,b){for(var d in a){var e=a[d];if(!G(e,"-")&&j[e]!==c)return b=="pfx"?e:!0}return!1}function I(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:F(f,"function")?f.bind(d||b):f}return!1}function J(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+p.join(d+" ")+d).split(" ");return F(b,"string")||F(b,"undefined")?H(e,b):(e=(a+" "+q.join(d+" ")+d).split(" "),I(e,b,c))}function K(){e.input=function(c){for(var d=0,e=c.length;d<e;d++)u[c[d]]=c[d]in k;return u.list&&(u.list=!!b.createElement("datalist")&&!!a.HTMLDataListElement),u}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),e.inputtypes=function(a){for(var d=0,e,f,h,i=a.length;d<i;d++)k.setAttribute("type",f=a[d]),e=k.type!=="text",e&&(k.value=l,k.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(f)&&k.style.WebkitAppearance!==c?(g.appendChild(k),h=b.defaultView,e=h.getComputedStyle&&h.getComputedStyle(k,null).WebkitAppearance!=="textfield"&&k.offsetHeight!==0,g.removeChild(k)):/^(search|tel)$/.test(f)||(/^(url|email)$/.test(f)?e=k.checkValidity&&k.checkValidity()===!1:e=k.value!=l)),t[a[d]]=!!e;return t}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var d="2.6.2",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k=b.createElement("input"),l=":)",m={}.toString,n=" -webkit- -moz- -o- -ms- ".split(" "),o="Webkit Moz O ms",p=o.split(" "),q=o.toLowerCase().split(" "),r={svg:"http://www.w3.org/2000/svg"},s={},t={},u={},v=[],w=v.slice,x,y=function(a,c,d,e){var f,i,j,k,l=b.createElement("div"),m=b.body,n=m||b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:h+(d+1),l.appendChild(j);return f=["&#173;",'<style id="s',h,'">',a,"</style>"].join(""),l.id=h,(m?l:n).innerHTML+=f,n.appendChild(l),m||(n.style.background="",n.style.overflow="hidden",k=g.style.overflow,g.style.overflow="hidden",g.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),g.style.overflow=k),!!i},z=function(b){var c=a.matchMedia||a.msMatchMedia;if(c)return c(b).matches;var d;return y("@media "+b+" { #"+h+" { position: absolute; } }",function(b){d=(a.getComputedStyle?getComputedStyle(b,null):b.currentStyle)["position"]=="absolute"}),d},A=function(){function d(d,e){e=e||b.createElement(a[d]||"div"),d="on"+d;var f=d in e;return f||(e.setAttribute||(e=b.createElement("div")),e.setAttribute&&e.removeAttribute&&(e.setAttribute(d,""),f=F(e[d],"function"),F(e[d],"undefined")||(e[d]=c),e.removeAttribute(d))),e=null,f}var a={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return d}(),B={}.hasOwnProperty,C;!F(B,"undefined")&&!F(B.call,"undefined")?C=function(a,b){return B.call(a,b)}:C=function(a,b){return b in a&&F(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=w.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(w.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(w.call(arguments)))};return e}),s.flexbox=function(){return J("flexWrap")},s.canvas=function(){var a=b.createElement("canvas");return!!a.getContext&&!!a.getContext("2d")},s.canvastext=function(){return!!e.canvas&&!!F(b.createElement("canvas").getContext("2d").fillText,"function")},s.webgl=function(){return!!a.WebGLRenderingContext},s.touch=function(){var c;return"ontouchstart"in a||a.DocumentTouch&&b instanceof DocumentTouch?c=!0:y(["@media (",n.join("touch-enabled),("),h,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(a){c=a.offsetTop===9}),c},s.geolocation=function(){return"geolocation"in navigator},s.postmessage=function(){return!!a.postMessage},s.websqldatabase=function(){return!!a.openDatabase},s.indexedDB=function(){return!!J("indexedDB",a)},s.hashchange=function(){return A("hashchange",a)&&(b.documentMode===c||b.documentMode>7)},s.history=function(){return!!a.history&&!!history.pushState},s.draganddrop=function(){var a=b.createElement("div");return"draggable"in a||"ondragstart"in a&&"ondrop"in a},s.websockets=function(){return"WebSocket"in a||"MozWebSocket"in a},s.rgba=function(){return D("background-color:rgba(150,255,150,.5)"),G(j.backgroundColor,"rgba")},s.hsla=function(){return D("background-color:hsla(120,40%,100%,.5)"),G(j.backgroundColor,"rgba")||G(j.backgroundColor,"hsla")},s.multiplebgs=function(){return D("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(j.background)},s.backgroundsize=function(){return J("backgroundSize")},s.borderimage=function(){return J("borderImage")},s.borderradius=function(){return J("borderRadius")},s.boxshadow=function(){return J("boxShadow")},s.textshadow=function(){return b.createElement("div").style.textShadow===""},s.opacity=function(){return E("opacity:.55"),/^0.55$/.test(j.opacity)},s.cssanimations=function(){return J("animationName")},s.csscolumns=function(){return J("columnCount")},s.cssgradients=function(){var a="background-image:",b="gradient(linear,left top,right bottom,from(#9f9),to(white));",c="linear-gradient(left top,#9f9, white);";return D((a+"-webkit- ".split(" ").join(b+a)+n.join(c+a)).slice(0,-a.length)),G(j.backgroundImage,"gradient")},s.cssreflections=function(){return J("boxReflect")},s.csstransforms=function(){return!!J("transform")},s.csstransforms3d=function(){var a=!!J("perspective");return a&&"webkitPerspective"in g.style&&y("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(b,c){a=b.offsetLeft===9&&b.offsetHeight===3}),a},s.csstransitions=function(){return J("transition")},s.fontface=function(){var a;return y('@font-face {font-family:"font";src:url("https://")}',function(c,d){var e=b.getElementById("smodernizr"),f=e.sheet||e.styleSheet,g=f?f.cssRules&&f.cssRules[0]?f.cssRules[0].cssText:f.cssText||"":"";a=/src/i.test(g)&&g.indexOf(d.split(" ")[0])===0}),a},s.generatedcontent=function(){var a;return y(["#",h,"{font:0/0 a}#",h,':after{content:"',l,'";visibility:hidden;font:3px/1 a}'].join(""),function(b){a=b.offsetHeight>=3}),a},s.video=function(){var a=b.createElement("video"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),c.h264=a.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),c.webm=a.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,"")}catch(d){}return c},s.audio=function(){var a=b.createElement("audio"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),c.mp3=a.canPlayType("audio/mpeg;").replace(/^no$/,""),c.wav=a.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),c.m4a=(a.canPlayType("audio/x-m4a;")||a.canPlayType("audio/aac;")).replace(/^no$/,"")}catch(d){}return c},s.localstorage=function(){try{return localStorage.setItem(h,h),localStorage.removeItem(h),!0}catch(a){return!1}},s.sessionstorage=function(){try{return sessionStorage.setItem(h,h),sessionStorage.removeItem(h),!0}catch(a){return!1}},s.webworkers=function(){return!!a.Worker},s.applicationcache=function(){return!!a.applicationCache},s.svg=function(){return!!b.createElementNS&&!!b.createElementNS(r.svg,"svg").createSVGRect},s.inlinesvg=function(){var a=b.createElement("div");return a.innerHTML="<svg/>",(a.firstChild&&a.firstChild.namespaceURI)==r.svg},s.smil=function(){return!!b.createElementNS&&/SVGAnimate/.test(m.call(b.createElementNS(r.svg,"animate")))},s.svgclippaths=function(){return!!b.createElementNS&&/SVGClipPath/.test(m.call(b.createElementNS(r.svg,"clipPath")))};for(var L in s)C(s,L)&&(x=L.toLowerCase(),e[x]=s[L](),v.push((e[x]?"":"no-")+x));return e.input||K(),e.addTest=function(a,b){if(typeof a=="object")for(var d in a)C(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof f!="undefined"&&f&&(g.className+=" "+(b?"":"no-")+a),e[a]=b}return e},D(""),i=k=null,function(a,b){function k(a,b){var c=a.createElement("p"),d=a.getElementsByTagName("head")[0]||a.documentElement;return c.innerHTML="x<style>"+b+"</style>",d.insertBefore(c.lastChild,d.firstChild)}function l(){var a=r.elements;return typeof a=="string"?a.split(" "):a}function m(a){var b=i[a[g]];return b||(b={},h++,a[g]=h,i[h]=b),b}function n(a,c,f){c||(c=b);if(j)return c.createElement(a);f||(f=m(c));var g;return f.cache[a]?g=f.cache[a].cloneNode():e.test(a)?g=(f.cache[a]=f.createElem(a)).cloneNode():g=f.createElem(a),g.canHaveChildren&&!d.test(a)?f.frag.appendChild(g):g}function o(a,c){a||(a=b);if(j)return a.createDocumentFragment();c=c||m(a);var d=c.frag.cloneNode(),e=0,f=l(),g=f.length;for(;e<g;e++)d.createElement(f[e]);return d}function p(a,b){b.cache||(b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag()),a.createElement=function(c){return r.shivMethods?n(c,a,b):b.createElem(c)},a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+l().join().replace(/\w+/g,function(a){return b.createElem(a),b.frag.createElement(a),'c("'+a+'")'})+");return n}")(r,b.frag)}function q(a){a||(a=b);var c=m(a);return r.shivCSS&&!f&&!c.hasCSS&&(c.hasCSS=!!k(a,"article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}mark{background:#FF0;color:#000}")),j||p(a,c),a}var c=a.html5||{},d=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,e=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,f,g="_html5shiv",h=0,i={},j;(function(){try{var a=b.createElement("a");a.innerHTML="<xyz></xyz>",f="hidden"in a,j=a.childNodes.length==1||function(){b.createElement("a");var a=b.createDocumentFragment();return typeof a.cloneNode=="undefined"||typeof a.createDocumentFragment=="undefined"||typeof a.createElement=="undefined"}()}catch(c){f=!0,j=!0}})();var r={elements:c.elements||"abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",shivCSS:c.shivCSS!==!1,supportsUnknownElements:j,shivMethods:c.shivMethods!==!1,type:"default",shivDocument:q,createElement:n,createDocumentFragment:o};a.html5=r,q(b)}(this,b),e._version=d,e._prefixes=n,e._domPrefixes=q,e._cssomPrefixes=p,e.mq=z,e.hasEvent=A,e.testProp=function(a){return H([a])},e.testAllProps=J,e.testStyles=y,e.prefixed=function(a,b,c){return b?J(a,b,c):J(a,"pfx")},g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(f?" js "+v.join(" "):""),e}(this,this.document),function(a,b,c){function d(a){return"[object Function]"==o.call(a)}function e(a){return"string"==typeof a}function f(){}function g(a){return!a||"loaded"==a||"complete"==a||"uninitialized"==a}function h(){var a=p.shift();q=1,a?a.t?m(function(){("c"==a.t?B.injectCss:B.injectJs)(a.s,0,a.a,a.x,a.e,1)},0):(a(),h()):q=0}function i(a,c,d,e,f,i,j){function k(b){if(!o&&g(l.readyState)&&(u.r=o=1,!q&&h(),l.onload=l.onreadystatechange=null,b)){"img"!=a&&m(function(){t.removeChild(l)},50);for(var d in y[c])y[c].hasOwnProperty(d)&&y[c][d].onload()}}var j=j||B.errorTimeout,l=b.createElement(a),o=0,r=0,u={t:d,s:c,e:f,a:i,x:j};1===y[c]&&(r=1,y[c]=[]),"object"==a?l.data=c:(l.src=c,l.type=a),l.width=l.height="0",l.onerror=l.onload=l.onreadystatechange=function(){k.call(this,r)},p.splice(e,0,u),"img"!=a&&(r||2===y[c]?(t.insertBefore(l,s?null:n),m(k,j)):y[c].push(l))}function j(a,b,c,d,f){return q=0,b=b||"j",e(a)?i("c"==b?v:u,a,b,this.i++,c,d,f):(p.splice(this.i++,0,a),1==p.length&&h()),this}function k(){var a=B;return a.loader={load:j,i:0},a}var l=b.documentElement,m=a.setTimeout,n=b.getElementsByTagName("script")[0],o={}.toString,p=[],q=0,r="MozAppearance"in l.style,s=r&&!!b.createRange().compareNode,t=s?l:n.parentNode,l=a.opera&&"[object Opera]"==o.call(a.opera),l=!!b.attachEvent&&!l,u=r?"object":l?"script":"img",v=l?"script":u,w=Array.isArray||function(a){return"[object Array]"==o.call(a)},x=[],y={},z={timeout:function(a,b){return b.length&&(a.timeout=b[0]),a}},A,B;B=function(a){function b(a){var a=a.split("!"),b=x.length,c=a.pop(),d=a.length,c={url:c,origUrl:c,prefixes:a},e,f,g;for(f=0;f<d;f++)g=a[f].split("="),(e=z[g.shift()])&&(c=e(c,g));for(f=0;f<b;f++)c=x[f](c);return c}function g(a,e,f,g,h){var i=b(a),j=i.autoCallback;i.url.split(".").pop().split("?").shift(),i.bypass||(e&&(e=d(e)?e:e[a]||e[g]||e[a.split("/").pop().split("?")[0]]),i.instead?i.instead(a,e,f,g,h):(y[i.url]?i.noexec=!0:y[i.url]=1,f.load(i.url,i.forceCSS||!i.forceJS&&"css"==i.url.split(".").pop().split("?").shift()?"c":c,i.noexec,i.attrs,i.timeout),(d(e)||d(j))&&f.load(function(){k(),e&&e(i.origUrl,h,g),j&&j(i.origUrl,h,g),y[i.url]=2})))}function h(a,b){function c(a,c){if(a){if(e(a))c||(j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}),g(a,j,b,0,h);else if(Object(a)===a)for(n in m=function(){var b=0,c;for(c in a)a.hasOwnProperty(c)&&b++;return b}(),a)a.hasOwnProperty(n)&&(!c&&!--m&&(d(j)?j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}:j[n]=function(a){return function(){var b=[].slice.call(arguments);a&&a.apply(this,b),l()}}(k[n])),g(a[n],j,b,n,h))}else!c&&l()}var h=!!a.test,i=a.load||a.both,j=a.callback||f,k=j,l=a.complete||f,m,n;c(h?a.yep:a.nope,!!i),i&&c(i)}var i,j,l=this.yepnope.loader;if(e(a))g(a,0,l,0);else if(w(a))for(i=0;i<a.length;i++)j=a[i],e(j)?g(j,0,l,0):w(j)?B(j):Object(j)===j&&h(j,l);else Object(a)===a&&h(a,l)},B.addPrefix=function(a,b){z[a]=b},B.addFilter=function(a){x.push(a)},B.errorTimeout=1e4,null==b.readyState&&b.addEventListener&&(b.readyState="loading",b.addEventListener("DOMContentLoaded",A=function(){b.removeEventListener("DOMContentLoaded",A,0),b.readyState="complete"},0)),a.yepnope=k(),a.yepnope.executeStack=h,a.yepnope.injectJs=function(a,c,d,e,i,j){var k=b.createElement("script"),l,o,e=e||B.errorTimeout;k.src=a;for(o in d)k.setAttribute(o,d[o]);c=j?h:c||f,k.onreadystatechange=k.onload=function(){!l&&g(k.readyState)&&(l=1,c(),k.onload=k.onreadystatechange=null)},m(function(){l||(l=1,c(1))},e),i?k.onload():n.parentNode.insertBefore(k,n)},a.yepnope.injectCss=function(a,c,d,e,g,i){var e=b.createElement("link"),j,c=i?h:c||f;e.href=a,e.rel="stylesheet",e.type="text/css";for(j in d)e.setAttribute(j,d[j]);g||(n.parentNode.insertBefore(e,n),m(c,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};

// Avoid `console` errors in browsers that lack a console.
(function() {
    var method;
    var noop = function () {};
    var methods = [
        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
        'timeStamp', 'trace', 'warn'
    ];
    var length = methods.length;
    var console = (window.console = window.console || {});

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
}());

// Place any jQuery/helper plugins in here.

/*! jQuery UI - v1.10.3 - 2013-10-13
* http://jqueryui.com
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.menu.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js, jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js
* Copyright 2013 jQuery Foundation and other contributors; Licensed MIT */

(function(e,t){function i(t,i){var s,a,o,r=t.nodeName.toLowerCase();return"area"===r?(s=t.parentNode,a=s.name,t.href&&a&&"map"===s.nodeName.toLowerCase()?(o=e("img[usemap=#"+a+"]")[0],!!o&&n(o)):!1):(/input|select|textarea|button|object/.test(r)?!t.disabled:"a"===r?t.href||i:i)&&n(t)}function n(t){return e.expr.filters.visible(t)&&!e(t).parents().addBack().filter(function(){return"hidden"===e.css(this,"visibility")}).length}var s=0,a=/^ui-id-\d+$/;e.ui=e.ui||{},e.extend(e.ui,{version:"1.10.3",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({focus:function(t){return function(i,n){return"number"==typeof i?this.each(function(){var t=this;setTimeout(function(){e(t).focus(),n&&n.call(t)},i)}):t.apply(this,arguments)}}(e.fn.focus),scrollParent:function(){var t;return t=e.ui.ie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?this.parents().filter(function(){return/(relative|absolute|fixed)/.test(e.css(this,"position"))&&/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0):this.parents().filter(function(){return/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0),/fixed/.test(this.css("position"))||!t.length?e(document):t},zIndex:function(i){if(i!==t)return this.css("zIndex",i);if(this.length)for(var n,s,a=e(this[0]);a.length&&a[0]!==document;){if(n=a.css("position"),("absolute"===n||"relative"===n||"fixed"===n)&&(s=parseInt(a.css("zIndex"),10),!isNaN(s)&&0!==s))return s;a=a.parent()}return 0},uniqueId:function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++s)})},removeUniqueId:function(){return this.each(function(){a.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(i){return!!e.data(i,t)}}):function(t,i,n){return!!e.data(t,n[3])},focusable:function(t){return i(t,!isNaN(e.attr(t,"tabindex")))},tabbable:function(t){var n=e.attr(t,"tabindex"),s=isNaN(n);return(s||n>=0)&&i(t,!s)}}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(i,n){function s(t,i,n,s){return e.each(a,function(){i-=parseFloat(e.css(t,"padding"+this))||0,n&&(i-=parseFloat(e.css(t,"border"+this+"Width"))||0),s&&(i-=parseFloat(e.css(t,"margin"+this))||0)}),i}var a="Width"===n?["Left","Right"]:["Top","Bottom"],o=n.toLowerCase(),r={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+n]=function(i){return i===t?r["inner"+n].call(this):this.each(function(){e(this).css(o,s(this,i)+"px")})},e.fn["outer"+n]=function(t,i){return"number"!=typeof t?r["outer"+n].call(this,t):this.each(function(){e(this).css(o,s(this,t,!0,i)+"px")})}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(i){return arguments.length?t.call(this,e.camelCase(i)):t.call(this)}}(e.fn.removeData)),e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),e.support.selectstart="onselectstart"in document.createElement("div"),e.fn.extend({disableSelection:function(){return this.bind((e.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(e){e.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),e.extend(e.ui,{plugin:{add:function(t,i,n){var s,a=e.ui[t].prototype;for(s in n)a.plugins[s]=a.plugins[s]||[],a.plugins[s].push([i,n[s]])},call:function(e,t,i){var n,s=e.plugins[t];if(s&&e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType)for(n=0;s.length>n;n++)e.options[s[n][0]]&&s[n][1].apply(e.element,i)}},hasScroll:function(t,i){if("hidden"===e(t).css("overflow"))return!1;var n=i&&"left"===i?"scrollLeft":"scrollTop",s=!1;return t[n]>0?!0:(t[n]=1,s=t[n]>0,t[n]=0,s)}})})(jQuery);(function(t,e){var i=0,s=Array.prototype.slice,n=t.cleanData;t.cleanData=function(e){for(var i,s=0;null!=(i=e[s]);s++)try{t(i).triggerHandler("remove")}catch(o){}n(e)},t.widget=function(i,s,n){var o,a,r,h,l={},c=i.split(".")[0];i=i.split(".")[1],o=c+"-"+i,n||(n=s,s=t.Widget),t.expr[":"][o.toLowerCase()]=function(e){return!!t.data(e,o)},t[c]=t[c]||{},a=t[c][i],r=t[c][i]=function(t,i){return this._createWidget?(arguments.length&&this._createWidget(t,i),e):new r(t,i)},t.extend(r,a,{version:n.version,_proto:t.extend({},n),_childConstructors:[]}),h=new s,h.options=t.widget.extend({},h.options),t.each(n,function(i,n){return t.isFunction(n)?(l[i]=function(){var t=function(){return s.prototype[i].apply(this,arguments)},e=function(t){return s.prototype[i].apply(this,t)};return function(){var i,s=this._super,o=this._superApply;return this._super=t,this._superApply=e,i=n.apply(this,arguments),this._super=s,this._superApply=o,i}}(),e):(l[i]=n,e)}),r.prototype=t.widget.extend(h,{widgetEventPrefix:a?h.widgetEventPrefix:i},l,{constructor:r,namespace:c,widgetName:i,widgetFullName:o}),a?(t.each(a._childConstructors,function(e,i){var s=i.prototype;t.widget(s.namespace+"."+s.widgetName,r,i._proto)}),delete a._childConstructors):s._childConstructors.push(r),t.widget.bridge(i,r)},t.widget.extend=function(i){for(var n,o,a=s.call(arguments,1),r=0,h=a.length;h>r;r++)for(n in a[r])o=a[r][n],a[r].hasOwnProperty(n)&&o!==e&&(i[n]=t.isPlainObject(o)?t.isPlainObject(i[n])?t.widget.extend({},i[n],o):t.widget.extend({},o):o);return i},t.widget.bridge=function(i,n){var o=n.prototype.widgetFullName||i;t.fn[i]=function(a){var r="string"==typeof a,h=s.call(arguments,1),l=this;return a=!r&&h.length?t.widget.extend.apply(null,[a].concat(h)):a,r?this.each(function(){var s,n=t.data(this,o);return n?t.isFunction(n[a])&&"_"!==a.charAt(0)?(s=n[a].apply(n,h),s!==n&&s!==e?(l=s&&s.jquery?l.pushStack(s.get()):s,!1):e):t.error("no such method '"+a+"' for "+i+" widget instance"):t.error("cannot call methods on "+i+" prior to initialization; "+"attempted to call method '"+a+"'")}):this.each(function(){var e=t.data(this,o);e?e.option(a||{})._init():t.data(this,o,new n(a,this))}),l}},t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(e,s){s=t(s||this.defaultElement||this)[0],this.element=t(s),this.uuid=i++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=t.widget.extend({},this.options,this._getCreateOptions(),e),this.bindings=t(),this.hoverable=t(),this.focusable=t(),s!==this&&(t.data(s,this.widgetFullName,this),this._on(!0,this.element,{remove:function(t){t.target===s&&this.destroy()}}),this.document=t(s.style?s.ownerDocument:s.document||s),this.window=t(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:t.noop,_getCreateEventData:t.noop,_create:t.noop,_init:t.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(t.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:t.noop,widget:function(){return this.element},option:function(i,s){var n,o,a,r=i;if(0===arguments.length)return t.widget.extend({},this.options);if("string"==typeof i)if(r={},n=i.split("."),i=n.shift(),n.length){for(o=r[i]=t.widget.extend({},this.options[i]),a=0;n.length-1>a;a++)o[n[a]]=o[n[a]]||{},o=o[n[a]];if(i=n.pop(),s===e)return o[i]===e?null:o[i];o[i]=s}else{if(s===e)return this.options[i]===e?null:this.options[i];r[i]=s}return this._setOptions(r),this},_setOptions:function(t){var e;for(e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return this.options[t]=e,"disabled"===t&&(this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!e).attr("aria-disabled",e),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_on:function(i,s,n){var o,a=this;"boolean"!=typeof i&&(n=s,s=i,i=!1),n?(s=o=t(s),this.bindings=this.bindings.add(s)):(n=s,s=this.element,o=this.widget()),t.each(n,function(n,r){function h(){return i||a.options.disabled!==!0&&!t(this).hasClass("ui-state-disabled")?("string"==typeof r?a[r]:r).apply(a,arguments):e}"string"!=typeof r&&(h.guid=r.guid=r.guid||h.guid||t.guid++);var l=n.match(/^(\w+)\s*(.*)$/),c=l[1]+a.eventNamespace,u=l[2];u?o.delegate(u,c,h):s.bind(c,h)})},_off:function(t,e){e=(e||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,t.unbind(e).undelegate(e)},_delay:function(t,e){function i(){return("string"==typeof t?s[t]:t).apply(s,arguments)}var s=this;return setTimeout(i,e||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){t(e.currentTarget).addClass("ui-state-hover")},mouseleave:function(e){t(e.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){t(e.currentTarget).addClass("ui-state-focus")},focusout:function(e){t(e.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(e,i,s){var n,o,a=this.options[e];if(s=s||{},i=t.Event(i),i.type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),i.target=this.element[0],o=i.originalEvent)for(n in o)n in i||(i[n]=o[n]);return this.element.trigger(i,s),!(t.isFunction(a)&&a.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},t.each({show:"fadeIn",hide:"fadeOut"},function(e,i){t.Widget.prototype["_"+e]=function(s,n,o){"string"==typeof n&&(n={effect:n});var a,r=n?n===!0||"number"==typeof n?i:n.effect||i:e;n=n||{},"number"==typeof n&&(n={duration:n}),a=!t.isEmptyObject(n),n.complete=o,n.delay&&s.delay(n.delay),a&&t.effects&&t.effects.effect[r]?s[e](n):r!==e&&s[r]?s[r](n.duration,n.easing,o):s.queue(function(i){t(this)[e](),o&&o.call(s[0]),i()})}})})(jQuery);(function(t){var e=!1;t(document).mouseup(function(){e=!1}),t.widget("ui.mouse",{version:"1.10.3",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var e=this;this.element.bind("mousedown."+this.widgetName,function(t){return e._mouseDown(t)}).bind("click."+this.widgetName,function(i){return!0===t.data(i.target,e.widgetName+".preventClickEvent")?(t.removeData(i.target,e.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):undefined}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&t(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(i){if(!e){this._mouseStarted&&this._mouseUp(i),this._mouseDownEvent=i;var s=this,n=1===i.which,a="string"==typeof this.options.cancel&&i.target.nodeName?t(i.target).closest(this.options.cancel).length:!1;return n&&!a&&this._mouseCapture(i)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){s.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(i)&&this._mouseDelayMet(i)&&(this._mouseStarted=this._mouseStart(i)!==!1,!this._mouseStarted)?(i.preventDefault(),!0):(!0===t.data(i.target,this.widgetName+".preventClickEvent")&&t.removeData(i.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(t){return s._mouseMove(t)},this._mouseUpDelegate=function(t){return s._mouseUp(t)},t(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),i.preventDefault(),e=!0,!0)):!0}},_mouseMove:function(e){return t.ui.ie&&(!document.documentMode||9>document.documentMode)&&!e.button?this._mouseUp(e):this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,e)!==!1,this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){return t(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&t.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),!1},_mouseDistanceMet:function(t){return Math.max(Math.abs(this._mouseDownEvent.pageX-t.pageX),Math.abs(this._mouseDownEvent.pageY-t.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}})})(jQuery);(function(t,e){function i(t,e,i){return[parseFloat(t[0])*(p.test(t[0])?e/100:1),parseFloat(t[1])*(p.test(t[1])?i/100:1)]}function s(e,i){return parseInt(t.css(e,i),10)||0}function n(e){var i=e[0];return 9===i.nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:t.isWindow(i)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:i.preventDefault?{width:0,height:0,offset:{top:i.pageY,left:i.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()}}t.ui=t.ui||{};var a,o=Math.max,r=Math.abs,l=Math.round,h=/left|center|right/,c=/top|center|bottom/,u=/[\+\-]\d+(\.[\d]+)?%?/,d=/^\w+/,p=/%$/,f=t.fn.position;t.position={scrollbarWidth:function(){if(a!==e)return a;var i,s,n=t("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),o=n.children()[0];return t("body").append(n),i=o.offsetWidth,n.css("overflow","scroll"),s=o.offsetWidth,i===s&&(s=n[0].clientWidth),n.remove(),a=i-s},getScrollInfo:function(e){var i=e.isWindow?"":e.element.css("overflow-x"),s=e.isWindow?"":e.element.css("overflow-y"),n="scroll"===i||"auto"===i&&e.width<e.element[0].scrollWidth,a="scroll"===s||"auto"===s&&e.height<e.element[0].scrollHeight;return{width:a?t.position.scrollbarWidth():0,height:n?t.position.scrollbarWidth():0}},getWithinInfo:function(e){var i=t(e||window),s=t.isWindow(i[0]);return{element:i,isWindow:s,offset:i.offset()||{left:0,top:0},scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:s?i.width():i.outerWidth(),height:s?i.height():i.outerHeight()}}},t.fn.position=function(e){if(!e||!e.of)return f.apply(this,arguments);e=t.extend({},e);var a,p,g,m,v,_,b=t(e.of),y=t.position.getWithinInfo(e.within),k=t.position.getScrollInfo(y),w=(e.collision||"flip").split(" "),D={};return _=n(b),b[0].preventDefault&&(e.at="left top"),p=_.width,g=_.height,m=_.offset,v=t.extend({},m),t.each(["my","at"],function(){var t,i,s=(e[this]||"").split(" ");1===s.length&&(s=h.test(s[0])?s.concat(["center"]):c.test(s[0])?["center"].concat(s):["center","center"]),s[0]=h.test(s[0])?s[0]:"center",s[1]=c.test(s[1])?s[1]:"center",t=u.exec(s[0]),i=u.exec(s[1]),D[this]=[t?t[0]:0,i?i[0]:0],e[this]=[d.exec(s[0])[0],d.exec(s[1])[0]]}),1===w.length&&(w[1]=w[0]),"right"===e.at[0]?v.left+=p:"center"===e.at[0]&&(v.left+=p/2),"bottom"===e.at[1]?v.top+=g:"center"===e.at[1]&&(v.top+=g/2),a=i(D.at,p,g),v.left+=a[0],v.top+=a[1],this.each(function(){var n,h,c=t(this),u=c.outerWidth(),d=c.outerHeight(),f=s(this,"marginLeft"),_=s(this,"marginTop"),x=u+f+s(this,"marginRight")+k.width,C=d+_+s(this,"marginBottom")+k.height,M=t.extend({},v),T=i(D.my,c.outerWidth(),c.outerHeight());"right"===e.my[0]?M.left-=u:"center"===e.my[0]&&(M.left-=u/2),"bottom"===e.my[1]?M.top-=d:"center"===e.my[1]&&(M.top-=d/2),M.left+=T[0],M.top+=T[1],t.support.offsetFractions||(M.left=l(M.left),M.top=l(M.top)),n={marginLeft:f,marginTop:_},t.each(["left","top"],function(i,s){t.ui.position[w[i]]&&t.ui.position[w[i]][s](M,{targetWidth:p,targetHeight:g,elemWidth:u,elemHeight:d,collisionPosition:n,collisionWidth:x,collisionHeight:C,offset:[a[0]+T[0],a[1]+T[1]],my:e.my,at:e.at,within:y,elem:c})}),e.using&&(h=function(t){var i=m.left-M.left,s=i+p-u,n=m.top-M.top,a=n+g-d,l={target:{element:b,left:m.left,top:m.top,width:p,height:g},element:{element:c,left:M.left,top:M.top,width:u,height:d},horizontal:0>s?"left":i>0?"right":"center",vertical:0>a?"top":n>0?"bottom":"middle"};u>p&&p>r(i+s)&&(l.horizontal="center"),d>g&&g>r(n+a)&&(l.vertical="middle"),l.important=o(r(i),r(s))>o(r(n),r(a))?"horizontal":"vertical",e.using.call(this,t,l)}),c.offset(t.extend(M,{using:h}))})},t.ui.position={fit:{left:function(t,e){var i,s=e.within,n=s.isWindow?s.scrollLeft:s.offset.left,a=s.width,r=t.left-e.collisionPosition.marginLeft,l=n-r,h=r+e.collisionWidth-a-n;e.collisionWidth>a?l>0&&0>=h?(i=t.left+l+e.collisionWidth-a-n,t.left+=l-i):t.left=h>0&&0>=l?n:l>h?n+a-e.collisionWidth:n:l>0?t.left+=l:h>0?t.left-=h:t.left=o(t.left-r,t.left)},top:function(t,e){var i,s=e.within,n=s.isWindow?s.scrollTop:s.offset.top,a=e.within.height,r=t.top-e.collisionPosition.marginTop,l=n-r,h=r+e.collisionHeight-a-n;e.collisionHeight>a?l>0&&0>=h?(i=t.top+l+e.collisionHeight-a-n,t.top+=l-i):t.top=h>0&&0>=l?n:l>h?n+a-e.collisionHeight:n:l>0?t.top+=l:h>0?t.top-=h:t.top=o(t.top-r,t.top)}},flip:{left:function(t,e){var i,s,n=e.within,a=n.offset.left+n.scrollLeft,o=n.width,l=n.isWindow?n.scrollLeft:n.offset.left,h=t.left-e.collisionPosition.marginLeft,c=h-l,u=h+e.collisionWidth-o-l,d="left"===e.my[0]?-e.elemWidth:"right"===e.my[0]?e.elemWidth:0,p="left"===e.at[0]?e.targetWidth:"right"===e.at[0]?-e.targetWidth:0,f=-2*e.offset[0];0>c?(i=t.left+d+p+f+e.collisionWidth-o-a,(0>i||r(c)>i)&&(t.left+=d+p+f)):u>0&&(s=t.left-e.collisionPosition.marginLeft+d+p+f-l,(s>0||u>r(s))&&(t.left+=d+p+f))},top:function(t,e){var i,s,n=e.within,a=n.offset.top+n.scrollTop,o=n.height,l=n.isWindow?n.scrollTop:n.offset.top,h=t.top-e.collisionPosition.marginTop,c=h-l,u=h+e.collisionHeight-o-l,d="top"===e.my[1],p=d?-e.elemHeight:"bottom"===e.my[1]?e.elemHeight:0,f="top"===e.at[1]?e.targetHeight:"bottom"===e.at[1]?-e.targetHeight:0,g=-2*e.offset[1];0>c?(s=t.top+p+f+g+e.collisionHeight-o-a,t.top+p+f+g>c&&(0>s||r(c)>s)&&(t.top+=p+f+g)):u>0&&(i=t.top-e.collisionPosition.marginTop+p+f+g-l,t.top+p+f+g>u&&(i>0||u>r(i))&&(t.top+=p+f+g))}},flipfit:{left:function(){t.ui.position.flip.left.apply(this,arguments),t.ui.position.fit.left.apply(this,arguments)},top:function(){t.ui.position.flip.top.apply(this,arguments),t.ui.position.fit.top.apply(this,arguments)}}},function(){var e,i,s,n,a,o=document.getElementsByTagName("body")[0],r=document.createElement("div");e=document.createElement(o?"div":"body"),s={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},o&&t.extend(s,{position:"absolute",left:"-1000px",top:"-1000px"});for(a in s)e.style[a]=s[a];e.appendChild(r),i=o||document.documentElement,i.insertBefore(e,i.firstChild),r.style.cssText="position: absolute; left: 10.7432222px;",n=t(r).offset().left,t.support.offsetFractions=n>10&&11>n,e.innerHTML="",i.removeChild(e)}()})(jQuery);(function(t){t.widget("ui.draggable",t.ui.mouse,{version:"1.10.3",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"!==this.options.helper||/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative"),this.options.addClasses&&this.element.addClass("ui-draggable"),this.options.disabled&&this.element.addClass("ui-draggable-disabled"),this._mouseInit()},_destroy:function(){this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"),this._mouseDestroy()},_mouseCapture:function(e){var i=this.options;return this.helper||i.disabled||t(e.target).closest(".ui-resizable-handle").length>0?!1:(this.handle=this._getHandle(e),this.handle?(t(i.iframeFix===!0?"iframe":i.iframeFix).each(function(){t("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>").css({width:this.offsetWidth+"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1e3}).css(t(this).offset()).appendTo("body")}),!0):!1)},_mouseStart:function(e){var i=this.options;return this.helper=this._createHelper(e),this.helper.addClass("ui-draggable-dragging"),this._cacheHelperProportions(),t.ui.ddmanager&&(t.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(),this.offsetParent=this.helper.offsetParent(),this.offsetParentCssPosition=this.offsetParent.css("position"),this.offset=this.positionAbs=this.element.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},this.offset.scroll=!1,t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.originalPosition=this.position=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),this._trigger("start",e)===!1?(this._clear(),!1):(this._cacheHelperProportions(),t.ui.ddmanager&&!i.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),t.ui.ddmanager&&t.ui.ddmanager.dragStart(this,e),!0)},_mouseDrag:function(e,i){if("fixed"===this.offsetParentCssPosition&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),!i){var s=this._uiHash();if(this._trigger("drag",e,s)===!1)return this._mouseUp({}),!1;this.position=s.position}return this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var i=this,s=!1;return t.ui.ddmanager&&!this.options.dropBehaviour&&(s=t.ui.ddmanager.drop(this,e)),this.dropped&&(s=this.dropped,this.dropped=!1),"original"!==this.options.helper||t.contains(this.element[0].ownerDocument,this.element[0])?("invalid"===this.options.revert&&!s||"valid"===this.options.revert&&s||this.options.revert===!0||t.isFunction(this.options.revert)&&this.options.revert.call(this.element,s)?t(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){i._trigger("stop",e)!==!1&&i._clear()}):this._trigger("stop",e)!==!1&&this._clear(),!1):!1},_mouseUp:function(e){return t("div.ui-draggable-iframeFix").each(function(){this.parentNode.removeChild(this)}),t.ui.ddmanager&&t.ui.ddmanager.dragStop(this,e),t.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear(),this},_getHandle:function(e){return this.options.handle?!!t(e.target).closest(this.element.find(this.options.handle)).length:!0},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return s.parents("body").length||s.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),s[0]===this.element[0]||/(fixed|absolute)/.test(s.css("position"))||s.css("position","absolute"),s},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.element.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options;return n.containment?"window"===n.containment?(this.containment=[t(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,t(window).scrollLeft()+t(window).width()-this.helperProportions.width-this.margins.left,t(window).scrollTop()+(t(window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],undefined):"document"===n.containment?(this.containment=[0,0,t(document).width()-this.helperProportions.width-this.margins.left,(t(document).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],undefined):n.containment.constructor===Array?(this.containment=n.containment,undefined):("parent"===n.containment&&(n.containment=this.helper[0].parentNode),i=t(n.containment),s=i[0],s&&(e="hidden"!==i.css("overflow"),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(e?Math.max(s.scrollWidth,s.offsetWidth):s.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(s.scrollHeight,s.offsetHeight):s.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relative_container=i),undefined):(this.containment=null,undefined)},_convertPositionTo:function(e,i){i||(i=this.position);var s="absolute"===e?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent;return this.offset.scroll||(this.offset.scroll={top:n.scrollTop(),left:n.scrollLeft()}),{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():this.offset.scroll.top)*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():this.offset.scroll.left)*s}},_generatePosition:function(e){var i,s,n,a,o=this.options,r="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=e.pageX,h=e.pageY;return this.offset.scroll||(this.offset.scroll={top:r.scrollTop(),left:r.scrollLeft()}),this.originalPosition&&(this.containment&&(this.relative_container?(s=this.relative_container.offset(),i=[this.containment[0]+s.left,this.containment[1]+s.top,this.containment[2]+s.left,this.containment[3]+s.top]):i=this.containment,e.pageX-this.offset.click.left<i[0]&&(l=i[0]+this.offset.click.left),e.pageY-this.offset.click.top<i[1]&&(h=i[1]+this.offset.click.top),e.pageX-this.offset.click.left>i[2]&&(l=i[2]+this.offset.click.left),e.pageY-this.offset.click.top>i[3]&&(h=i[3]+this.offset.click.top)),o.grid&&(n=o.grid[1]?this.originalPageY+Math.round((h-this.originalPageY)/o.grid[1])*o.grid[1]:this.originalPageY,h=i?n-this.offset.click.top>=i[1]||n-this.offset.click.top>i[3]?n:n-this.offset.click.top>=i[1]?n-o.grid[1]:n+o.grid[1]:n,a=o.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/o.grid[0])*o.grid[0]:this.originalPageX,l=i?a-this.offset.click.left>=i[0]||a-this.offset.click.left>i[2]?a:a-this.offset.click.left>=i[0]?a-o.grid[0]:a+o.grid[0]:a)),{top:h-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():this.offset.scroll.left)}},_clear:function(){this.helper.removeClass("ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1},_trigger:function(e,i,s){return s=s||this._uiHash(),t.ui.plugin.call(this,e,[i,s]),"drag"===e&&(this.positionAbs=this._convertPositionTo("absolute")),t.Widget.prototype._trigger.call(this,e,i,s)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),t.ui.plugin.add("draggable","connectToSortable",{start:function(e,i){var s=t(this).data("ui-draggable"),n=s.options,a=t.extend({},i,{item:s.element});s.sortables=[],t(n.connectToSortable).each(function(){var i=t.data(this,"ui-sortable");i&&!i.options.disabled&&(s.sortables.push({instance:i,shouldRevert:i.options.revert}),i.refreshPositions(),i._trigger("activate",e,a))})},stop:function(e,i){var s=t(this).data("ui-draggable"),n=t.extend({},i,{item:s.element});t.each(s.sortables,function(){this.instance.isOver?(this.instance.isOver=0,s.cancelHelperRemoval=!0,this.instance.cancelHelperRemoval=!1,this.shouldRevert&&(this.instance.options.revert=this.shouldRevert),this.instance._mouseStop(e),this.instance.options.helper=this.instance.options._helper,"original"===s.options.helper&&this.instance.currentItem.css({top:"auto",left:"auto"})):(this.instance.cancelHelperRemoval=!1,this.instance._trigger("deactivate",e,n))})},drag:function(e,i){var s=t(this).data("ui-draggable"),n=this;t.each(s.sortables,function(){var a=!1,o=this;this.instance.positionAbs=s.positionAbs,this.instance.helperProportions=s.helperProportions,this.instance.offset.click=s.offset.click,this.instance._intersectsWith(this.instance.containerCache)&&(a=!0,t.each(s.sortables,function(){return this.instance.positionAbs=s.positionAbs,this.instance.helperProportions=s.helperProportions,this.instance.offset.click=s.offset.click,this!==o&&this.instance._intersectsWith(this.instance.containerCache)&&t.contains(o.instance.element[0],this.instance.element[0])&&(a=!1),a})),a?(this.instance.isOver||(this.instance.isOver=1,this.instance.currentItem=t(n).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item",!0),this.instance.options._helper=this.instance.options.helper,this.instance.options.helper=function(){return i.helper[0]},e.target=this.instance.currentItem[0],this.instance._mouseCapture(e,!0),this.instance._mouseStart(e,!0,!0),this.instance.offset.click.top=s.offset.click.top,this.instance.offset.click.left=s.offset.click.left,this.instance.offset.parent.left-=s.offset.parent.left-this.instance.offset.parent.left,this.instance.offset.parent.top-=s.offset.parent.top-this.instance.offset.parent.top,s._trigger("toSortable",e),s.dropped=this.instance.element,s.currentItem=s.element,this.instance.fromOutside=s),this.instance.currentItem&&this.instance._mouseDrag(e)):this.instance.isOver&&(this.instance.isOver=0,this.instance.cancelHelperRemoval=!0,this.instance.options.revert=!1,this.instance._trigger("out",e,this.instance._uiHash(this.instance)),this.instance._mouseStop(e,!0),this.instance.options.helper=this.instance.options._helper,this.instance.currentItem.remove(),this.instance.placeholder&&this.instance.placeholder.remove(),s._trigger("fromSortable",e),s.dropped=!1)})}}),t.ui.plugin.add("draggable","cursor",{start:function(){var e=t("body"),i=t(this).data("ui-draggable").options;e.css("cursor")&&(i._cursor=e.css("cursor")),e.css("cursor",i.cursor)},stop:function(){var e=t(this).data("ui-draggable").options;e._cursor&&t("body").css("cursor",e._cursor)}}),t.ui.plugin.add("draggable","opacity",{start:function(e,i){var s=t(i.helper),n=t(this).data("ui-draggable").options;s.css("opacity")&&(n._opacity=s.css("opacity")),s.css("opacity",n.opacity)},stop:function(e,i){var s=t(this).data("ui-draggable").options;s._opacity&&t(i.helper).css("opacity",s._opacity)}}),t.ui.plugin.add("draggable","scroll",{start:function(){var e=t(this).data("ui-draggable");e.scrollParent[0]!==document&&"HTML"!==e.scrollParent[0].tagName&&(e.overflowOffset=e.scrollParent.offset())},drag:function(e){var i=t(this).data("ui-draggable"),s=i.options,n=!1;i.scrollParent[0]!==document&&"HTML"!==i.scrollParent[0].tagName?(s.axis&&"x"===s.axis||(i.overflowOffset.top+i.scrollParent[0].offsetHeight-e.pageY<s.scrollSensitivity?i.scrollParent[0].scrollTop=n=i.scrollParent[0].scrollTop+s.scrollSpeed:e.pageY-i.overflowOffset.top<s.scrollSensitivity&&(i.scrollParent[0].scrollTop=n=i.scrollParent[0].scrollTop-s.scrollSpeed)),s.axis&&"y"===s.axis||(i.overflowOffset.left+i.scrollParent[0].offsetWidth-e.pageX<s.scrollSensitivity?i.scrollParent[0].scrollLeft=n=i.scrollParent[0].scrollLeft+s.scrollSpeed:e.pageX-i.overflowOffset.left<s.scrollSensitivity&&(i.scrollParent[0].scrollLeft=n=i.scrollParent[0].scrollLeft-s.scrollSpeed))):(s.axis&&"x"===s.axis||(e.pageY-t(document).scrollTop()<s.scrollSensitivity?n=t(document).scrollTop(t(document).scrollTop()-s.scrollSpeed):t(window).height()-(e.pageY-t(document).scrollTop())<s.scrollSensitivity&&(n=t(document).scrollTop(t(document).scrollTop()+s.scrollSpeed))),s.axis&&"y"===s.axis||(e.pageX-t(document).scrollLeft()<s.scrollSensitivity?n=t(document).scrollLeft(t(document).scrollLeft()-s.scrollSpeed):t(window).width()-(e.pageX-t(document).scrollLeft())<s.scrollSensitivity&&(n=t(document).scrollLeft(t(document).scrollLeft()+s.scrollSpeed)))),n!==!1&&t.ui.ddmanager&&!s.dropBehaviour&&t.ui.ddmanager.prepareOffsets(i,e)}}),t.ui.plugin.add("draggable","snap",{start:function(){var e=t(this).data("ui-draggable"),i=e.options;e.snapElements=[],t(i.snap.constructor!==String?i.snap.items||":data(ui-draggable)":i.snap).each(function(){var i=t(this),s=i.offset();this!==e.element[0]&&e.snapElements.push({item:this,width:i.outerWidth(),height:i.outerHeight(),top:s.top,left:s.left})})},drag:function(e,i){var s,n,a,o,r,l,h,c,u,d,p=t(this).data("ui-draggable"),g=p.options,f=g.snapTolerance,m=i.offset.left,_=m+p.helperProportions.width,v=i.offset.top,b=v+p.helperProportions.height;for(u=p.snapElements.length-1;u>=0;u--)r=p.snapElements[u].left,l=r+p.snapElements[u].width,h=p.snapElements[u].top,c=h+p.snapElements[u].height,r-f>_||m>l+f||h-f>b||v>c+f||!t.contains(p.snapElements[u].item.ownerDocument,p.snapElements[u].item)?(p.snapElements[u].snapping&&p.options.snap.release&&p.options.snap.release.call(p.element,e,t.extend(p._uiHash(),{snapItem:p.snapElements[u].item})),p.snapElements[u].snapping=!1):("inner"!==g.snapMode&&(s=f>=Math.abs(h-b),n=f>=Math.abs(c-v),a=f>=Math.abs(r-_),o=f>=Math.abs(l-m),s&&(i.position.top=p._convertPositionTo("relative",{top:h-p.helperProportions.height,left:0}).top-p.margins.top),n&&(i.position.top=p._convertPositionTo("relative",{top:c,left:0}).top-p.margins.top),a&&(i.position.left=p._convertPositionTo("relative",{top:0,left:r-p.helperProportions.width}).left-p.margins.left),o&&(i.position.left=p._convertPositionTo("relative",{top:0,left:l}).left-p.margins.left)),d=s||n||a||o,"outer"!==g.snapMode&&(s=f>=Math.abs(h-v),n=f>=Math.abs(c-b),a=f>=Math.abs(r-m),o=f>=Math.abs(l-_),s&&(i.position.top=p._convertPositionTo("relative",{top:h,left:0}).top-p.margins.top),n&&(i.position.top=p._convertPositionTo("relative",{top:c-p.helperProportions.height,left:0}).top-p.margins.top),a&&(i.position.left=p._convertPositionTo("relative",{top:0,left:r}).left-p.margins.left),o&&(i.position.left=p._convertPositionTo("relative",{top:0,left:l-p.helperProportions.width}).left-p.margins.left)),!p.snapElements[u].snapping&&(s||n||a||o||d)&&p.options.snap.snap&&p.options.snap.snap.call(p.element,e,t.extend(p._uiHash(),{snapItem:p.snapElements[u].item})),p.snapElements[u].snapping=s||n||a||o||d)}}),t.ui.plugin.add("draggable","stack",{start:function(){var e,i=this.data("ui-draggable").options,s=t.makeArray(t(i.stack)).sort(function(e,i){return(parseInt(t(e).css("zIndex"),10)||0)-(parseInt(t(i).css("zIndex"),10)||0)});s.length&&(e=parseInt(t(s[0]).css("zIndex"),10)||0,t(s).each(function(i){t(this).css("zIndex",e+i)}),this.css("zIndex",e+s.length))}}),t.ui.plugin.add("draggable","zIndex",{start:function(e,i){var s=t(i.helper),n=t(this).data("ui-draggable").options;s.css("zIndex")&&(n._zIndex=s.css("zIndex")),s.css("zIndex",n.zIndex)},stop:function(e,i){var s=t(this).data("ui-draggable").options;s._zIndex&&t(i.helper).css("zIndex",s._zIndex)}})})(jQuery);(function(t){function e(t,e,i){return t>e&&e+i>t}t.widget("ui.droppable",{version:"1.10.3",widgetEventPrefix:"drop",options:{accept:"*",activeClass:!1,addClasses:!0,greedy:!1,hoverClass:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var e=this.options,i=e.accept;this.isover=!1,this.isout=!0,this.accept=t.isFunction(i)?i:function(t){return t.is(i)},this.proportions={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight},t.ui.ddmanager.droppables[e.scope]=t.ui.ddmanager.droppables[e.scope]||[],t.ui.ddmanager.droppables[e.scope].push(this),e.addClasses&&this.element.addClass("ui-droppable")},_destroy:function(){for(var e=0,i=t.ui.ddmanager.droppables[this.options.scope];i.length>e;e++)i[e]===this&&i.splice(e,1);this.element.removeClass("ui-droppable ui-droppable-disabled")},_setOption:function(e,i){"accept"===e&&(this.accept=t.isFunction(i)?i:function(t){return t.is(i)}),t.Widget.prototype._setOption.apply(this,arguments)},_activate:function(e){var i=t.ui.ddmanager.current;this.options.activeClass&&this.element.addClass(this.options.activeClass),i&&this._trigger("activate",e,this.ui(i))},_deactivate:function(e){var i=t.ui.ddmanager.current;this.options.activeClass&&this.element.removeClass(this.options.activeClass),i&&this._trigger("deactivate",e,this.ui(i))},_over:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.addClass(this.options.hoverClass),this._trigger("over",e,this.ui(i)))},_out:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("out",e,this.ui(i)))},_drop:function(e,i){var s=i||t.ui.ddmanager.current,n=!1;return s&&(s.currentItem||s.element)[0]!==this.element[0]?(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var e=t.data(this,"ui-droppable");return e.options.greedy&&!e.options.disabled&&e.options.scope===s.options.scope&&e.accept.call(e.element[0],s.currentItem||s.element)&&t.ui.intersect(s,t.extend(e,{offset:e.element.offset()}),e.options.tolerance)?(n=!0,!1):undefined}),n?!1:this.accept.call(this.element[0],s.currentItem||s.element)?(this.options.activeClass&&this.element.removeClass(this.options.activeClass),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("drop",e,this.ui(s)),this.element):!1):!1},ui:function(t){return{draggable:t.currentItem||t.element,helper:t.helper,position:t.position,offset:t.positionAbs}}}),t.ui.intersect=function(t,i,s){if(!i.offset)return!1;var n,a,o=(t.positionAbs||t.position.absolute).left,r=o+t.helperProportions.width,l=(t.positionAbs||t.position.absolute).top,h=l+t.helperProportions.height,c=i.offset.left,u=c+i.proportions.width,d=i.offset.top,p=d+i.proportions.height;switch(s){case"fit":return o>=c&&u>=r&&l>=d&&p>=h;case"intersect":return o+t.helperProportions.width/2>c&&u>r-t.helperProportions.width/2&&l+t.helperProportions.height/2>d&&p>h-t.helperProportions.height/2;case"pointer":return n=(t.positionAbs||t.position.absolute).left+(t.clickOffset||t.offset.click).left,a=(t.positionAbs||t.position.absolute).top+(t.clickOffset||t.offset.click).top,e(a,d,i.proportions.height)&&e(n,c,i.proportions.width);case"touch":return(l>=d&&p>=l||h>=d&&p>=h||d>l&&h>p)&&(o>=c&&u>=o||r>=c&&u>=r||c>o&&r>u);default:return!1}},t.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(e,i){var s,n,a=t.ui.ddmanager.droppables[e.options.scope]||[],o=i?i.type:null,r=(e.currentItem||e.element).find(":data(ui-droppable)").addBack();t:for(s=0;a.length>s;s++)if(!(a[s].options.disabled||e&&!a[s].accept.call(a[s].element[0],e.currentItem||e.element))){for(n=0;r.length>n;n++)if(r[n]===a[s].element[0]){a[s].proportions.height=0;continue t}a[s].visible="none"!==a[s].element.css("display"),a[s].visible&&("mousedown"===o&&a[s]._activate.call(a[s],i),a[s].offset=a[s].element.offset(),a[s].proportions={width:a[s].element[0].offsetWidth,height:a[s].element[0].offsetHeight})}},drop:function(e,i){var s=!1;return t.each((t.ui.ddmanager.droppables[e.options.scope]||[]).slice(),function(){this.options&&(!this.options.disabled&&this.visible&&t.ui.intersect(e,this,this.options.tolerance)&&(s=this._drop.call(this,i)||s),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],e.currentItem||e.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))}),s},dragStart:function(e,i){e.element.parentsUntil("body").bind("scroll.droppable",function(){e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)})},drag:function(e,i){e.options.refreshPositions&&t.ui.ddmanager.prepareOffsets(e,i),t.each(t.ui.ddmanager.droppables[e.options.scope]||[],function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var s,n,a,o=t.ui.intersect(e,this,this.options.tolerance),r=!o&&this.isover?"isout":o&&!this.isover?"isover":null;r&&(this.options.greedy&&(n=this.options.scope,a=this.element.parents(":data(ui-droppable)").filter(function(){return t.data(this,"ui-droppable").options.scope===n}),a.length&&(s=t.data(a[0],"ui-droppable"),s.greedyChild="isover"===r)),s&&"isover"===r&&(s.isover=!1,s.isout=!0,s._out.call(s,i)),this[r]=!0,this["isout"===r?"isover":"isout"]=!1,this["isover"===r?"_over":"_out"].call(this,i),s&&"isout"===r&&(s.isout=!1,s.isover=!0,s._over.call(s,i)))}})},dragStop:function(e,i){e.element.parentsUntil("body").unbind("scroll.droppable"),e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}}})(jQuery);(function(t){function e(t){return parseInt(t,10)||0}function i(t){return!isNaN(parseInt(t,10))}t.widget("ui.resizable",t.ui.mouse,{version:"1.10.3",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_create:function(){var e,i,s,n,a,o=this,r=this.options;if(this.element.addClass("ui-resizable"),t.extend(this,{_aspectRatio:!!r.aspectRatio,aspectRatio:r.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:r.helper||r.ghost||r.animate?r.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)&&(this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.data("ui-resizable")),this.elementIsWrapper=!0,this.element.css({marginLeft:this.originalElement.css("marginLeft"),marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom")}),this.originalElement.css({marginLeft:0,marginTop:0,marginRight:0,marginBottom:0}),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css({margin:this.originalElement.css("margin")}),this._proportionallyResize()),this.handles=r.handles||(t(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),e=this.handles.split(","),this.handles={},i=0;e.length>i;i++)s=t.trim(e[i]),a="ui-resizable-"+s,n=t("<div class='ui-resizable-handle "+a+"'></div>"),n.css({zIndex:r.zIndex}),"se"===s&&n.addClass("ui-icon ui-icon-gripsmall-diagonal-se"),this.handles[s]=".ui-resizable-"+s,this.element.append(n);this._renderAxis=function(e){var i,s,n,a;e=e||this.element;for(i in this.handles)this.handles[i].constructor===String&&(this.handles[i]=t(this.handles[i],this.element).show()),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/textarea|input|select|button/i)&&(s=t(this.handles[i],this.element),a=/sw|ne|nw|se|n|s/.test(i)?s.outerHeight():s.outerWidth(),n=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),e.css(n,a),this._proportionallyResize()),t(this.handles[i]).length},this._renderAxis(this.element),this._handles=t(".ui-resizable-handle",this.element).disableSelection(),this._handles.mouseover(function(){o.resizing||(this.className&&(n=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),o.axis=n&&n[1]?n[1]:"se")}),r.autoHide&&(this._handles.hide(),t(this.element).addClass("ui-resizable-autohide").mouseenter(function(){r.disabled||(t(this).removeClass("ui-resizable-autohide"),o._handles.show())}).mouseleave(function(){r.disabled||o.resizing||(t(this).addClass("ui-resizable-autohide"),o._handles.hide())})),this._mouseInit()},_destroy:function(){this._mouseDestroy();var e,i=function(e){t(e).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),e=this.element,this.originalElement.css({position:e.css("position"),width:e.outerWidth(),height:e.outerHeight(),top:e.css("top"),left:e.css("left")}).insertAfter(e),e.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_mouseCapture:function(e){var i,s,n=!1;for(i in this.handles)s=t(this.handles[i])[0],(s===e.target||t.contains(s,e.target))&&(n=!0);return!this.options.disabled&&n},_mouseStart:function(i){var s,n,a,o=this.options,r=this.element.position(),h=this.element;return this.resizing=!0,/absolute/.test(h.css("position"))?h.css({position:"absolute",top:h.css("top"),left:h.css("left")}):h.is(".ui-draggable")&&h.css({position:"absolute",top:r.top,left:r.left}),this._renderProxy(),s=e(this.helper.css("left")),n=e(this.helper.css("top")),o.containment&&(s+=t(o.containment).scrollLeft()||0,n+=t(o.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:s,top:n},this.size=this._helper?{width:h.outerWidth(),height:h.outerHeight()}:{width:h.width(),height:h.height()},this.originalSize=this._helper?{width:h.outerWidth(),height:h.outerHeight()}:{width:h.width(),height:h.height()},this.originalPosition={left:s,top:n},this.sizeDiff={width:h.outerWidth()-h.width(),height:h.outerHeight()-h.height()},this.originalMousePosition={left:i.pageX,top:i.pageY},this.aspectRatio="number"==typeof o.aspectRatio?o.aspectRatio:this.originalSize.width/this.originalSize.height||1,a=t(".ui-resizable-"+this.axis).css("cursor"),t("body").css("cursor","auto"===a?this.axis+"-resize":a),h.addClass("ui-resizable-resizing"),this._propagate("start",i),!0},_mouseDrag:function(e){var i,s=this.helper,n={},a=this.originalMousePosition,o=this.axis,r=this.position.top,h=this.position.left,l=this.size.width,c=this.size.height,u=e.pageX-a.left||0,d=e.pageY-a.top||0,p=this._change[o];return p?(i=p.apply(this,[e,u,d]),this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(i=this._updateRatio(i,e)),i=this._respectSize(i,e),this._updateCache(i),this._propagate("resize",e),this.position.top!==r&&(n.top=this.position.top+"px"),this.position.left!==h&&(n.left=this.position.left+"px"),this.size.width!==l&&(n.width=this.size.width+"px"),this.size.height!==c&&(n.height=this.size.height+"px"),s.css(n),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),t.isEmptyObject(n)||this._trigger("resize",e,this.ui()),!1):!1},_mouseStop:function(e){this.resizing=!1;var i,s,n,a,o,r,h,l=this.options,c=this;return this._helper&&(i=this._proportionallyResizeElements,s=i.length&&/textarea/i.test(i[0].nodeName),n=s&&t.ui.hasScroll(i[0],"left")?0:c.sizeDiff.height,a=s?0:c.sizeDiff.width,o={width:c.helper.width()-a,height:c.helper.height()-n},r=parseInt(c.element.css("left"),10)+(c.position.left-c.originalPosition.left)||null,h=parseInt(c.element.css("top"),10)+(c.position.top-c.originalPosition.top)||null,l.animate||this.element.css(t.extend(o,{top:h,left:r})),c.helper.height(c.size.height),c.helper.width(c.size.width),this._helper&&!l.animate&&this._proportionallyResize()),t("body").css("cursor","auto"),this.element.removeClass("ui-resizable-resizing"),this._propagate("stop",e),this._helper&&this.helper.remove(),!1},_updateVirtualBoundaries:function(t){var e,s,n,a,o,r=this.options;o={minWidth:i(r.minWidth)?r.minWidth:0,maxWidth:i(r.maxWidth)?r.maxWidth:1/0,minHeight:i(r.minHeight)?r.minHeight:0,maxHeight:i(r.maxHeight)?r.maxHeight:1/0},(this._aspectRatio||t)&&(e=o.minHeight*this.aspectRatio,n=o.minWidth/this.aspectRatio,s=o.maxHeight*this.aspectRatio,a=o.maxWidth/this.aspectRatio,e>o.minWidth&&(o.minWidth=e),n>o.minHeight&&(o.minHeight=n),o.maxWidth>s&&(o.maxWidth=s),o.maxHeight>a&&(o.maxHeight=a)),this._vBoundaries=o},_updateCache:function(t){this.offset=this.helper.offset(),i(t.left)&&(this.position.left=t.left),i(t.top)&&(this.position.top=t.top),i(t.height)&&(this.size.height=t.height),i(t.width)&&(this.size.width=t.width)},_updateRatio:function(t){var e=this.position,s=this.size,n=this.axis;return i(t.height)?t.width=t.height*this.aspectRatio:i(t.width)&&(t.height=t.width/this.aspectRatio),"sw"===n&&(t.left=e.left+(s.width-t.width),t.top=null),"nw"===n&&(t.top=e.top+(s.height-t.height),t.left=e.left+(s.width-t.width)),t},_respectSize:function(t){var e=this._vBoundaries,s=this.axis,n=i(t.width)&&e.maxWidth&&e.maxWidth<t.width,a=i(t.height)&&e.maxHeight&&e.maxHeight<t.height,o=i(t.width)&&e.minWidth&&e.minWidth>t.width,r=i(t.height)&&e.minHeight&&e.minHeight>t.height,h=this.originalPosition.left+this.originalSize.width,l=this.position.top+this.size.height,c=/sw|nw|w/.test(s),u=/nw|ne|n/.test(s);return o&&(t.width=e.minWidth),r&&(t.height=e.minHeight),n&&(t.width=e.maxWidth),a&&(t.height=e.maxHeight),o&&c&&(t.left=h-e.minWidth),n&&c&&(t.left=h-e.maxWidth),r&&u&&(t.top=l-e.minHeight),a&&u&&(t.top=l-e.maxHeight),t.width||t.height||t.left||!t.top?t.width||t.height||t.top||!t.left||(t.left=null):t.top=null,t},_proportionallyResize:function(){if(this._proportionallyResizeElements.length){var t,e,i,s,n,a=this.helper||this.element;for(t=0;this._proportionallyResizeElements.length>t;t++){if(n=this._proportionallyResizeElements[t],!this.borderDif)for(this.borderDif=[],i=[n.css("borderTopWidth"),n.css("borderRightWidth"),n.css("borderBottomWidth"),n.css("borderLeftWidth")],s=[n.css("paddingTop"),n.css("paddingRight"),n.css("paddingBottom"),n.css("paddingLeft")],e=0;i.length>e;e++)this.borderDif[e]=(parseInt(i[e],10)||0)+(parseInt(s[e],10)||0);n.css({height:a.height()-this.borderDif[0]-this.borderDif[2]||0,width:a.width()-this.borderDif[1]-this.borderDif[3]||0})}}},_renderProxy:function(){var e=this.element,i=this.options;this.elementOffset=e.offset(),this._helper?(this.helper=this.helper||t("<div style='overflow:hidden;'></div>"),this.helper.addClass(this._helper).css({width:this.element.outerWidth()-1,height:this.element.outerHeight()-1,position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(t,e){return{width:this.originalSize.width+e}},w:function(t,e){var i=this.originalSize,s=this.originalPosition;return{left:s.left+e,width:i.width-e}},n:function(t,e,i){var s=this.originalSize,n=this.originalPosition;return{top:n.top+i,height:s.height-i}},s:function(t,e,i){return{height:this.originalSize.height+i}},se:function(e,i,s){return t.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[e,i,s]))},sw:function(e,i,s){return t.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[e,i,s]))},ne:function(e,i,s){return t.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[e,i,s]))},nw:function(e,i,s){return t.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[e,i,s]))}},_propagate:function(e,i){t.ui.plugin.call(this,e,[i,this.ui()]),"resize"!==e&&this._trigger(e,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),t.ui.plugin.add("resizable","animate",{stop:function(e){var i=t(this).data("ui-resizable"),s=i.options,n=i._proportionallyResizeElements,a=n.length&&/textarea/i.test(n[0].nodeName),o=a&&t.ui.hasScroll(n[0],"left")?0:i.sizeDiff.height,r=a?0:i.sizeDiff.width,h={width:i.size.width-r,height:i.size.height-o},l=parseInt(i.element.css("left"),10)+(i.position.left-i.originalPosition.left)||null,c=parseInt(i.element.css("top"),10)+(i.position.top-i.originalPosition.top)||null;i.element.animate(t.extend(h,c&&l?{top:c,left:l}:{}),{duration:s.animateDuration,easing:s.animateEasing,step:function(){var s={width:parseInt(i.element.css("width"),10),height:parseInt(i.element.css("height"),10),top:parseInt(i.element.css("top"),10),left:parseInt(i.element.css("left"),10)};n&&n.length&&t(n[0]).css({width:s.width,height:s.height}),i._updateCache(s),i._propagate("resize",e)}})}}),t.ui.plugin.add("resizable","containment",{start:function(){var i,s,n,a,o,r,h,l=t(this).data("ui-resizable"),c=l.options,u=l.element,d=c.containment,p=d instanceof t?d.get(0):/parent/.test(d)?u.parent().get(0):d;p&&(l.containerElement=t(p),/document/.test(d)||d===document?(l.containerOffset={left:0,top:0},l.containerPosition={left:0,top:0},l.parentData={element:t(document),left:0,top:0,width:t(document).width(),height:t(document).height()||document.body.parentNode.scrollHeight}):(i=t(p),s=[],t(["Top","Right","Left","Bottom"]).each(function(t,n){s[t]=e(i.css("padding"+n))}),l.containerOffset=i.offset(),l.containerPosition=i.position(),l.containerSize={height:i.innerHeight()-s[3],width:i.innerWidth()-s[1]},n=l.containerOffset,a=l.containerSize.height,o=l.containerSize.width,r=t.ui.hasScroll(p,"left")?p.scrollWidth:o,h=t.ui.hasScroll(p)?p.scrollHeight:a,l.parentData={element:p,left:n.left,top:n.top,width:r,height:h}))},resize:function(e){var i,s,n,a,o=t(this).data("ui-resizable"),r=o.options,h=o.containerOffset,l=o.position,c=o._aspectRatio||e.shiftKey,u={top:0,left:0},d=o.containerElement;d[0]!==document&&/static/.test(d.css("position"))&&(u=h),l.left<(o._helper?h.left:0)&&(o.size.width=o.size.width+(o._helper?o.position.left-h.left:o.position.left-u.left),c&&(o.size.height=o.size.width/o.aspectRatio),o.position.left=r.helper?h.left:0),l.top<(o._helper?h.top:0)&&(o.size.height=o.size.height+(o._helper?o.position.top-h.top:o.position.top),c&&(o.size.width=o.size.height*o.aspectRatio),o.position.top=o._helper?h.top:0),o.offset.left=o.parentData.left+o.position.left,o.offset.top=o.parentData.top+o.position.top,i=Math.abs((o._helper?o.offset.left-u.left:o.offset.left-u.left)+o.sizeDiff.width),s=Math.abs((o._helper?o.offset.top-u.top:o.offset.top-h.top)+o.sizeDiff.height),n=o.containerElement.get(0)===o.element.parent().get(0),a=/relative|absolute/.test(o.containerElement.css("position")),n&&a&&(i-=o.parentData.left),i+o.size.width>=o.parentData.width&&(o.size.width=o.parentData.width-i,c&&(o.size.height=o.size.width/o.aspectRatio)),s+o.size.height>=o.parentData.height&&(o.size.height=o.parentData.height-s,c&&(o.size.width=o.size.height*o.aspectRatio))},stop:function(){var e=t(this).data("ui-resizable"),i=e.options,s=e.containerOffset,n=e.containerPosition,a=e.containerElement,o=t(e.helper),r=o.offset(),h=o.outerWidth()-e.sizeDiff.width,l=o.outerHeight()-e.sizeDiff.height;e._helper&&!i.animate&&/relative/.test(a.css("position"))&&t(this).css({left:r.left-n.left-s.left,width:h,height:l}),e._helper&&!i.animate&&/static/.test(a.css("position"))&&t(this).css({left:r.left-n.left-s.left,width:h,height:l})}}),t.ui.plugin.add("resizable","alsoResize",{start:function(){var e=t(this).data("ui-resizable"),i=e.options,s=function(e){t(e).each(function(){var e=t(this);e.data("ui-resizable-alsoresize",{width:parseInt(e.width(),10),height:parseInt(e.height(),10),left:parseInt(e.css("left"),10),top:parseInt(e.css("top"),10)})})};"object"!=typeof i.alsoResize||i.alsoResize.parentNode?s(i.alsoResize):i.alsoResize.length?(i.alsoResize=i.alsoResize[0],s(i.alsoResize)):t.each(i.alsoResize,function(t){s(t)})},resize:function(e,i){var s=t(this).data("ui-resizable"),n=s.options,a=s.originalSize,o=s.originalPosition,r={height:s.size.height-a.height||0,width:s.size.width-a.width||0,top:s.position.top-o.top||0,left:s.position.left-o.left||0},h=function(e,s){t(e).each(function(){var e=t(this),n=t(this).data("ui-resizable-alsoresize"),a={},o=s&&s.length?s:e.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];t.each(o,function(t,e){var i=(n[e]||0)+(r[e]||0);i&&i>=0&&(a[e]=i||null)}),e.css(a)})};"object"!=typeof n.alsoResize||n.alsoResize.nodeType?h(n.alsoResize):t.each(n.alsoResize,function(t,e){h(t,e)})},stop:function(){t(this).removeData("resizable-alsoresize")}}),t.ui.plugin.add("resizable","ghost",{start:function(){var e=t(this).data("ui-resizable"),i=e.options,s=e.size;e.ghost=e.originalElement.clone(),e.ghost.css({opacity:.25,display:"block",position:"relative",height:s.height,width:s.width,margin:0,left:0,top:0}).addClass("ui-resizable-ghost").addClass("string"==typeof i.ghost?i.ghost:""),e.ghost.appendTo(e.helper)},resize:function(){var e=t(this).data("ui-resizable");e.ghost&&e.ghost.css({position:"relative",height:e.size.height,width:e.size.width})},stop:function(){var e=t(this).data("ui-resizable");e.ghost&&e.helper&&e.helper.get(0).removeChild(e.ghost.get(0))}}),t.ui.plugin.add("resizable","grid",{resize:function(){var e=t(this).data("ui-resizable"),i=e.options,s=e.size,n=e.originalSize,a=e.originalPosition,o=e.axis,r="number"==typeof i.grid?[i.grid,i.grid]:i.grid,h=r[0]||1,l=r[1]||1,c=Math.round((s.width-n.width)/h)*h,u=Math.round((s.height-n.height)/l)*l,d=n.width+c,p=n.height+u,f=i.maxWidth&&d>i.maxWidth,g=i.maxHeight&&p>i.maxHeight,m=i.minWidth&&i.minWidth>d,v=i.minHeight&&i.minHeight>p;i.grid=r,m&&(d+=h),v&&(p+=l),f&&(d-=h),g&&(p-=l),/^(se|s|e)$/.test(o)?(e.size.width=d,e.size.height=p):/^(ne)$/.test(o)?(e.size.width=d,e.size.height=p,e.position.top=a.top-u):/^(sw)$/.test(o)?(e.size.width=d,e.size.height=p,e.position.left=a.left-c):(e.size.width=d,e.size.height=p,e.position.top=a.top-u,e.position.left=a.left-c)}})})(jQuery);(function(t){t.widget("ui.selectable",t.ui.mouse,{version:"1.10.3",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var e,i=this;this.element.addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){e=t(i.options.filter,i.element[0]),e.addClass("ui-selectee"),e.each(function(){var e=t(this),i=e.offset();t.data(this,"selectable-item",{element:this,$element:e,left:i.left,top:i.top,right:i.left+e.outerWidth(),bottom:i.top+e.outerHeight(),startselected:!1,selected:e.hasClass("ui-selected"),selecting:e.hasClass("ui-selecting"),unselecting:e.hasClass("ui-unselecting")})})},this.refresh(),this.selectees=e.addClass("ui-selectee"),this._mouseInit(),this.helper=t("<div class='ui-selectable-helper'></div>")},_destroy:function(){this.selectees.removeClass("ui-selectee").removeData("selectable-item"),this.element.removeClass("ui-selectable ui-selectable-disabled"),this._mouseDestroy()},_mouseStart:function(e){var i=this,s=this.options;this.opos=[e.pageX,e.pageY],this.options.disabled||(this.selectees=t(s.filter,this.element[0]),this._trigger("start",e),t(s.appendTo).append(this.helper),this.helper.css({left:e.pageX,top:e.pageY,width:0,height:0}),s.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var s=t.data(this,"selectable-item");s.startselected=!0,e.metaKey||e.ctrlKey||(s.$element.removeClass("ui-selected"),s.selected=!1,s.$element.addClass("ui-unselecting"),s.unselecting=!0,i._trigger("unselecting",e,{unselecting:s.element}))}),t(e.target).parents().addBack().each(function(){var s,n=t.data(this,"selectable-item");return n?(s=!e.metaKey&&!e.ctrlKey||!n.$element.hasClass("ui-selected"),n.$element.removeClass(s?"ui-unselecting":"ui-selected").addClass(s?"ui-selecting":"ui-unselecting"),n.unselecting=!s,n.selecting=s,n.selected=s,s?i._trigger("selecting",e,{selecting:n.element}):i._trigger("unselecting",e,{unselecting:n.element}),!1):undefined}))},_mouseDrag:function(e){if(this.dragged=!0,!this.options.disabled){var i,s=this,n=this.options,a=this.opos[0],o=this.opos[1],r=e.pageX,l=e.pageY;return a>r&&(i=r,r=a,a=i),o>l&&(i=l,l=o,o=i),this.helper.css({left:a,top:o,width:r-a,height:l-o}),this.selectees.each(function(){var i=t.data(this,"selectable-item"),h=!1;i&&i.element!==s.element[0]&&("touch"===n.tolerance?h=!(i.left>r||a>i.right||i.top>l||o>i.bottom):"fit"===n.tolerance&&(h=i.left>a&&r>i.right&&i.top>o&&l>i.bottom),h?(i.selected&&(i.$element.removeClass("ui-selected"),i.selected=!1),i.unselecting&&(i.$element.removeClass("ui-unselecting"),i.unselecting=!1),i.selecting||(i.$element.addClass("ui-selecting"),i.selecting=!0,s._trigger("selecting",e,{selecting:i.element}))):(i.selecting&&((e.metaKey||e.ctrlKey)&&i.startselected?(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.$element.addClass("ui-selected"),i.selected=!0):(i.$element.removeClass("ui-selecting"),i.selecting=!1,i.startselected&&(i.$element.addClass("ui-unselecting"),i.unselecting=!0),s._trigger("unselecting",e,{unselecting:i.element}))),i.selected&&(e.metaKey||e.ctrlKey||i.startselected||(i.$element.removeClass("ui-selected"),i.selected=!1,i.$element.addClass("ui-unselecting"),i.unselecting=!0,s._trigger("unselecting",e,{unselecting:i.element})))))}),!1}},_mouseStop:function(e){var i=this;return this.dragged=!1,t(".ui-unselecting",this.element[0]).each(function(){var s=t.data(this,"selectable-item");s.$element.removeClass("ui-unselecting"),s.unselecting=!1,s.startselected=!1,i._trigger("unselected",e,{unselected:s.element})}),t(".ui-selecting",this.element[0]).each(function(){var s=t.data(this,"selectable-item");s.$element.removeClass("ui-selecting").addClass("ui-selected"),s.selecting=!1,s.selected=!0,s.startselected=!0,i._trigger("selected",e,{selected:s.element})}),this._trigger("stop",e),this.helper.remove(),!1}})})(jQuery);(function(t){function e(t,e,i){return t>e&&e+i>t}function i(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))}t.widget("ui.sortable",t.ui.mouse,{version:"1.10.3",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_create:function(){var t=this.options;this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.floating=this.items.length?"x"===t.axis||i(this.items[0].item):!1,this.offset=this.element.offset(),this._mouseInit(),this.ready=!0},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled"),this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_setOption:function(e,i){"disabled"===e?(this.options[e]=i,this.widget().toggleClass("ui-sortable-disabled",!!i)):t.Widget.prototype._setOption.apply(this,arguments)},_mouseCapture:function(e,i){var s=null,n=!1,o=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(e),t(e.target).parents().each(function(){return t.data(this,o.widgetName+"-item")===o?(s=t(this),!1):undefined}),t.data(e.target,o.widgetName+"-item")===o&&(s=t(e.target)),s?!this.options.handle||i||(t(this.options.handle,s).find("*").addBack().each(function(){this===e.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(e,i,s){var n,o,a=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,a.cursorAt&&this._adjustOffsetFromHelper(a.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),a.containment&&this._setContainment(),a.cursor&&"auto"!==a.cursor&&(o=this.document.find("body"),this.storedCursor=o.css("cursor"),o.css("cursor",a.cursor),this.storedStylesheet=t("<style>*{ cursor: "+a.cursor+" !important; }</style>").appendTo(o)),a.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",a.opacity)),a.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",a.zIndex)),this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,s,n,o,a=this.options,r=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<a.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+a.scrollSpeed:e.pageY-this.overflowOffset.top<a.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-a.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<a.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+a.scrollSpeed:e.pageX-this.overflowOffset.left<a.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-a.scrollSpeed)):(e.pageY-t(document).scrollTop()<a.scrollSensitivity?r=t(document).scrollTop(t(document).scrollTop()-a.scrollSpeed):t(window).height()-(e.pageY-t(document).scrollTop())<a.scrollSensitivity&&(r=t(document).scrollTop(t(document).scrollTop()+a.scrollSpeed)),e.pageX-t(document).scrollLeft()<a.scrollSensitivity?r=t(document).scrollLeft(t(document).scrollLeft()-a.scrollSpeed):t(window).width()-(e.pageX-t(document).scrollLeft())<a.scrollSensitivity&&(r=t(document).scrollLeft(t(document).scrollLeft()+a.scrollSpeed))),r!==!1&&t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],o=this._intersectsWithPointer(s),o&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===o?"next":"prev"]()[0]!==n&&!t.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!t.contains(this.element[0],n):!0)){if(this.direction=1===o?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(e,s),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var s=this,n=this.placeholder.offset(),o=this.options.axis,a={};o&&"x"!==o||(a.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollLeft)),o&&"y"!==o||(a.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(a,parseInt(this.options.revert,10)||500,function(){s._clear(e)})}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&s.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))}),!s.length&&e.key&&s.push(e.key+"="),s.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},i.each(function(){s.push(t(e.item||this).attr(e.attribute||"id")||"")}),s},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,o=t.left,a=o+t.width,r=t.top,h=r+t.height,l=this.offset.click.top,c=this.offset.click.left,u="x"===this.options.axis||s+l>r&&h>s+l,d="y"===this.options.axis||e+c>o&&a>e+c,p=u&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?p:e+this.helperProportions.width/2>o&&a>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&h>n-this.helperProportions.height/2},_intersectsWithPointer:function(t){var i="x"===this.options.axis||e(this.positionAbs.top+this.offset.click.top,t.top,t.height),s="y"===this.options.axis||e(this.positionAbs.left+this.offset.click.left,t.left,t.width),n=i&&s,o=this._getDragVerticalDirection(),a=this._getDragHorizontalDirection();return n?this.floating?a&&"right"===a||"down"===o?2:1:o&&("down"===o?2:1):!1},_intersectsWithSides:function(t){var i=e(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),s=e(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),n=this._getDragVerticalDirection(),o=this._getDragHorizontalDirection();return this.floating&&o?"right"===o&&s||"left"===o&&!s:n&&("down"===n&&i||"up"===n&&!i)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){var i,s,n,o,a=[],r=[],h=this._connectWith();if(h&&e)for(i=h.length-1;i>=0;i--)for(n=t(h[i]),s=n.length-1;s>=0;s--)o=t.data(n[s],this.widgetFullName),o&&o!==this&&!o.options.disabled&&r.push([t.isFunction(o.options.items)?o.options.items.call(o.element):t(o.options.items,o.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),o]);for(r.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),i=r.length-1;i>=0;i--)r[i][0].each(function(){a.push(this)});return t(a)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,function(t){for(var i=0;e.length>i;i++)if(e[i]===t.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var i,s,n,o,a,r,h,l,c=this.items,u=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if(d&&this.ready)for(i=d.length-1;i>=0;i--)for(n=t(d[i]),s=n.length-1;s>=0;s--)o=t.data(n[s],this.widgetFullName),o&&o!==this&&!o.options.disabled&&(u.push([t.isFunction(o.options.items)?o.options.items.call(o.element[0],e,{item:this.currentItem}):t(o.options.items,o.element),o]),this.containers.push(o));for(i=u.length-1;i>=0;i--)for(a=u[i][1],r=u[i][0],s=0,l=r.length;l>s;s++)h=t(r[s]),h.data(this.widgetName+"-item",a),c.push({item:h,instance:a,width:0,height:0,left:0,top:0})},refreshPositions:function(e){this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,o;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?t(this.options.toleranceElement,s.item):s.item,e||(s.width=n.outerWidth(),s.height=n.outerHeight()),o=n.offset(),s.left=o.left,s.top=o.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)o=this.containers[i].element.offset(),this.containers[i].containerCache.left=o.left,this.containers[i].containerCache.top=o.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){e=e||this;var i,s=e.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=e.currentItem[0].nodeName.toLowerCase(),n=t("<"+s+">",e.document[0]).addClass(i||e.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tr"===s?e.currentItem.children().each(function(){t("<td>&#160;</td>",e.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(n)}):"img"===s&&n.attr("src",e.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(t,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(s.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),s.placeholder.update(e,e.placeholder)},_contactContainers:function(s){var n,o,a,r,h,l,c,u,d,p,f=null,g=null;for(n=this.containers.length-1;n>=0;n--)if(!t.contains(this.currentItem[0],this.containers[n].element[0]))if(this._intersectsWith(this.containers[n].containerCache)){if(f&&t.contains(this.containers[n].element[0],f.element[0]))continue;f=this.containers[n],g=n}else this.containers[n].containerCache.over&&(this.containers[n]._trigger("out",s,this._uiHash(this)),this.containers[n].containerCache.over=0);if(f)if(1===this.containers.length)this.containers[g].containerCache.over||(this.containers[g]._trigger("over",s,this._uiHash(this)),this.containers[g].containerCache.over=1);else{for(a=1e4,r=null,p=f.floating||i(this.currentItem),h=p?"left":"top",l=p?"width":"height",c=this.positionAbs[h]+this.offset.click[h],o=this.items.length-1;o>=0;o--)t.contains(this.containers[g].element[0],this.items[o].item[0])&&this.items[o].item[0]!==this.currentItem[0]&&(!p||e(this.positionAbs.top+this.offset.click.top,this.items[o].top,this.items[o].height))&&(u=this.items[o].item.offset()[h],d=!1,Math.abs(u-c)>Math.abs(u+this.items[o][l]-c)&&(d=!0,u+=this.items[o][l]),a>Math.abs(u-c)&&(a=Math.abs(u-c),r=this.items[o],this.direction=d?"up":"down"));if(!r&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[g])return;r?this._rearrange(s,r,null,!0):this._rearrange(s,null,this.containers[g].element,!0),this._trigger("change",s,this._uiHash()),this.containers[g]._trigger("change",s,this._uiHash(this)),this.currentContainer=this.containers[g],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[g]._trigger("over",s,this._uiHash(this)),this.containers[g].containerCache.over=1}},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,t("document"===n.containment?document:window).width()-this.helperProportions.width-this.margins.left,(t("document"===n.containment?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(e=t(n.containment)[0],i=t(n.containment).offset(),s="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var s="absolute"===e?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():o?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():o?0:n.scrollLeft())*s}},_generatePosition:function(e){var i,s,n=this.options,o=e.pageX,a=e.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==document&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(o=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(a=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(o=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(a=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((a-this.originalPageY)/n.grid[1])*n.grid[1],a=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((o-this.originalPageX)/n.grid[0])*n.grid[0],o=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:a-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():h?0:r.scrollTop()),left:o-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():h?0:r.scrollLeft())}},_rearrange:function(t,e,i,s){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(t,e){this.reverting=!1;var i,s=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(i in this._storedCSS)("auto"===this._storedCSS[i]||"static"===this._storedCSS[i])&&(this._storedCSS[i]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!e&&s.push(function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||s.push(function(t){this._trigger("update",t,this._uiHash())}),this!==this.currentContainer&&(e||(s.push(function(t){this._trigger("remove",t,this._uiHash())}),s.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),s.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),i=this.containers.length-1;i>=0;i--)e||s.push(function(t){return function(e){t._trigger("deactivate",e,this._uiHash(this))}}.call(this,this.containers[i])),this.containers[i].containerCache.over&&(s.push(function(t){return function(e){t._trigger("out",e,this._uiHash(this))}}.call(this,this.containers[i])),this.containers[i].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,this.cancelHelperRemoval){if(!e){for(this._trigger("beforeStop",t,this._uiHash()),i=0;s.length>i;i++)s[i].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!1}if(e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null,!e){for(i=0;s.length>i;i++)s[i].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!0},_trigger:function(){t.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}})})(jQuery);(function(e){var t=0,i={},a={};i.height=i.paddingTop=i.paddingBottom=i.borderTopWidth=i.borderBottomWidth="hide",a.height=a.paddingTop=a.paddingBottom=a.borderTopWidth=a.borderBottomWidth="show",e.widget("ui.accordion",{version:"1.10.3",options:{active:0,animate:{},collapsible:!1,event:"click",header:"> li > :first-child,> :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},_create:function(){var t=this.options;this.prevShow=this.prevHide=e(),this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role","tablist"),t.collapsible||t.active!==!1&&null!=t.active||(t.active=0),this._processPanels(),0>t.active&&(t.active+=this.headers.length),this._refresh()},_getCreateEventData:function(){return{header:this.active,panel:this.active.length?this.active.next():e(),content:this.active.length?this.active.next():e()}},_createIcons:function(){var t=this.options.icons;t&&(e("<span>").addClass("ui-accordion-header-icon ui-icon "+t.header).prependTo(this.headers),this.active.children(".ui-accordion-header-icon").removeClass(t.header).addClass(t.activeHeader),this.headers.addClass("ui-accordion-icons"))},_destroyIcons:function(){this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove()},_destroy:function(){var e;this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"),this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),this._destroyIcons(),e=this.headers.next().css("display","").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),"content"!==this.options.heightStyle&&e.css("height","")},_setOption:function(e,t){return"active"===e?(this._activate(t),undefined):("event"===e&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(t)),this._super(e,t),"collapsible"!==e||t||this.options.active!==!1||this._activate(0),"icons"===e&&(this._destroyIcons(),t&&this._createIcons()),"disabled"===e&&this.headers.add(this.headers.next()).toggleClass("ui-state-disabled",!!t),undefined)},_keydown:function(t){if(!t.altKey&&!t.ctrlKey){var i=e.ui.keyCode,a=this.headers.length,s=this.headers.index(t.target),n=!1;switch(t.keyCode){case i.RIGHT:case i.DOWN:n=this.headers[(s+1)%a];break;case i.LEFT:case i.UP:n=this.headers[(s-1+a)%a];break;case i.SPACE:case i.ENTER:this._eventHandler(t);break;case i.HOME:n=this.headers[0];break;case i.END:n=this.headers[a-1]}n&&(e(t.target).attr("tabIndex",-1),e(n).attr("tabIndex",0),n.focus(),t.preventDefault())}},_panelKeyDown:function(t){t.keyCode===e.ui.keyCode.UP&&t.ctrlKey&&e(t.currentTarget).prev().focus()},refresh:function(){var t=this.options;this._processPanels(),t.active===!1&&t.collapsible===!0||!this.headers.length?(t.active=!1,this.active=e()):t.active===!1?this._activate(0):this.active.length&&!e.contains(this.element[0],this.active[0])?this.headers.length===this.headers.find(".ui-state-disabled").length?(t.active=!1,this.active=e()):this._activate(Math.max(0,t.active-1)):t.active=this.headers.index(this.active),this._destroyIcons(),this._refresh()},_processPanels:function(){this.headers=this.element.find(this.options.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"),this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide()},_refresh:function(){var i,a=this.options,s=a.heightStyle,n=this.element.parent(),r=this.accordionId="ui-accordion-"+(this.element.attr("id")||++t);this.active=this._findActive(a.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all"),this.active.next().addClass("ui-accordion-content-active").show(),this.headers.attr("role","tab").each(function(t){var i=e(this),a=i.attr("id"),s=i.next(),n=s.attr("id");a||(a=r+"-header-"+t,i.attr("id",a)),n||(n=r+"-panel-"+t,s.attr("id",n)),i.attr("aria-controls",n),s.attr("aria-labelledby",a)}).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false",tabIndex:-1}).next().attr({"aria-expanded":"false","aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true",tabIndex:0}).next().attr({"aria-expanded":"true","aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._createIcons(),this._setupEvents(a.event),"fill"===s?(i=n.height(),this.element.siblings(":visible").each(function(){var t=e(this),a=t.css("position");"absolute"!==a&&"fixed"!==a&&(i-=t.outerHeight(!0))}),this.headers.each(function(){i-=e(this).outerHeight(!0)}),this.headers.next().each(function(){e(this).height(Math.max(0,i-e(this).innerHeight()+e(this).height()))}).css("overflow","auto")):"auto"===s&&(i=0,this.headers.next().each(function(){i=Math.max(i,e(this).css("height","").height())}).height(i))},_activate:function(t){var i=this._findActive(t)[0];i!==this.active[0]&&(i=i||this.active[0],this._eventHandler({target:i,currentTarget:i,preventDefault:e.noop}))},_findActive:function(t){return"number"==typeof t?this.headers.eq(t):e()},_setupEvents:function(t){var i={keydown:"_keydown"};t&&e.each(t.split(" "),function(e,t){i[t]="_eventHandler"}),this._off(this.headers.add(this.headers.next())),this._on(this.headers,i),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._hoverable(this.headers),this._focusable(this.headers)},_eventHandler:function(t){var i=this.options,a=this.active,s=e(t.currentTarget),n=s[0]===a[0],r=n&&i.collapsible,o=r?e():s.next(),h=a.next(),d={oldHeader:a,oldPanel:h,newHeader:r?e():s,newPanel:o};t.preventDefault(),n&&!i.collapsible||this._trigger("beforeActivate",t,d)===!1||(i.active=r?!1:this.headers.index(s),this.active=n?e():s,this._toggle(d),a.removeClass("ui-accordion-header-active ui-state-active"),i.icons&&a.children(".ui-accordion-header-icon").removeClass(i.icons.activeHeader).addClass(i.icons.header),n||(s.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"),i.icons&&s.children(".ui-accordion-header-icon").removeClass(i.icons.header).addClass(i.icons.activeHeader),s.next().addClass("ui-accordion-content-active")))},_toggle:function(t){var i=t.newPanel,a=this.prevShow.length?this.prevShow:t.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=i,this.prevHide=a,this.options.animate?this._animate(i,a,t):(a.hide(),i.show(),this._toggleComplete(t)),a.attr({"aria-expanded":"false","aria-hidden":"true"}),a.prev().attr("aria-selected","false"),i.length&&a.length?a.prev().attr("tabIndex",-1):i.length&&this.headers.filter(function(){return 0===e(this).attr("tabIndex")}).attr("tabIndex",-1),i.attr({"aria-expanded":"true","aria-hidden":"false"}).prev().attr({"aria-selected":"true",tabIndex:0})},_animate:function(e,t,s){var n,r,o,h=this,d=0,c=e.length&&(!t.length||e.index()<t.index()),l=this.options.animate||{},u=c&&l.down||l,v=function(){h._toggleComplete(s)};return"number"==typeof u&&(o=u),"string"==typeof u&&(r=u),r=r||u.easing||l.easing,o=o||u.duration||l.duration,t.length?e.length?(n=e.show().outerHeight(),t.animate(i,{duration:o,easing:r,step:function(e,t){t.now=Math.round(e)}}),e.hide().animate(a,{duration:o,easing:r,complete:v,step:function(e,i){i.now=Math.round(e),"height"!==i.prop?d+=i.now:"content"!==h.options.heightStyle&&(i.now=Math.round(n-t.outerHeight()-d),d=0)}}),undefined):t.animate(i,o,r,v):e.animate(a,o,r,v)},_toggleComplete:function(e){var t=e.oldPanel;t.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all"),t.length&&(t.parent()[0].className=t.parent()[0].className),this._trigger("activate",null,e)}})})(jQuery);(function(e){var t=0;e.widget("ui.autocomplete",{version:"1.10.3",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},pending:0,_create:function(){var t,i,s,n=this.element[0].nodeName.toLowerCase(),a="textarea"===n,o="input"===n;this.isMultiLine=a?!0:o?!1:this.element.prop("isContentEditable"),this.valueMethod=this.element[a||o?"val":"text"],this.isNewMenu=!0,this.element.addClass("ui-autocomplete-input").attr("autocomplete","off"),this._on(this.element,{keydown:function(n){if(this.element.prop("readOnly"))return t=!0,s=!0,i=!0,undefined;t=!1,s=!1,i=!1;var a=e.ui.keyCode;switch(n.keyCode){case a.PAGE_UP:t=!0,this._move("previousPage",n);break;case a.PAGE_DOWN:t=!0,this._move("nextPage",n);break;case a.UP:t=!0,this._keyEvent("previous",n);break;case a.DOWN:t=!0,this._keyEvent("next",n);break;case a.ENTER:case a.NUMPAD_ENTER:this.menu.active&&(t=!0,n.preventDefault(),this.menu.select(n));break;case a.TAB:this.menu.active&&this.menu.select(n);break;case a.ESCAPE:this.menu.element.is(":visible")&&(this._value(this.term),this.close(n),n.preventDefault());break;default:i=!0,this._searchTimeout(n)}},keypress:function(s){if(t)return t=!1,(!this.isMultiLine||this.menu.element.is(":visible"))&&s.preventDefault(),undefined;if(!i){var n=e.ui.keyCode;switch(s.keyCode){case n.PAGE_UP:this._move("previousPage",s);break;case n.PAGE_DOWN:this._move("nextPage",s);break;case n.UP:this._keyEvent("previous",s);break;case n.DOWN:this._keyEvent("next",s)}}},input:function(e){return s?(s=!1,e.preventDefault(),undefined):(this._searchTimeout(e),undefined)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(e){return this.cancelBlur?(delete this.cancelBlur,undefined):(clearTimeout(this.searching),this.close(e),this._change(e),undefined)}}),this._initSource(),this.menu=e("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({role:null}).hide().data("ui-menu"),this._on(this.menu.element,{mousedown:function(t){t.preventDefault(),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur});var i=this.menu.element[0];e(t.target).closest(".ui-menu-item").length||this._delay(function(){var t=this;this.document.one("mousedown",function(s){s.target===t.element[0]||s.target===i||e.contains(i,s.target)||t.close()})})},menufocus:function(t,i){if(this.isNewMenu&&(this.isNewMenu=!1,t.originalEvent&&/^mouse/.test(t.originalEvent.type)))return this.menu.blur(),this.document.one("mousemove",function(){e(t.target).trigger(t.originalEvent)}),undefined;var s=i.item.data("ui-autocomplete-item");!1!==this._trigger("focus",t,{item:s})?t.originalEvent&&/^key/.test(t.originalEvent.type)&&this._value(s.value):this.liveRegion.text(s.value)},menuselect:function(e,t){var i=t.item.data("ui-autocomplete-item"),s=this.previous;this.element[0]!==this.document[0].activeElement&&(this.element.focus(),this.previous=s,this._delay(function(){this.previous=s,this.selectedItem=i})),!1!==this._trigger("select",e,{item:i})&&this._value(i.value),this.term=this._value(),this.close(e),this.selectedItem=i}}),this.liveRegion=e("<span>",{role:"status","aria-live":"polite"}).addClass("ui-helper-hidden-accessible").insertBefore(this.element),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(e,t){this._super(e,t),"source"===e&&this._initSource(),"appendTo"===e&&this.menu.element.appendTo(this._appendTo()),"disabled"===e&&t&&this.xhr&&this.xhr.abort()},_appendTo:function(){var t=this.options.appendTo;return t&&(t=t.jquery||t.nodeType?e(t):this.document.find(t).eq(0)),t||(t=this.element.closest(".ui-front")),t.length||(t=this.document[0].body),t},_initSource:function(){var t,i,s=this;e.isArray(this.options.source)?(t=this.options.source,this.source=function(i,s){s(e.ui.autocomplete.filter(t,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(t,n){s.xhr&&s.xhr.abort(),s.xhr=e.ajax({url:i,data:t,dataType:"json",success:function(e){n(e)},error:function(){n([])}})}):this.source=this.options.source},_searchTimeout:function(e){clearTimeout(this.searching),this.searching=this._delay(function(){this.term!==this._value()&&(this.selectedItem=null,this.search(null,e))},this.options.delay)},search:function(e,t){return e=null!=e?e:this._value(),this.term=this._value(),e.length<this.options.minLength?this.close(t):this._trigger("search",t)!==!1?this._search(e):undefined},_search:function(e){this.pending++,this.element.addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:e},this._response())},_response:function(){var e=this,i=++t;return function(s){i===t&&e.__response(s),e.pending--,e.pending||e.element.removeClass("ui-autocomplete-loading")}},__response:function(e){e&&(e=this._normalize(e)),this._trigger("response",null,{content:e}),!this.options.disabled&&e&&e.length&&!this.cancelSearch?(this._suggest(e),this._trigger("open")):this._close()},close:function(e){this.cancelSearch=!0,this._close(e)},_close:function(e){this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",e))},_change:function(e){this.previous!==this._value()&&this._trigger("change",e,{item:this.selectedItem})},_normalize:function(t){return t.length&&t[0].label&&t[0].value?t:e.map(t,function(t){return"string"==typeof t?{label:t,value:t}:e.extend({label:t.label||t.value,value:t.value||t.label},t)})},_suggest:function(t){var i=this.menu.element.empty();this._renderMenu(i,t),this.isNewMenu=!0,this.menu.refresh(),i.show(),this._resizeMenu(),i.position(e.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next()},_resizeMenu:function(){var e=this.menu.element;e.outerWidth(Math.max(e.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(t,i){var s=this;e.each(i,function(e,i){s._renderItemData(t,i)})},_renderItemData:function(e,t){return this._renderItem(e,t).data("ui-autocomplete-item",t)},_renderItem:function(t,i){return e("<li>").append(e("<a>").text(i.label)).appendTo(t)},_move:function(e,t){return this.menu.element.is(":visible")?this.menu.isFirstItem()&&/^previous/.test(e)||this.menu.isLastItem()&&/^next/.test(e)?(this._value(this.term),this.menu.blur(),undefined):(this.menu[e](t),undefined):(this.search(null,t),undefined)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(e,t){(!this.isMultiLine||this.menu.element.is(":visible"))&&(this._move(e,t),t.preventDefault())}}),e.extend(e.ui.autocomplete,{escapeRegex:function(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(t,i){var s=RegExp(e.ui.autocomplete.escapeRegex(i),"i");return e.grep(t,function(e){return s.test(e.label||e.value||e)})}}),e.widget("ui.autocomplete",e.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(e){return e+(e>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(e){var t;this._superApply(arguments),this.options.disabled||this.cancelSearch||(t=e&&e.length?this.options.messages.results(e.length):this.options.messages.noResults,this.liveRegion.text(t))}})})(jQuery);(function(e){var t,i,n,s,a="ui-button ui-widget ui-state-default ui-corner-all",o="ui-state-hover ui-state-active ",r="ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",h=function(){var t=e(this);setTimeout(function(){t.find(":ui-button").button("refresh")},1)},u=function(t){var i=t.name,n=t.form,s=e([]);return i&&(i=i.replace(/'/g,"\\'"),s=n?e(n).find("[name='"+i+"']"):e("[name='"+i+"']",t.ownerDocument).filter(function(){return!this.form})),s};e.widget("ui.button",{version:"1.10.3",defaultElement:"<button>",options:{disabled:null,text:!0,label:null,icons:{primary:null,secondary:null}},_create:function(){this.element.closest("form").unbind("reset"+this.eventNamespace).bind("reset"+this.eventNamespace,h),"boolean"!=typeof this.options.disabled?this.options.disabled=!!this.element.prop("disabled"):this.element.prop("disabled",this.options.disabled),this._determineButtonType(),this.hasTitle=!!this.buttonElement.attr("title");var o=this,r=this.options,l="checkbox"===this.type||"radio"===this.type,c=l?"":"ui-state-active",d="ui-state-focus";null===r.label&&(r.label="input"===this.type?this.buttonElement.val():this.buttonElement.html()),this._hoverable(this.buttonElement),this.buttonElement.addClass(a).attr("role","button").bind("mouseenter"+this.eventNamespace,function(){r.disabled||this===t&&e(this).addClass("ui-state-active")}).bind("mouseleave"+this.eventNamespace,function(){r.disabled||e(this).removeClass(c)}).bind("click"+this.eventNamespace,function(e){r.disabled&&(e.preventDefault(),e.stopImmediatePropagation())}),this.element.bind("focus"+this.eventNamespace,function(){o.buttonElement.addClass(d)}).bind("blur"+this.eventNamespace,function(){o.buttonElement.removeClass(d)}),l&&(this.element.bind("change"+this.eventNamespace,function(){s||o.refresh()}),this.buttonElement.bind("mousedown"+this.eventNamespace,function(e){r.disabled||(s=!1,i=e.pageX,n=e.pageY)}).bind("mouseup"+this.eventNamespace,function(e){r.disabled||(i!==e.pageX||n!==e.pageY)&&(s=!0)})),"checkbox"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){return r.disabled||s?!1:undefined}):"radio"===this.type?this.buttonElement.bind("click"+this.eventNamespace,function(){if(r.disabled||s)return!1;e(this).addClass("ui-state-active"),o.buttonElement.attr("aria-pressed","true");var t=o.element[0];u(t).not(t).map(function(){return e(this).button("widget")[0]}).removeClass("ui-state-active").attr("aria-pressed","false")}):(this.buttonElement.bind("mousedown"+this.eventNamespace,function(){return r.disabled?!1:(e(this).addClass("ui-state-active"),t=this,o.document.one("mouseup",function(){t=null}),undefined)}).bind("mouseup"+this.eventNamespace,function(){return r.disabled?!1:(e(this).removeClass("ui-state-active"),undefined)}).bind("keydown"+this.eventNamespace,function(t){return r.disabled?!1:((t.keyCode===e.ui.keyCode.SPACE||t.keyCode===e.ui.keyCode.ENTER)&&e(this).addClass("ui-state-active"),undefined)}).bind("keyup"+this.eventNamespace+" blur"+this.eventNamespace,function(){e(this).removeClass("ui-state-active")}),this.buttonElement.is("a")&&this.buttonElement.keyup(function(t){t.keyCode===e.ui.keyCode.SPACE&&e(this).click()})),this._setOption("disabled",r.disabled),this._resetButton()},_determineButtonType:function(){var e,t,i;this.type=this.element.is("[type=checkbox]")?"checkbox":this.element.is("[type=radio]")?"radio":this.element.is("input")?"input":"button","checkbox"===this.type||"radio"===this.type?(e=this.element.parents().last(),t="label[for='"+this.element.attr("id")+"']",this.buttonElement=e.find(t),this.buttonElement.length||(e=e.length?e.siblings():this.element.siblings(),this.buttonElement=e.filter(t),this.buttonElement.length||(this.buttonElement=e.find(t))),this.element.addClass("ui-helper-hidden-accessible"),i=this.element.is(":checked"),i&&this.buttonElement.addClass("ui-state-active"),this.buttonElement.prop("aria-pressed",i)):this.buttonElement=this.element},widget:function(){return this.buttonElement},_destroy:function(){this.element.removeClass("ui-helper-hidden-accessible"),this.buttonElement.removeClass(a+" "+o+" "+r).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()),this.hasTitle||this.buttonElement.removeAttr("title")},_setOption:function(e,t){return this._super(e,t),"disabled"===e?(t?this.element.prop("disabled",!0):this.element.prop("disabled",!1),undefined):(this._resetButton(),undefined)},refresh:function(){var t=this.element.is("input, button")?this.element.is(":disabled"):this.element.hasClass("ui-button-disabled");t!==this.options.disabled&&this._setOption("disabled",t),"radio"===this.type?u(this.element[0]).each(function(){e(this).is(":checked")?e(this).button("widget").addClass("ui-state-active").attr("aria-pressed","true"):e(this).button("widget").removeClass("ui-state-active").attr("aria-pressed","false")}):"checkbox"===this.type&&(this.element.is(":checked")?this.buttonElement.addClass("ui-state-active").attr("aria-pressed","true"):this.buttonElement.removeClass("ui-state-active").attr("aria-pressed","false"))},_resetButton:function(){if("input"===this.type)return this.options.label&&this.element.val(this.options.label),undefined;var t=this.buttonElement.removeClass(r),i=e("<span></span>",this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(t.empty()).text(),n=this.options.icons,s=n.primary&&n.secondary,a=[];n.primary||n.secondary?(this.options.text&&a.push("ui-button-text-icon"+(s?"s":n.primary?"-primary":"-secondary")),n.primary&&t.prepend("<span class='ui-button-icon-primary ui-icon "+n.primary+"'></span>"),n.secondary&&t.append("<span class='ui-button-icon-secondary ui-icon "+n.secondary+"'></span>"),this.options.text||(a.push(s?"ui-button-icons-only":"ui-button-icon-only"),this.hasTitle||t.attr("title",e.trim(i)))):a.push("ui-button-text-only"),t.addClass(a.join(" "))}}),e.widget("ui.buttonset",{version:"1.10.3",options:{items:"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"},_create:function(){this.element.addClass("ui-buttonset")},_init:function(){this.refresh()},_setOption:function(e,t){"disabled"===e&&this.buttons.button("option",e,t),this._super(e,t)},refresh:function(){var t="rtl"===this.element.css("direction");this.buttons=this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function(){return e(this).button("widget")[0]}).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(t?"ui-corner-right":"ui-corner-left").end().filter(":last").addClass(t?"ui-corner-left":"ui-corner-right").end().end()},_destroy:function(){this.element.removeClass("ui-buttonset"),this.buttons.map(function(){return e(this).button("widget")[0]}).removeClass("ui-corner-left ui-corner-right").end().button("destroy")}})})(jQuery);(function(e,t){function i(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},e.extend(this._defaults,this.regional[""]),this.dpDiv=a(e("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function a(t){var i="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return t.delegate(i,"mouseout",function(){e(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&e(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&e(this).removeClass("ui-datepicker-next-hover")}).delegate(i,"mouseover",function(){e.datepicker._isDisabledDatepicker(n.inline?t.parent()[0]:n.input[0])||(e(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),e(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&e(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&e(this).addClass("ui-datepicker-next-hover"))})}function s(t,i){e.extend(t,i);for(var a in i)null==i[a]&&(t[a]=i[a]);return t}e.extend(e.ui,{datepicker:{version:"1.10.3"}});var n,r="datepicker";e.extend(i.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(e){return s(this._defaults,e||{}),this},_attachDatepicker:function(t,i){var a,s,n;a=t.nodeName.toLowerCase(),s="div"===a||"span"===a,t.id||(this.uuid+=1,t.id="dp"+this.uuid),n=this._newInst(e(t),s),n.settings=e.extend({},i||{}),"input"===a?this._connectDatepicker(t,n):s&&this._inlineDatepicker(t,n)},_newInst:function(t,i){var s=t[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1");return{id:s,input:t,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:i,dpDiv:i?a(e("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(t,i){var a=e(t);i.append=e([]),i.trigger=e([]),a.hasClass(this.markerClassName)||(this._attachments(a,i),a.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp),this._autoSize(i),e.data(t,r,i),i.settings.disabled&&this._disableDatepicker(t))},_attachments:function(t,i){var a,s,n,r=this._get(i,"appendText"),o=this._get(i,"isRTL");i.append&&i.append.remove(),r&&(i.append=e("<span class='"+this._appendClass+"'>"+r+"</span>"),t[o?"before":"after"](i.append)),t.unbind("focus",this._showDatepicker),i.trigger&&i.trigger.remove(),a=this._get(i,"showOn"),("focus"===a||"both"===a)&&t.focus(this._showDatepicker),("button"===a||"both"===a)&&(s=this._get(i,"buttonText"),n=this._get(i,"buttonImage"),i.trigger=e(this._get(i,"buttonImageOnly")?e("<img/>").addClass(this._triggerClass).attr({src:n,alt:s,title:s}):e("<button type='button'></button>").addClass(this._triggerClass).html(n?e("<img/>").attr({src:n,alt:s,title:s}):s)),t[o?"before":"after"](i.trigger),i.trigger.click(function(){return e.datepicker._datepickerShowing&&e.datepicker._lastInput===t[0]?e.datepicker._hideDatepicker():e.datepicker._datepickerShowing&&e.datepicker._lastInput!==t[0]?(e.datepicker._hideDatepicker(),e.datepicker._showDatepicker(t[0])):e.datepicker._showDatepicker(t[0]),!1}))},_autoSize:function(e){if(this._get(e,"autoSize")&&!e.inline){var t,i,a,s,n=new Date(2009,11,20),r=this._get(e,"dateFormat");r.match(/[DM]/)&&(t=function(e){for(i=0,a=0,s=0;e.length>s;s++)e[s].length>i&&(i=e[s].length,a=s);return a},n.setMonth(t(this._get(e,r.match(/MM/)?"monthNames":"monthNamesShort"))),n.setDate(t(this._get(e,r.match(/DD/)?"dayNames":"dayNamesShort"))+20-n.getDay())),e.input.attr("size",this._formatDate(e,n).length)}},_inlineDatepicker:function(t,i){var a=e(t);a.hasClass(this.markerClassName)||(a.addClass(this.markerClassName).append(i.dpDiv),e.data(t,r,i),this._setDate(i,this._getDefaultDate(i),!0),this._updateDatepicker(i),this._updateAlternate(i),i.settings.disabled&&this._disableDatepicker(t),i.dpDiv.css("display","block"))},_dialogDatepicker:function(t,i,a,n,o){var u,c,l,h,d,p=this._dialogInst;return p||(this.uuid+=1,u="dp"+this.uuid,this._dialogInput=e("<input type='text' id='"+u+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.keydown(this._doKeyDown),e("body").append(this._dialogInput),p=this._dialogInst=this._newInst(this._dialogInput,!1),p.settings={},e.data(this._dialogInput[0],r,p)),s(p.settings,n||{}),i=i&&i.constructor===Date?this._formatDate(p,i):i,this._dialogInput.val(i),this._pos=o?o.length?o:[o.pageX,o.pageY]:null,this._pos||(c=document.documentElement.clientWidth,l=document.documentElement.clientHeight,h=document.documentElement.scrollLeft||document.body.scrollLeft,d=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[c/2-100+h,l/2-150+d]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),p.settings.onSelect=a,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),e.blockUI&&e.blockUI(this.dpDiv),e.data(this._dialogInput[0],r,p),this},_destroyDatepicker:function(t){var i,a=e(t),s=e.data(t,r);a.hasClass(this.markerClassName)&&(i=t.nodeName.toLowerCase(),e.removeData(t,r),"input"===i?(s.append.remove(),s.trigger.remove(),a.removeClass(this.markerClassName).unbind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbind("keypress",this._doKeyPress).unbind("keyup",this._doKeyUp)):("div"===i||"span"===i)&&a.removeClass(this.markerClassName).empty())},_enableDatepicker:function(t){var i,a,s=e(t),n=e.data(t,r);s.hasClass(this.markerClassName)&&(i=t.nodeName.toLowerCase(),"input"===i?(t.disabled=!1,n.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""})):("div"===i||"span"===i)&&(a=s.children("."+this._inlineClass),a.children().removeClass("ui-state-disabled"),a.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=e.map(this._disabledInputs,function(e){return e===t?null:e}))},_disableDatepicker:function(t){var i,a,s=e(t),n=e.data(t,r);s.hasClass(this.markerClassName)&&(i=t.nodeName.toLowerCase(),"input"===i?(t.disabled=!0,n.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"})):("div"===i||"span"===i)&&(a=s.children("."+this._inlineClass),a.children().addClass("ui-state-disabled"),a.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=e.map(this._disabledInputs,function(e){return e===t?null:e}),this._disabledInputs[this._disabledInputs.length]=t)},_isDisabledDatepicker:function(e){if(!e)return!1;for(var t=0;this._disabledInputs.length>t;t++)if(this._disabledInputs[t]===e)return!0;return!1},_getInst:function(t){try{return e.data(t,r)}catch(i){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(i,a,n){var r,o,u,c,l=this._getInst(i);return 2===arguments.length&&"string"==typeof a?"defaults"===a?e.extend({},e.datepicker._defaults):l?"all"===a?e.extend({},l.settings):this._get(l,a):null:(r=a||{},"string"==typeof a&&(r={},r[a]=n),l&&(this._curInst===l&&this._hideDatepicker(),o=this._getDateDatepicker(i,!0),u=this._getMinMaxDate(l,"min"),c=this._getMinMaxDate(l,"max"),s(l.settings,r),null!==u&&r.dateFormat!==t&&r.minDate===t&&(l.settings.minDate=this._formatDate(l,u)),null!==c&&r.dateFormat!==t&&r.maxDate===t&&(l.settings.maxDate=this._formatDate(l,c)),"disabled"in r&&(r.disabled?this._disableDatepicker(i):this._enableDatepicker(i)),this._attachments(e(i),l),this._autoSize(l),this._setDate(l,o),this._updateAlternate(l),this._updateDatepicker(l)),t)},_changeDatepicker:function(e,t,i){this._optionDatepicker(e,t,i)},_refreshDatepicker:function(e){var t=this._getInst(e);t&&this._updateDatepicker(t)},_setDateDatepicker:function(e,t){var i=this._getInst(e);i&&(this._setDate(i,t),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(e,t){var i=this._getInst(e);return i&&!i.inline&&this._setDateFromField(i,t),i?this._getDate(i):null},_doKeyDown:function(t){var i,a,s,n=e.datepicker._getInst(t.target),r=!0,o=n.dpDiv.is(".ui-datepicker-rtl");if(n._keyEvent=!0,e.datepicker._datepickerShowing)switch(t.keyCode){case 9:e.datepicker._hideDatepicker(),r=!1;break;case 13:return s=e("td."+e.datepicker._dayOverClass+":not(."+e.datepicker._currentClass+")",n.dpDiv),s[0]&&e.datepicker._selectDay(t.target,n.selectedMonth,n.selectedYear,s[0]),i=e.datepicker._get(n,"onSelect"),i?(a=e.datepicker._formatDate(n),i.apply(n.input?n.input[0]:null,[a,n])):e.datepicker._hideDatepicker(),!1;case 27:e.datepicker._hideDatepicker();break;case 33:e.datepicker._adjustDate(t.target,t.ctrlKey?-e.datepicker._get(n,"stepBigMonths"):-e.datepicker._get(n,"stepMonths"),"M");break;case 34:e.datepicker._adjustDate(t.target,t.ctrlKey?+e.datepicker._get(n,"stepBigMonths"):+e.datepicker._get(n,"stepMonths"),"M");break;case 35:(t.ctrlKey||t.metaKey)&&e.datepicker._clearDate(t.target),r=t.ctrlKey||t.metaKey;break;case 36:(t.ctrlKey||t.metaKey)&&e.datepicker._gotoToday(t.target),r=t.ctrlKey||t.metaKey;break;case 37:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,o?1:-1,"D"),r=t.ctrlKey||t.metaKey,t.originalEvent.altKey&&e.datepicker._adjustDate(t.target,t.ctrlKey?-e.datepicker._get(n,"stepBigMonths"):-e.datepicker._get(n,"stepMonths"),"M");break;case 38:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,-7,"D"),r=t.ctrlKey||t.metaKey;break;case 39:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,o?-1:1,"D"),r=t.ctrlKey||t.metaKey,t.originalEvent.altKey&&e.datepicker._adjustDate(t.target,t.ctrlKey?+e.datepicker._get(n,"stepBigMonths"):+e.datepicker._get(n,"stepMonths"),"M");break;case 40:(t.ctrlKey||t.metaKey)&&e.datepicker._adjustDate(t.target,7,"D"),r=t.ctrlKey||t.metaKey;break;default:r=!1}else 36===t.keyCode&&t.ctrlKey?e.datepicker._showDatepicker(this):r=!1;r&&(t.preventDefault(),t.stopPropagation())},_doKeyPress:function(i){var a,s,n=e.datepicker._getInst(i.target);return e.datepicker._get(n,"constrainInput")?(a=e.datepicker._possibleChars(e.datepicker._get(n,"dateFormat")),s=String.fromCharCode(null==i.charCode?i.keyCode:i.charCode),i.ctrlKey||i.metaKey||" ">s||!a||a.indexOf(s)>-1):t},_doKeyUp:function(t){var i,a=e.datepicker._getInst(t.target);if(a.input.val()!==a.lastVal)try{i=e.datepicker.parseDate(e.datepicker._get(a,"dateFormat"),a.input?a.input.val():null,e.datepicker._getFormatConfig(a)),i&&(e.datepicker._setDateFromField(a),e.datepicker._updateAlternate(a),e.datepicker._updateDatepicker(a))}catch(s){}return!0},_showDatepicker:function(t){if(t=t.target||t,"input"!==t.nodeName.toLowerCase()&&(t=e("input",t.parentNode)[0]),!e.datepicker._isDisabledDatepicker(t)&&e.datepicker._lastInput!==t){var i,a,n,r,o,u,c;i=e.datepicker._getInst(t),e.datepicker._curInst&&e.datepicker._curInst!==i&&(e.datepicker._curInst.dpDiv.stop(!0,!0),i&&e.datepicker._datepickerShowing&&e.datepicker._hideDatepicker(e.datepicker._curInst.input[0])),a=e.datepicker._get(i,"beforeShow"),n=a?a.apply(t,[t,i]):{},n!==!1&&(s(i.settings,n),i.lastVal=null,e.datepicker._lastInput=t,e.datepicker._setDateFromField(i),e.datepicker._inDialog&&(t.value=""),e.datepicker._pos||(e.datepicker._pos=e.datepicker._findPos(t),e.datepicker._pos[1]+=t.offsetHeight),r=!1,e(t).parents().each(function(){return r|="fixed"===e(this).css("position"),!r}),o={left:e.datepicker._pos[0],top:e.datepicker._pos[1]},e.datepicker._pos=null,i.dpDiv.empty(),i.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),e.datepicker._updateDatepicker(i),o=e.datepicker._checkOffset(i,o,r),i.dpDiv.css({position:e.datepicker._inDialog&&e.blockUI?"static":r?"fixed":"absolute",display:"none",left:o.left+"px",top:o.top+"px"}),i.inline||(u=e.datepicker._get(i,"showAnim"),c=e.datepicker._get(i,"duration"),i.dpDiv.zIndex(e(t).zIndex()+1),e.datepicker._datepickerShowing=!0,e.effects&&e.effects.effect[u]?i.dpDiv.show(u,e.datepicker._get(i,"showOptions"),c):i.dpDiv[u||"show"](u?c:null),e.datepicker._shouldFocusInput(i)&&i.input.focus(),e.datepicker._curInst=i))}},_updateDatepicker:function(t){this.maxRows=4,n=t,t.dpDiv.empty().append(this._generateHTML(t)),this._attachHandlers(t),t.dpDiv.find("."+this._dayOverClass+" a").mouseover();var i,a=this._getNumberOfMonths(t),s=a[1],r=17;t.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),s>1&&t.dpDiv.addClass("ui-datepicker-multi-"+s).css("width",r*s+"em"),t.dpDiv[(1!==a[0]||1!==a[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),t.dpDiv[(this._get(t,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),t===e.datepicker._curInst&&e.datepicker._datepickerShowing&&e.datepicker._shouldFocusInput(t)&&t.input.focus(),t.yearshtml&&(i=t.yearshtml,setTimeout(function(){i===t.yearshtml&&t.yearshtml&&t.dpDiv.find("select.ui-datepicker-year:first").replaceWith(t.yearshtml),i=t.yearshtml=null},0))},_shouldFocusInput:function(e){return e.input&&e.input.is(":visible")&&!e.input.is(":disabled")&&!e.input.is(":focus")},_checkOffset:function(t,i,a){var s=t.dpDiv.outerWidth(),n=t.dpDiv.outerHeight(),r=t.input?t.input.outerWidth():0,o=t.input?t.input.outerHeight():0,u=document.documentElement.clientWidth+(a?0:e(document).scrollLeft()),c=document.documentElement.clientHeight+(a?0:e(document).scrollTop());return i.left-=this._get(t,"isRTL")?s-r:0,i.left-=a&&i.left===t.input.offset().left?e(document).scrollLeft():0,i.top-=a&&i.top===t.input.offset().top+o?e(document).scrollTop():0,i.left-=Math.min(i.left,i.left+s>u&&u>s?Math.abs(i.left+s-u):0),i.top-=Math.min(i.top,i.top+n>c&&c>n?Math.abs(n+o):0),i},_findPos:function(t){for(var i,a=this._getInst(t),s=this._get(a,"isRTL");t&&("hidden"===t.type||1!==t.nodeType||e.expr.filters.hidden(t));)t=t[s?"previousSibling":"nextSibling"];return i=e(t).offset(),[i.left,i.top]},_hideDatepicker:function(t){var i,a,s,n,o=this._curInst;!o||t&&o!==e.data(t,r)||this._datepickerShowing&&(i=this._get(o,"showAnim"),a=this._get(o,"duration"),s=function(){e.datepicker._tidyDialog(o)},e.effects&&(e.effects.effect[i]||e.effects[i])?o.dpDiv.hide(i,e.datepicker._get(o,"showOptions"),a,s):o.dpDiv["slideDown"===i?"slideUp":"fadeIn"===i?"fadeOut":"hide"](i?a:null,s),i||s(),this._datepickerShowing=!1,n=this._get(o,"onClose"),n&&n.apply(o.input?o.input[0]:null,[o.input?o.input.val():"",o]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),e.blockUI&&(e.unblockUI(),e("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(e){e.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")},_checkExternalClick:function(t){if(e.datepicker._curInst){var i=e(t.target),a=e.datepicker._getInst(i[0]);(i[0].id!==e.datepicker._mainDivId&&0===i.parents("#"+e.datepicker._mainDivId).length&&!i.hasClass(e.datepicker.markerClassName)&&!i.closest("."+e.datepicker._triggerClass).length&&e.datepicker._datepickerShowing&&(!e.datepicker._inDialog||!e.blockUI)||i.hasClass(e.datepicker.markerClassName)&&e.datepicker._curInst!==a)&&e.datepicker._hideDatepicker()}},_adjustDate:function(t,i,a){var s=e(t),n=this._getInst(s[0]);this._isDisabledDatepicker(s[0])||(this._adjustInstDate(n,i+("M"===a?this._get(n,"showCurrentAtPos"):0),a),this._updateDatepicker(n))},_gotoToday:function(t){var i,a=e(t),s=this._getInst(a[0]);this._get(s,"gotoCurrent")&&s.currentDay?(s.selectedDay=s.currentDay,s.drawMonth=s.selectedMonth=s.currentMonth,s.drawYear=s.selectedYear=s.currentYear):(i=new Date,s.selectedDay=i.getDate(),s.drawMonth=s.selectedMonth=i.getMonth(),s.drawYear=s.selectedYear=i.getFullYear()),this._notifyChange(s),this._adjustDate(a)},_selectMonthYear:function(t,i,a){var s=e(t),n=this._getInst(s[0]);n["selected"+("M"===a?"Month":"Year")]=n["draw"+("M"===a?"Month":"Year")]=parseInt(i.options[i.selectedIndex].value,10),this._notifyChange(n),this._adjustDate(s)},_selectDay:function(t,i,a,s){var n,r=e(t);e(s).hasClass(this._unselectableClass)||this._isDisabledDatepicker(r[0])||(n=this._getInst(r[0]),n.selectedDay=n.currentDay=e("a",s).html(),n.selectedMonth=n.currentMonth=i,n.selectedYear=n.currentYear=a,this._selectDate(t,this._formatDate(n,n.currentDay,n.currentMonth,n.currentYear)))},_clearDate:function(t){var i=e(t);this._selectDate(i,"")},_selectDate:function(t,i){var a,s=e(t),n=this._getInst(s[0]);i=null!=i?i:this._formatDate(n),n.input&&n.input.val(i),this._updateAlternate(n),a=this._get(n,"onSelect"),a?a.apply(n.input?n.input[0]:null,[i,n]):n.input&&n.input.trigger("change"),n.inline?this._updateDatepicker(n):(this._hideDatepicker(),this._lastInput=n.input[0],"object"!=typeof n.input[0]&&n.input.focus(),this._lastInput=null)},_updateAlternate:function(t){var i,a,s,n=this._get(t,"altField");n&&(i=this._get(t,"altFormat")||this._get(t,"dateFormat"),a=this._getDate(t),s=this.formatDate(i,a,this._getFormatConfig(t)),e(n).each(function(){e(this).val(s)}))},noWeekends:function(e){var t=e.getDay();return[t>0&&6>t,""]},iso8601Week:function(e){var t,i=new Date(e.getTime());return i.setDate(i.getDate()+4-(i.getDay()||7)),t=i.getTime(),i.setMonth(0),i.setDate(1),Math.floor(Math.round((t-i)/864e5)/7)+1},parseDate:function(i,a,s){if(null==i||null==a)throw"Invalid arguments";if(a="object"==typeof a?""+a:a+"",""===a)return null;var n,r,o,u,c=0,l=(s?s.shortYearCutoff:null)||this._defaults.shortYearCutoff,h="string"!=typeof l?l:(new Date).getFullYear()%100+parseInt(l,10),d=(s?s.dayNamesShort:null)||this._defaults.dayNamesShort,p=(s?s.dayNames:null)||this._defaults.dayNames,g=(s?s.monthNamesShort:null)||this._defaults.monthNamesShort,m=(s?s.monthNames:null)||this._defaults.monthNames,f=-1,_=-1,v=-1,k=-1,b=!1,y=function(e){var t=i.length>n+1&&i.charAt(n+1)===e;return t&&n++,t},D=function(e){var t=y(e),i="@"===e?14:"!"===e?20:"y"===e&&t?4:"o"===e?3:2,s=RegExp("^\\d{1,"+i+"}"),n=a.substring(c).match(s);if(!n)throw"Missing number at position "+c;return c+=n[0].length,parseInt(n[0],10)},w=function(i,s,n){var r=-1,o=e.map(y(i)?n:s,function(e,t){return[[t,e]]}).sort(function(e,t){return-(e[1].length-t[1].length)});if(e.each(o,function(e,i){var s=i[1];return a.substr(c,s.length).toLowerCase()===s.toLowerCase()?(r=i[0],c+=s.length,!1):t}),-1!==r)return r+1;throw"Unknown name at position "+c},M=function(){if(a.charAt(c)!==i.charAt(n))throw"Unexpected literal at position "+c;c++};for(n=0;i.length>n;n++)if(b)"'"!==i.charAt(n)||y("'")?M():b=!1;else switch(i.charAt(n)){case"d":v=D("d");break;case"D":w("D",d,p);break;case"o":k=D("o");break;case"m":_=D("m");break;case"M":_=w("M",g,m);break;case"y":f=D("y");break;case"@":u=new Date(D("@")),f=u.getFullYear(),_=u.getMonth()+1,v=u.getDate();break;case"!":u=new Date((D("!")-this._ticksTo1970)/1e4),f=u.getFullYear(),_=u.getMonth()+1,v=u.getDate();break;case"'":y("'")?M():b=!0;break;default:M()}if(a.length>c&&(o=a.substr(c),!/^\s+/.test(o)))throw"Extra/unparsed characters found in date: "+o;if(-1===f?f=(new Date).getFullYear():100>f&&(f+=(new Date).getFullYear()-(new Date).getFullYear()%100+(h>=f?0:-100)),k>-1)for(_=1,v=k;;){if(r=this._getDaysInMonth(f,_-1),r>=v)break;_++,v-=r}if(u=this._daylightSavingAdjust(new Date(f,_-1,v)),u.getFullYear()!==f||u.getMonth()+1!==_||u.getDate()!==v)throw"Invalid date";return u},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:1e7*60*60*24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925)),formatDate:function(e,t,i){if(!t)return"";var a,s=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,n=(i?i.dayNames:null)||this._defaults.dayNames,r=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,o=(i?i.monthNames:null)||this._defaults.monthNames,u=function(t){var i=e.length>a+1&&e.charAt(a+1)===t;return i&&a++,i},c=function(e,t,i){var a=""+t;if(u(e))for(;i>a.length;)a="0"+a;return a},l=function(e,t,i,a){return u(e)?a[t]:i[t]},h="",d=!1;if(t)for(a=0;e.length>a;a++)if(d)"'"!==e.charAt(a)||u("'")?h+=e.charAt(a):d=!1;else switch(e.charAt(a)){case"d":h+=c("d",t.getDate(),2);break;case"D":h+=l("D",t.getDay(),s,n);break;case"o":h+=c("o",Math.round((new Date(t.getFullYear(),t.getMonth(),t.getDate()).getTime()-new Date(t.getFullYear(),0,0).getTime())/864e5),3);break;case"m":h+=c("m",t.getMonth()+1,2);break;case"M":h+=l("M",t.getMonth(),r,o);break;case"y":h+=u("y")?t.getFullYear():(10>t.getYear()%100?"0":"")+t.getYear()%100;break;case"@":h+=t.getTime();break;case"!":h+=1e4*t.getTime()+this._ticksTo1970;break;case"'":u("'")?h+="'":d=!0;break;default:h+=e.charAt(a)}return h},_possibleChars:function(e){var t,i="",a=!1,s=function(i){var a=e.length>t+1&&e.charAt(t+1)===i;return a&&t++,a};for(t=0;e.length>t;t++)if(a)"'"!==e.charAt(t)||s("'")?i+=e.charAt(t):a=!1;else switch(e.charAt(t)){case"d":case"m":case"y":case"@":i+="0123456789";break;case"D":case"M":return null;case"'":s("'")?i+="'":a=!0;break;default:i+=e.charAt(t)}return i},_get:function(e,i){return e.settings[i]!==t?e.settings[i]:this._defaults[i]},_setDateFromField:function(e,t){if(e.input.val()!==e.lastVal){var i=this._get(e,"dateFormat"),a=e.lastVal=e.input?e.input.val():null,s=this._getDefaultDate(e),n=s,r=this._getFormatConfig(e);try{n=this.parseDate(i,a,r)||s}catch(o){a=t?"":a}e.selectedDay=n.getDate(),e.drawMonth=e.selectedMonth=n.getMonth(),e.drawYear=e.selectedYear=n.getFullYear(),e.currentDay=a?n.getDate():0,e.currentMonth=a?n.getMonth():0,e.currentYear=a?n.getFullYear():0,this._adjustInstDate(e)}},_getDefaultDate:function(e){return this._restrictMinMax(e,this._determineDate(e,this._get(e,"defaultDate"),new Date))},_determineDate:function(t,i,a){var s=function(e){var t=new Date;return t.setDate(t.getDate()+e),t},n=function(i){try{return e.datepicker.parseDate(e.datepicker._get(t,"dateFormat"),i,e.datepicker._getFormatConfig(t))}catch(a){}for(var s=(i.toLowerCase().match(/^c/)?e.datepicker._getDate(t):null)||new Date,n=s.getFullYear(),r=s.getMonth(),o=s.getDate(),u=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,c=u.exec(i);c;){switch(c[2]||"d"){case"d":case"D":o+=parseInt(c[1],10);break;case"w":case"W":o+=7*parseInt(c[1],10);break;case"m":case"M":r+=parseInt(c[1],10),o=Math.min(o,e.datepicker._getDaysInMonth(n,r));break;case"y":case"Y":n+=parseInt(c[1],10),o=Math.min(o,e.datepicker._getDaysInMonth(n,r))}c=u.exec(i)}return new Date(n,r,o)},r=null==i||""===i?a:"string"==typeof i?n(i):"number"==typeof i?isNaN(i)?a:s(i):new Date(i.getTime());return r=r&&"Invalid Date"==""+r?a:r,r&&(r.setHours(0),r.setMinutes(0),r.setSeconds(0),r.setMilliseconds(0)),this._daylightSavingAdjust(r)},_daylightSavingAdjust:function(e){return e?(e.setHours(e.getHours()>12?e.getHours()+2:0),e):null},_setDate:function(e,t,i){var a=!t,s=e.selectedMonth,n=e.selectedYear,r=this._restrictMinMax(e,this._determineDate(e,t,new Date));e.selectedDay=e.currentDay=r.getDate(),e.drawMonth=e.selectedMonth=e.currentMonth=r.getMonth(),e.drawYear=e.selectedYear=e.currentYear=r.getFullYear(),s===e.selectedMonth&&n===e.selectedYear||i||this._notifyChange(e),this._adjustInstDate(e),e.input&&e.input.val(a?"":this._formatDate(e))},_getDate:function(e){var t=!e.currentYear||e.input&&""===e.input.val()?null:this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay));return t},_attachHandlers:function(t){var i=this._get(t,"stepMonths"),a="#"+t.id.replace(/\\\\/g,"\\");t.dpDiv.find("[data-handler]").map(function(){var t={prev:function(){e.datepicker._adjustDate(a,-i,"M")},next:function(){e.datepicker._adjustDate(a,+i,"M")},hide:function(){e.datepicker._hideDatepicker()},today:function(){e.datepicker._gotoToday(a)},selectDay:function(){return e.datepicker._selectDay(a,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return e.datepicker._selectMonthYear(a,this,"M"),!1},selectYear:function(){return e.datepicker._selectMonthYear(a,this,"Y"),!1}};e(this).bind(this.getAttribute("data-event"),t[this.getAttribute("data-handler")])})},_generateHTML:function(e){var t,i,a,s,n,r,o,u,c,l,h,d,p,g,m,f,_,v,k,b,y,D,w,M,C,x,I,N,T,A,E,S,Y,F,P,O,j,K,R,H=new Date,W=this._daylightSavingAdjust(new Date(H.getFullYear(),H.getMonth(),H.getDate())),L=this._get(e,"isRTL"),U=this._get(e,"showButtonPanel"),B=this._get(e,"hideIfNoPrevNext"),z=this._get(e,"navigationAsDateFormat"),q=this._getNumberOfMonths(e),G=this._get(e,"showCurrentAtPos"),J=this._get(e,"stepMonths"),Q=1!==q[0]||1!==q[1],V=this._daylightSavingAdjust(e.currentDay?new Date(e.currentYear,e.currentMonth,e.currentDay):new Date(9999,9,9)),$=this._getMinMaxDate(e,"min"),X=this._getMinMaxDate(e,"max"),Z=e.drawMonth-G,et=e.drawYear;if(0>Z&&(Z+=12,et--),X)for(t=this._daylightSavingAdjust(new Date(X.getFullYear(),X.getMonth()-q[0]*q[1]+1,X.getDate())),t=$&&$>t?$:t;this._daylightSavingAdjust(new Date(et,Z,1))>t;)Z--,0>Z&&(Z=11,et--);for(e.drawMonth=Z,e.drawYear=et,i=this._get(e,"prevText"),i=z?this.formatDate(i,this._daylightSavingAdjust(new Date(et,Z-J,1)),this._getFormatConfig(e)):i,a=this._canAdjustMonth(e,-1,et,Z)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(L?"e":"w")+"'>"+i+"</span></a>":B?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(L?"e":"w")+"'>"+i+"</span></a>",s=this._get(e,"nextText"),s=z?this.formatDate(s,this._daylightSavingAdjust(new Date(et,Z+J,1)),this._getFormatConfig(e)):s,n=this._canAdjustMonth(e,1,et,Z)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+s+"'><span class='ui-icon ui-icon-circle-triangle-"+(L?"w":"e")+"'>"+s+"</span></a>":B?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+s+"'><span class='ui-icon ui-icon-circle-triangle-"+(L?"w":"e")+"'>"+s+"</span></a>",r=this._get(e,"currentText"),o=this._get(e,"gotoCurrent")&&e.currentDay?V:W,r=z?this.formatDate(r,o,this._getFormatConfig(e)):r,u=e.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(e,"closeText")+"</button>",c=U?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(L?u:"")+(this._isInRange(e,o)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+r+"</button>":"")+(L?"":u)+"</div>":"",l=parseInt(this._get(e,"firstDay"),10),l=isNaN(l)?0:l,h=this._get(e,"showWeek"),d=this._get(e,"dayNames"),p=this._get(e,"dayNamesMin"),g=this._get(e,"monthNames"),m=this._get(e,"monthNamesShort"),f=this._get(e,"beforeShowDay"),_=this._get(e,"showOtherMonths"),v=this._get(e,"selectOtherMonths"),k=this._getDefaultDate(e),b="",D=0;q[0]>D;D++){for(w="",this.maxRows=4,M=0;q[1]>M;M++){if(C=this._daylightSavingAdjust(new Date(et,Z,e.selectedDay)),x=" ui-corner-all",I="",Q){if(I+="<div class='ui-datepicker-group",q[1]>1)switch(M){case 0:I+=" ui-datepicker-group-first",x=" ui-corner-"+(L?"right":"left");break;case q[1]-1:I+=" ui-datepicker-group-last",x=" ui-corner-"+(L?"left":"right");break;default:I+=" ui-datepicker-group-middle",x=""}I+="'>"}for(I+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+x+"'>"+(/all|left/.test(x)&&0===D?L?n:a:"")+(/all|right/.test(x)&&0===D?L?a:n:"")+this._generateMonthYearHeader(e,Z,et,$,X,D>0||M>0,g,m)+"</div><table class='ui-datepicker-calendar'><thead>"+"<tr>",N=h?"<th class='ui-datepicker-week-col'>"+this._get(e,"weekHeader")+"</th>":"",y=0;7>y;y++)T=(y+l)%7,N+="<th"+((y+l+6)%7>=5?" class='ui-datepicker-week-end'":"")+">"+"<span title='"+d[T]+"'>"+p[T]+"</span></th>";for(I+=N+"</tr></thead><tbody>",A=this._getDaysInMonth(et,Z),et===e.selectedYear&&Z===e.selectedMonth&&(e.selectedDay=Math.min(e.selectedDay,A)),E=(this._getFirstDayOfMonth(et,Z)-l+7)%7,S=Math.ceil((E+A)/7),Y=Q?this.maxRows>S?this.maxRows:S:S,this.maxRows=Y,F=this._daylightSavingAdjust(new Date(et,Z,1-E)),P=0;Y>P;P++){for(I+="<tr>",O=h?"<td class='ui-datepicker-week-col'>"+this._get(e,"calculateWeek")(F)+"</td>":"",y=0;7>y;y++)j=f?f.apply(e.input?e.input[0]:null,[F]):[!0,""],K=F.getMonth()!==Z,R=K&&!v||!j[0]||$&&$>F||X&&F>X,O+="<td class='"+((y+l+6)%7>=5?" ui-datepicker-week-end":"")+(K?" ui-datepicker-other-month":"")+(F.getTime()===C.getTime()&&Z===e.selectedMonth&&e._keyEvent||k.getTime()===F.getTime()&&k.getTime()===C.getTime()?" "+this._dayOverClass:"")+(R?" "+this._unselectableClass+" ui-state-disabled":"")+(K&&!_?"":" "+j[1]+(F.getTime()===V.getTime()?" "+this._currentClass:"")+(F.getTime()===W.getTime()?" ui-datepicker-today":""))+"'"+(K&&!_||!j[2]?"":" title='"+j[2].replace(/'/g,"&#39;")+"'")+(R?"":" data-handler='selectDay' data-event='click' data-month='"+F.getMonth()+"' data-year='"+F.getFullYear()+"'")+">"+(K&&!_?"&#xa0;":R?"<span class='ui-state-default'>"+F.getDate()+"</span>":"<a class='ui-state-default"+(F.getTime()===W.getTime()?" ui-state-highlight":"")+(F.getTime()===V.getTime()?" ui-state-active":"")+(K?" ui-priority-secondary":"")+"' href='#'>"+F.getDate()+"</a>")+"</td>",F.setDate(F.getDate()+1),F=this._daylightSavingAdjust(F);I+=O+"</tr>"}Z++,Z>11&&(Z=0,et++),I+="</tbody></table>"+(Q?"</div>"+(q[0]>0&&M===q[1]-1?"<div class='ui-datepicker-row-break'></div>":""):""),w+=I}b+=w}return b+=c,e._keyEvent=!1,b},_generateMonthYearHeader:function(e,t,i,a,s,n,r,o){var u,c,l,h,d,p,g,m,f=this._get(e,"changeMonth"),_=this._get(e,"changeYear"),v=this._get(e,"showMonthAfterYear"),k="<div class='ui-datepicker-title'>",b="";if(n||!f)b+="<span class='ui-datepicker-month'>"+r[t]+"</span>";else{for(u=a&&a.getFullYear()===i,c=s&&s.getFullYear()===i,b+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",l=0;12>l;l++)(!u||l>=a.getMonth())&&(!c||s.getMonth()>=l)&&(b+="<option value='"+l+"'"+(l===t?" selected='selected'":"")+">"+o[l]+"</option>");b+="</select>"}if(v||(k+=b+(!n&&f&&_?"":"&#xa0;")),!e.yearshtml)if(e.yearshtml="",n||!_)k+="<span class='ui-datepicker-year'>"+i+"</span>";else{for(h=this._get(e,"yearRange").split(":"),d=(new Date).getFullYear(),p=function(e){var t=e.match(/c[+\-].*/)?i+parseInt(e.substring(1),10):e.match(/[+\-].*/)?d+parseInt(e,10):parseInt(e,10);
return isNaN(t)?d:t},g=p(h[0]),m=Math.max(g,p(h[1]||"")),g=a?Math.max(g,a.getFullYear()):g,m=s?Math.min(m,s.getFullYear()):m,e.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";m>=g;g++)e.yearshtml+="<option value='"+g+"'"+(g===i?" selected='selected'":"")+">"+g+"</option>";e.yearshtml+="</select>",k+=e.yearshtml,e.yearshtml=null}return k+=this._get(e,"yearSuffix"),v&&(k+=(!n&&f&&_?"":"&#xa0;")+b),k+="</div>"},_adjustInstDate:function(e,t,i){var a=e.drawYear+("Y"===i?t:0),s=e.drawMonth+("M"===i?t:0),n=Math.min(e.selectedDay,this._getDaysInMonth(a,s))+("D"===i?t:0),r=this._restrictMinMax(e,this._daylightSavingAdjust(new Date(a,s,n)));e.selectedDay=r.getDate(),e.drawMonth=e.selectedMonth=r.getMonth(),e.drawYear=e.selectedYear=r.getFullYear(),("M"===i||"Y"===i)&&this._notifyChange(e)},_restrictMinMax:function(e,t){var i=this._getMinMaxDate(e,"min"),a=this._getMinMaxDate(e,"max"),s=i&&i>t?i:t;return a&&s>a?a:s},_notifyChange:function(e){var t=this._get(e,"onChangeMonthYear");t&&t.apply(e.input?e.input[0]:null,[e.selectedYear,e.selectedMonth+1,e])},_getNumberOfMonths:function(e){var t=this._get(e,"numberOfMonths");return null==t?[1,1]:"number"==typeof t?[1,t]:t},_getMinMaxDate:function(e,t){return this._determineDate(e,this._get(e,t+"Date"),null)},_getDaysInMonth:function(e,t){return 32-this._daylightSavingAdjust(new Date(e,t,32)).getDate()},_getFirstDayOfMonth:function(e,t){return new Date(e,t,1).getDay()},_canAdjustMonth:function(e,t,i,a){var s=this._getNumberOfMonths(e),n=this._daylightSavingAdjust(new Date(i,a+(0>t?t:s[0]*s[1]),1));return 0>t&&n.setDate(this._getDaysInMonth(n.getFullYear(),n.getMonth())),this._isInRange(e,n)},_isInRange:function(e,t){var i,a,s=this._getMinMaxDate(e,"min"),n=this._getMinMaxDate(e,"max"),r=null,o=null,u=this._get(e,"yearRange");return u&&(i=u.split(":"),a=(new Date).getFullYear(),r=parseInt(i[0],10),o=parseInt(i[1],10),i[0].match(/[+\-].*/)&&(r+=a),i[1].match(/[+\-].*/)&&(o+=a)),(!s||t.getTime()>=s.getTime())&&(!n||t.getTime()<=n.getTime())&&(!r||t.getFullYear()>=r)&&(!o||o>=t.getFullYear())},_getFormatConfig:function(e){var t=this._get(e,"shortYearCutoff");return t="string"!=typeof t?t:(new Date).getFullYear()%100+parseInt(t,10),{shortYearCutoff:t,dayNamesShort:this._get(e,"dayNamesShort"),dayNames:this._get(e,"dayNames"),monthNamesShort:this._get(e,"monthNamesShort"),monthNames:this._get(e,"monthNames")}},_formatDate:function(e,t,i,a){t||(e.currentDay=e.selectedDay,e.currentMonth=e.selectedMonth,e.currentYear=e.selectedYear);var s=t?"object"==typeof t?t:this._daylightSavingAdjust(new Date(a,i,t)):this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay));return this.formatDate(this._get(e,"dateFormat"),s,this._getFormatConfig(e))}}),e.fn.datepicker=function(t){if(!this.length)return this;e.datepicker.initialized||(e(document).mousedown(e.datepicker._checkExternalClick),e.datepicker.initialized=!0),0===e("#"+e.datepicker._mainDivId).length&&e("body").append(e.datepicker.dpDiv);var i=Array.prototype.slice.call(arguments,1);return"string"!=typeof t||"isDisabled"!==t&&"getDate"!==t&&"widget"!==t?"option"===t&&2===arguments.length&&"string"==typeof arguments[1]?e.datepicker["_"+t+"Datepicker"].apply(e.datepicker,[this[0]].concat(i)):this.each(function(){"string"==typeof t?e.datepicker["_"+t+"Datepicker"].apply(e.datepicker,[this].concat(i)):e.datepicker._attachDatepicker(this,t)}):e.datepicker["_"+t+"Datepicker"].apply(e.datepicker,[this[0]].concat(i))},e.datepicker=new i,e.datepicker.initialized=!1,e.datepicker.uuid=(new Date).getTime(),e.datepicker.version="1.10.3"})(jQuery);(function(e){var t={buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},i={maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0};e.widget("ui.dialog",{version:"1.10.3",options:{appendTo:"body",autoOpen:!0,buttons:[],closeOnEscape:!0,closeText:"close",dialogClass:"",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(t){var i=e(this).css(t).offset().top;0>i&&e(this).css("top",t.top-i)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),this.options.title=this.options.title||this.originalTitle,this._createWrapper(),this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&e.fn.draggable&&this._makeDraggable(),this.options.resizable&&e.fn.resizable&&this._makeResizable(),this._isOpen=!1},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var t=this.options.appendTo;return t&&(t.jquery||t.nodeType)?e(t):this.document.find(t||"body").eq(0)},_destroy:function(){var e,t=this.originalPosition;this._destroyOverlay(),this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach(),this.uiDialog.stop(!0,!0).remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),e=t.parent.children().eq(t.index),e.length&&e[0]!==this.element[0]?e.before(this.element):t.parent.append(this.element)},widget:function(){return this.uiDialog},disable:e.noop,enable:e.noop,close:function(t){var i=this;this._isOpen&&this._trigger("beforeClose",t)!==!1&&(this._isOpen=!1,this._destroyOverlay(),this.opener.filter(":focusable").focus().length||e(this.document[0].activeElement).blur(),this._hide(this.uiDialog,this.options.hide,function(){i._trigger("close",t)}))},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(e,t){var i=!!this.uiDialog.nextAll(":visible").insertBefore(this.uiDialog).length;return i&&!t&&this._trigger("focus",e),i},open:function(){var t=this;return this._isOpen?(this._moveToTop()&&this._focusTabbable(),undefined):(this._isOpen=!0,this.opener=e(this.document[0].activeElement),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this._show(this.uiDialog,this.options.show,function(){t._focusTabbable(),t._trigger("focus")}),this._trigger("open"),undefined)},_focusTabbable:function(){var e=this.element.find("[autofocus]");e.length||(e=this.element.find(":tabbable")),e.length||(e=this.uiDialogButtonPane.find(":tabbable")),e.length||(e=this.uiDialogTitlebarClose.filter(":tabbable")),e.length||(e=this.uiDialog),e.eq(0).focus()},_keepFocus:function(t){function i(){var t=this.document[0].activeElement,i=this.uiDialog[0]===t||e.contains(this.uiDialog[0],t);i||this._focusTabbable()}t.preventDefault(),i.call(this),this._delay(i)},_createWrapper:function(){this.uiDialog=e("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front "+this.options.dialogClass).hide().attr({tabIndex:-1,role:"dialogMetodoCreacion"}).appendTo(this._appendTo()),this._on(this.uiDialog,{keydown:function(t){if(this.options.closeOnEscape&&!t.isDefaultPrevented()&&t.keyCode&&t.keyCode===e.ui.keyCode.ESCAPE)return t.preventDefault(),this.close(t),undefined;if(t.keyCode===e.ui.keyCode.TAB){var i=this.uiDialog.find(":tabbable"),a=i.filter(":first"),s=i.filter(":last");t.target!==s[0]&&t.target!==this.uiDialog[0]||t.shiftKey?t.target!==a[0]&&t.target!==this.uiDialog[0]||!t.shiftKey||(s.focus(1),t.preventDefault()):(a.focus(1),t.preventDefault())}},mousedown:function(e){this._moveToTop(e)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var t;this.uiDialogTitlebar=e("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog),this._on(this.uiDialogTitlebar,{mousedown:function(t){e(t.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.focus()}}),this.uiDialogTitlebarClose=e("<button></button>").button({label:this.options.closeText,icons:{primary:"ui-icon-closethick"},text:!1}).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar),this._on(this.uiDialogTitlebarClose,{click:function(e){e.preventDefault(),this.close(e)}}),t=e("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar),this._title(t),this.uiDialog.attr({"aria-labelledby":t.attr("id")})},_title:function(e){this.options.title||e.html("&#160;"),e.text(this.options.title)},_createButtonPane:function(){this.uiDialogButtonPane=e("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),this.uiButtonSet=e("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane),this._createButtons()},_createButtons:function(){var t=this,i=this.options.buttons;return this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),e.isEmptyObject(i)||e.isArray(i)&&!i.length?(this.uiDialog.removeClass("ui-dialog-buttons"),undefined):(e.each(i,function(i,a){var s,n;a=e.isFunction(a)?{click:a,text:i}:a,a=e.extend({type:"button"},a),s=a.click,a.click=function(){s.apply(t.element[0],arguments)},n={icons:a.icons,text:a.showText},delete a.icons,delete a.showText,e("<button></button>",a).button(n).appendTo(t.uiButtonSet)}),this.uiDialog.addClass("ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog),undefined)},_makeDraggable:function(){function t(e){return{position:e.position,offset:e.offset}}var i=this,a=this.options;this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(a,s){e(this).addClass("ui-dialog-dragging"),i._blockFrames(),i._trigger("dragStart",a,t(s))},drag:function(e,a){i._trigger("drag",e,t(a))},stop:function(s,n){a.position=[n.position.left-i.document.scrollLeft(),n.position.top-i.document.scrollTop()],e(this).removeClass("ui-dialog-dragging"),i._unblockFrames(),i._trigger("dragStop",s,t(n))}})},_makeResizable:function(){function t(e){return{originalPosition:e.originalPosition,originalSize:e.originalSize,position:e.position,size:e.size}}var i=this,a=this.options,s=a.resizable,n=this.uiDialog.css("position"),r="string"==typeof s?s:"n,e,s,w,se,sw,ne,nw";this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:a.maxWidth,maxHeight:a.maxHeight,minWidth:a.minWidth,minHeight:this._minHeight(),handles:r,start:function(a,s){e(this).addClass("ui-dialog-resizing"),i._blockFrames(),i._trigger("resizeStart",a,t(s))},resize:function(e,a){i._trigger("resize",e,t(a))},stop:function(s,n){a.height=e(this).height(),a.width=e(this).width(),e(this).removeClass("ui-dialog-resizing"),i._unblockFrames(),i._trigger("resizeStop",s,t(n))}}).css("position",n)},_minHeight:function(){var e=this.options;return"auto"===e.height?e.minHeight:Math.min(e.minHeight,e.height)},_position:function(){var e=this.uiDialog.is(":visible");e||this.uiDialog.show(),this.uiDialog.position(this.options.position),e||this.uiDialog.hide()},_setOptions:function(a){var s=this,n=!1,r={};e.each(a,function(e,a){s._setOption(e,a),e in t&&(n=!0),e in i&&(r[e]=a)}),n&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",r)},_setOption:function(e,t){var i,a,s=this.uiDialog;"dialogClass"===e&&s.removeClass(this.options.dialogClass).addClass(t),"disabled"!==e&&(this._super(e,t),"appendTo"===e&&this.uiDialog.appendTo(this._appendTo()),"buttons"===e&&this._createButtons(),"closeText"===e&&this.uiDialogTitlebarClose.button({label:""+t}),"draggable"===e&&(i=s.is(":data(ui-draggable)"),i&&!t&&s.draggable("destroy"),!i&&t&&this._makeDraggable()),"position"===e&&this._position(),"resizable"===e&&(a=s.is(":data(ui-resizable)"),a&&!t&&s.resizable("destroy"),a&&"string"==typeof t&&s.resizable("option","handles",t),a||t===!1||this._makeResizable()),"title"===e&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var e,t,i,a=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),a.minWidth>a.width&&(a.width=a.minWidth),e=this.uiDialog.css({height:"auto",width:a.width}).outerHeight(),t=Math.max(0,a.minHeight-e),i="number"==typeof a.maxHeight?Math.max(0,a.maxHeight-e):"none","auto"===a.height?this.element.css({minHeight:t,maxHeight:i,height:"auto"}):this.element.height(Math.max(0,a.height-e)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map(function(){var t=e(this);return e("<div>").css({position:"absolute",width:t.outerWidth(),height:t.outerHeight()}).appendTo(t.parent()).offset(t.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(t){return e(t.target).closest(".ui-dialog").length?!0:!!e(t.target).closest(".ui-datepicker").length},_createOverlay:function(){if(this.options.modal){var t=this,i=this.widgetFullName;e.ui.dialog.overlayInstances||this._delay(function(){e.ui.dialog.overlayInstances&&this.document.bind("focusin.dialog",function(a){t._allowInteraction(a)||(a.preventDefault(),e(".ui-dialog:visible:last .ui-dialog-content").data(i)._focusTabbable())})}),this.overlay=e("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo()),this._on(this.overlay,{mousedown:"_keepFocus"}),e.ui.dialog.overlayInstances++}},_destroyOverlay:function(){this.options.modal&&this.overlay&&(e.ui.dialog.overlayInstances--,e.ui.dialog.overlayInstances||this.document.unbind("focusin.dialog"),this.overlay.remove(),this.overlay=null)}}),e.ui.dialog.overlayInstances=0,e.uiBackCompat!==!1&&e.widget("ui.dialog",e.ui.dialog,{_position:function(){var t,i=this.options.position,a=[],s=[0,0];i?(("string"==typeof i||"object"==typeof i&&"0"in i)&&(a=i.split?i.split(" "):[i[0],i[1]],1===a.length&&(a[1]=a[0]),e.each(["left","top"],function(e,t){+a[e]===a[e]&&(s[e]=a[e],a[e]=t)}),i={my:a[0]+(0>s[0]?s[0]:"+"+s[0])+" "+a[1]+(0>s[1]?s[1]:"+"+s[1]),at:a.join(" ")}),i=e.extend({},e.ui.dialog.prototype.options.position,i)):i=e.ui.dialog.prototype.options.position,t=this.uiDialog.is(":visible"),t||this.uiDialog.show(),this.uiDialog.position(i),t||this.uiDialog.hide()}})})(jQuery);(function(t){t.widget("ui.menu",{version:"1.10.3",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-carat-1-e"},menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length).attr({role:this.options.role,tabIndex:0}).bind("click"+this.eventNamespace,t.proxy(function(t){this.options.disabled&&t.preventDefault()},this)),this.options.disabled&&this.element.addClass("ui-state-disabled").attr("aria-disabled","true"),this._on({"mousedown .ui-menu-item > a":function(t){t.preventDefault()},"click .ui-state-disabled > a":function(t){t.preventDefault()},"click .ui-menu-item:has(a)":function(e){var i=t(e.target).closest(".ui-menu-item");!this.mouseHandled&&i.not(".ui-state-disabled").length&&(this.mouseHandled=!0,this.select(e),i.has(".ui-menu").length?this.expand(e):this.element.is(":focus")||(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(e){var i=t(e.currentTarget);i.siblings().children(".ui-state-active").removeClass("ui-state-active"),this.focus(e,i)},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(t,e){var i=this.active||this.element.children(".ui-menu-item").eq(0);e||this.focus(t,i)},blur:function(e){this._delay(function(){t.contains(this.element[0],this.document[0].activeElement)||this.collapseAll(e)})},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(e){t(e.target).closest(".ui-menu").length||this.collapseAll(e),this.mouseHandled=!1}})},_destroy:function(){this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(),this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function(){var e=t(this);e.data("ui-menu-submenu-carat")&&e.remove()}),this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content")},_keydown:function(e){function i(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}var s,n,a,o,r,l=!0;switch(e.keyCode){case t.ui.keyCode.PAGE_UP:this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:this.nextPage(e);break;case t.ui.keyCode.HOME:this._move("first","first",e);break;case t.ui.keyCode.END:this._move("last","last",e);break;case t.ui.keyCode.UP:this.previous(e);break;case t.ui.keyCode.DOWN:this.next(e);break;case t.ui.keyCode.LEFT:this.collapse(e);break;case t.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:this._activate(e);break;case t.ui.keyCode.ESCAPE:this.collapse(e);break;default:l=!1,n=this.previousFilter||"",a=String.fromCharCode(e.keyCode),o=!1,clearTimeout(this.filterTimer),a===n?o=!0:a=n+a,r=RegExp("^"+i(a),"i"),s=this.activeMenu.children(".ui-menu-item").filter(function(){return r.test(t(this).children("a").text())}),s=o&&-1!==s.index(this.active.next())?this.active.nextAll(".ui-menu-item"):s,s.length||(a=String.fromCharCode(e.keyCode),r=RegExp("^"+i(a),"i"),s=this.activeMenu.children(".ui-menu-item").filter(function(){return r.test(t(this).children("a").text())})),s.length?(this.focus(e,s),s.length>1?(this.previousFilter=a,this.filterTimer=this._delay(function(){delete this.previousFilter},1e3)):delete this.previousFilter):delete this.previousFilter}l&&e.preventDefault()},_activate:function(t){this.active.is(".ui-state-disabled")||(this.active.children("a[aria-haspopup='true']").length?this.expand(t):this.select(t))},refresh:function(){var e,i=this.options.icons.submenu,s=this.element.find(this.options.menus);s.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each(function(){var e=t(this),s=e.prev("a"),n=t("<span>").addClass("ui-menu-icon ui-icon "+i).data("ui-menu-submenu-carat",!0);s.attr("aria-haspopup","true").prepend(n),e.attr("aria-labelledby",s.attr("id"))}),e=s.add(this.element),e.children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","presentation").children("a").uniqueId().addClass("ui-corner-all").attr({tabIndex:-1,role:this._itemRole()}),e.children(":not(.ui-menu-item)").each(function(){var e=t(this);/[^\-\u2014\u2013\s]/.test(e.text())||e.addClass("ui-widget-content ui-menu-divider")}),e.children(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!t.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(t,e){"icons"===t&&this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(e.submenu),this._super(t,e)},focus:function(t,e){var i,s;this.blur(t,t&&"focus"===t.type),this._scrollIntoView(e),this.active=e.first(),s=this.active.children("a").addClass("ui-state-focus"),this.options.role&&this.element.attr("aria-activedescendant",s.attr("id")),this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active"),t&&"keydown"===t.type?this._close():this.timer=this._delay(function(){this._close()},this.delay),i=e.children(".ui-menu"),i.length&&/^mouse/.test(t.type)&&this._startOpening(i),this.activeMenu=e.parent(),this._trigger("focus",t,{item:e})},_scrollIntoView:function(e){var i,s,n,a,o,r;this._hasScroll()&&(i=parseFloat(t.css(this.activeMenu[0],"borderTopWidth"))||0,s=parseFloat(t.css(this.activeMenu[0],"paddingTop"))||0,n=e.offset().top-this.activeMenu.offset().top-i-s,a=this.activeMenu.scrollTop(),o=this.activeMenu.height(),r=e.height(),0>n?this.activeMenu.scrollTop(a+n):n+r>o&&this.activeMenu.scrollTop(a+n-o+r))},blur:function(t,e){e||clearTimeout(this.timer),this.active&&(this.active.children("a").removeClass("ui-state-focus"),this.active=null,this._trigger("blur",t,{item:this.active}))},_startOpening:function(t){clearTimeout(this.timer),"true"===t.attr("aria-hidden")&&(this.timer=this._delay(function(){this._close(),this._open(t)},this.delay))},_open:function(e){var i=t.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden","true"),e.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(e,i){clearTimeout(this.timer),this.timer=this._delay(function(){var s=i?this.element:t(e&&e.target).closest(this.element.find(".ui-menu"));s.length||(s=this.element),this._close(s),this.blur(e),this.activeMenu=s},this.delay)},_close:function(t){t||(t=this.active?this.active.parent():this.element),t.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false").end().find("a.ui-state-active").removeClass("ui-state-active")},collapse:function(t){var e=this.active&&this.active.parent().closest(".ui-menu-item",this.element);e&&e.length&&(this._close(),this.focus(t,e))},expand:function(t){var e=this.active&&this.active.children(".ui-menu ").children(".ui-menu-item").first();e&&e.length&&(this._open(e.parent()),this._delay(function(){this.focus(t,e)}))},next:function(t){this._move("next","first",t)},previous:function(t){this._move("prev","last",t)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(t,e,i){var s;this.active&&(s="first"===t||"last"===t?this.active["first"===t?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[t+"All"](".ui-menu-item").eq(0)),s&&s.length&&this.active||(s=this.activeMenu.children(".ui-menu-item")[e]()),this.focus(i,s)},nextPage:function(e){var i,s,n;return this.active?(this.isLastItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.nextAll(".ui-menu-item").each(function(){return i=t(this),0>i.offset().top-s-n}),this.focus(e,i)):this.focus(e,this.activeMenu.children(".ui-menu-item")[this.active?"last":"first"]())),undefined):(this.next(e),undefined)},previousPage:function(e){var i,s,n;return this.active?(this.isFirstItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.prevAll(".ui-menu-item").each(function(){return i=t(this),i.offset().top-s+n>0}),this.focus(e,i)):this.focus(e,this.activeMenu.children(".ui-menu-item").first())),undefined):(this.next(e),undefined)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(e){this.active=this.active||t(e.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(e,!0),this._trigger("select",e,i)}})})(jQuery);(function(t,e){t.widget("ui.progressbar",{version:"1.10.3",options:{max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role:"progressbar","aria-valuemin":this.min}),this.valueDiv=t("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element),this._refreshValue()},_destroy:function(){this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.valueDiv.remove()},value:function(t){return t===e?this.options.value:(this.options.value=this._constrainedValue(t),this._refreshValue(),e)},_constrainedValue:function(t){return t===e&&(t=this.options.value),this.indeterminate=t===!1,"number"!=typeof t&&(t=0),this.indeterminate?!1:Math.min(this.options.max,Math.max(this.min,t))},_setOptions:function(t){var e=t.value;delete t.value,this._super(t),this.options.value=this._constrainedValue(e),this._refreshValue()},_setOption:function(t,e){"max"===t&&(e=Math.max(this.min,e)),this._super(t,e)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var e=this.options.value,i=this._percentage();this.valueDiv.toggle(this.indeterminate||e>this.min).toggleClass("ui-corner-right",e===this.options.max).width(i.toFixed(0)+"%"),this.element.toggleClass("ui-progressbar-indeterminate",this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=t("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":e}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),e===this.options.max&&this._trigger("complete")}})})(jQuery);(function(t){var e=5;t.widget("ui.slider",t.ui.mouse,{version:"1.10.3",widgetEventPrefix:"slide",options:{animate:!1,distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget"+" ui-widget-content"+" ui-corner-all"),this._refresh(),this._setOption("disabled",this.options.disabled),this._animateOff=!1},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var e,i,s=this.options,n=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),a="<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",o=[];for(i=s.values&&s.values.length||1,n.length>i&&(n.slice(i).remove(),n=n.slice(0,i)),e=n.length;i>e;e++)o.push(a);this.handles=n.add(t(o.join("")).appendTo(this.element)),this.handle=this.handles.eq(0),this.handles.each(function(e){t(this).data("ui-slider-handle-index",e)})},_createRange:function(){var e=this.options,i="";e.range?(e.range===!0&&(e.values?e.values.length&&2!==e.values.length?e.values=[e.values[0],e.values[0]]:t.isArray(e.values)&&(e.values=e.values.slice(0)):e.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({left:"",bottom:""}):(this.range=t("<div></div>").appendTo(this.element),i="ui-slider-range ui-widget-header ui-corner-all"),this.range.addClass(i+("min"===e.range||"max"===e.range?" ui-slider-range-"+e.range:""))):this.range=t([])},_setupEvents:function(){var t=this.handles.add(this.range).filter("a");this._off(t),this._on(t,this._handleEvents),this._hoverable(t),this._focusable(t)},_destroy:function(){this.handles.remove(),this.range.remove(),this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all"),this._mouseDestroy()},_mouseCapture:function(e){var i,s,n,a,o,r,l,h,u=this,c=this.options;return c.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:e.pageX,y:e.pageY},s=this._normValueFromMouse(i),n=this._valueMax()-this._valueMin()+1,this.handles.each(function(e){var i=Math.abs(s-u.values(e));(n>i||n===i&&(e===u._lastChangedValue||u.values(e)===c.min))&&(n=i,a=t(this),o=e)}),r=this._start(e,o),r===!1?!1:(this._mouseSliding=!0,this._handleIndex=o,a.addClass("ui-state-active").focus(),l=a.offset(),h=!t(e.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=h?{left:0,top:0}:{left:e.pageX-l.left-a.width()/2,top:e.pageY-l.top-a.height()/2-(parseInt(a.css("borderTopWidth"),10)||0)-(parseInt(a.css("borderBottomWidth"),10)||0)+(parseInt(a.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(e,o,s),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(t){var e={x:t.pageX,y:t.pageY},i=this._normValueFromMouse(e);return this._slide(t,this._handleIndex,i),!1},_mouseStop:function(t){return this.handles.removeClass("ui-state-active"),this._mouseSliding=!1,this._stop(t,this._handleIndex),this._change(t,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(t){var e,i,s,n,a;return"horizontal"===this.orientation?(e=this.elementSize.width,i=t.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(e=this.elementSize.height,i=t.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),s=i/e,s>1&&(s=1),0>s&&(s=0),"vertical"===this.orientation&&(s=1-s),n=this._valueMax()-this._valueMin(),a=this._valueMin()+s*n,this._trimAlignValue(a)},_start:function(t,e){var i={handle:this.handles[e],value:this.value()};return this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._trigger("start",t,i)},_slide:function(t,e,i){var s,n,a;this.options.values&&this.options.values.length?(s=this.values(e?0:1),2===this.options.values.length&&this.options.range===!0&&(0===e&&i>s||1===e&&s>i)&&(i=s),i!==this.values(e)&&(n=this.values(),n[e]=i,a=this._trigger("slide",t,{handle:this.handles[e],value:i,values:n}),s=this.values(e?0:1),a!==!1&&this.values(e,i,!0))):i!==this.value()&&(a=this._trigger("slide",t,{handle:this.handles[e],value:i}),a!==!1&&this.value(i))},_stop:function(t,e){var i={handle:this.handles[e],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._trigger("stop",t,i)},_change:function(t,e){if(!this._keySliding&&!this._mouseSliding){var i={handle:this.handles[e],value:this.value()};this.options.values&&this.options.values.length&&(i.value=this.values(e),i.values=this.values()),this._lastChangedValue=e,this._trigger("change",t,i)}},value:function(t){return arguments.length?(this.options.value=this._trimAlignValue(t),this._refreshValue(),this._change(null,0),undefined):this._value()},values:function(e,i){var s,n,a;if(arguments.length>1)return this.options.values[e]=this._trimAlignValue(i),this._refreshValue(),this._change(null,e),undefined;if(!arguments.length)return this._values();if(!t.isArray(arguments[0]))return this.options.values&&this.options.values.length?this._values(e):this.value();for(s=this.options.values,n=arguments[0],a=0;s.length>a;a+=1)s[a]=this._trimAlignValue(n[a]),this._change(null,a);this._refreshValue()},_setOption:function(e,i){var s,n=0;switch("range"===e&&this.options.range===!0&&("min"===i?(this.options.value=this._values(0),this.options.values=null):"max"===i&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),t.isArray(this.options.values)&&(n=this.options.values.length),t.Widget.prototype._setOption.apply(this,arguments),e){case"orientation":this._detectOrientation(),this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation),this._refreshValue();break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),s=0;n>s;s+=1)this._change(null,s);this._animateOff=!1;break;case"min":case"max":this._animateOff=!0,this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_value:function(){var t=this.options.value;return t=this._trimAlignValue(t)},_values:function(t){var e,i,s;if(arguments.length)return e=this.options.values[t],e=this._trimAlignValue(e);if(this.options.values&&this.options.values.length){for(i=this.options.values.slice(),s=0;i.length>s;s+=1)i[s]=this._trimAlignValue(i[s]);return i}return[]},_trimAlignValue:function(t){if(this._valueMin()>=t)return this._valueMin();if(t>=this._valueMax())return this._valueMax();var e=this.options.step>0?this.options.step:1,i=(t-this._valueMin())%e,s=t-i;return 2*Math.abs(i)>=e&&(s+=i>0?e:-e),parseFloat(s.toFixed(5))},_valueMin:function(){return this.options.min},_valueMax:function(){return this.options.max},_refreshValue:function(){var e,i,s,n,a,o=this.options.range,r=this.options,l=this,h=this._animateOff?!1:r.animate,u={};this.options.values&&this.options.values.length?this.handles.each(function(s){i=100*((l.values(s)-l._valueMin())/(l._valueMax()-l._valueMin())),u["horizontal"===l.orientation?"left":"bottom"]=i+"%",t(this).stop(1,1)[h?"animate":"css"](u,r.animate),l.options.range===!0&&("horizontal"===l.orientation?(0===s&&l.range.stop(1,1)[h?"animate":"css"]({left:i+"%"},r.animate),1===s&&l.range[h?"animate":"css"]({width:i-e+"%"},{queue:!1,duration:r.animate})):(0===s&&l.range.stop(1,1)[h?"animate":"css"]({bottom:i+"%"},r.animate),1===s&&l.range[h?"animate":"css"]({height:i-e+"%"},{queue:!1,duration:r.animate}))),e=i}):(s=this.value(),n=this._valueMin(),a=this._valueMax(),i=a!==n?100*((s-n)/(a-n)):0,u["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[h?"animate":"css"](u,r.animate),"min"===o&&"horizontal"===this.orientation&&this.range.stop(1,1)[h?"animate":"css"]({width:i+"%"},r.animate),"max"===o&&"horizontal"===this.orientation&&this.range[h?"animate":"css"]({width:100-i+"%"},{queue:!1,duration:r.animate}),"min"===o&&"vertical"===this.orientation&&this.range.stop(1,1)[h?"animate":"css"]({height:i+"%"},r.animate),"max"===o&&"vertical"===this.orientation&&this.range[h?"animate":"css"]({height:100-i+"%"},{queue:!1,duration:r.animate}))},_handleEvents:{keydown:function(i){var s,n,a,o,r=t(i.target).data("ui-slider-handle-index");switch(i.keyCode){case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(i.preventDefault(),!this._keySliding&&(this._keySliding=!0,t(i.target).addClass("ui-state-active"),s=this._start(i,r),s===!1))return}switch(o=this.options.step,n=a=this.options.values&&this.options.values.length?this.values(r):this.value(),i.keyCode){case t.ui.keyCode.HOME:a=this._valueMin();break;case t.ui.keyCode.END:a=this._valueMax();break;case t.ui.keyCode.PAGE_UP:a=this._trimAlignValue(n+(this._valueMax()-this._valueMin())/e);break;case t.ui.keyCode.PAGE_DOWN:a=this._trimAlignValue(n-(this._valueMax()-this._valueMin())/e);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:if(n===this._valueMax())return;a=this._trimAlignValue(n+o);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(n===this._valueMin())return;a=this._trimAlignValue(n-o)}this._slide(i,r,a)},click:function(t){t.preventDefault()},keyup:function(e){var i=t(e.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(e,i),this._change(e,i),t(e.target).removeClass("ui-state-active"))}}})})(jQuery);(function(t){function e(t){return function(){var e=this.element.val();t.apply(this,arguments),this._refresh(),e!==this.element.val()&&this._trigger("change")}}t.widget("ui.spinner",{version:"1.10.3",defaultElement:"<input>",widgetEventPrefix:"spin",options:{culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var e={},i=this.element;return t.each(["min","max","step"],function(t,s){var n=i.attr(s);void 0!==n&&n.length&&(e[s]=n)}),e},_events:{keydown:function(t){this._start(t)&&this._keydown(t)&&t.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(t){return this.cancelBlur?(delete this.cancelBlur,void 0):(this._stop(),this._refresh(),this.previous!==this.element.val()&&this._trigger("change",t),void 0)},mousewheel:function(t,e){if(e){if(!this.spinning&&!this._start(t))return!1;this._spin((e>0?1:-1)*this.options.step,t),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay(function(){this.spinning&&this._stop(t)},100),t.preventDefault()}},"mousedown .ui-spinner-button":function(e){function i(){var t=this.element[0]===this.document[0].activeElement;t||(this.element.focus(),this.previous=s,this._delay(function(){this.previous=s}))}var s;s=this.element[0]===this.document[0].activeElement?this.previous:this.element.val(),e.preventDefault(),i.call(this),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,i.call(this)}),this._start(e)!==!1&&this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(e){return t(e.currentTarget).hasClass("ui-state-active")?this._start(e)===!1?!1:(this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e),void 0):void 0},"mouseleave .ui-spinner-button":"_stop"},_draw:function(){var t=this.uiSpinner=this.element.addClass("ui-spinner-input").attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());this.element.attr("role","spinbutton"),this.buttons=t.find(".ui-spinner-button").attr("tabIndex",-1).button().removeClass("ui-corner-all"),this.buttons.height()>Math.ceil(.5*t.height())&&t.height()>0&&t.height(t.height()),this.options.disabled&&this.disable()},_keydown:function(e){var i=this.options,s=t.ui.keyCode;switch(e.keyCode){case s.UP:return this._repeat(null,1,e),!0;case s.DOWN:return this._repeat(null,-1,e),!0;case s.PAGE_UP:return this._repeat(null,i.page,e),!0;case s.PAGE_DOWN:return this._repeat(null,-i.page,e),!0}return!1},_uiSpinnerHtml:function(){return"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>"},_buttonHtml:function(){return"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon "+this.options.icons.up+"'>&#9650;</span>"+"</a>"+"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>"+"<span class='ui-icon "+this.options.icons.down+"'>&#9660;</span>"+"</a>"},_start:function(t){return this.spinning||this._trigger("start",t)!==!1?(this.counter||(this.counter=1),this.spinning=!0,!0):!1},_repeat:function(t,e,i){t=t||500,clearTimeout(this.timer),this.timer=this._delay(function(){this._repeat(40,e,i)},t),this._spin(e*this.options.step,i)},_spin:function(t,e){var i=this.value()||0;this.counter||(this.counter=1),i=this._adjustValue(i+t*this._increment(this.counter)),this.spinning&&this._trigger("spin",e,{value:i})===!1||(this._value(i),this.counter++)},_increment:function(e){var i=this.options.incremental;return i?t.isFunction(i)?i(e):Math.floor(e*e*e/5e4-e*e/500+17*e/200+1):1},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=""+t,i=e.indexOf(".");return-1===i?0:e.length-i-1},_adjustValue:function(t){var e,i,s=this.options;return e=null!==s.min?s.min:0,i=t-e,i=Math.round(i/s.step)*s.step,t=e+i,t=parseFloat(t.toFixed(this._precision())),null!==s.max&&t>s.max?s.max:null!==s.min&&s.min>t?s.min:t},_stop:function(t){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",t))},_setOption:function(t,e){if("culture"===t||"numberFormat"===t){var i=this._parse(this.element.val());return this.options[t]=e,this.element.val(this._format(i)),void 0}("max"===t||"min"===t||"step"===t)&&"string"==typeof e&&(e=this._parse(e)),"icons"===t&&(this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(e.up),this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(e.down)),this._super(t,e),"disabled"===t&&(e?(this.element.prop("disabled",!0),this.buttons.button("disable")):(this.element.prop("disabled",!1),this.buttons.button("enable")))},_setOptions:e(function(t){this._super(t),this._value(this.element.val())}),_parse:function(t){return"string"==typeof t&&""!==t&&(t=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(t,10,this.options.culture):+t),""===t||isNaN(t)?null:t},_format:function(t){return""===t?"":window.Globalize&&this.options.numberFormat?Globalize.format(t,this.options.numberFormat,this.options.culture):t},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},_value:function(t,e){var i;""!==t&&(i=this._parse(t),null!==i&&(e||(i=this._adjustValue(i)),t=this._format(i))),this.element.val(t),this._refresh()},_destroy:function(){this.element.removeClass("ui-spinner-input").prop("disabled",!1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:e(function(t){this._stepUp(t)}),_stepUp:function(t){this._start()&&(this._spin((t||1)*this.options.step),this._stop())},stepDown:e(function(t){this._stepDown(t)}),_stepDown:function(t){this._start()&&(this._spin((t||1)*-this.options.step),this._stop())},pageUp:e(function(t){this._stepUp((t||1)*this.options.page)}),pageDown:e(function(t){this._stepDown((t||1)*this.options.page)}),value:function(t){return arguments.length?(e(this._value).call(this,t),void 0):this._parse(this.element.val())},widget:function(){return this.uiSpinner}})})(jQuery);(function(t,e){function i(){return++n}function s(t){return t.hash.length>1&&decodeURIComponent(t.href.replace(a,""))===decodeURIComponent(location.href.replace(a,""))}var n=0,a=/#.*$/;t.widget("ui.tabs",{version:"1.10.3",delay:300,options:{active:null,collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_create:function(){var e=this,i=this.options;this.running=!1,this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible",i.collapsible).delegate(".ui-tabs-nav > li","mousedown"+this.eventNamespace,function(e){t(this).is(".ui-state-disabled")&&e.preventDefault()}).delegate(".ui-tabs-anchor","focus"+this.eventNamespace,function(){t(this).closest("li").is(".ui-state-disabled")&&this.blur()}),this._processTabs(),i.active=this._initialActive(),t.isArray(i.disabled)&&(i.disabled=t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"),function(t){return e.tabs.index(t)}))).sort()),this.active=this.options.active!==!1&&this.anchors.length?this._findActive(i.active):t(),this._refresh(),this.active.length&&this.load(i.active)},_initialActive:function(){var i=this.options.active,s=this.options.collapsible,n=location.hash.substring(1);return null===i&&(n&&this.tabs.each(function(s,a){return t(a).attr("aria-controls")===n?(i=s,!1):e}),null===i&&(i=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),(null===i||-1===i)&&(i=this.tabs.length?0:!1)),i!==!1&&(i=this.tabs.index(this.tabs.eq(i)),-1===i&&(i=s?!1:0)),!s&&i===!1&&this.anchors.length&&(i=0),i},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):t()}},_tabKeydown:function(i){var s=t(this.document[0].activeElement).closest("li"),n=this.tabs.index(s),a=!0;if(!this._handlePageNav(i)){switch(i.keyCode){case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:n++;break;case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:a=!1,n--;break;case t.ui.keyCode.END:n=this.anchors.length-1;break;case t.ui.keyCode.HOME:n=0;break;case t.ui.keyCode.SPACE:return i.preventDefault(),clearTimeout(this.activating),this._activate(n),e;case t.ui.keyCode.ENTER:return i.preventDefault(),clearTimeout(this.activating),this._activate(n===this.options.active?!1:n),e;default:return}i.preventDefault(),clearTimeout(this.activating),n=this._focusNextTab(n,a),i.ctrlKey||(s.attr("aria-selected","false"),this.tabs.eq(n).attr("aria-selected","true"),this.activating=this._delay(function(){this.option("active",n)},this.delay))}},_panelKeydown:function(e){this._handlePageNav(e)||e.ctrlKey&&e.keyCode===t.ui.keyCode.UP&&(e.preventDefault(),this.active.focus())},_handlePageNav:function(i){return i.altKey&&i.keyCode===t.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):i.altKey&&i.keyCode===t.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):e},_findNextTab:function(e,i){function s(){return e>n&&(e=0),0>e&&(e=n),e}for(var n=this.tabs.length-1;-1!==t.inArray(s(),this.options.disabled);)e=i?e+1:e-1;return e},_focusNextTab:function(t,e){return t=this._findNextTab(t,e),this.tabs.eq(t).focus(),t},_setOption:function(t,i){return"active"===t?(this._activate(i),e):"disabled"===t?(this._setupDisabled(i),e):(this._super(t,i),"collapsible"===t&&(this.element.toggleClass("ui-tabs-collapsible",i),i||this.options.active!==!1||this._activate(0)),"event"===t&&this._setupEvents(i),"heightStyle"===t&&this._setupHeightStyle(i),e)},_tabId:function(t){return t.attr("aria-controls")||"ui-tabs-"+i()},_sanitizeSelector:function(t){return t?t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var e=this.options,i=this.tablist.children(":has(a[href])");e.disabled=t.map(i.filter(".ui-state-disabled"),function(t){return i.index(t)}),this._processTabs(),e.active!==!1&&this.anchors.length?this.active.length&&!t.contains(this.tablist[0],this.active[0])?this.tabs.length===e.disabled.length?(e.active=!1,this.active=t()):this._activate(this._findNextTab(Math.max(0,e.active-1),!1)):e.active=this.tabs.index(this.active):(e.active=!1,this.active=t()),this._refresh()},_refresh:function(){this._setupDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-expanded":"false","aria-hidden":"true"}),this.active.length?(this.active.addClass("ui-tabs-active ui-state-active").attr({"aria-selected":"true",tabIndex:0}),this._getPanelForTab(this.active).show().attr({"aria-expanded":"true","aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var e=this;this.tablist=this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role","tablist"),this.tabs=this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({role:"tab",tabIndex:-1}),this.anchors=this.tabs.map(function(){return t("a",this)[0]}).addClass("ui-tabs-anchor").attr({role:"presentation",tabIndex:-1}),this.panels=t(),this.anchors.each(function(i,n){var a,o,r,h=t(n).uniqueId().attr("id"),l=t(n).closest("li"),c=l.attr("aria-controls");s(n)?(a=n.hash,o=e.element.find(e._sanitizeSelector(a))):(r=e._tabId(l),a="#"+r,o=e.element.find(a),o.length||(o=e._createPanel(r),o.insertAfter(e.panels[i-1]||e.tablist)),o.attr("aria-live","polite")),o.length&&(e.panels=e.panels.add(o)),c&&l.data("ui-tabs-aria-controls",c),l.attr({"aria-controls":a.substring(1),"aria-labelledby":h}),o.attr("aria-labelledby",h)}),this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role","tabpanel")},_getList:function(){return this.element.find("ol,ul").eq(0)},_createPanel:function(e){return t("<div>").attr("id",e).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",!0)},_setupDisabled:function(e){t.isArray(e)&&(e.length?e.length===this.anchors.length&&(e=!0):e=!1);for(var i,s=0;i=this.tabs[s];s++)e===!0||-1!==t.inArray(s,e)?t(i).addClass("ui-state-disabled").attr("aria-disabled","true"):t(i).removeClass("ui-state-disabled").removeAttr("aria-disabled");this.options.disabled=e},_setupEvents:function(e){var i={click:function(t){t.preventDefault()}};e&&t.each(e.split(" "),function(t,e){i[e]="_eventHandler"}),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(this.anchors,i),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(e){var i,s=this.element.parent();"fill"===e?(i=s.height(),i-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each(function(){var e=t(this),s=e.css("position");"absolute"!==s&&"fixed"!==s&&(i-=e.outerHeight(!0))}),this.element.children().not(this.panels).each(function(){i-=t(this).outerHeight(!0)}),this.panels.each(function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))}).css("overflow","auto")):"auto"===e&&(i=0,this.panels.each(function(){i=Math.max(i,t(this).height("").height())}).height(i))},_eventHandler:function(e){var i=this.options,s=this.active,n=t(e.currentTarget),a=n.closest("li"),o=a[0]===s[0],r=o&&i.collapsible,h=r?t():this._getPanelForTab(a),l=s.length?this._getPanelForTab(s):t(),c={oldTab:s,oldPanel:l,newTab:r?t():a,newPanel:h};e.preventDefault(),a.hasClass("ui-state-disabled")||a.hasClass("ui-tabs-loading")||this.running||o&&!i.collapsible||this._trigger("beforeActivate",e,c)===!1||(i.active=r?!1:this.tabs.index(a),this.active=o?t():a,this.xhr&&this.xhr.abort(),l.length||h.length||t.error("jQuery UI Tabs: Mismatching fragment identifier."),h.length&&this.load(this.tabs.index(a),e),this._toggle(e,c))},_toggle:function(e,i){function s(){a.running=!1,a._trigger("activate",e,i)}function n(){i.newTab.closest("li").addClass("ui-tabs-active ui-state-active"),o.length&&a.options.show?a._show(o,a.options.show,s):(o.show(),s())}var a=this,o=i.newPanel,r=i.oldPanel;this.running=!0,r.length&&this.options.hide?this._hide(r,this.options.hide,function(){i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),n()}):(i.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),r.hide(),n()),r.attr({"aria-expanded":"false","aria-hidden":"true"}),i.oldTab.attr("aria-selected","false"),o.length&&r.length?i.oldTab.attr("tabIndex",-1):o.length&&this.tabs.filter(function(){return 0===t(this).attr("tabIndex")}).attr("tabIndex",-1),o.attr({"aria-expanded":"true","aria-hidden":"false"}),i.newTab.attr({"aria-selected":"true",tabIndex:0})},_activate:function(e){var i,s=this._findActive(e);s[0]!==this.active[0]&&(s.length||(s=this.active),i=s.find(".ui-tabs-anchor")[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return e===!1?t():this.tabs.eq(e)},_getIndex:function(t){return"string"==typeof t&&(t=this.anchors.index(this.anchors.filter("[href$='"+t+"']"))),t},_destroy:function(){this.xhr&&this.xhr.abort(),this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"),this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"),this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId(),this.tabs.add(this.panels).each(function(){t.data(this,"ui-tabs-destroy")?t(this).remove():t(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role")}),this.tabs.each(function(){var e=t(this),i=e.data("ui-tabs-aria-controls");i?e.attr("aria-controls",i).removeData("ui-tabs-aria-controls"):e.removeAttr("aria-controls")}),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(i){var s=this.options.disabled;s!==!1&&(i===e?s=!1:(i=this._getIndex(i),s=t.isArray(s)?t.map(s,function(t){return t!==i?t:null}):t.map(this.tabs,function(t,e){return e!==i?e:null})),this._setupDisabled(s))},disable:function(i){var s=this.options.disabled;if(s!==!0){if(i===e)s=!0;else{if(i=this._getIndex(i),-1!==t.inArray(i,s))return;s=t.isArray(s)?t.merge([i],s).sort():[i]}this._setupDisabled(s)}},load:function(e,i){e=this._getIndex(e);var n=this,a=this.tabs.eq(e),o=a.find(".ui-tabs-anchor"),r=this._getPanelForTab(a),h={tab:a,panel:r};s(o[0])||(this.xhr=t.ajax(this._ajaxSettings(o,i,h)),this.xhr&&"canceled"!==this.xhr.statusText&&(a.addClass("ui-tabs-loading"),r.attr("aria-busy","true"),this.xhr.success(function(t){setTimeout(function(){r.html(t),n._trigger("load",i,h)},1)}).complete(function(t,e){setTimeout(function(){"abort"===e&&n.panels.stop(!1,!0),a.removeClass("ui-tabs-loading"),r.removeAttr("aria-busy"),t===n.xhr&&delete n.xhr},1)})))},_ajaxSettings:function(e,i,s){var n=this;return{url:e.attr("href"),beforeSend:function(e,a){return n._trigger("beforeLoad",i,t.extend({jqXHR:e,ajaxSettings:a},s))}}},_getPanelForTab:function(e){var i=t(e).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+i))}})})(jQuery);(function(t){function e(e,i){var s=(e.attr("aria-describedby")||"").split(/\s+/);s.push(i),e.data("ui-tooltip-id",i).attr("aria-describedby",t.trim(s.join(" ")))}function i(e){var i=e.data("ui-tooltip-id"),s=(e.attr("aria-describedby")||"").split(/\s+/),n=t.inArray(i,s);-1!==n&&s.splice(n,1),e.removeData("ui-tooltip-id"),s=t.trim(s.join(" ")),s?e.attr("aria-describedby",s):e.removeAttr("aria-describedby")}var s=0;t.widget("ui.tooltip",{version:"1.10.3",options:{content:function(){var e=t(this).attr("title")||"";return t("<a>").text(e).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,tooltipClass:null,track:!1,close:null,open:null},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.options.disabled&&this._disable()},_setOption:function(e,i){var s=this;return"disabled"===e?(this[i?"_disable":"_enable"](),this.options[e]=i,void 0):(this._super(e,i),"content"===e&&t.each(this.tooltips,function(t,e){s._updateContent(e)}),void 0)},_disable:function(){var e=this;t.each(this.tooltips,function(i,s){var n=t.Event("blur");n.target=n.currentTarget=s[0],e.close(n,!0)}),this.element.find(this.options.items).addBack().each(function(){var e=t(this);e.is("[title]")&&e.data("ui-tooltip-title",e.attr("title")).attr("title","")})},_enable:function(){this.element.find(this.options.items).addBack().each(function(){var e=t(this);e.data("ui-tooltip-title")&&e.attr("title",e.data("ui-tooltip-title"))})},open:function(e){var i=this,s=t(e?e.target:this.element).closest(this.options.items);s.length&&!s.data("ui-tooltip-id")&&(s.attr("title")&&s.data("ui-tooltip-title",s.attr("title")),s.data("ui-tooltip-open",!0),e&&"mouseover"===e.type&&s.parents().each(function(){var e,s=t(this);s.data("ui-tooltip-open")&&(e=t.Event("blur"),e.target=e.currentTarget=this,i.close(e,!0)),s.attr("title")&&(s.uniqueId(),i.parents[this.id]={element:this,title:s.attr("title")},s.attr("title",""))}),this._updateContent(s,e))},_updateContent:function(t,e){var i,s=this.options.content,n=this,o=e?e.type:null;return"string"==typeof s?this._open(e,t,s):(i=s.call(t[0],function(i){t.data("ui-tooltip-open")&&n._delay(function(){e&&(e.type=o),this._open(e,t,i)})}),i&&this._open(e,t,i),void 0)},_open:function(i,s,n){function o(t){l.of=t,a.is(":hidden")||a.position(l)}var a,r,h,l=t.extend({},this.options.position);if(n){if(a=this._find(s),a.length)return a.find(".ui-tooltip-content").html(n),void 0;s.is("[title]")&&(i&&"mouseover"===i.type?s.attr("title",""):s.removeAttr("title")),a=this._tooltip(s),e(s,a.attr("id")),a.find(".ui-tooltip-content").html(n),this.options.track&&i&&/^mouse/.test(i.type)?(this._on(this.document,{mousemove:o}),o(i)):a.position(t.extend({of:s},this.options.position)),a.hide(),this._show(a,this.options.show),this.options.show&&this.options.show.delay&&(h=this.delayedShow=setInterval(function(){a.is(":visible")&&(o(l.of),clearInterval(h))},t.fx.interval)),this._trigger("open",i,{tooltip:a}),r={keyup:function(e){if(e.keyCode===t.ui.keyCode.ESCAPE){var i=t.Event(e);i.currentTarget=s[0],this.close(i,!0)}},remove:function(){this._removeTooltip(a)}},i&&"mouseover"!==i.type||(r.mouseleave="close"),i&&"focusin"!==i.type||(r.focusout="close"),this._on(!0,s,r)}},close:function(e){var s=this,n=t(e?e.currentTarget:this.element),o=this._find(n);this.closing||(clearInterval(this.delayedShow),n.data("ui-tooltip-title")&&n.attr("title",n.data("ui-tooltip-title")),i(n),o.stop(!0),this._hide(o,this.options.hide,function(){s._removeTooltip(t(this))}),n.removeData("ui-tooltip-open"),this._off(n,"mouseleave focusout keyup"),n[0]!==this.element[0]&&this._off(n,"remove"),this._off(this.document,"mousemove"),e&&"mouseleave"===e.type&&t.each(this.parents,function(e,i){t(i.element).attr("title",i.title),delete s.parents[e]}),this.closing=!0,this._trigger("close",e,{tooltip:o}),this.closing=!1)},_tooltip:function(e){var i="ui-tooltip-"+s++,n=t("<div>").attr({id:i,role:"tooltip"}).addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content "+(this.options.tooltipClass||""));return t("<div>").addClass("ui-tooltip-content").appendTo(n),n.appendTo(this.document[0].body),this.tooltips[i]=e,n},_find:function(e){var i=e.data("ui-tooltip-id");return i?t("#"+i):t()},_removeTooltip:function(t){t.remove(),delete this.tooltips[t.attr("id")]},_destroy:function(){var e=this;t.each(this.tooltips,function(i,s){var n=t.Event("blur");n.target=n.currentTarget=s[0],e.close(n,!0),t("#"+i).remove(),s.data("ui-tooltip-title")&&(s.attr("title",s.data("ui-tooltip-title")),s.removeData("ui-tooltip-title"))})}})})(jQuery);(function(t,e){var i="ui-effects-";t.effects={effect:{}},function(t,e){function i(t,e,i){var s=u[e.type]||{};return null==t?i||!e.def?null:e.def:(t=s.floor?~~t:parseFloat(t),isNaN(t)?e.def:s.mod?(t+s.mod)%s.mod:0>t?0:t>s.max?s.max:t)}function s(i){var s=h(),n=s._rgba=[];return i=i.toLowerCase(),f(l,function(t,a){var o,r=a.re.exec(i),l=r&&a.parse(r),h=a.space||"rgba";return l?(o=s[h](l),s[c[h].cache]=o[c[h].cache],n=s._rgba=o._rgba,!1):e}),n.length?("0,0,0,0"===n.join()&&t.extend(n,a.transparent),s):a[i]}function n(t,e,i){return i=(i+1)%1,1>6*i?t+6*(e-t)*i:1>2*i?e:2>3*i?t+6*(e-t)*(2/3-i):t}var a,o="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",r=/^([\-+])=\s*(\d+\.?\d*)/,l=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],h=t.Color=function(e,i,s,n){return new t.Color.fn.parse(e,i,s,n)},c={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},u={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},d=h.support={},p=t("<p>")[0],f=t.each;p.style.cssText="background-color:rgba(1,1,1,.5)",d.rgba=p.style.backgroundColor.indexOf("rgba")>-1,f(c,function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}}),h.fn=t.extend(h.prototype,{parse:function(n,o,r,l){if(n===e)return this._rgba=[null,null,null,null],this;(n.jquery||n.nodeType)&&(n=t(n).css(o),o=e);var u=this,d=t.type(n),p=this._rgba=[];return o!==e&&(n=[n,o,r,l],d="array"),"string"===d?this.parse(s(n)||a._default):"array"===d?(f(c.rgba.props,function(t,e){p[e.idx]=i(n[e.idx],e)}),this):"object"===d?(n instanceof h?f(c,function(t,e){n[e.cache]&&(u[e.cache]=n[e.cache].slice())}):f(c,function(e,s){var a=s.cache;f(s.props,function(t,e){if(!u[a]&&s.to){if("alpha"===t||null==n[t])return;u[a]=s.to(u._rgba)}u[a][e.idx]=i(n[t],e,!0)}),u[a]&&0>t.inArray(null,u[a].slice(0,3))&&(u[a][3]=1,s.from&&(u._rgba=s.from(u[a])))}),this):e},is:function(t){var i=h(t),s=!0,n=this;return f(c,function(t,a){var o,r=i[a.cache];return r&&(o=n[a.cache]||a.to&&a.to(n._rgba)||[],f(a.props,function(t,i){return null!=r[i.idx]?s=r[i.idx]===o[i.idx]:e})),s}),s},_space:function(){var t=[],e=this;return f(c,function(i,s){e[s.cache]&&t.push(i)}),t.pop()},transition:function(t,e){var s=h(t),n=s._space(),a=c[n],o=0===this.alpha()?h("transparent"):this,r=o[a.cache]||a.to(o._rgba),l=r.slice();return s=s[a.cache],f(a.props,function(t,n){var a=n.idx,o=r[a],h=s[a],c=u[n.type]||{};null!==h&&(null===o?l[a]=h:(c.mod&&(h-o>c.mod/2?o+=c.mod:o-h>c.mod/2&&(o-=c.mod)),l[a]=i((h-o)*e+o,n)))}),this[n](l)},blend:function(e){if(1===this._rgba[3])return this;var i=this._rgba.slice(),s=i.pop(),n=h(e)._rgba;return h(t.map(i,function(t,e){return(1-s)*n[e]+s*t}))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,function(t,e){return null==t?e>2?1:0:t});return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),function(t,e){return null==t&&(t=e>2?1:0),e&&3>e&&(t=Math.round(100*t)+"%"),t});return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),s=i.pop();return e&&i.push(~~(255*s)),"#"+t.map(i,function(t){return t=(t||0).toString(16),1===t.length?"0"+t:t}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),h.fn.parse.prototype=h.fn,c.hsla.to=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,i,s=t[0]/255,n=t[1]/255,a=t[2]/255,o=t[3],r=Math.max(s,n,a),l=Math.min(s,n,a),h=r-l,c=r+l,u=.5*c;return e=l===r?0:s===r?60*(n-a)/h+360:n===r?60*(a-s)/h+120:60*(s-n)/h+240,i=0===h?0:.5>=u?h/c:h/(2-c),[Math.round(e)%360,i,u,null==o?1:o]},c.hsla.from=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,i=t[1],s=t[2],a=t[3],o=.5>=s?s*(1+i):s+i-s*i,r=2*s-o;return[Math.round(255*n(r,o,e+1/3)),Math.round(255*n(r,o,e)),Math.round(255*n(r,o,e-1/3)),a]},f(c,function(s,n){var a=n.props,o=n.cache,l=n.to,c=n.from;h.fn[s]=function(s){if(l&&!this[o]&&(this[o]=l(this._rgba)),s===e)return this[o].slice();var n,r=t.type(s),u="array"===r||"object"===r?s:arguments,d=this[o].slice();return f(a,function(t,e){var s=u["object"===r?t:e.idx];null==s&&(s=d[e.idx]),d[e.idx]=i(s,e)}),c?(n=h(c(d)),n[o]=d,n):h(d)},f(a,function(e,i){h.fn[e]||(h.fn[e]=function(n){var a,o=t.type(n),l="alpha"===e?this._hsla?"hsla":"rgba":s,h=this[l](),c=h[i.idx];return"undefined"===o?c:("function"===o&&(n=n.call(this,c),o=t.type(n)),null==n&&i.empty?this:("string"===o&&(a=r.exec(n),a&&(n=c+parseFloat(a[2])*("+"===a[1]?1:-1))),h[i.idx]=n,this[l](h)))})})}),h.hook=function(e){var i=e.split(" ");f(i,function(e,i){t.cssHooks[i]={set:function(e,n){var a,o,r="";if("transparent"!==n&&("string"!==t.type(n)||(a=s(n)))){if(n=h(a||n),!d.rgba&&1!==n._rgba[3]){for(o="backgroundColor"===i?e.parentNode:e;(""===r||"transparent"===r)&&o&&o.style;)try{r=t.css(o,"backgroundColor"),o=o.parentNode}catch(l){}n=n.blend(r&&"transparent"!==r?r:"_default")}n=n.toRgbaString()}try{e.style[i]=n}catch(l){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=h(e.elem,i),e.end=h(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}})},h.hook(o),t.cssHooks.borderColor={expand:function(t){var e={};return f(["Top","Right","Bottom","Left"],function(i,s){e["border"+s+"Color"]=t}),e}},a=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(jQuery),function(){function i(e){var i,s,n=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,a={};if(n&&n.length&&n[0]&&n[n[0]])for(s=n.length;s--;)i=n[s],"string"==typeof n[i]&&(a[t.camelCase(i)]=n[i]);else for(i in n)"string"==typeof n[i]&&(a[i]=n[i]);return a}function s(e,i){var s,n,o={};for(s in i)n=i[s],e[s]!==n&&(a[s]||(t.fx.step[s]||!isNaN(parseFloat(n)))&&(o[s]=n));return o}var n=["add","remove","toggle"],a={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(e,i){t.fx.step[i]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(jQuery.style(t.elem,i,t.end),t.setAttr=!0)}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(e,a,o,r){var l=t.speed(a,o,r);return this.queue(function(){var a,o=t(this),r=o.attr("class")||"",h=l.children?o.find("*").addBack():o;h=h.map(function(){var e=t(this);return{el:e,start:i(this)}}),a=function(){t.each(n,function(t,i){e[i]&&o[i+"Class"](e[i])})},a(),h=h.map(function(){return this.end=i(this.el[0]),this.diff=s(this.start,this.end),this}),o.attr("class",r),h=h.map(function(){var e=this,i=t.Deferred(),s=t.extend({},l,{queue:!1,complete:function(){i.resolve(e)}});return this.el.animate(this.diff,s),i.promise()}),t.when.apply(t,h.get()).done(function(){a(),t.each(arguments,function(){var e=this.el;t.each(this.diff,function(t){e.css(t,"")})}),l.complete.call(o[0])})})},t.fn.extend({addClass:function(e){return function(i,s,n,a){return s?t.effects.animateClass.call(this,{add:i},s,n,a):e.apply(this,arguments)}}(t.fn.addClass),removeClass:function(e){return function(i,s,n,a){return arguments.length>1?t.effects.animateClass.call(this,{remove:i},s,n,a):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(i){return function(s,n,a,o,r){return"boolean"==typeof n||n===e?a?t.effects.animateClass.call(this,n?{add:s}:{remove:s},a,o,r):i.apply(this,arguments):t.effects.animateClass.call(this,{toggle:s},n,a,o)}}(t.fn.toggleClass),switchClass:function(e,i,s,n,a){return t.effects.animateClass.call(this,{add:i,remove:e},s,n,a)}})}(),function(){function s(e,i,s,n){return t.isPlainObject(e)&&(i=e,e=e.effect),e={effect:e},null==i&&(i={}),t.isFunction(i)&&(n=i,s=null,i={}),("number"==typeof i||t.fx.speeds[i])&&(n=s,s=i,i={}),t.isFunction(s)&&(n=s,s=null),i&&t.extend(e,i),s=s||i.duration,e.duration=t.fx.off?0:"number"==typeof s?s:s in t.fx.speeds?t.fx.speeds[s]:t.fx.speeds._default,e.complete=n||i.complete,e}function n(e){return!e||"number"==typeof e||t.fx.speeds[e]?!0:"string"!=typeof e||t.effects.effect[e]?t.isFunction(e)?!0:"object"!=typeof e||e.effect?!1:!0:!0}t.extend(t.effects,{version:"1.10.3",save:function(t,e){for(var s=0;e.length>s;s++)null!==e[s]&&t.data(i+e[s],t[0].style[e[s]])},restore:function(t,s){var n,a;for(a=0;s.length>a;a++)null!==s[a]&&(n=t.data(i+s[a]),n===e&&(n=""),t.css(s[a],n))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},getBaseline:function(t,e){var i,s;switch(t[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=t[0]/e.height}switch(t[1]){case"left":s=0;break;case"center":s=.5;break;case"right":s=1;break;default:s=t[1]/e.width}return{x:s,y:i}},createWrapper:function(e){if(e.parent().is(".ui-effects-wrapper"))return e.parent();var i={width:e.outerWidth(!0),height:e.outerHeight(!0),"float":e.css("float")},s=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),n={width:e.width(),height:e.height()},a=document.activeElement;try{a.id}catch(o){a=document.body}return e.wrap(s),(e[0]===a||t.contains(e[0],a))&&t(a).focus(),s=e.parent(),"static"===e.css("position")?(s.css({position:"relative"}),e.css({position:"relative"})):(t.extend(i,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],function(t,s){i[s]=e.css(s),isNaN(parseInt(i[s],10))&&(i[s]="auto")}),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(n),s.css(i).show()},removeWrapper:function(e){var i=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===i||t.contains(e[0],i))&&t(i).focus()),e},setTransition:function(e,i,s,n){return n=n||{},t.each(i,function(t,i){var a=e.cssUnit(i);a[0]>0&&(n[i]=a[0]*s+a[1])}),n}}),t.fn.extend({effect:function(){function e(e){function s(){t.isFunction(a)&&a.call(n[0]),t.isFunction(e)&&e()}var n=t(this),a=i.complete,r=i.mode;(n.is(":hidden")?"hide"===r:"show"===r)?(n[r](),s()):o.call(n[0],i,s)}var i=s.apply(this,arguments),n=i.mode,a=i.queue,o=t.effects.effect[i.effect];return t.fx.off||!o?n?this[n](i.duration,i.complete):this.each(function(){i.complete&&i.complete.call(this)}):a===!1?this.each(e):this.queue(a||"fx",e)},show:function(t){return function(e){if(n(e))return t.apply(this,arguments);var i=s.apply(this,arguments);return i.mode="show",this.effect.call(this,i)}}(t.fn.show),hide:function(t){return function(e){if(n(e))return t.apply(this,arguments);var i=s.apply(this,arguments);return i.mode="hide",this.effect.call(this,i)}}(t.fn.hide),toggle:function(t){return function(e){if(n(e)||"boolean"==typeof e)return t.apply(this,arguments);var i=s.apply(this,arguments);return i.mode="toggle",this.effect.call(this,i)}}(t.fn.toggle),cssUnit:function(e){var i=this.css(e),s=[];return t.each(["em","px","%","pt"],function(t,e){i.indexOf(e)>0&&(s=[parseFloat(i),e])}),s}})}(),function(){var e={};t.each(["Quad","Cubic","Quart","Quint","Expo"],function(t,i){e[i]=function(e){return Math.pow(e,t+2)}}),t.extend(e,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,i=4;((e=Math.pow(2,--i))-1)/11>t;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(e,function(e,i){t.easing["easeIn"+e]=i,t.easing["easeOut"+e]=function(t){return 1-i(1-t)},t.easing["easeInOut"+e]=function(t){return.5>t?i(2*t)/2:1-i(-2*t+2)/2}})}()})(jQuery);(function(t){var e=/up|down|vertical/,i=/up|left|vertical|horizontal/;t.effects.effect.blind=function(s,n){var a,o,r,l=t(this),h=["position","top","bottom","left","right","height","width"],c=t.effects.setMode(l,s.mode||"hide"),u=s.direction||"up",d=e.test(u),p=d?"height":"width",f=d?"top":"left",g=i.test(u),m={},v="show"===c;l.parent().is(".ui-effects-wrapper")?t.effects.save(l.parent(),h):t.effects.save(l,h),l.show(),a=t.effects.createWrapper(l).css({overflow:"hidden"}),o=a[p](),r=parseFloat(a.css(f))||0,m[p]=v?o:0,g||(l.css(d?"bottom":"right",0).css(d?"top":"left","auto").css({position:"absolute"}),m[f]=v?r:o+r),v&&(a.css(p,0),g||a.css(f,r+o)),a.animate(m,{duration:s.duration,easing:s.easing,queue:!1,complete:function(){"hide"===c&&l.hide(),t.effects.restore(l,h),t.effects.removeWrapper(l),n()}})}})(jQuery);(function(t){t.effects.effect.bounce=function(e,i){var s,n,a,o=t(this),r=["position","top","bottom","left","right","height","width"],l=t.effects.setMode(o,e.mode||"effect"),h="hide"===l,c="show"===l,u=e.direction||"up",d=e.distance,p=e.times||5,f=2*p+(c||h?1:0),g=e.duration/f,m=e.easing,v="up"===u||"down"===u?"top":"left",_="up"===u||"left"===u,b=o.queue(),y=b.length;for((c||h)&&r.push("opacity"),t.effects.save(o,r),o.show(),t.effects.createWrapper(o),d||(d=o["top"===v?"outerHeight":"outerWidth"]()/3),c&&(a={opacity:1},a[v]=0,o.css("opacity",0).css(v,_?2*-d:2*d).animate(a,g,m)),h&&(d/=Math.pow(2,p-1)),a={},a[v]=0,s=0;p>s;s++)n={},n[v]=(_?"-=":"+=")+d,o.animate(n,g,m).animate(a,g,m),d=h?2*d:d/2;h&&(n={opacity:0},n[v]=(_?"-=":"+=")+d,o.animate(n,g,m)),o.queue(function(){h&&o.hide(),t.effects.restore(o,r),t.effects.removeWrapper(o),i()}),y>1&&b.splice.apply(b,[1,0].concat(b.splice(y,f+1))),o.dequeue()}})(jQuery);(function(t){t.effects.effect.clip=function(e,i){var s,n,a,o=t(this),r=["position","top","bottom","left","right","height","width"],l=t.effects.setMode(o,e.mode||"hide"),h="show"===l,c=e.direction||"vertical",u="vertical"===c,d=u?"height":"width",p=u?"top":"left",f={};t.effects.save(o,r),o.show(),s=t.effects.createWrapper(o).css({overflow:"hidden"}),n="IMG"===o[0].tagName?s:o,a=n[d](),h&&(n.css(d,0),n.css(p,a/2)),f[d]=h?a:0,f[p]=h?0:a/2,n.animate(f,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){h||o.hide(),t.effects.restore(o,r),t.effects.removeWrapper(o),i()}})}})(jQuery);(function(t){t.effects.effect.drop=function(e,i){var s,n=t(this),a=["position","top","bottom","left","right","opacity","height","width"],o=t.effects.setMode(n,e.mode||"hide"),r="show"===o,l=e.direction||"left",h="up"===l||"down"===l?"top":"left",c="up"===l||"left"===l?"pos":"neg",u={opacity:r?1:0};t.effects.save(n,a),n.show(),t.effects.createWrapper(n),s=e.distance||n["top"===h?"outerHeight":"outerWidth"](!0)/2,r&&n.css("opacity",0).css(h,"pos"===c?-s:s),u[h]=(r?"pos"===c?"+=":"-=":"pos"===c?"-=":"+=")+s,n.animate(u,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===o&&n.hide(),t.effects.restore(n,a),t.effects.removeWrapper(n),i()}})}})(jQuery);(function(t){t.effects.effect.explode=function(e,i){function s(){b.push(this),b.length===u*d&&n()}function n(){p.css({visibility:"visible"}),t(b).remove(),g||p.hide(),i()}var a,o,r,l,h,c,u=e.pieces?Math.round(Math.sqrt(e.pieces)):3,d=u,p=t(this),f=t.effects.setMode(p,e.mode||"hide"),g="show"===f,m=p.show().css("visibility","hidden").offset(),v=Math.ceil(p.outerWidth()/d),_=Math.ceil(p.outerHeight()/u),b=[];for(a=0;u>a;a++)for(l=m.top+a*_,c=a-(u-1)/2,o=0;d>o;o++)r=m.left+o*v,h=o-(d-1)/2,p.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-o*v,top:-a*_}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:v,height:_,left:r+(g?h*v:0),top:l+(g?c*_:0),opacity:g?0:1}).animate({left:r+(g?0:h*v),top:l+(g?0:c*_),opacity:g?1:0},e.duration||500,e.easing,s)}})(jQuery);(function(t){t.effects.effect.fade=function(e,i){var s=t(this),n=t.effects.setMode(s,e.mode||"toggle");s.animate({opacity:n},{queue:!1,duration:e.duration,easing:e.easing,complete:i})}})(jQuery);(function(t){t.effects.effect.fold=function(e,i){var s,n,a=t(this),o=["position","top","bottom","left","right","height","width"],r=t.effects.setMode(a,e.mode||"hide"),l="show"===r,h="hide"===r,c=e.size||15,u=/([0-9]+)%/.exec(c),d=!!e.horizFirst,p=l!==d,f=p?["width","height"]:["height","width"],g=e.duration/2,m={},v={};t.effects.save(a,o),a.show(),s=t.effects.createWrapper(a).css({overflow:"hidden"}),n=p?[s.width(),s.height()]:[s.height(),s.width()],u&&(c=parseInt(u[1],10)/100*n[h?0:1]),l&&s.css(d?{height:0,width:c}:{height:c,width:0}),m[f[0]]=l?n[0]:c,v[f[1]]=l?n[1]:0,s.animate(m,g,e.easing).animate(v,g,e.easing,function(){h&&a.hide(),t.effects.restore(a,o),t.effects.removeWrapper(a),i()})}})(jQuery);(function(t){t.effects.effect.highlight=function(e,i){var s=t(this),n=["backgroundImage","backgroundColor","opacity"],a=t.effects.setMode(s,e.mode||"show"),o={backgroundColor:s.css("backgroundColor")};"hide"===a&&(o.opacity=0),t.effects.save(s,n),s.show().css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(o,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===a&&s.hide(),t.effects.restore(s,n),i()}})}})(jQuery);(function(t){t.effects.effect.pulsate=function(e,i){var s,n=t(this),a=t.effects.setMode(n,e.mode||"show"),o="show"===a,r="hide"===a,l=o||"hide"===a,h=2*(e.times||5)+(l?1:0),c=e.duration/h,u=0,d=n.queue(),p=d.length;for((o||!n.is(":visible"))&&(n.css("opacity",0).show(),u=1),s=1;h>s;s++)n.animate({opacity:u},c,e.easing),u=1-u;n.animate({opacity:u},c,e.easing),n.queue(function(){r&&n.hide(),i()}),p>1&&d.splice.apply(d,[1,0].concat(d.splice(p,h+1))),n.dequeue()}})(jQuery);(function(t){t.effects.effect.puff=function(e,i){var s=t(this),n=t.effects.setMode(s,e.mode||"hide"),a="hide"===n,o=parseInt(e.percent,10)||150,r=o/100,l={height:s.height(),width:s.width(),outerHeight:s.outerHeight(),outerWidth:s.outerWidth()};t.extend(e,{effect:"scale",queue:!1,fade:!0,mode:n,complete:i,percent:a?o:100,from:a?l:{height:l.height*r,width:l.width*r,outerHeight:l.outerHeight*r,outerWidth:l.outerWidth*r}}),s.effect(e)},t.effects.effect.scale=function(e,i){var s=t(this),n=t.extend(!0,{},e),a=t.effects.setMode(s,e.mode||"effect"),o=parseInt(e.percent,10)||(0===parseInt(e.percent,10)?0:"hide"===a?0:100),r=e.direction||"both",l=e.origin,h={height:s.height(),width:s.width(),outerHeight:s.outerHeight(),outerWidth:s.outerWidth()},c={y:"horizontal"!==r?o/100:1,x:"vertical"!==r?o/100:1};n.effect="size",n.queue=!1,n.complete=i,"effect"!==a&&(n.origin=l||["middle","center"],n.restore=!0),n.from=e.from||("show"===a?{height:0,width:0,outerHeight:0,outerWidth:0}:h),n.to={height:h.height*c.y,width:h.width*c.x,outerHeight:h.outerHeight*c.y,outerWidth:h.outerWidth*c.x},n.fade&&("show"===a&&(n.from.opacity=0,n.to.opacity=1),"hide"===a&&(n.from.opacity=1,n.to.opacity=0)),s.effect(n)},t.effects.effect.size=function(e,i){var s,n,a,o=t(this),r=["position","top","bottom","left","right","width","height","overflow","opacity"],l=["position","top","bottom","left","right","overflow","opacity"],h=["width","height","overflow"],c=["fontSize"],u=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],d=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],p=t.effects.setMode(o,e.mode||"effect"),f=e.restore||"effect"!==p,g=e.scale||"both",m=e.origin||["middle","center"],v=o.css("position"),_=f?r:l,b={height:0,width:0,outerHeight:0,outerWidth:0};"show"===p&&o.show(),s={height:o.height(),width:o.width(),outerHeight:o.outerHeight(),outerWidth:o.outerWidth()},"toggle"===e.mode&&"show"===p?(o.from=e.to||b,o.to=e.from||s):(o.from=e.from||("show"===p?b:s),o.to=e.to||("hide"===p?b:s)),a={from:{y:o.from.height/s.height,x:o.from.width/s.width},to:{y:o.to.height/s.height,x:o.to.width/s.width}},("box"===g||"both"===g)&&(a.from.y!==a.to.y&&(_=_.concat(u),o.from=t.effects.setTransition(o,u,a.from.y,o.from),o.to=t.effects.setTransition(o,u,a.to.y,o.to)),a.from.x!==a.to.x&&(_=_.concat(d),o.from=t.effects.setTransition(o,d,a.from.x,o.from),o.to=t.effects.setTransition(o,d,a.to.x,o.to))),("content"===g||"both"===g)&&a.from.y!==a.to.y&&(_=_.concat(c).concat(h),o.from=t.effects.setTransition(o,c,a.from.y,o.from),o.to=t.effects.setTransition(o,c,a.to.y,o.to)),t.effects.save(o,_),o.show(),t.effects.createWrapper(o),o.css("overflow","hidden").css(o.from),m&&(n=t.effects.getBaseline(m,s),o.from.top=(s.outerHeight-o.outerHeight())*n.y,o.from.left=(s.outerWidth-o.outerWidth())*n.x,o.to.top=(s.outerHeight-o.to.outerHeight)*n.y,o.to.left=(s.outerWidth-o.to.outerWidth)*n.x),o.css(o.from),("content"===g||"both"===g)&&(u=u.concat(["marginTop","marginBottom"]).concat(c),d=d.concat(["marginLeft","marginRight"]),h=r.concat(u).concat(d),o.find("*[width]").each(function(){var i=t(this),s={height:i.height(),width:i.width(),outerHeight:i.outerHeight(),outerWidth:i.outerWidth()};f&&t.effects.save(i,h),i.from={height:s.height*a.from.y,width:s.width*a.from.x,outerHeight:s.outerHeight*a.from.y,outerWidth:s.outerWidth*a.from.x},i.to={height:s.height*a.to.y,width:s.width*a.to.x,outerHeight:s.height*a.to.y,outerWidth:s.width*a.to.x},a.from.y!==a.to.y&&(i.from=t.effects.setTransition(i,u,a.from.y,i.from),i.to=t.effects.setTransition(i,u,a.to.y,i.to)),a.from.x!==a.to.x&&(i.from=t.effects.setTransition(i,d,a.from.x,i.from),i.to=t.effects.setTransition(i,d,a.to.x,i.to)),i.css(i.from),i.animate(i.to,e.duration,e.easing,function(){f&&t.effects.restore(i,h)})})),o.animate(o.to,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){0===o.to.opacity&&o.css("opacity",o.from.opacity),"hide"===p&&o.hide(),t.effects.restore(o,_),f||("static"===v?o.css({position:"relative",top:o.to.top,left:o.to.left}):t.each(["top","left"],function(t,e){o.css(e,function(e,i){var s=parseInt(i,10),n=t?o.to.left:o.to.top;return"auto"===i?n+"px":s+n+"px"})})),t.effects.removeWrapper(o),i()}})}})(jQuery);(function(t){t.effects.effect.shake=function(e,i){var s,n=t(this),a=["position","top","bottom","left","right","height","width"],o=t.effects.setMode(n,e.mode||"effect"),r=e.direction||"left",l=e.distance||20,h=e.times||3,c=2*h+1,u=Math.round(e.duration/c),d="up"===r||"down"===r?"top":"left",p="up"===r||"left"===r,f={},g={},m={},v=n.queue(),_=v.length;for(t.effects.save(n,a),n.show(),t.effects.createWrapper(n),f[d]=(p?"-=":"+=")+l,g[d]=(p?"+=":"-=")+2*l,m[d]=(p?"-=":"+=")+2*l,n.animate(f,u,e.easing),s=1;h>s;s++)n.animate(g,u,e.easing).animate(m,u,e.easing);n.animate(g,u,e.easing).animate(f,u/2,e.easing).queue(function(){"hide"===o&&n.hide(),t.effects.restore(n,a),t.effects.removeWrapper(n),i()}),_>1&&v.splice.apply(v,[1,0].concat(v.splice(_,c+1))),n.dequeue()}})(jQuery);(function(t){t.effects.effect.slide=function(e,i){var s,n=t(this),a=["position","top","bottom","left","right","width","height"],o=t.effects.setMode(n,e.mode||"show"),r="show"===o,l=e.direction||"left",h="up"===l||"down"===l?"top":"left",c="up"===l||"left"===l,u={};t.effects.save(n,a),n.show(),s=e.distance||n["top"===h?"outerHeight":"outerWidth"](!0),t.effects.createWrapper(n).css({overflow:"hidden"}),r&&n.css(h,c?isNaN(s)?"-"+s:-s:s),u[h]=(r?c?"+=":"-=":c?"-=":"+=")+s,n.animate(u,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===o&&n.hide(),t.effects.restore(n,a),t.effects.removeWrapper(n),i()}})}})(jQuery);(function(t){t.effects.effect.transfer=function(e,i){var s=t(this),n=t(e.to),a="fixed"===n.css("position"),o=t("body"),r=a?o.scrollTop():0,l=a?o.scrollLeft():0,h=n.offset(),c={top:h.top-r,left:h.left-l,height:n.innerHeight(),width:n.innerWidth()},d=s.offset(),u=t("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(e.className).css({top:d.top-r,left:d.left-l,height:s.innerHeight(),width:s.innerWidth(),position:a?"fixed":"absolute"}).animate(c,e.duration,e.easing,function(){u.remove(),i()})}})(jQuery);
!function(t){"use strict";function i(){this.$dom=t(document),this.$html=this.$dom.find("html"),this.isOldie=!!this.$html.hasClass("oldie"),this.click="click",this.onReady=this.onOldie=this.onTouch=!1,this.autoInit="false"===t("script[gumby-init]").attr("gumby-init")?!1:!0,this.debugMode=Boolean(t("script[gumby-debug]").length),this.touchDevice=!!(Modernizr.touch||window.navigator.userAgent.indexOf("Windows Phone")>0),this.gumbyTouch=!1,this.touchEvents="js/libs",this.breakpoint=Number(t("script[gumby-breakpoint]").attr("gumby-breakpoint"))||768,this.touchEventsLoaded=!1,this.uiModulesReady=!1,this.uiModules={},this.inits={};var i=t("script[gumby-touch]").attr("gumby-touch"),e=t("script[gumby-path]").attr("gumby-path");"false"===i?this.touchEvents=!1:i?this.touchEvents=i:e&&(this.touchEvents=e),this.touchDevice&&(this.click+=" tap"),this.touchDevice&&t(window).width()<this.breakpoint?(this.$html.addClass("gumby-touch"),this.gumbyTouch=!0):this.$html.addClass("gumby-no-touch"),this.debugMode&&this.debug("Gumby is in debug mode")}i.prototype.init=function(t){var i=this,e=t?t:{};return this.$dom.ready(function(){e.debug&&(i.debugMode=!0),i.debug("Initializing Gumby");var t=e.uiModules?e.uiModules:!1;i.initUIModules(t),i.touchEventsLoaded||!i.touchDevice?i.helpers():i.uiModulesReady=!0}),this},i.prototype.helpers=function(){this.onReady&&this.onReady(),this.isOldie&&this.onOldie&&this.onOldie(),Modernizr.touch&&this.onTouch&&this.onTouch()},i.prototype.ready=function(t){return t&&"function"==typeof t&&(this.onReady=t),this},i.prototype.oldie=function(t){return t&&"function"==typeof t&&(this.onOldie=t),this},i.prototype.touch=function(t){return t&&"function"==typeof t&&(this.onTouch=t),this},i.prototype.console=function(t,i){this.debugMode&&window.console&&console[console[t]?t:"log"](i.length>1?Array.prototype.slice.call(i):i[0])},i.prototype.log=function(){this.console("log",arguments)},i.prototype.debug=function(){this.console("debug",arguments)},i.prototype.warn=function(){this.console("warn",arguments)},i.prototype.error=function(){this.console("error",arguments)},i.prototype.dump=function(){return{$dom:this.$dom,isOldie:this.isOldie,touchEvents:this.touchEvents,debugMode:this.debugMode,autoInit:this.autoInit,uiModules:this.uiModules,click:this.click}},i.prototype.selectAttr=function(){for(var t=0;t<arguments.length;t++){var i=arguments[t],e="data-"+arguments[t],n="gumby-"+arguments[t];if(this.is("["+e+"]"))return this.attr(e)?this.attr(e):!0;if(this.is("["+n+"]"))return this.attr(n)?this.attr(n):!0;if(this.is("["+i+"]"))return this.attr(i)?this.attr(i):!0}return!1},i.prototype.addInitalisation=function(t,i){this.inits[t]=i},i.prototype.initialize=function(t,i){if("object"==typeof t){var e=0;for(e;e<t.length;e++)this.inits[t[e]]&&"function"==typeof this.inits[t[e]]?this.inits[t[e]](i):this.error("Error initializing module: "+t[e])}else this.inits[t]&&"function"==typeof this.inits[t]?this.inits[t](i):this.error("Error initializing module: "+t);return this},i.prototype.UIModule=function(t){var i=t.module;this.uiModules[i]=t},i.prototype.initUIModules=function(t){var i,e,n=this.uiModules;t&&(n=t);for(i in n)e=t?n[i]:i,this.uiModules[e].init()},window.Gumby=new i}(jQuery),!function(t){"use strict";function i(t){Gumby.debug("Initializing Checkbox",t),this.$el=t,this.$input=this.$el.find("input[type=checkbox]");var i=this;this.$el.on(Gumby.click,function(t){t.preventDefault(),i.$input.is("[disabled]")||(i.$el.hasClass("checked")?i.update(!1):i.update(!0))}).on("gumby.check",function(){Gumby.debug("Check event triggered",i.$el),i.update(!0)}).on("gumby.uncheck",function(){Gumby.debug("Uncheck event triggered",i.$el),i.update(!1)}),(this.$input.prop("checked")||this.$el.hasClass("checked"))&&i.update(!0)}i.prototype.update=function(t){var i=this.$el.find("span");t?(Gumby.debug("Checking Checkbox",this.$el),i.append('<i class="icon-check" />'),this.$input.prop("checked",!0),Gumby.debug("Triggering onCheck event",this.$el),Gumby.debug("Triggering onChange event",this.$el),this.$el.addClass("checked").trigger("gumby.onCheck").trigger("gumby.onChange")):(Gumby.debug("Unchecking Checkbox",this.$el),this.$input.prop("checked",!1),i.find("i").remove(),Gumby.debug("Triggering onUncheck event",this.$el),Gumby.debug("Triggering onChange event",this.$el),this.$el.removeClass("checked").trigger("gumby.onUncheck").trigger("gumby.onChange"))},Gumby.addInitalisation("checkbox",function(){t(".checkbox").each(function(){var e=t(this);return e.data("isCheckbox")?!0:(e.data("isCheckbox",!0),new i(e),void 0)})}),Gumby.UIModule({module:"checkbox",events:["onCheck","onUncheck","onChange","check","uncheck"],init:function(){Gumby.initialize("checkbox")}})}(jQuery),!function(t){"use strict";function i(i){Gumby.debug("Initializing Fixed Position",i),this.$el=i,this.fixedPoint="",this.pinPoint=!1,this.offset=0,this.pinOffset=0,this.top=0,this.constrainEl=!0,this.state=!1,this.measurements={left:0,width:0},this.setup();var e=this;t(window).on("scroll load",function(){e.monitorScroll()}),this.$el.on("gumby.initialize",function(){Gumby.debug("Re-initializing Fixed Position",i),e.setup(),e.monitorScroll()})}i.prototype.setup=function(){var i=this;this.fixedPoint=this.parseAttrValue(Gumby.selectAttr.apply(this.$el,["fixed"])),this.pinPoint=Gumby.selectAttr.apply(this.$el,["pin"])||!1,this.offset=Number(Gumby.selectAttr.apply(this.$el,["offset"]))||0,this.pinOffset=Number(Gumby.selectAttr.apply(this.$el,["pinoffset"]))||0,this.top=Number(Gumby.selectAttr.apply(this.$el,["top"]))||0,this.constrainEl=Gumby.selectAttr.apply(this.$el,["constrain"])||!0,"false"===this.constrainEl&&(this.constrainEl=!1),this.$parent=this.$el.parents(".columns, .column, .row"),this.$parent=this.$parent.length?this.$parent.first():!1,this.parentRow=this.$parent?!!this.$parent.hasClass("row"):!1,this.pinPoint&&(this.pinPoint=this.parseAttrValue(this.pinPoint)),this.$parent&&this.constrainEl&&(this.measure(),t(window).resize(function(){i.state&&(i.measure(),i.constrain())}))},i.prototype.monitorScroll=function(){var i=t(window).scrollTop(),e=this.fixedPoint instanceof jQuery?this.fixedPoint.offset().top:this.fixedPoint,n=!1;this.pinPoint&&(n=this.pinPoint instanceof jQuery?this.pinPoint.offset().top:this.pinPoint),this.offset&&(e-=this.offset),this.pinOffset&&(n-=this.pinOffset),i>=e&&"fixed"!==this.state?(!n||n>i)&&this.fix():e>i&&"fixed"===this.state?this.unfix():n&&i>=n&&"pinned"!==this.state&&this.pin()},i.prototype.fix=function(){Gumby.debug("Element has been fixed",this.$el),Gumby.debug("Triggering onFixed event",this.$el),this.state="fixed",this.$el.css({top:0+this.top}).addClass("fixed").removeClass("unfixed pinned").trigger("gumby.onFixed"),this.$parent&&this.constrain()},i.prototype.unfix=function(){Gumby.debug("Element has been unfixed",this.$el),Gumby.debug("Triggering onUnfixed event",this.$el),this.state="unfixed",this.$el.addClass("unfixed").removeClass("fixed pinned").trigger("gumby.onUnfixed")},i.prototype.pin=function(){Gumby.debug("Element has been pinned",this.$el),Gumby.debug("Triggering onPinned event",this.$el),this.state="pinned",this.$el.css({top:this.$el.offset().top}).addClass("pinned fixed").removeClass("unfixed").trigger("gumby.onPinned")},i.prototype.constrain=function(){Gumby.debug("Constraining element",this.$el),this.$el.css({left:this.measurements.left,width:this.measurements.width})},i.prototype.measure=function(){var t,i=this.$parent.offset();this.measurements.left=i.left,this.measurements.width=this.$parent.width(),this.parentRow&&(t=Number(this.$parent.css("paddingLeft").replace(/px/,"")),t&&(this.measurements.left+=t))},i.prototype.parseAttrValue=function(i){if(t.isNumeric(i))return Number(i);if("top"===i)return this.$el.offset().top;var e=t(i);return e.length?e:(Gumby.error("Cannot find Fixed target: "+i),!1)},Gumby.addInitalisation("fixed",function(e){t("[data-fixed],[gumby-fixed],[fixed]").each(function(){var n=t(this);return n.data("isFixed")&&!e?!0:n.data("isFixed")&&e?(n.trigger("gumby.initialize"),!0):(n.data("isFixed",!0),new i(n),void 0)})}),Gumby.UIModule({module:"fixed",events:["initialize","onFixed","onUnfixed"],init:function(){Gumby.initialize("fixed")}})}(jQuery),!function(t){"use strict";function i(t){Gumby.debug("Initializing Navbar",t),this.$el=t,this.$dropDowns=this.$el.find("li:has(.dropdown)"),this.$dropDowns.on(Gumby.click,this.toggleDropdown).on("swiperight",this.openLink),"#"!==this.$dropDowns.children("a").attr("href")&&this.$dropDowns.children("a").append('<i class="icon-popup"></i>').children("i").on(Gumby.click,this.openLink),this.$dropDowns.find(".dropdown li:not(:has(.dropdown)) a[href]").on(Gumby.click,this.openLink)}Gumby.gumbyTouch&&(i.prototype.toggleDropdown=function(i){i.preventDefault();var e=t(this);e.hasClass("active")?e.removeClass("active"):e.addClass("active")},i.prototype.openLink=function(i){i.preventDefault();var e,n=t(this),s=n;n.is("i")?s=n.parent("a"):n.is("li")&&(s=n.children("a")),e=s.attr("href"),"blank"==s.attr("target")?window.open(e):window.location=e},Gumby.addInitalisation("navbar",function(){t(".navbar").each(function(){var e=t(this);return e.data("isNavbar")?!0:(e.data("isNavbar",!0),new i(e),void 0)})}),Gumby.UIModule({module:"navbar",events:[],init:function(){Gumby.initialize("navbar")}}))}(jQuery),!function(t){"use strict";function i(t){Gumby.debug("Initializing Radio Button",t),this.$el=t,this.$input=this.$el.find("input[type=radio]");var i=this;this.$el.on(Gumby.click,function(t){t.preventDefault(),i.$input.is("[disabled]")||i.update()}).on("gumby.check",function(){Gumby.debug("Check event triggered",i.$el),i.update()}),(this.$input.prop("checked")||this.$el.hasClass("checked"))&&i.update(!0)}i.prototype.update=function(){if(!(this.$el.hasClass("checked")&&this.$input.prop("checked")&&this.$el.find("i.icon-dot").length)){Gumby.debug("Updating Radio Button group",this.$el);var i=this.$el.find("span"),e='input[name="'+this.$input.attr("name")+'"]';t(".radio").has(e).removeClass("checked").find("input").prop("checked",!1).end().find("i").remove(),this.$input.prop("checked",!0),i.append('<i class="icon-dot" />'),Gumby.debug("Triggering onCheck event",this.$el),this.$el.addClass("checked").trigger("gumby.onCheck")}},Gumby.addInitalisation("radiobtn",function(){t(".radio").each(function(){var e=t(this);return e.data("isRadioBtn")?!0:(e.data("isRadioBtn",!0),new i(e),void 0)})}),Gumby.UIModule({module:"radiobtn",events:["onCheck","check"],init:function(){Gumby.initialize("radiobtn")}})}(jQuery),!function(t){"use strict";function i(i){Gumby.debug("Initializing Retina",i),this.$el=i,this.imageSrc=this.$el.attr("src"),this.retinaSrc=this.fetchRetinaImage(),this.$retinaImg=t(new Image);var e=this;return this.retinaSrc?(this.$retinaImg.attr("src",this.retinaSrc).load(function(){e.retinaImageLoaded()}).error(function(){Gumby.error("Couln't load retina image: "+e.retinaSrc)}),void 0):!1}i.prototype.fetchRetinaImage=function(){var t=this.imageSrc,i=this.imageSrc.search(/(\.|\/)(gif|jpe?g|png)$/i);return 0>i?!1:t.substr(0,i)+"@2x"+t.substr(i,t.length)},i.prototype.retinaImageLoaded=function(){Gumby.debug("Swapping image for retina version",this.$el),Gumby.debug("Triggering onRetina event",this.$el),this.$el.attr("src",this.$retinaImg.attr("src")).trigger("gumby.onRetina")},Gumby.addInitalisation("retina",function(){!window.devicePixelRatio||window.devicePixelRatio<=1||t("img[data-retina],img[gumby-retina],img[retina]").each(function(){var e=t(this);return e.data("isRetina")?!0:(e.data("isRetina",!0),new i(e),void 0)})}),Gumby.UIModule({module:"retina",events:["onRetina"],init:function(){Gumby.initialize("retina")}})}(jQuery),!function(t){"use strict";function i(t){Gumby.debug("Initializing Skiplink",t),this.$el=t,this.targetPos=0,this.duration=0,this.offset=!1,this.easing="",this.update=!1,this.setup();var i=this;this.$el.on(Gumby.click+" gumby.skip",function(t){t.preventDefault(),"skip"===t.namespace&&Gumby.debug("Skip event triggered",i.$el),i.update?i.calculateTarget(i.skipTo):i.skipTo()}).on("gumby.initialize",function(){Gumby.debug("Re-initializing Skiplink",i.$el),i.setup()})}i.prototype.setup=function(){this.duration=Number(Gumby.selectAttr.apply(this.$el,["duration"]))||200,this.offset=Gumby.selectAttr.apply(this.$el,["offset"])||!1,this.easing=Gumby.selectAttr.apply(this.$el,["easing"])||"swing",this.update=Gumby.selectAttr.apply(this.$el,["update"])?!0:!1,this.calculateTarget()},i.prototype.calculateTarget=function(i){var e,n=Gumby.selectAttr.apply(this.$el,["goto"]);if("top"==n)this.targetPos=0;else if(t.isNumeric(n))this.targetPos=Number(n);else{if(e=t(n),!e.length)return Gumby.error("Cannot find skiplink target: "+n),!1;this.targetPos=e.offset().top}i&&i.apply(this)},i.prototype.skipTo=function(){Gumby.debug("Skipping to target",this.$el);var i=this;t("html,body").animate({scrollTop:this.calculateOffset()},this.duration,this.easing).promise().done(function(){Gumby.debug("Triggering onComplete event",i.$el),i.$el.trigger("gumby.onComplete")})},i.prototype.calculateOffset=function(){if(!this.offset)return this.targetPos;var t=this.offset.substr(0,1),i=Number(this.offset.substr(1,this.offset.length));return"-"===t?this.targetPos-i:"+"===t?this.targetPos+i:void 0},Gumby.addInitalisation("skiplink",function(e){t(".skiplink > a, .skip").each(function(){var n=t(this);return n.data("isSkipLink")&&!e?!0:n.data("isSkipLink")&&e?(n.trigger("gumby.initialize"),!0):(n.data("isSkipLink",!0),new i(n),void 0)})}),Gumby.UIModule({module:"skiplink",events:["initialize","onComplete","skip"],init:function(){Gumby.initialize("skiplink")}})}(jQuery),!function(t){"use strict";function i(i){Gumby.debug("Initializing Tabs",i),this.$el=i,this.$nav=this.$el.find("ul.tab-nav > li"),this.$content=this.$el.find(".tab-content");var e=this;this.$nav.children("a").on(Gumby.click,function(i){i.preventDefault(),e.click(t(this))}),this.$el.on("gumby.set",function(t,i){Gumby.debug("Set event triggered",e.$el),e.set(t,i)})}i.prototype.click=function(t){var i=t.parent().index();this.$nav.eq(i).add(this.$content.eq(i)).hasClass("active")||(Gumby.debug("Setting active tab to "+i,this.$el),this.$nav.add(this.$content).removeClass("active"),this.$nav.eq(i).add(this.$content.eq(i)).addClass("active"),Gumby.debug("Triggering onChange event",this.$el),this.$el.trigger("gumby.onChange",i))},i.prototype.set=function(t,i){this.$nav.eq(i).find("a").trigger(Gumby.click)},Gumby.addInitalisation("tabs",function(){t(".tabs").each(function(){var e=t(this);return e.data("isTabs")?!0:(e.data("isTabs",!0),new i(e),void 0)})}),Gumby.UIModule({module:"tabs",events:["onChange","set"],init:function(){Gumby.initialize("tabs")}})}(jQuery),!function(t){"use strict";function i(i){this.$el=t(i),this.targets=[],this.on="",this.className="",this.self=!1,this.$el.length&&(Gumby.debug("Initializing Toggle",i),this.init())}function e(i){this.$el=t(i),this.targets=[],this.on="",this.className="",this.self=!1,this.$el.length&&(Gumby.debug("Initializing Switch",i),this.init())}i.prototype.init=function(){var t=this;this.setup(),this.$el.on(this.on,function(i){i.preventDefault(),t.trigger(t.triggered)}).on("gumby.trigger",function(){Gumby.debug("Trigger event triggered",t.$el),t.trigger(t.triggered)}).on("gumby.initialize",function(){Gumby.debug("Re-initializing "+t.constructor,$el),t.setup()})},i.prototype.setup=function(){this.targets=this.parseTargets(),this.on=Gumby.selectAttr.apply(this.$el,["on"])||Gumby.click,this.className=Gumby.selectAttr.apply(this.$el,["classname"])||"active",this.self="false"===Gumby.selectAttr.apply(this.$el,["self"])},i.prototype.parseTargets=function(){var i=Gumby.selectAttr.apply(this.$el,["trigger"]),e=0,n=[];return i?(e=i.indexOf("|"),-1===e?this.checkTargets([i])?[t(i)]:!1:(n=i.split("|"),this.checkTargets(n)?n.length>1?[t(n[0]),t(n[1])]:[t(n[0])]:!1)):!1},i.prototype.checkTargets=function(i){var e=0;for(e;e<i.length;e++)if(i[e]&&!t(i[e]).length)return Gumby.error("Cannot find "+this.constructor.name+" target: "+i[e]),!1;return!0},i.prototype.triggered=function(){Gumby.debug("Triggering onTrigger event",this.$el),this.$el.trigger("gumby.onTrigger",[this.$el.hasClass(this.className)])},e.prototype=new i,e.prototype.constructor=e,i.prototype.trigger=function(t){Gumby.debug("Triggering Toggle",this.$el);var i;this.targets?1==this.targets.length?this.$el.add(this.targets[0]).toggleClass(this.className):this.targets.length>1&&(this.targets[0].hasClass(this.className)?(i=this.targets[0],this.self||(i=i.add(this.$el)),i.removeClass(this.className),this.targets[1].addClass(this.className)):(i=this.targets[0],this.self||(i=i.add(this.$el)),i.addClass(this.className),this.targets[1].removeClass(this.className))):this.$el.toggleClass(this.className),t&&"function"==typeof t&&t.apply(this)},e.prototype.trigger=function(t){Gumby.debug("Triggering Switch",this.$el);var i;this.targets?1==this.targets.length?(i=this.targets[0],this.self||(i=i.add(this.$el)),i.addClass(this.className)):this.targets.length>1&&(i=this.targets[0],this.self||(i=i.add(this.$el)),i.addClass(this.className),this.targets[1].removeClass(this.className)):this.$el.addClass(this.className),t&&"function"==typeof t&&t.apply(this)},Gumby.addInitalisation("toggles",function(e){t(".toggle").each(function(){var n=t(this);return n.data("isToggle")&&!e?!0:(n.data("isToggle")&&e&&n.trigger("gumby.initialize"),n.data("isToggle",!0),new i(n),void 0)})}),Gumby.addInitalisation("switches",function(i){t(".switch").each(function(){var n=t(this);return n.data("isSwitch")&&!i?!0:n.data("isSwitch")&&i?(n.trigger("gumby.initialize"),!0):(n.data("isSwitch",!0),new e(n),void 0)})}),Gumby.UIModule({module:"toggleswitch",events:["initialize","trigger","onTrigger"],init:function(){Gumby.initialize("switches"),Gumby.initialize("toggles")}})}(jQuery),!function(t){"use strict";function i(t,i){Gumby&&Gumby.debug("Initializing Validation",t),this.$this=t,this.$field=this.$this.parents(".field"),this.req=i||function(){return!!this.$this.val().length};var e=this;this.$this.is("[type=checkbox], [type=radio]")?(this.$field=this.$this.parent("label"),this.$field.on("gumby.onChange",function(){e.validate()})):this.$this.is("select")?(this.$field=this.$this.parents(".picker"),this.$field.on("change",function(){e.validate()})):this.$this.on("blur",function(t){9!==t.which&&e.validate()})}i.prototype.validate=function(){var t=this.req(this.$this);return t?this.$field.removeClass("danger").addClass("success"):this.$field.removeClass("success").addClass("danger"),t},t.fn.validation=function(e){var n=t.extend({submit:!1,fail:!1,required:[]},e),s=[];return this.each(function(){if(!n.required.length)return!1;var e,o=t(this),a=n.required.length;for(e=0;a>e;e++)s.push(new i(o.find('[name="'+n.required[e].name+'"]'),n.required[e].validate||!1));o.on("submit",function(t){var i=!1;if(!o.data("passed")){t.preventDefault();var e,a=s.length;for(e=0;a>e;e++)s[e].validate()||(i=!0);if(i){if(n.fail&&"function"==typeof n.fail)return n.fail(),void 0}else{if(n.submit&&"function"==typeof n.submit)return n.submit(o.serializeArray()),void 0;o.data("passed",!0).submit()}}})})}}(jQuery),!function(t){"use strict";Gumby.touchDevice&&Gumby.touchEvents||!Gumby.autoInit?Gumby.touchEvents&&Gumby.touchDevice&&(Gumby.debug("Loading jQuery mobile touch events"),yepnope.errorTimeout=2e3,Modernizr.load({test:Modernizr.touch,yep:Gumby.touchEvents+"/jquery.mobile.custom.min.js",callback:function(){t.mobile||Gumby.error("Error loading jQuery mobile touch events"),Gumby.touchEventsLoaded=!0,Gumby.autoInit?window.Gumby.init():Gumby.uiModulesReady&&Gumby.helpers()}})):window.Gumby.init(),"function"==typeof define&&define.amd&&define(window.Gumby)}(jQuery);
/*! http://mths.be/placeholder v2.0.7 by @mathias */
;(function(f,h,$){var a='placeholder' in h.createElement('input'),d='placeholder' in h.createElement('textarea'),i=$.fn,c=$.valHooks,k,j;if(a&&d){j=i.placeholder=function(){return this};j.input=j.textarea=true}else{j=i.placeholder=function(){var l=this;l.filter((a?'textarea':':input')+'[placeholder]').not('.placeholder').bind({'focus.placeholder':b,'blur.placeholder':e}).data('placeholder-enabled',true).trigger('blur.placeholder');return l};j.input=a;j.textarea=d;k={get:function(m){var l=$(m);return l.data('placeholder-enabled')&&l.hasClass('placeholder')?'':m.value},set:function(m,n){var l=$(m);if(!l.data('placeholder-enabled')){return m.value=n}if(n==''){m.value=n;if(m!=h.activeElement){e.call(m)}}else{if(l.hasClass('placeholder')){b.call(m,true,n)||(m.value=n)}else{m.value=n}}return l}};a||(c.input=k);d||(c.textarea=k);$(function(){$(h).delegate('form','submit.placeholder',function(){var l=$('.placeholder',this).each(b);setTimeout(function(){l.each(e)},10)})});$(f).bind('beforeunload.placeholder',function(){$('.placeholder').each(function(){this.value=''})})}function g(m){var l={},n=/^jQuery\d+$/;$.each(m.attributes,function(p,o){if(o.specified&&!n.test(o.name)){l[o.name]=o.value}});return l}function b(m,n){var l=this,o=$(l);if(l.value==o.attr('placeholder')&&o.hasClass('placeholder')){if(o.data('placeholder-password')){o=o.hide().next().show().attr('id',o.removeAttr('id').data('placeholder-id'));if(m===true){return o[0].value=n}o.focus()}else{l.value='';o.removeClass('placeholder');l==h.activeElement&&l.select()}}}function e(){var q,l=this,p=$(l),m=p,o=this.id;if(l.value==''){if(l.type=='password'){if(!p.data('placeholder-textinput')){try{q=p.clone().attr({type:'text'})}catch(n){q=$('<input>').attr($.extend(g(this),{type:'text'}))}q.removeAttr('name').data({'placeholder-password':true,'placeholder-id':o}).bind('focus.placeholder',b);p.data({'placeholder-textinput':q,'placeholder-id':o}).before(q)}p=p.removeAttr('id').hide().prev().attr('id',o).show()}p.addClass('placeholder');p[0].value=p.attr('placeholder')}else{p.removeClass('placeholder')}}}(this,document,jQuery));

// place any jQuery/helper plugins in here, instead of separate, slower script files.

// Gumby is ready to go
Gumby.ready(function() {
	Gumby.log('Gumby is ready to go...', Gumby.dump());

	// placeholder polyfil
	if(Gumby.isOldie || Gumby.$dom.find('html').hasClass('ie9')) {
		$('input, textarea').placeholder();
	}

	// skip link and toggle on one element
	// when the skip link completes, trigger the switch
	$('#skip-switch').on('gumby.onComplete', function() {
		$(this).trigger('gumby.trigger');
	});

// Oldie document loaded
}).oldie(function() {
	Gumby.warn("This is an oldie browser...");

// Touch devices loaded
}).touch(function() {
	Gumby.log("This is a touch enabled device...");
});

(function( animaUnico, $, undefined ) {

var CORE_EXXET_ENABLED = true;

var PANTALLA_ENABLED = true;
var FLAG_PANTALLA_ENABLED = "FLAG_PANTALLA_ENABLED";

var CUMPLEMENTO_WEB_1_ENABLED = true;
var FLAG_CUMPLEMENTO_WEB_1_ENABLED = "FLAG_CUMPLEMENTO_WEB_1_ENABLED";

var GAIA_1_ENABLED = true;
var GAIA_2_ENABLED = true;
var DOMINUS_EXXET_ENABLED = true;
var ARCANA_EXXET_ENABLED = true;
var PROMETHEUM_EXXET_ENABLED = true;
var LQCCN_1_ENABLED = true;
var CUMPLEMENTO_WEB_2_ENABLED = true;
var CUMPLEMENTO_WEB_3_ENABLED = true;

var DISPATCHER = $(document);
var MAX_CARACTERISTICA = 20;
var ATAQUE_DEFENSA_PARA_ARTE_MARCIAL = 40;

var UDS_PD = "PD";
var UDS_PC = "PC";
var UDS_PORCENT = "%";
var UDS_CV = "CV";
var UDS_CM = "CM";
var UDS_ELAN = "elan";
var UDS_NIVELES_VIA = "niveles de magia";

var FUE = "Fuerza";
var DES = "Destreza";
var AGI = "Agilidad";
var CON = "Constitución";
var INT = "Inteligencia";
var POD = "Poder";
var VOL = "Voluntad";
var PER = "Percepción";

var FUE3 = "FUE";
var DES3 = "DES";
var AGI3 = "AGI";
var CON3 = "CON";
var INT3 = "INT";
var POD3 = "POD";
var VOL3 = "VOL";
var PER3 = "PER";

var IDX_AGI = 0;
var IDX_CON = 1;
var IDX_DES = 2;
var IDX_FUE = 3;
var IDX_INT = 4;
var IDX_PER = 5;
var IDX_POD = 6;
var IDX_VOL = 7;

var CARACTERISTICAS_NOMBRES = [AGI,CON,DES,FUE,INT,PER,POD,VOL];
var CARACTERISTICAS_ABREVIATURAS  = [AGI3,CON3,DES3,FUE3,INT3,PER3,POD3,VOL3];

function getIndiceCaracteristica(caracteristica) {
    if (caracteristica == FUE) {
        return IDX_FUE;
    } else if (caracteristica == DES) {
        return IDX_DES;
    } else if (caracteristica == AGI) {
        return IDX_AGI;
    } else if (caracteristica == CON) {
        return IDX_CON;
    } else if (caracteristica == INT) {
        return IDX_INT;
    } else if (caracteristica == VOL) {
        return IDX_VOL;
    } else if (caracteristica == POD) {
        return IDX_POD;
    } else if (caracteristica == PER) {
        return IDX_PER;
    } else {
        throw ERR_CARACTERISTICA_ERRONEA + ": " + caracteristica;
    }
}

function caracAbreviatura(caracteristica) {
    return CARACTERISTICAS_ABREVIATURAS[getIndiceCaracteristica(caracteristica)];
}

function getBonoPorValor(valor) {
    if (valor == 1) {
        return -30;
    } else if (valor == 2) {
        return -20;
    } else if (valor == 3) {
        return -10;
    } else if (valor == 4) {
        return -5;
    } else if (valor == 5) {
        return 0;
    } else if ((valor == 6) || (valor == 7)) {
        return 5;
    } else if ((valor == 8) || (valor == 9)) {
        return 10;
    } else if (valor == 10) {
        return 15;
    } else if ((valor == 11) || (valor == 12)) {
        return 20;
    } else if ((valor == 13) || (valor == 14)) {
        return 25;
    } else if (valor == 15)  {
        return 30;
    } else if ((valor == 16) || (valor == 17)) {
        return 35;
    } else if ((valor == 18) || (valor == 19)) {
        return 40;
    } else if (valor==20) {
        return 45;
    } else {
        throw ERR_VALOR_CARACTERISTICA_ERRONEO;
    }
}

var ERR_CARACTERISTICA_ERRONEA = "Error: Nombre de característica erróneo";
var ERR_VALOR_CARACTERISTICA_ERRONEO = "Error: Valor de característica fuera de rango";

function Arquetipo(mixto, arq1, arq2) {
    /**
     *
     * @type {boolean}
     */
    this.esMixto = mixto;

    /**
     *
     * @type {string}
     */
    this.arquetipo1 = arq1;

    if (mixto) {
        /**
         *
         * @type {string}
         */
        this.arquetipo2 = arq2;
    }
}

Arquetipo.prototype = {
    constructor : Arquetipo,

    isMixto : function() {
        return this.esMixto;
    },

    toString : function() {
        if (!mixto) {
            return this.arquetipo1;
        } else {
            return this.arquetipo1 + "/" + this.arquetipo2;
        }
    },

    comparteArquetipoMixto : function(otroArq) {
        if (this.isMixto()) {
            var comparte = false;

            if (this.arquetipo1 == otroArq.arquetipo1) {
                comparte = true;
            }
            if (this.arquetipo2 == otroArq.arquetipo1) {
                comparte = true;
            }
            if (otroArq.isMixto()) {
                if (this.arquetipo1 == otroArq.arquetipo2) {
                    comparte = true;
                }
                if (this.arquetipo2 == otroArq.arquetipo2) {
                    comparte = true;
                }
            }

            return comparte;
        } else {
            return false;
        }
    }
};

var NOM_ARQ_LUCHADOR = "Luchador";
var NOM_ARQ_MISTICO = "Místico";
var NOM_ARQ_PSIQUICO = "Psíquico";
var NOM_ARQ_ACECHADOR = "Acechador";
var NOM_ARQ_DOMINE = "Domine";
var NOM_ARQ_SIN_CATEGORIA = "Sin Categoría";

var ARQ_LUCHADOR = new Arquetipo(false,NOM_ARQ_LUCHADOR);
var ARQ_MISTICO = new Arquetipo(false,NOM_ARQ_MISTICO);
var ARQ_PSIQUICO = new Arquetipo(false,NOM_ARQ_PSIQUICO);
var ARQ_ACECHADOR = new Arquetipo(false,NOM_ARQ_ACECHADOR);
var ARQ_DOMINE = new Arquetipo(false,NOM_ARQ_DOMINE);
var ARQ_SIN_CATEGORIA = new Arquetipo(false,NOM_ARQ_SIN_CATEGORIA);

var ARQ_LUCHADOR_DOMINE = new Arquetipo(true,NOM_ARQ_LUCHADOR,NOM_ARQ_DOMINE);
var ARQ_LUCHADOR_ACECHADOR = new Arquetipo(true,NOM_ARQ_LUCHADOR,NOM_ARQ_ACECHADOR);
var ARQ_MISTICO_ACECHADOR = new Arquetipo(true,NOM_ARQ_MISTICO,NOM_ARQ_ACECHADOR);
var ARQ_MISTICO_PSIQUICO = new Arquetipo(true,NOM_ARQ_MISTICO,NOM_ARQ_PSIQUICO);
var ARQ_LUCHADOR_MISTICO = new Arquetipo(true,NOM_ARQ_LUCHADOR,NOM_ARQ_MISTICO);
var ARQ_LUCHADOR_PSIQUICO = new Arquetipo(true,NOM_ARQ_LUCHADOR,NOM_ARQ_PSIQUICO);




var ORIGEN_MULTIPLO_VIDA = "Múltiplos de vida";

var ERR_HABILIDAD_ERRONEA = "Error: Nombre de habilidad erróneo";
var ERR_TIPO_HABILIDAD_ERRONEO = "Error: Nombre de tipo de habilidad erróneo";





var SEXO_HOMBRE = "Hombre";
var SEXO_MUJER = "Mujer";

function d10() {
    return Math.floor(Math.random()*10) + 1;
}




var FLAG_CONOCEDOR_TODAS_MATERIAS = "FLAG_CONOCEDOR_TODAS_MATERIAS";
var FLAG_DON = "FLAG_DON";
var FLAG_DESARROLLAR_VALORACION_MAGICA = "FLAG_DESARROLLAR_VALORACION_MAGICA";
var FLAG_LAZO_EXISTENCIAL = "FLAG_LAZO_EXISTENCIAL";
var FLAG_PSIQUICO = "FLAG_PSIQUICO";
var FLAG_ACCESO_TODAS_DISCIPLINAS = "FLAG_ACCESO_TODAS_DISCIPLINAS";
var FLAG_SIN_ARMAS_POR_ARTES_MARCIALES = "FLAG_SIN_ARMAS_POR_ARTES_MARCIALES";
var FLAG_PRIMERA_DISCIPLINA_OBLIGATORIA = "FLAG_PRIMERA_DISCIPLINA_OBLIGATORIA";
var FLAG_PUEDE_USAR_PODERES_MONSTRUO = "FLAG_PUEDE_USAR_PODERES_MONSTRUO";
var FLAG_RE_A_MITAD = "FLAG_RE_A_MITAD";
var FLAG_RV_A_MITAD = "FLAG_RV_A_MITAD";
var FLAG_RF_A_MITAD = "FLAG_RF_A_MITAD";
var FLAG_RM_A_MITAD = "FLAG_RM_A_MITAD";
var FLAG_RP_A_MITAD = "FLAG_RP_A_MITAD";
var FLAG_IGNORAR_DESVENTAJAS = "FLAG_IGNORAR_DESVENTAJAS";
var FLAG_APARIENCIA_ALEATORIA = "FLAG_APARIENCIA_ALEATORIA";
var FLAG_APARIENCIA_MINIMA_7 = "FLAG_APARIENCIA_MINIMA_7";
var FLAG_PUEDE_USAR_TECNICAS = "FLAG_PUEDE_USAR_TECNICAS";
var FLAG_DETECCION_KI = "FLAG_DETECCION_KI";
var FLAG_OCULTACION_KI = "FLAG_OCULTACION_KI";
var FLAG_INHUMANIDAD = "FLAG_INHUMANIDAD";
var FLAG_ZEN = "FLAG_ZEN";
var FLAG_VERSATIL = "FLAG_VERSATIL";
var FLAG_BONO_NATURAL_EXTRA = "FLAG_BONO_NATURAL_EXTRA";
var FLAG_SIN_BONIFICADOR_NATURAL = "FLAG_SIN_BONIFICADOR_NATURAL";
var FLAG_MAGIA_OPUESTA = "FLAG_MAGIA_OPUESTA";

var DIF_RUT = "Rutinario";
var DIF_RUT3 = "RUT";
var DIF_RUT_VALOR = 20;

var DIF_FAC = "Fácil";
var DIF_FAC3 = "FAC";
var DIF_FAC_VALOR = 40;

var DIF_MED = "Media";
var DIF_MED3 = "MED";
var DIF_MED_VALOR = 80;

var DIF_DIF = "Difícil";
var DIF_DIF3 = "DIF";
var DIF_DIF_VALOR = 120;

var DIF_MDF = "Muy Difícil";
var DIF_MDF3 = "MDF";
var DIF_MDF_VALOR = 120;

var DIF_ABS = "Absurdo";
var DIF_ABS3 = "ABS";
var DIF_ABS_VALOR = 180;

var DIF_CIM = "Casi Imposible";
var DIF_CIM3 = "CIM";
var DIF_CIM_VALOR = 240;

var DIF_IMP = "Imposible";
var DIF_IMP3 = "IMP";
var DIF_IMP_VALOR = 280;

var DIF_INH = "Inhumano";
var DIF_INH3 = "INH";
var DIF_INH_VALOR = 320;

var DIF_ZEN = "Zen";
var DIF_ZEN3 = "ZEN";
var DIF_ZEN_VALOR = 440;

var ERR_DIFICULTAD_DESCONOCIDA = "Error: dificultad desconocida";

var DIFICULTADES = [DIF_RUT,DIF_FAC,DIF_MED,DIF_DIF,DIF_MDF,DIF_ABS,DIF_CIM,DIF_IMP,DIF_INH,DIF_ZEN];

function indiceDificultad(dificultad) {
    switch (dificultad) {
        case DIF_RUT :
        case DIF_RUT3 :
        case DIF_RUT_VALOR :
            return 1;
        case DIF_FAC :
        case DIF_FAC3 :
        case DIF_FAC_VALOR :
            return 2;
        case DIF_MED :
        case DIF_MED3 :
        case DIF_MED_VALOR :
            return 3;
        case DIF_DIF :
        case DIF_DIF3 :
        case DIF_DIF_VALOR :
            return 4;
        case DIF_MDF :
        case DIF_MDF3 :
        case DIF_MDF_VALOR :
            return 5;
        case DIF_ABS :
        case DIF_ABS3 :
        case DIF_ABS_VALOR :
            return 6;
        case DIF_CIM :
        case DIF_CIM3 :
        case DIF_CIM_VALOR :
            return 7;
        case DIF_IMP :
        case DIF_IMP3 :
        case DIF_IMP_VALOR :
            return 8;
        case DIF_INH :
        case DIF_INH3 :
        case DIF_INH_VALOR :
            return 9;
        case DIF_ZEN :
        case DIF_ZEN3 :
        case DIF_ZEN_VALOR :
            return 10;
        default:
            throw ERR_DIFICULTAD_DESCONOCIDA;
    }
}

var TIPO_BONIFICADOR_NATURAL_FISICO = "fisico";
var TIPO_BONIFICADOR_NATURAL_MENTAL = "mental";
var TIPO_BONIFICADOR_NATURAL_EXTRA = "extra";

var LISTA_ESPECIES_ANIMALES = ["Perros", "Lobos", "Loros", "Elefantes", "Caballos"];
var LISTA_CIENCIAS = ["Matemáticas", "Mecánica", "Astronomía", "Filosofía"];
var LISTA_TEMAS_HISTORIA = ["Abel", "Guerras de la Cruz", "Imperio de Abel", "Fábulas", "Economía"];
var LISTA_ARTES = ["Pintura", "Escultura"];
var LISTA_BAILES = ["Baile de Salón", "Bailes de Espheria", "Bailes Antiguos"];
var LISTA_FORJA = ["Armaduras pesadas", "Espadas", "Utensilios de cocina"];
var LISTA_INSTRUMENTOS_MUSICALES = ["Flauta", "Clavicordio", "Arpa"];
var LISTA_TRUCOS_MANOS = ["Juegos de cartas", "Malabares"];

var ATAQUE_FIL = "FILo";
var ATAQUE_CON = "CONtundente";
var ATAQUE_PEN = "PENetrante";
var ATAQUE_CAL = "CALor";
var ATAQUE_FRI = "FRIo";
var ATAQUE_ELE = "ELEctricidad";
var ATAQUE_ENE = "ENErgía";
var ATAQUE_FIL3 = "FIL";
var ATAQUE_CON3 = "CON";
var ATAQUE_PEN3 = "PEN";
var ATAQUE_CAL3 = "CAL";
var ATAQUE_FRI3 = "FRI";
var ATAQUE_ELE3 = "ELE";
var ATAQUE_ENE3 = "ENE";

var TAS_ARMADURA = [ATAQUE_FIL3,ATAQUE_CON3,ATAQUE_PEN3,ATAQUE_CAL3,ATAQUE_FRI3,ATAQUE_ELE3,ATAQUE_ENE3];


var DISP_TOTAL = "Disponibilidad normal";
var DISP_B = "Disponibilidad B";
var DISP_A = "Disponibilidad A";
var NO_DISPONIBLE = "No disponible";


var ACCION_ACTIVA = "Activa";
var ACCION_PASIVA = "Pasiva";

/**
 *
 * @param {string} etiqueta
 * @param {string} categoria
 * @param {string} [tooltip]
 * @constructor
 */
function OpcionMostrable(etiqueta, categoria, tooltip) {
    this.etiqueta = etiqueta;
    this.categoria = categoria;
    if (tooltip) {
        this.tooltip = tooltip;
    }
}

var MULTIPLICADOR_ENTERO = 1;
var MULTIPLICADOR_MITAD = 0.5;
var MULTIPLICADOR_DOBLE = 2;

var BONO_FUE = "BONO_FUE";
var BONO_POD = "BONO_POD";
var BONO_FUE_RED = "BONO_FUE_REDONDEADO";
var BONO_POD_RED = "BONO_POD_REDONDEADO";
var BONO_NO = "BONO_NO";
var ROTURA_PLUS_10 = "ROTURA_PLUS_10";
var TA_ENEMIGA_MENOS_2 = "TA_ENEMIGA_MENOS_2";


function addToolTip(elemento,contenido) {
    elemento.tooltip({
        content: contenido,
        items: "div",
        tooltipClass: "tooltip-custom"
    })
}

var allRazas = {};

var TURNO_BASE = 20;
var PD_NIVEL_1 = 600;

function limpiarArrayObjetosPorCampo(array, campo, opcion, callback, contexto) {
    var i;
    var arrayLimpio = [];
    for (i = 0; i < array.length;i++) {
        var esteObjeto = array[i];

        if (esteObjeto[campo] != opcion) {
            arrayLimpio.push(esteObjeto);
        } else {
            if (callback != undefined) {
                callback.call(contexto,esteObjeto);
            }
        }
    }
    return arrayLimpio;
}

function limpiarArrayObjetosPorFuncion(array, funcion, opcion, callback, contexto) {
    var i;
    var arrayLimpio = [];
    for (i = 0; i < array.length;i++) {
        var esteObjeto = array[i];

        if (funcion(esteObjeto) != opcion) {
            arrayLimpio.push(esteObjeto);
        } else {
            if (callback != undefined) {
                callback.call(contexto,esteObjeto);
            }
        }
    }
    return arrayLimpio;
}

function comparaGetNombre(objeto) {
    return objeto.getNombre();
}

/**
 * Función auxiliar para ordenar elementos con un atributo "nombre".
 * @param a * El primer elemento a ordenar
 * @param b * El segundo elemento a ordenar
 * @returns {number} -1 si el primero es menor, 1 si es mayor, 0 si son iguales
 */
function SortPorAtributoNombre(a, b){
    try {
        var aName = a.nombre.toLowerCase();
        var bName = b.nombre.toLowerCase();
    } catch (err) {
        alert("Algo falla aqui");
    }
    return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
}

function modificadorBonito(modif) {
    var bonito = modif;
    if (modif >= 0) {
        bonito = "+" + modif;
    } else {
        bonito = "" + modif;
    }
    return bonito;
}

function PuedeComprar(puedeComprar, mensajeFallo) {
    this.puedeComprar = puedeComprar;
    if (!puedeComprar) {
        this.mensajeFallo = mensajeFallo;
    }
}

function inherit(proto) {
    function F() {}
    F.prototype = proto;
    return new F;
}

function extend(Child, Parent) {
    Child.prototype = inherit(Parent.prototype);
    Child.prototype.constructor = Child;
    Child.parent = Parent.prototype;
}


var EVENT_CHARACTER_SECCION_PERSONALES = "EVENT_CHARACTER_SECCION_PERSONALES";
var EVENT_CHARACTER_SECCION_CAPACIDADES = "EVENT_CHARACTER_SECCION_CAPACIDADES";
var EVENT_CHARACTER_SECCION_CARACTERISTICAS = "EVENT_CHARACTER_SECCION_CARACTERISTICAS";
var EVENT_CHARACTER_SECCION_DESARROLLO = "EVENT_CHARACTER_SECCION_DESARROLLO";
var EVENT_CHARACTER_SECCION_VENTAJAS = "EVENT_CHARACTER_SECCION_VENTAJAS";
var EVENT_CHARACTER_SECCION_DESVENTAJAS = "EVENT_CHARACTER_SECCION_DESVENTAJAS";
var EVENT_CHARACTER_SECCION_RESISTENCIAS = "EVENT_CHARACTER_SECCION_RESISTENCIAS";
var EVENT_CHARACTER_SECCION_COMBATE_GENERAL = "EVENT_CHARACTER_SECCION_COMBATE_GENERAL";
var EVENT_CHARACTER_SECCION_KI = "EVENT_CHARACTER_SECCION_KI";
var EVENT_CHARACTER_SECCION_MAGIA = "EVENT_CHARACTER_SECCION_MAGIA";
var EVENT_CHARACTER_SECCION_PSIQUICA = "EVENT_CHARACTER_SECCION_PSIQUICA";
var EVENT_CHARACTER_SECCION_ELAN = "EVENT_CHARACTER_SECCION_ELAN";
var EVENT_CHARACTER_SECCION_ARTES_MARCIALES = "EVENT_CHARACTER_SECCION_ARTES_MARCIALES";
var EVENT_CHARACTER_SECCION_SECUNDARIAS = "EVENT_CHARACTER_SECCION_SECUNDARIAS";



var notificacionesActivas = true;

/**
 *
 * @param {string} nombreEvento
 */
function lanzarEvento(nombreEvento) {
    if (notificacionesActivas) {
        DISPATCHER.trigger(nombreEvento);
    }
}

/**
 *
 */
function activarNotificaciones() {
    notificacionesActivas = true;
}

/**
 *
 */
function desactivarNotificaciones() {
    notificacionesActivas = false;
}


var ANCHO_DIALOGO = 900;
var ALTO_DIALOGO = 700;

var ANCHO_COMPLETO = 900;


var UI_NOMBRE = "Nombre";
var UI_SEXO = "Sexo";
var UI_RAZA = "Raza";
var UI_PESO = "Peso";
var UI_ALTURA = "Altura";
var UI_CATEGORIA = "Categoría";
var UI_PUNTOS_CANSANCIO = "Puntos de Cansancio";
var UI_TIPO_MOVIMIENTO = "Tipo de Movimiento";
var UI_PUNTOS_VIDA = "Puntos de vida";
var UI_APARIENCIA = "Apariencia";
var UI_TAMAÑO = "Tamaño";
var UI_REGENERACION = "Regeneración";
var UI_PUNTOS_DESARROLLO = "Puntos de Desarrollo";
var UI_PUNTOS_CREACION = "Puntos de Creación";
var UI_AUMENTOS_CARACTERISTICAS = "Aumentos de características";
var UI_PUNTOS_SIN_USAR = "sin usar";
var UI_PC_DON = "del Don";
var UI_PC_PSIQUICA = "de psíquica";
var UI_NIVEL = "Nivel";
var UI_PX = "Puntos de Experiencia";
var UI_ARQUETIPO = "Arquetipo";
var UI_TURNO = "Turno";
var UI_TABLAS = "Tablas";
var UI_ARTES_MARCIALES = "Artes Marciales";
var UI_CM = "CM";
var UI_ARMADURA = "Armadura";
var UI_ARMAS_MANEJADAS = "Armas manejadas";
var UI_CAPACIDADES_FISICAS = "Capacidades físicas";
var UI_DESARROLLO = "Desarrollo del personaje";
var UI_ELAN = "Elan";

var UI_DESCRIPCION = "Descripción";

var UI_COSTE_KI = "Coste de Ki";
var UI_MANTENIDA = "Técnica mantenida";
var UI_COSTE_MANTENIMIENTO = "Coste de mantenimiento";

var UI_PD_COMBATE = "PDs en combate";
var UI_PD_ATAQUE_DEFENSA = "PDs en ataque y defensa";
var UI_PD_SOBRENATURAL = "PDs en sobrenaturales";
var UI_PD_PSIQUICA = "PDs en psíquicas";
var UI_PD_SECUNDARIAS = "PDs en secundarias";

var UI_MULTIPLO_VIDA = "Múltiplo de vida";
var UI_PV_POR_NIVEL = "PV por nivel";
var UI_TURNO_POR_NIVEL = "Turno por nivel";
var UI_CM_POR_NIVEL = "CM por nivel";
var UI_NIVELES_PARA_CV = "Niveles para CV";

var UI_LIMITE_COMBATE = "Máximo en Combate";
var UI_ATAQUE = "Ataque";
var UI_PARADA = "Parada";
var UI_ESQUIVA = "Esquiva";
var UI_LLEVAR_ARMADURA = "Llevar Armadura";
var UI_KI = "Ki";
var UI_ACUMULACION_KI = "Acumulación de Ki";
var UI_KI_AGI = "Ki Agilidad";
var UI_ACUMULACION_KI_AGI = "Ac. de Ki Agilidad";
var UI_KI_DES = "Ki Destreza";
var UI_ACUMULACION_KI_DES = "Ac. de Ki Destreza";
var UI_KI_FUE = "Ki Fuerza";
var UI_ACUMULACION_KI_FUE = "Ac. de Ki Fuerza";
var UI_KI_CON = "Ki Constitución";
var UI_ACUMULACION_KI_CON = "Ac. de Ki Constitución";
var UI_KI_POD = "Ki Poder";
var UI_ACUMULACION_KI_POD = "Ac. de Ki Poder";
var UI_KI_VOL = "Ki Voluntad";
var UI_ACUMULACION_KI_VOL = "Ac. de Ki Voluntad";

var UI_HABILIDAD_NATURAL = "Habilidad Natural (+10)";
var UI_BONIFICADOR_NATURAL_FISICO = "Bonificador natural físico (añadir bono de característica)";
var UI_BONIFICADOR_NATURAL_MENTAL = "Bonificador natural mental (añadir bono de característica)";
var UI_BONIFICADOR_NATURAL_EXTRA = "Bonificador natural extra (añadir bono de característica)";
var UI_BONO_NOVEL = "Bono innato de Novel (+10)";

var UI_ELEGIR = "?";

var UI_LIMITE_SOBRENATURAL = "Máximo en Sobrenatural";
var UI_ZEON = "Zeon";
var UI_ACT = "ACT";
var UI_PROYECCION_MAGICA = "Proyección Mágica";
var UI_CONVOCAR = "Convocar";
var UI_DOMINAR = "Dominar";
var UI_ATAR = "Atar";
var UI_DESCONVOCAR = "Desconvocar";

var UI_LIMITE_PSIQUICA = "Máximo en Psíquica";
var UI_CV = "CV";
var UI_PROYECCION_PSIQUICA = "Proyección Psíquica";
var UI_POTENCIAL_PSIQUICO = "Potencial Psíquico";

var UI_ATLETICAS = "Atléticas";
var UI_SOCIALES = "Sociales";
var UI_PERCEPTIVAS = "Perceptivas";
var UI_INTELECTUALES = "Intelectuales";
var UI_VIGOR = "Vigor";
var UI_SUBTERFUGIO = "Subterfugio";
var UI_CREATIVAS = "Creativas";

var UI_COSTES_REDUCIDOS = "Costes Reducidos";
var UI_BONOS_INNATOS ="Bonos innatos";
var UI_POR_NIVEL = "por nivel";
var UI_NINGUNO = "Ninguno";

var UI_RF = "Resistencia Física";
var UI_RE = "Resistencia contra Enfermedades";
var UI_RV = "Resistencia contra Venenos";
var UI_RM = "Resistencia Mágica";
var UI_RP = "Resistencia Psíquica";

var UI_BOTON_CREACION = "Iniciar Creación";
var UI_BOTON_RAZA = "Elegir Raza";
var UI_BOTON_CATEGORIA = "Elegir Categoría";
var UI_BOTON_VENTAJAS = "Comprar Ventajas";
var UI_BOTON_DESVENTAJAS = "Elegir Desventajas";
var UI_BOTON_NATURALES = "Elegir bonos Naturales";
var UI_BOTON_ARMA_INICIAL = "Elegir arma inicial";
var UI_BOTON_ARTES_MARCIALES = "Comprar Artes Marciales";
var UI_BOTON_TABLAS_ARMAS = "Comprar Tablas de Armas";
var UI_BOTON_GASTAR_CV = "Gastar CVs";
var UI_BOTON_GASTAR_CM = "Gastar CM";
var UI_BOTON_GASTAR_NIVELES_VIA = "Gastar niveles de vía";
var UI_BOTON_GASTAR_ELAN = "Gastar elan";
var UI_BOTON_FINALIZAR_CREACION = "Finalizar Creación";
var UI_BOTON_SUBIR_NIEVL = "Subir nivel";

var UI_BOTON_GUARDAR = "Guardar personaje";
var UI_BOTON_CARGAR = "Cargar personaje";

var UI_BOTON_SOPORTE = "Informa de errores";
var UI_BOTON_COMENTARIOS = "Comentarios, sugerencias ...";

var UI_PERSONALES = "Datos Personales";
var UI_RESISTENCIAS = "Resistencias";
var UI_VENTAJAS = "Ventajas";
var UI_DESVENTAJAS = "Desventajas";
var UI_CARACTERISTICAS = "Características";

var UI_CARACTERISTICA = "Característica";
var UI_VALOR = "Valor";
var UI_BONO= "Bono";


var UI_COMBATE = "Habilidades de Combate";
var UI_DOMINIOS_KI = "Dominios del Ki";

var UI_SOBRENATURALES = "Magia";
var UI_CONVOCATORIA = "Convocatoria";

var UI_PSIQUICA = "Poderes Psíquicos";

var UI_SECUNDARIAS = "Habilidades Secundarias";

var CSS_RECUADRO = "recuadroDatos";
var CSS_CAMPO_PERSONALES = "campoDatosPersonales";
var CSS_ETIQUETA_PERSONALES = "etiquetaPersonales";
var CSS_VALOR_PERSONALES = "valorPersonales";
var CSS_CAMPO_CARACTERISTICAS = "campoCaracteristicas";
var CSS_ETIQUETA_CARACTERISTICAS = "etiquetaCaracteristicas";
var CSS_VALOR_CARACTERISTICAS = "valorCaracteristicas";
var CSS_BONO_CARACTERISTICAS = "bonoCaracteristicas";
var CSS_BOTON_CREACION = "botonCreacion";
var CSS_ETIQUETA_CREACION = "etiquetaCreacion";
var CSS_FILA_EFECTO_TECNICA = "botonFilaEfectoTecnica";
var CSS_ETIQUETA_EFECTO_TECNICA = "etiquetaEfectoTecnica";
var CSS_CONTENIDO_RECUADRO = "contenidoRecuadro";
var CSS_LISTA_INLINE = "listaInline";

var CSS_ETIQUETA = "etiquetaCampoHoja";
var CSS_COSTE = "costeCampoHoja";
var CSS_TABULADO = "tabulado";

var CSS_TITULO_SECCION = "tituloSeccion";
var CSS_SUBTITULO_SECCION = "subtituloSeccion";

var CSS_CLASS_BOTONES_MAS_MENOS = "botonesMasMenos";
var CSS_CLASS_EXPLICACION_CATEGORIA = "explicacionCategoria";
var CSS_MUESTRA_BLOCK = "muestraBlock";
var CSS_TEXTO_FUERTE = "textoFuerte";
var CSS_MUESTRA_INLINE = "muestraInline";
var CSS_MUESTRA_INLINE_BLOCK = "muestraInlineBlock";
var CSS_TEXTO_ITALIC = "textoItalic";
var CSS_TEXTO_SMALLER = "textoSmaller";
var CSS_TEXTO_SMALL = "textoSmall";
var CSS_FLOAT_LEFT = "floatLeft";
var CSS_TEXTO_CENTRO = "textCenter";
var CSS_VALOR_ABANDONADO = "valorCaracteristicaTachado";

function getDiv(clase) {
    return $("<div></div>").addClass(clase);
}


var PRE = "Presencia";

var RF = "Resistencia Física";
var RE = "Resistencia a Enfermedades";
var RV = "Resistencia a Venenos";
var RM = "Resistencia Mágica";
var RP = "Resistencia Psíquica";


/**************TIPOS DE BONOS*/
var BONO_HABILIDAD = "bono a habilidad";
var BONO_TURNO = "bono al turno";
var BONO_DAÑO = "bono al daño";
var BONO_ENTEREZA = "bono a la entereza";
var BONO_ROTURA = "bono a la rotura";
var BONO_TAMAÑO = "bono al tamaño";
var BONO_RESISTENCIA = "bono a Resistencia";
var BONO_PV = "bono a los pv";
var BONO_REGENERACION = "bono a la regeneración";
var BONO_CM = "bono al CM";
var BONO_KI = "bono a una habilidad de ki";
var BONO_INT_APRENDER_CONJURO = "bono a la INT para aprender conjuros";
var BONO_MAGIA_INNATA = "bono a la magia innata";
/***************************/

/*************ORIGENES DE BONOS*/
var ORIGEN_CARAC = "Característica";
var ORIGEN_CATEGORIA = "Categoría";
var ORIGEN_HABILIDAD_NATURAL = "Habilidad Natural";
var ORIGEN_BONIFICADOR_NATURAL = "Bonificador Natural";
/****************************/

/************CATEGORIAS DE BONOS*/
var BONO_INNATO = "Innato";
var BONO_CARACTERISTICA = "Característica";
var BONO_ESPECIAL = "Especial";
var BONO_CATEGORIA = "Categoría";
var BONO_NATURAL = "Natural";

var CATEGORIA_BONO_CUALQUIERA = "CATEGORIA_BONO_CUALQUIERA";
/*********************************/

/**
 *
 * @param {string} tipo
 * @param {string} item
 * @param {number} bono
 * @param {string} opcion
 * @param {boolean} porNivel
 * @param {string} categoria
 * @param {string} origen
 * @param {{}} [parametros]
 * @constructor
 * @class Bono
 */
function Bono(tipo, item, bono, opcion, porNivel,categoria,origen,parametros) {
    /** @type string */
    this.tipo = tipo;

    /** @type string */
    this.item = item;

    /** @type number */
    this.bono = bono;

    /** @type string */
    this.opcion = opcion || "";

    /** @type string */
    this.categoria = categoria || "";

    /** @type string */
    this.origen = origen ||"";

    if (this.origen == ORIGEN_CATEGORIA) {
        /** @type string */
        this.categoriaPersonaje = parametros.categoriaPersonaje;
    }

    /** @type boolean */
    this.porNivel = porNivel || false;
}

Bono.prototype = {
    constructor: Bono,

    /**
     *
     * @returns {string}
     */
    getTipo : function() {
        return this.tipo;
    },

    /**
     *
     * @returns {string}
     */
    getItem : function() {
        return this.item;
    },

    /**
     *
     * @returns {number}
     */
    getBono : function() {
        return this.bono;
    },

    /**
     *
     * @returns {string}
     */
    getBonoString : function() {
        if (this.bono < 0) {
            return "" + this.bono;
        } else {
            return "+" + this.bono;
        }
    },

    /**
     *
     * @param {number} nivel El nivel al que se quiere saber el valor del bono
     * @param {Personaje} personaje El personaje que posee el bono
     * @returns {number}
     */
    getBonoParaNivel : function(nivel, personaje) {
        var valor;
        if (this.porNivel) {
            if (this.origen == ORIGEN_CATEGORIA) {
                var nivelesDeCategoria = personaje.getNivelesDeCategoriaHastaNivel(this.categoriaPersonaje,nivel);
                valor = this.bono*nivelesDeCategoria;
            } else {
                valor = this.bono*nivel;
            }
        } else {
            valor = this.bono;
        }
        return valor;
    },

    /**
     *
     * @returns {string}
     */
    getOpcion : function() {
        return this.opcion;
    },

    /**
     *
     * @returns {string}
     */
    getCategoria : function() {
        return this.categoria;
    },

    /**
     *
     * @returns {string}
     */
    getOrigen : function() {
        return this.origen;
    },

    /**
     *
     * @returns {boolean}
     */
    isPorNivel : function() {
        return this.porNivel;
    }
};


//region BonificadorNatural

/**
 *
 * @class BonificadorNatural
 * @constructor
 */
function BonificadorNatural() {
    /** @type string */
    this[TIPO_BONIFICADOR_NATURAL_FISICO] = "";

    /** @type string */
    this[TIPO_BONIFICADOR_NATURAL_MENTAL] = "";

    /** @type string */
    this[TIPO_BONIFICADOR_NATURAL_EXTRA] = "";
}

BonificadorNatural.prototype = {
    constructor : BonificadorNatural,

    /**
     *
     * @returns {string}
     */
    getFisico : function() {
        return this[TIPO_BONIFICADOR_NATURAL_FISICO];
    },

    /**
     *
     * @param {string} nombreHabilidad
     */
    setFisico : function(nombreHabilidad) {
        this[TIPO_BONIFICADOR_NATURAL_FISICO] = nombreHabilidad;
    },

    /**
     *
     * @returns {string}
     */
    getMental : function() {
        return this[TIPO_BONIFICADOR_NATURAL_MENTAL];
    },

    /**
     *
     * @param {string} nombreHabilidad
     */
    setMental : function(nombreHabilidad) {
        this[TIPO_BONIFICADOR_NATURAL_MENTAL] = nombreHabilidad;
    },

    getExtra : function() {
        return this[TIPO_BONIFICADOR_NATURAL_EXTRA];
    },

    /**
     *
     * @param {string} nombreHabilidad
     */
    setExtra : function(nombreHabilidad) {
        this[TIPO_BONIFICADOR_NATURAL_EXTRA] = nombreHabilidad;
    }
};
//endregion BonificadorNatural

/**
 *
 * @class ElementoProhibido
 * @param {string} tipo
 * @param {string} nombre
 * @param {string} [opcion]
 * @constructor
 */
function ElementoProhibido(tipo, nombre, opcion) {
    /**
     *
     * @type {string}
     */
    this.tipo = tipo;

    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {number}
     */
    this.candados = 1;

    if (opcion != undefined) {
        /**
         *
         * @type {string}
         */
        this.opcion = opcion;
    }
}

ElementoProhibido.prototype = {
    constructor : ElementoProhibido,

    /**
     *
     * @returns {string}
     */
    getTipo : function() {
        return this.tipo;
    },

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {number}
     */
    getCandados : function() {
        return this.candados;
    },

    /**
     *
     * @param {number} valor
     */
    setCandados : function(valor) {
        this.candados = valor;
    },

    /**
     *
     */
    abreCandado : function() {
        this.candados--;
    },

    /**
     *
     */
    cierraCandado : function() {
        this.candados++;
    },

    /**
     *
     * @returns {boolean}
     */
    hasOpcion : function() {
        //noinspection JSValidateTypes
        return (this.opcion != undefined);
    },

    /**
     *
     * @returns {string}
     */
    getOpcion : function() {
        return this.opcion;
    }
};

var REQUISITO_HABILIDAD = "Requisito de habilidad";
var REQUISITO_HABILIDAD_KI = "Requisito de Habilidad del Ki";
var REQUISITO_ARTE_MARCIAL = "Requisito de Arte Marcial";
var REQUISITO_UNO_DE_LOS_SIGUIENTES = "Requisito uno entre varios";
var REQ_CADENA_UNO_ENTRE = "Uno de los siguientes requisitos";

/**
 *
 * @class Requisito
 * @param {string} tipo
 * @param {string|Requisito[]} item
 * @param {number} valor
 * @constructor
 */
function Requisito(tipo, item, valor) {
    /**
     *
     * @type {string}
     */
    this.tipo = tipo;
    if (tipo == REQUISITO_UNO_DE_LOS_SIGUIENTES) {
        /**
         *
         * @type {Requisito[]}
         */
        this.requisitos = item;
    } else {
        /**
         *
         * @type {string}
         */
        this.item = item;

        /**
         *
         * @type {number}
         */
        this.valor = valor;
    }
}

Requisito.prototype = {

    constructor : Requisito,

    toString : function() {
        var cadena = "";
        if (this.tipo == REQUISITO_UNO_DE_LOS_SIGUIENTES) {
            cadena = REQ_CADENA_UNO_ENTRE + ": ";
            for (var i = 0; i < this.requisitos.length; i++) {
                cadena += this.requisitos[i].toString();
                if (i < this.requisitos.length-1) {
                    cadena += "; ";
                }
            }
        } else {
            cadena = this.tipo + ": " + this.item;
            if (this.tipo == REQUISITO_HABILIDAD) {
                cadena += " " + this.valor;
            }
        }
        return cadena;
    },

    /**
     *
     * @returns {string}
     */
    getTipo : function() {
        return this.tipo;
    },

    /**
     *
     * @returns {string}
     */
    getItem : function() {
        return this.item;
    },

    /**
     *
     * @returns {Requisito[]}
     */
    getRequisitos : function() {
        return this.requisitos;
    },

    /**
     *
     * @returns {number}
     */
    getValor : function() {
        return this.valor;
    },

    /**
     *
     * @param {Personaje} personaje
     * @returns {boolean}
     */
    cumple : function(personaje) {
        var cumple = true;

        switch (this.tipo) {
            case REQUISITO_HABILIDAD:
                cumple = (personaje.getHabilidadDePersonaje(this.item).valorFinalActual() >= this.valor);
                break;
            case REQUISITO_HABILIDAD_KI:
                cumple = (personaje.hasHabilidadKi(this.item));
                break;
            case REQUISITO_ARTE_MARCIAL:
                cumple = personaje.hasArteMarcial(this.item);
                break;
            case REQUISITO_UNO_DE_LOS_SIGUIENTES:
                var cumpleEsteReq = false;
                for (var i = 0; i < this.requisitos.length; i++) {
                    cumpleEsteReq = cumpleEsteReq || this.requisitos[i].cumple(personaje);
                }
                cumple = cumpleEsteReq;
                break;
        }
        return cumple;
    }
};

/**
 *
 * @class Habilidad
 * @param {string} nombre
 * @param {string} tipo
 * @param {boolean} esPrincipal
 * @param {string} caracteristica
 * @param {boolean} isConocimiento
 * @param {boolean} penalizadorArmadura
 * @param {string[]} especializaciones
 * @param {number} puntosAComprar
 * @constructor
 */
function Habilidad(nombre, tipo, esPrincipal, caracteristica, isConocimiento, penalizadorArmadura, especializaciones, puntosAComprar, puntosPorCoste) {
    /** @type string */
    this.nombre = nombre;

    /** @type string */
    this.tipo = tipo;

    /** @type boolean */
    this.esPrincipal = esPrincipal;

    /** @type string */
    this.caracteristica = caracteristica;

    /** @type boolean */
    this.esConocimiento = isConocimiento;

    /** @type number */
    this.penalizadorArmadura = penalizadorArmadura;

    /** @type string[] */
    this.especializacionesPosibles = especializaciones;

    /** @type number */
    this.puntosAComprar = puntosAComprar;

    /** @type number */
    this.puntosPorCoste = puntosPorCoste;
}

Habilidad.prototype = {
    constructor : Habilidad,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getTipo : function() {
        return this.tipo;
    },

    /**
     *
     * @returns {boolean}
     */
    isPrincipal : function() {
        return this.esPrincipal;
    },

    /**
     *
     * @returns {string}
     */
    getCaracteristica : function() {
        return this.caracteristica;
    },

    /**
     *
     * @returns {boolean}
     */
    isConocimiento : function() {
        return this.esConocimiento;
    },

    /**
     *
     * @returns {number}
     */
    getPenalizadorArmadura : function() {
        return this.penalizadorArmadura;
    },

    /**
     *
     * @returns {string[]}
     */
    getEspecializacionesPosibles : function() {
        return this.especializacionesPosibles;
    },

    /**
     *
     * @returns {number}
     */
    getPuntosAComprar : function() {
        return this.puntosAComprar;
    },

    /**
     *
     * @returns {number}
     */
    getPuntosPorCoste : function() {
        return this.puntosPorCoste;
    },

    toJSON : function() {
        return this.nombre;
    }
}

//region HabilidadDePersonaje
/**
 *
 * @class HabilidadDePersonaje
 * @param {Habilidad} habilidad
 * @constructor
 */
function HabilidadDePersonaje(habilidad) {
    /** @type Habilidad */
    this.habilidad = habilidad;

    /** @type string */
    this.especializacion = "";

    /**
     * Los PD invertidos en la actual subida de nivel
     * @type number */
    this.PDinvertidos = 0;

    /**
     * Los PD invertidos en niveles anteriores
     * @type number */
    this.PDinvertidosPrevios = 0;

    /** @type number */
    this.multiploBonificadorNatural = 0;

    /** @type number */
    this.valorInicial = 0;

    /** @type number */
    this.valorPrevio = 0;
}

HabilidadDePersonaje.prototype = {
    constructor : HabilidadDePersonaje,

    /**
     *
     * @returns {Habilidad}
     */
    getHabilidad : function() {
        return this.habilidad;
    },

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.habilidad.getNombre()
    },

    /**
     *
     * @returns {string}
     */
    getCaracteristica : function() {
        return this.habilidad.getCaracteristica();
    },

    /**
     * @returns {strin
     */
    getTipo : function() {
        return this.habilidad.getTipo();
    },

    /**
     *
     * @returns {string}
     */
    getEspecializacion : function() {
        return this.especializacion;
    },

    /**
     *
     * @param {string} especializacion
     */
    setEspecializacion : function(especializacion) {
        this.especializacion = especializacion;
    },

    /**
     *
     * @returns {number}
     */
    getPDinvertidos : function() {
        return this.PDinvertidos + this.PDinvertidosPrevios;
    },

    /**
     *
     * @returns {number}
     */
    getPDinvertidosActuales : function() {
        return this.PDinvertidos;
    },

    /**
     *
     * @param {number} PDinvertidos
     */
    setPDinvertidos : function(PDinvertidos) {
        this.PDinvertidos = PDinvertidos;
    },

    /**
     *
     * @returns {number}
     */
    getPDInvertidosPrevios : function() {
        return this.PDinvertidosPrevios;
    },

    /**
     *
     * @param {number} valor
     */
    addPDinvertidos : function(valor) {
        this.PDinvertidos += valor;
    },

    /**
     *
     * @returns {number}
     */
    getMultiploBonificadorNatural : function() {
        return this.multiploBonificadorNatural;
    },

    /**
     *
     * @param {number} multiploBonificadorNatural
     */
    setMultiploBonificadorNatural : function(multiploBonificadorNatural) {
        this.multiploBonificadorNatural = multiploBonificadorNatural;
    },

    /**
     *
     * @param {number} valor
     */
    addMultiploBonificadorNatural : function(valor) {
        this.multiploBonificadorNatural += valor;
    },

    /**
     *
     * @returns {number}
     */
    getValorInicial : function() {
        return this.valorInicial;
    },

    /**
     *
     * @param {string} valor
     */
    setValorInicial : function(valor) {
        this.valorInicial = valor;
    },

    /**
     *
     * @param {number} coste
     * @returns {number}
     */
    valorBase : function(coste) {
        if (this.habilidad.getNombre() == HB_POTENCIAL_PSIQUICO) {
            var potencial = personaje_actual.getPotencialPsiquicoBase();
            potencial += personaje_actual.getHabilidadDePersonaje(HB_POTENCIAL_PSIQUICO).bono;
            return potencial;
        } else if (this.habilidad.getNombre() == HB_ACT) {
            return this.valorInicial * (1 + this.valorPrevio + Math.floor(this.PDinvertidos / coste));
        }


        if (this.PDinvertidos + this.PDinvertidosPrevios == 0) {
            if (!this.habilidad.esPrincipal) {
                if (personaje_actual.hasFlag(FLAG_CONOCEDOR_TODAS_MATERIAS)) {
                    return this.valorInicial;
                } else {
                    if (this.habilidad.esConocimiento) {
                        return HABILIDAD_NO_USABLE;
                    } else {
                        return VALOR_INICIAL_SIN_RANGOS;
                    }
                }
            } else {
                return this.valorInicial;
            }
        } else {
            return this.valorInicial + this.valorPrevio + ( Math.floor(this.PDinvertidos / coste) * this.getHabilidad().getPuntosPorCoste());
        }
    },

    /**
     *
     * @param {number} coste
     * @returns {{pdDevueltos: number, mensaje: string}}
     */
    ajustarPDEnMultiplo : function(coste) {
        var pdDevueltos = 0;
        var mensaje = "";

        if (this.PDinvertidos % coste != 0) {
            var ajuste = this.PDinvertidos % coste;
            this.PDinvertidos -= ajuste;
            pdDevueltos = ajuste;
            mensaje = "Recuperados " + ajuste + " PD para dejar valor de " + this.habilidad.getNombre() + " justo";
        }

        if ((this.PDinvertidos / coste) % this.habilidad.getPuntosAComprar() != 0) {
            var ajuste5 = ((this.PDinvertidos / coste) % this.habilidad.getPuntosAComprar())*coste;
            this.PDinvertidos -= ajuste5;
            pdDevueltos = ajuste5;
            mensaje = "Recuperados " + ajuste5 + " PD para dejar valor de " + this.habilidad.getNombre() + " en múltiplo de " + this.habilidad.getPuntosAComprar();
        }

        return {pdDevueltos:pdDevueltos,mensaje:mensaje};
    },

    /**
     *
     * @returns {number}
     */
    valorFinalActual : function() {
        var i;
        var coste = personaje_actual.getCoste(this.habilidad.getNombre(), this.habilidad.isPrincipal());
        var valorFinal = this.valorBase(coste);
        var sumaNaturalesYCarac = 0;
        var sumaInnatos = 0;

        var bonos = personaje_actual.getBonos(BONO_HABILIDAD,this.habilidad.getNombre(),CATEGORIA_BONO_CUALQUIERA);
        for (i = 0; i < bonos.length; i++) {
            var bono = bonos[i];
            var valorBono = bono.getBonoParaNivel(personaje_actual.getNivel(),personaje_actual);
            valorFinal += parseInt(valorBono);

            if (bono.getCategoria() == BONO_INNATO) {
                sumaInnatos += valorBono;
            } else if ((bono.getCategoria() == BONO_NATURAL) || (bono.getCategoria() == BONO_CARACTERISTICA)) {
                sumaNaturalesYCarac += valorBono;
            }
        }

        if ((this.getNombre() == HB_ATAQUE) || (this.getNombre() == HB_PARADA) || (this.getNombre() == HB_ESQUIVA)) {
            if (sumaInnatos > 50) {
                valorFinal -= (sumaInnatos-50);
            }
        }

        if (sumaNaturalesYCarac > 100) {
            valorFinal -= (sumaNaturalesYCarac-100);
        }

        return valorFinal;
    },

    subirNivel : function() {
        this.valorPrevio = this.valorBase(personaje_actual.getCoste(this.habilidad.getNombre(), this.habilidad.isPrincipal()));
        this.PDinvertidosPrevios += this.PDinvertidos;
        this.PDinvertidos = 0;
    }
};
//endregion HabilidadDePersonaje

/**
 *
 * @type {Habilidad[]}
 */
var habilidades_set = [];

/**
 *
 * @type {{}}
 */
var allHabilidades = {};

var HABILIDAD_NO_USABLE = -99999;
var VALOR_INICIAL_SIN_RANGOS = -30;

var TIPO_CAPACIDAD = "Capacidad especial";

var TIPO_HB_COMBATE = "Habilidades de Combate";
var HB_ATAQUE = "Habilidad de Ataque";
var HB_PARADA = "Habilidad de Parada";
var HB_ESQUIVA = "Habilidad de Esquiva";
var HB_ARMADURA = "Llevar Armadura";
var HB_KI = "Ki";
var HB_KI_FUE = "Ki Fuerza";
var HB_KI_DES = "Ki Destreza";
var HB_KI_AGI = "Ki Agilidad";
var HB_KI_VOL = "Ki Voluntad";
var HB_KI_POD = "Ki Poder";
var HB_KI_CON = "Ki Constitución";
var HB_ACUM_KI = "Acumulación Ki";
var HB_ACUM_KI_FUE = "Acumulación Ki Fuerza";
var HB_ACUM_KI_DES = "Acumulación Ki Destreza";
var HB_ACUM_KI_AGI = "Acumulación Ki Agilidad";
var HB_ACUM_KI_VOL = "Acumulación Ki Voluntad";
var HB_ACUM_KI_POD = "Acumulación Ki Poder";
var HB_ACUM_KI_CON = "Acumulación Ki Constitución";
/*TABLAS*/

var TIPO_HB_SOBRENATURAL = "Habilidades Sobrenaturales";
var HB_ZEON = "Zeon";
var HB_ACT = "ACT";
var HB_PROYECCION_MAGICA = "Proyección Mágica";
var HB_CONVOCAR = "Convocar";
var HB_DOMINAR = "Dominar";
var HB_ATAR = "Atar";
var HB_DESCONVOCAR = "Desconvocar";


var TIPO_HB_PSIQUICA = "Habilidades Psíquicas";
var HB_CV = "CV";
var HB_PROYECCION_PSIQUICA = "Proyección Psíquica";
var HB_POTENCIAL_PSIQUICO = "Potencial Psíquico";

var HB_MULTIPLO_VIDA = "Múltiplos de vida";


var TIPO_HB_ATLETICAS = "Atléticas";
var HB_ACROBACIAS = "Acrobacias";
var HB_ATLETISMO = "Atletismo";
var HB_MONTAR = "Montar";
var HB_NADAR = "Nadar";
var HB_SALTAR = "Saltar";
var HB_TREPAR = "Trepar";

/**
 *
 * @type {string[]}
 */
var habilidades_atleticas_set = [HB_ACROBACIAS,HB_ATLETISMO,HB_MONTAR,HB_NADAR,HB_SALTAR,HB_TREPAR];

var TIPO_HB_SOCIALES = "Sociales";
var HB_ESTILO = "Estilo";
var HB_INTIMIDAR = "Intimidar";
var HB_LIDERAZGO = "Liderazgo";
var HB_PERSUASION = "Persuasión";

/**
 *
 * @type {string[]}
 */
var habilidades_sociales_set = [HB_ESTILO,HB_INTIMIDAR,HB_LIDERAZGO,HB_PERSUASION];

var TIPO_HB_SUBTERFUGIO = "Subterfugio";
var HB_CERRAJERIA = "Cerrajería";
var HB_DISFRAZ = "Disfraz";
var HB_OCULTARSE = "Ocultarse";
var HB_ROBO = "Robo";
var HB_SIGILO = "Sigilo";
var HB_TRAMPERIA = "Trampería";
var HB_VENENOS = "Venenos";

/**
 *
 * @type {string[]}
 */
var habilidades_subterfugio_set = [HB_CERRAJERIA,HB_DISFRAZ,HB_OCULTARSE,HB_ROBO,HB_SIGILO,HB_TRAMPERIA,HB_VENENOS];

var TIPO_HB_PERCEPTIVAS = "Perceptivas";
var HB_ADVERTIR = "Advertir";
var HB_BUSCAR = "Buscar";
var HB_RASTREAR = "Rastrear";

/**
 *
 * @type {string[]}
 */
var habilidades_perceptivas_set = [HB_ADVERTIR,HB_BUSCAR,HB_RASTREAR];

var TIPO_HB_INTELECTUALES = "Intelectuales";
var HB_ANIMALES = "Animales";
var HB_CIENCIA = "Ciencia";
var HB_HERBOLARIA = "Herbolaria";
var HB_HISTORIA = "Historia";
var HB_MEDICINA = "Medicina";
var HB_MEMORIZAR = "Memorizar";
var HB_NAVEGACION = "Navegación";
var HB_OCULTISMO = "Ocultismo";
var HB_TASACION = "Tasación";
var HB_VALORACION_MAGICA = "Valoración mágica";

/**
 *
 * @type {string[]}
 */
var habilidades_intelectuales_set = [HB_ANIMALES,HB_CIENCIA,HB_HERBOLARIA,HB_HISTORIA,HB_MEDICINA,HB_MEMORIZAR,HB_NAVEGACION,HB_OCULTISMO,HB_TASACION,HB_VALORACION_MAGICA];

var TIPO_HB_VIGOR = "Vigor";
var HB_FRIALDAD = "Frialdad";
var HB_PROEZAS_FUERZA = "Proezas de fuerza";
var HB_RESISTENCIA_DOLOR = "Resistencia al dolor";

/**
 *
 * @type {string[]}
 */
var habilidades_vigor_set = [HB_FRIALDAD,HB_PROEZAS_FUERZA,HB_RESISTENCIA_DOLOR];

var TIPO_HB_CREATIVAS = "Creativas";
var HB_ARTE = "Arte";
var HB_BAILE = "Baile";
var HB_FORJA = "Forja";
var HB_MUSICA = "Música";
var HB_TRUCOS_MANOS = "Trucos de manos";

/**
 *
 * @type {string[]}
 */
var habilidades_creativas_set = [HB_ARTE,HB_BAILE,HB_FORJA,HB_MUSICA,HB_TRUCOS_MANOS];

/**
 *
 * @type {string[][]}
 */
var habilidades_secundarias = [habilidades_atleticas_set, habilidades_sociales_set, habilidades_subterfugio_set, habilidades_perceptivas_set, habilidades_intelectuales_set, habilidades_vigor_set, habilidades_creativas_set];

/**
 *
 * @type {string[]}
 */
var habilidades_secundarias_nombres_grupos = [TIPO_HB_ATLETICAS, TIPO_HB_SOCIALES, TIPO_HB_SUBTERFUGIO, TIPO_HB_PERCEPTIVAS, TIPO_HB_INTELECTUALES, TIPO_HB_VIGOR, TIPO_HB_CREATIVAS];

var PEN_ARMADURA_NO = "Sin penalizador por armadura";
var PEN_ARMADURA_SI = "Con penalizador por armadura";
var PEN_ARMADURA_SI_IRREDUCIBLE = "Con penalizador por armadura, no reducible";
var PEN_ARMADURA_SI_MEDIO_REDUCIBLE = "Con penalizador por armadura, reducible a la mitad";

var UI_NO_USABLE_SIN_RANGOS = "--";

/**
 *
 * @param {Habilidad} habilidad
 */
function addHabilidad(habilidad) {
    if (!existeHabilidad(habilidad.getNombre())) {
        habilidades_set.push(habilidad);
        allHabilidades[habilidad.getNombre()] = habilidad;
        if (allHabilidades[habilidad.getTipo()] == undefined) {
            allHabilidades[habilidad.getTipo()] = [];
        }
        allHabilidades[habilidad.getTipo()].push(habilidad);
    }
}

/**
 *
 * @param {strng} nombre
 * @returns {boolean}
 */
function existeHabilidad(nombre) {
    return (allHabilidades[nombre] != undefined);
}

/**
 *
 * @param {string} nombreTipo
 * @returns {boolean}
 */
function existeTipoHabilidad(nombreTipo) {
    return (allHabilidades[nombreTipo] != undefined);
}

/**
 *
 * @param {string} nombreHabilidad
 * @returns {Habilidad}
 * @throws ERR_HABILIDAD_ERRONEA
 */
function getHabilidad(nombreHabilidad) {
    if (existeHabilidad(nombreHabilidad)) {
        return allHabilidades[nombreHabilidad];
    } else {
        throw ERR_HABILIDAD_ERRONEA + " " + nombreHabilidad;
    }
}

/**
 *
 * @param {string} nombreTipo
 * @returns {Habilidad[]}
 * @throws ERR_TIPO_HABILIDAD_ERRONEO
 */
function getHabilidadesPorTipo(nombreTipo) {
    if (existeTipoHabilidad(nombreTipo)) {
        return allHabilidades[nombreTipo];
    } else {
        throw ERR_TIPO_HABILIDAD_ERRONEO + " " + nombreTipo;
    }
}

/**
 *
 */
function clearHabilidades() {
    habilidades_set = [];
    allHabilidades = {};
}

/**
 *
 */
function initHabilidadesCombate() {
    addHabilidad(new Habilidad(HB_MULTIPLO_VIDA, TIPO_CAPACIDAD, true, CON, false, false, [], 1, 1));
    addHabilidad(new Habilidad(HB_ATAQUE, TIPO_HB_COMBATE, true, DES, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_PARADA, TIPO_HB_COMBATE, true, DES, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_ESQUIVA, TIPO_HB_COMBATE, true, AGI, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_ARMADURA, TIPO_HB_COMBATE, true, FUE, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_KI_FUE, TIPO_HB_COMBATE, true, FUE, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_KI_DES, TIPO_HB_COMBATE, true, DES, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_KI_AGI, TIPO_HB_COMBATE, true, AGI, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_KI_CON, TIPO_HB_COMBATE, true, CON, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_KI_VOL, TIPO_HB_COMBATE, true, VOL, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_KI_POD, TIPO_HB_COMBATE, true, POD, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_ACUM_KI_FUE, TIPO_HB_COMBATE, true, FUE, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_ACUM_KI_DES, TIPO_HB_COMBATE, true, DES, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_ACUM_KI_AGI, TIPO_HB_COMBATE, true, AGI, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_ACUM_KI_CON, TIPO_HB_COMBATE, true, CON, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_ACUM_KI_VOL, TIPO_HB_COMBATE, true, VOL, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_ACUM_KI_POD, TIPO_HB_COMBATE, true, POD, false, PEN_ARMADURA_NO, [], 1, 1));
}

/**
 *
 */
function initHabilidadesMagia() {
    addHabilidad(new Habilidad(HB_ZEON, TIPO_HB_SOBRENATURAL, true, POD, false, PEN_ARMADURA_NO, [], 5, 5));
    addHabilidad(new Habilidad(HB_ACT, TIPO_HB_SOBRENATURAL, true, POD, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_PROYECCION_MAGICA, TIPO_HB_SOBRENATURAL, true, DES, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_CONVOCAR, TIPO_HB_SOBRENATURAL, true, POD, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_DOMINAR, TIPO_HB_SOBRENATURAL, true, VOL, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_ATAR, TIPO_HB_SOBRENATURAL, true, POD, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_DESCONVOCAR, TIPO_HB_SOBRENATURAL, true, POD, false, PEN_ARMADURA_NO, [], 5, 1));
}

/**
 *
 */
function initHabilidadesPsiquica() {
    addHabilidad(new Habilidad(HB_CV, TIPO_HB_PSIQUICA, true, "", false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_POTENCIAL_PSIQUICO, TIPO_HB_PSIQUICA, true, VOL, false, PEN_ARMADURA_NO, [], 1, 1));
    addHabilidad(new Habilidad(HB_PROYECCION_PSIQUICA, TIPO_HB_PSIQUICA, true, DES, false, PEN_ARMADURA_NO, [], 5, 1));
}

/**
 *
 */
function initHabilidadesSecundariasAtleticas() {
    addHabilidad(new Habilidad(HB_ACROBACIAS, TIPO_HB_ATLETICAS, false, AGI, false, PEN_ARMADURA_SI, [], 5, 1));
    addHabilidad(new Habilidad(HB_ATLETISMO, TIPO_HB_ATLETICAS, false, AGI, false, PEN_ARMADURA_SI, [], 5, 1));
    addHabilidad(new Habilidad(HB_MONTAR, TIPO_HB_ATLETICAS, false, AGI, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_NADAR, TIPO_HB_ATLETICAS, false, AGI, false, PEN_ARMADURA_SI_IRREDUCIBLE, [], 5, 1));
    addHabilidad(new Habilidad(HB_TREPAR, TIPO_HB_ATLETICAS, false, AGI, false, PEN_ARMADURA_SI, [], 5, 1));
    addHabilidad(new Habilidad(HB_SALTAR, TIPO_HB_ATLETICAS, false, FUE, false, PEN_ARMADURA_SI, [], 5, 1));
}

/**
 *
 */
function initHabilidadesSecundariasSociales() {
    addHabilidad(new Habilidad(HB_ESTILO, TIPO_HB_SOCIALES, false, POD, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_INTIMIDAR, TIPO_HB_SOCIALES, false, VOL, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_LIDERAZGO, TIPO_HB_SOCIALES, false, POD, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_PERSUASION, TIPO_HB_SOCIALES, false, INT, false, PEN_ARMADURA_NO, [], 5, 1));
}

/**
 *
 */
function initHabilidadesSecundariasSubterfugio() {
    addHabilidad(new Habilidad(HB_CERRAJERIA, TIPO_HB_SUBTERFUGIO, false, DES, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_DISFRAZ, TIPO_HB_SUBTERFUGIO, false, DES, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_OCULTARSE, TIPO_HB_SUBTERFUGIO, false, PER, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_ROBO, TIPO_HB_SUBTERFUGIO, false, DES, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_SIGILO, TIPO_HB_SUBTERFUGIO, false, AGI, false, PEN_ARMADURA_SI_MEDIO_REDUCIBLE, [], 5, 1));
    addHabilidad(new Habilidad(HB_TRAMPERIA, TIPO_HB_SUBTERFUGIO, false, PER, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_VENENOS, TIPO_HB_SUBTERFUGIO, false, INT, true, PEN_ARMADURA_NO, [], 5, 1));
}

/**
 *
 */
function initHabilidadesSecundariasPerceptivas() {
    addHabilidad(new Habilidad(HB_ADVERTIR, TIPO_HB_PERCEPTIVAS, false, PER, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_BUSCAR, TIPO_HB_PERCEPTIVAS, false, PER, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_RASTREAR, TIPO_HB_PERCEPTIVAS, false, PER, false, PEN_ARMADURA_NO, [], 5, 1));
}

/**
 *
 */
function initHabilidadesSecundariasIntelectuales() {
    addHabilidad(new Habilidad(HB_ANIMALES, TIPO_HB_INTELECTUALES, false, INT, false, PEN_ARMADURA_NO, LISTA_ESPECIES_ANIMALES, 5, 1));
    addHabilidad(new Habilidad(HB_CIENCIA, TIPO_HB_INTELECTUALES, false, INT, true, PEN_ARMADURA_NO, LISTA_CIENCIAS, 5, 1));
    addHabilidad(new Habilidad(HB_HERBOLARIA, TIPO_HB_INTELECTUALES, false, INT, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_HISTORIA, TIPO_HB_INTELECTUALES, false, INT, true, PEN_ARMADURA_NO, LISTA_TEMAS_HISTORIA, 5, 1));
    addHabilidad(new Habilidad(HB_MEDICINA, TIPO_HB_INTELECTUALES, false, INT, true, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_MEMORIZAR, TIPO_HB_INTELECTUALES, false, INT, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_NAVEGACION, TIPO_HB_INTELECTUALES, false, INT, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_OCULTISMO, TIPO_HB_INTELECTUALES, false, INT, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_TASACION, TIPO_HB_INTELECTUALES, false, INT, true, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_VALORACION_MAGICA, TIPO_HB_INTELECTUALES, false, POD, true, PEN_ARMADURA_NO, [], 5, 1));
}

/**
 *
 */
function initHabilidadesSecundariasVigor() {
    addHabilidad(new Habilidad(HB_FRIALDAD, TIPO_HB_VIGOR, false, VOL, false, PEN_ARMADURA_NO, [], 5, 1));
    addHabilidad(new Habilidad(HB_PROEZAS_FUERZA, TIPO_HB_VIGOR, false, FUE, false, PEN_ARMADURA_SI, [], 5, 1));
    addHabilidad(new Habilidad(HB_RESISTENCIA_DOLOR, TIPO_HB_VIGOR, false, VOL, false, PEN_ARMADURA_NO, [], 5, 1));
}

/**
 *
 */
function initHabilidadesSecundariasCreativas() {
    addHabilidad(new Habilidad(HB_ARTE, TIPO_HB_CREATIVAS, false, POD, false, PEN_ARMADURA_NO, [LISTA_ARTES], 5, 1));
    addHabilidad(new Habilidad(HB_BAILE, TIPO_HB_CREATIVAS, false, AGI, true, PEN_ARMADURA_SI, [LISTA_BAILES], 5, 1));
    addHabilidad(new Habilidad(HB_FORJA, TIPO_HB_CREATIVAS, false, DES, true, PEN_ARMADURA_NO, [LISTA_FORJA], 5, 1));
    addHabilidad(new Habilidad(HB_MUSICA, TIPO_HB_CREATIVAS, false, POD, true, PEN_ARMADURA_NO, [LISTA_INSTRUMENTOS_MUSICALES], 5, 1));
    addHabilidad(new Habilidad(HB_TRUCOS_MANOS, TIPO_HB_CREATIVAS, false, DES, false, PEN_ARMADURA_NO, [LISTA_TRUCOS_MANOS], 5, 1));
}

/**
 *
 */
function initHabilidadesSecundarias() {
    initHabilidadesSecundariasAtleticas();
    initHabilidadesSecundariasSociales();
    initHabilidadesSecundariasSubterfugio();
    initHabilidadesSecundariasPerceptivas();
    initHabilidadesSecundariasIntelectuales();
    initHabilidadesSecundariasVigor();
    initHabilidadesSecundariasCreativas();
}

/**
 *
 */
function initHabilidades() {
    clearHabilidades();

    initHabilidadesCombate();

    initHabilidadesMagia();

    initHabilidadesPsiquica();

    initHabilidadesSecundarias();

    habilidades_set.sort(SortPorAtributoNombre);
}

/**
 *
 * @param {string} nombre
 * @returns {string}
 */
function getGrupoDeHabilidadSecundaria(nombre) {
    return getHabilidad(nombre).tipo;
}


var ERR_CONJURO_SIN_MANTENIMIENTO = "Error: El conjuro no tiene mantenimiento";
var ERR_CONJURO_DESCONOCIDO = "Error: nombre de conjuro desconocido";
/**
 *
 * @class ViaMagia
 * @param {string} nombre
 * @param {string} descripcion
 * @param {string} opuestas
 * @constructor
 */
function ViaMagia(nombre, descripcion, opuestas) {
    /** @type string */
    this.nombre = nombre;

    /** @type string */
    this.descripcion = descripcion;

    /** @type string */
    this.opuestas = opuestas;

    /** @type Conjuro[] */
    this.conjuros = [];

    /** @type number[] */
    this.nivelesLibreAcceso = [];
}

ViaMagia.prototype = {
    constructor : ViaMagia,

    toString : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {string}
     */
    getOpuestas : function() {
        return this.opuestas;
    },

    /**
     *
     * @returns {Conjuro[]}
     */
    getConjuros : function() {
        return this.conjuros;
    },

    /**
     *
     * @param {nivel} nivel
     * @returns {Conjuro}
     */
    getConjuro : function(nivel) {
        if (this["nivel"+nivel] != undefined) {
            return this["nivel"+nivel];
        }
        return undefined;
    },

    /**
     *
     * @param {string} nombreConjuro
     * @returns {Conjuro}
     * @throws ERR_CONJURO_DESCONOCIDO
     */
    getConjuroPorNombre : function(nombreConjuro) {
        for (var i = 0; i < this.conjuros.length; i++) {
            if (this.conjuros[i].getNombre() == nombreConjuro) {
                return this.conjuros[i];
            }
        }
        throw ERR_CONJURO_DESCONOCIDO + ": " + nombreConjuro;
    },

    /**
     *
     * @param {Conjuro} conjuro
     */
    addConjuro : function(conjuro) {
        this.conjuros.push(conjuro);
        this["nivel"+conjuro.getNivel()] = conjuro;
    },

    /**
     *
     * @returns {number[]}
     */
    getNivelesLibreAcceso : function() {
        return this.nivelesLibreAcceso;
    },

    /**
     *
     * @param {number} nivel
     * @returns {boolean}
     */
    isNivelLibreAcceso : function(nivel) {
        for (var i = 0; i < this.nivelesLibreAcceso.length; i++) {
            if (this.nivelesLibreAcceso[i] == nivel) {
                return true;
            } else if (this.nivelesLibreAcceso[i] > nivel) {
                return false;
            }
        }
        return false;
    },

    toJSON : function() {
        return this.nombre;
    }
};

/**
 *
 * @class Conjuro
 * @param {string} nombre
 * @param {number} nivel
 * @param {string} accion
 * @param {string|string[]} tipo
 * @param {string} efecto
 * @param {NivelesConjuro} costesZeon
 * @param {NivelesConjuro} intReq
 * @param {NivelesConjuro} objetivo
 * @param {NivelesConjuro|Object} mantenimiento
 * @param {string[]} [viasCerradas]
 * @constructor
 */
function Conjuro(nombre, nivel, /*accion, tipo, efecto, costesZeon, intReq, objetivo, mantenimiento,*/ viasCerradas) {
    /** @type string */
    this.nombre = nombre;

    /** @type number */
    this.nivel = nivel;

    /** @type boolean */
    this.anulable = true;

    /** @type string */
//    this.accion = accion;

    /** @type string[] */
/*    this.tipos = [];
    if (tipo.length > 0) {
        for (var i = 0; i < tipo.length;i++) {
            this.tipos.push(tipo[i]);
        }
    } else {
        this.tipos.push(tipo);
    }
*/
    /** @type string */
  //  this.efecto = efecto;

    /** @type NivelesConjuro */
    //this.costesZeon = costesZeon;

    /** @type NivelesConjuro */
    //this.intReq = intReq;

    /** @type NivelesConjuro */
    //this.objetivo = objetivo;

    /** @type NivelesConjuro|boolean */
/*    this.mantenimiento = false;
    if (mantenimiento != false) {
        if ("base" in mantenimiento) {
            this.mantenimiento = mantenimiento;
        }
    }*/

    /** @type string[] */
    this.viasCerradas = viasCerradas || [];
}

Conjuro.prototype = {
    constructor : Conjuro,

    toString : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {number}
     */
    getNivel : function() {
        return this.nivel;
    },

    /**
     *
     * @returns {string}
     */
  /*  getAccion : function() {
        return this.accion;
    },*/

    /**
     *
     * @returns {string[]}
     */
/*    getTipos : function() {
        return this.tipos;
    },*/

    /**
     *
     * @returns {string}
     */
/*    getEfecto : function() {
        return this.efecto;
    },*/

    /**
     *
     * @returns {NivelesConjuro}
     */
/*    getCosteZeon : function() {
        return this.costesZeon;
    },*/

    /**
     *
     * @returns {NivelesConjuro}
     */
/*    getIntReq : function() {
        return this.intReq;
    },*/

    /**
     *
     * @returns {NivelesConjuro}
     */
/*    getObjetivo : function() {
        return this.objetivo;
    },*/

    /**
     *
     * @returns {boolean}
     */
/*    hasMantenimiento : function() {
        return (this.mantenimiento != false);
    },*/

    /**
     *
     * @returns {NivelesConjuro|boolean}
     */
/*    getMantenimiento : function() {
        return this.mantenimiento;
    },*/

    /**
     *
     * @returns {string[]|Array}
     */
    getViasCerradas : function() {
        return this.viasCerradas;
    },

    /**
     *
     * @param {string} nombreVia
     * @returns boolean
     */
    compatibleConVia : function(nombreVia) {
        for (var i = 0; i < this.viasCerradas.length; i++) {
            if (this.viasCerradas[i] ==nombreVia) {
                return false;
            }
        }
        return true;
    },

    toJSON : function() {
        return this.nombre;
    }
};

//TODO crear ConjuroComprado
/**
 *
 * @class NivelEnVia
 * @param {ViaMagia} via
 * @param {number} nivel
 * @constructor
 */
function NivelEnVia(via,nivel) {
    /** @type ViaMagia */
    this.via = via;

    /** @type number */
    this.nivel = nivel;

    /** @type number */
    this.nivelMinimo = 0;

    /** @type {Conjuro[]} */
    this.conjurosLibres = [];

    /** @type boolean */
    this.anulable = true;
}

NivelEnVia.prototype = {
    constructor : NivelEnVia,

    toString : function() {
        return this.via.toString() + " " + this.nivel;
    },

    /**
     *
     * @returns {ViaMagia}
     */
    getVia : function() {
        return this.via;
    },

    /**
     *
     * @returns {number}
     */
    getNivel : function() {
        return this.nivel;
    },

    /**
     *
     * @param {number} valor
     */
    setNivel : function(valor) {
        this.nivel = valor;
    },

    /**
     *
     * @param {number} valor
     */
    addNivel : function(valor) {
        if (this.getNivel()+valor >= this.nivelMinimo)
            this.setNivel(this.getNivel()+valor);
    },

    /**
     *
     * @param {number} valor
     */
    setNivelMinimo : function(valor) {
        this.nivelMinimo = valor;
    },

    /**
     *
     * @returns {number}
     */
    getNivelMinimo : function() {
        return this.nivelMinimo;
    },

    /**
     *
     * @returns {Conjuro[]}
     */
    getConjurosLibres : function() {
        return this.conjurosLibres;
    },

    /**
     *
     * @param {number} nivel
     * @returns {Conjuro}
     */
    getConjuro : function(nivel) {
        var conjuro;
        if (this.via.isNivelLibreAcceso(nivel)) {
            conjuro = this.getConjuroLibre(nivel);
        } else {
            conjuro = this.via.getConjuro(nivel);
        }
        return conjuro;
    },

    /**
     *
     * @param nivel
     * @returns {Conjuro}
     */
    getConjuroLibre : function(nivel) {
        return this["nivel"+nivel];
    },

    /**
     *
     * @param {Conjuro} conjuro
     * @param {number} nivel
     */
    addConjuroLibre : function(conjuro, nivel) {
        var conjuroLibre = getConjuroLibreAprendido(conjuro, nivel);
        if (this["nivel"+nivel] != undefined) {
            this.removeConjuroLibre(nivel);
        }
        this.conjurosLibres.push(conjuroLibre);
        this["nivel" + nivel] = conjuroLibre;
    },

    /**
     *
     * @param {number} nivel
     */
    removeConjuroLibre : function(nivel) {
        if (this["nivel"+nivel] != undefined) {
            delete this["nivel"+nivel];
            var conjLimpios = [];
            for (var i = 0; i < this.conjurosLibres.length; i++) {
                if (this.conjurosLibres[i].getNivel() != nivel) {
                    conjLimpios.push(this.conjurosLibres[i]);
                }
            }
            this.conjurosLibres = conjLimpios;
        }
    },

    /**
     *
     * @returns {boolean}
     */
    isAnulable : function() {
        return this.anulable;
    },

    /**
     *
     * @param {boolean} valor
     */
    setAnulable : function(valor) {
        this.anulable = valor;
    }

};

/**
 *
 * @class NivelesConjuro
 * @param {string|number} base
 * @param {string|number} intermedio
 * @param {string|number} avanzado
 * @param {string|number} arcano
 * @constructor
 * @param {boolean} [diario]
 */
function NivelesConjuro(base, intermedio, avanzado, arcano, diario) {
    /** @type number|string*/
    this.base = base;

    /** @type number|string*/
    this.avanzado = avanzado;

    /** @type number|string*/
    this.intermedio = intermedio;

    /** @type number|string*/
    this.arcano = arcano;

    /** @type boolean*/
    this.diario = diario || false;
}

NivelesConjuro.prototype = {
    constructo : NivelesConjuro,

    /**
     *
     * @returns {number|string}
     */
    getBase : function() {
        return this.base;
    },

    /**
     *
     * @returns {number|string}
     */
    getAvanzado : function() {
        return this.avanzado;
    },

    /**
     *
     * @returns {number|string}
     */
    getIntermedio : function() {
        return this.intermedio;
    },

    /**
     *
     * @returns {number|string}
     */
    getArcano : function() {
        return this.arcano;
    },

    /**
     *
     * @returns {boolean}
     */
    isDiario : function() {
        return this.diario;
    }
};

var ERR_VIA_NO_DOMINADA = "Vía no dominada";
var ERR_VIA_DESCONOCIDA = "Error: Vía desconocida";

/**
 * 
 * @type {ViaMagia[]}
 */
var vias_set = [];

var VIA_LUZ = "Luz";
var VIA_LUZ_DESCRIPCION = "Esta vía es la que permite a los hechiceros controlar uno de los dos elementos superiores, la luz pura. Es la que controla las emociones positivas del hombre, como el amor, la tranquilidad o el placer. También domina el conocimiento y la detección. Su poder ofensivo y defensivo está muy equilibrado.";

var VIA_OSCURIDAD = "Oscuridad";
var VIA_OSCURIDAD_DESCRIPCION = "La oscuridad no controla la ausencia de luz, sino el puro poder de las tinieblas. Domina todas las emociones negativas como el miedo, la ira y el odio. Es también el poder de los secretos, entre los que se incluyen los conjuros de ocultación y ofuscación. Al igual que la Luz, su poder está muy equilibrado.";

var VIA_CREACION = "Creación";
var VIA_CREACION_DESCRIPCION = "El poder de la creación es la capacidad mágica de componer y alterar la realidad que rodea a los hechiceros. Sus conjuros engloban el cambio, la curación y la creación de cosas. Es una magia marcadamente defensiva.";

var VIA_DESTRUCCION = "Destrucción";
var VIA_DESTRUCCION_DESCRIPCION = "Esta vía permite utilizar el poder del flujo de almas para destruir la propia realidad. Sus conjuros afectan tanto al mundo material como al espiritual. Su poder es por naturaleza muy ofensivo.";

var VIA_FUEGO = "Fuego";
var VIA_FUEGO_DESCRIPCION = "La primera de las cuatro vías elementales menores tiene el control sobre las altas temperaturas. Sus conjuros crean calor, fuego y arrasan grandes cantidades de terreno. También reúne conjuros de sacrificio, que permiten consumir ciertos aspectos de un individuo para potenciar a cambio otros.";

var VIA_AGUA = "Agua";
var VIA_AGUA_DESCRIPCION = "El elemento del agua recoge dentro de sí muchos conceptos distintos. Es la vía que controla los líquidos y la pureza de las cosas. También representa el poder del hielo y el de las bajas temperaturas. Su poder es muy equilibrado ofensiva y defensivamente.";

var VIA_TIERRA = "Tierra";
var VIA_TIERRA_DESCRIPCION = "La Tierra es el poder del planeta, la piedra y los minerales. Es la magia más material de todas y controla las leyes de la física, como la gravedad y el magnetismo. Su influencia sobre los espíritus y lo inmaterial es muy limitada. Los conjuros de piedra recogen la magia relacionada con la resistencia, la dureza y la lentitud.";

var VIA_AIRE = "Aire";
var VIA_AIRE_DESCRIPCION = "Es la vía de lo etéreo y lo incorpóreo. Recoge los conjuros de velocidad y movimiento. Con su poder se puede alterar el espacio y transportar cuerpos de un lugar a otro. También es la vía que controla el clima y la electricidad.";

var VIA_ESENCIA = "Esencia";
var VIA_ESENCIA_DESCRIPCION = "La Esencia controla la vida y las almas. Esta vía tiene el poder sobre los espíritus y los seres naturales que pertenecen al mundo. Es también la vía de la naturaleza y los conjuros de origen druídicos.";

var VIA_ILUSION = "Ilusión";
var VIA_ILUSION_DESCRIPCION = "El poder de esta vía permite al hechicero controlar el engaño y la ilusión. Sus conjuros pueden alterar la realidad, y con ella la percepción de las personas.";

var VIA_NIGROMANCIA = "Nigromancia";
var VIA_NIGROMANCIA_DESCRIPCION = "La nigromancia es una perversión de la magia como tal. Mientras que el resto de vías se alimenta de las energías de la red de almas, la nigromancia las arranca de allí. Sus conjuros destruyen la esencia de la vida, estancando y pervirtiendo las almas que utiliza. Su poder permite devolver la vida a los muertos, destruir las almas y drenar la vida y la esencia de otros seres.";

var TODAS_VIAS = "Todas las vías";

var VIA_LIBRE_ACCESO = "Libre acceso";
var VIA_LIBRE_ACCESO_DESCRIPCION = "Conjuros de libre acceso";

/**
 * 
 * @type {string[]}
 */
var VIAS_MAGICAS = [VIA_LUZ,VIA_OSCURIDAD,VIA_CREACION,VIA_DESTRUCCION,VIA_FUEGO,VIA_AGUA,VIA_TIERRA,VIA_AIRE,VIA_ESENCIA,VIA_ILUSION,VIA_NIGROMANCIA];

var TIPO_CONJURO_EFECTO = "Efecto";
var TIPO_CONJURO_ATAQUE = "Ataque";
var TIPO_CONJURO_DEFENSA = "Defensa";
var TIPO_CONJURO_ANIMICO = "Anímico";
var TIPO_CONJURO_AUTOMATICO = "Automático";
var TIPO_CONJURO_DETECCION = "Detección";
var TIPO_CONJURO_ESCUDO = "Escudo";

/**
 * 
 * @param {number} nivelConjuro
 * @returns {number}
 */
function costeConjuroSuelto(nivelConjuro) {
    var nivel = 0;
    if (nivelConjuro <= 10) {
        nivel = 2;
    } else if (nivelConjuro <= 20) {
        nivel = 4;
    } else if (nivelConjuro <= 30) {
        nivel = 6;
    } else if (nivelConjuro <= 40) {
        nivel = 8;
    } else if (nivelConjuro <= 50) {
        nivel = 10;
    } else if (nivelConjuro <= 60) {
        nivel = 12;
    } else if (nivelConjuro <= 70) {
        nivel = 14;
    } else if (nivelConjuro <= 80) {
        nivel = 16;
    } else if (nivelConjuro <= 90) {
        nivel = 18;
    } else if (nivelConjuro <= 100) {
        nivel = 20;
    }
    return nivel;
}

function maxNivelConjuroSueltoPermitible() {
    var nivelesLibres = personaje_actual.nivelMagiaMaximo()-personaje_actual.getNivelMagiaGastado();

    var maxNivel = 100;

    if (nivelesLibres < 20) {
        if ((nivelesLibres % 2) == 0) {
            maxNivel = 10 * (nivelesLibres/2);
        } else {
            maxNivel = 10 * ((nivelesLibres-1)/2);
        }
    }

    if (maxNivel > personaje_actual.getNivelMaximoViaMagia()) {
        maxNivel = personaje_actual.getNivelMaximoViaMagia();
    }
    return maxNivel;
}

/**
 *
 * @param {string} nombreConjuro
 * @returns {Conjuro}
 */
function getConjuroLibreAcceso(nombreConjuro) {
    var viaLibre = getVia(VIA_LIBRE_ACCESO);

    return viaLibre.getConjuroPorNombre(nombreConjuro);
}

/**
 * 
 * @param {string} nombreVia
 * @returns {ViaMagia}
 * @throws ERR_VIA_DESCONOCIDA
 */
function getVia(nombreVia) {
    for (var i = 0; i < vias_set.length; i++) {
        if (vias_set[i].getNombre() == nombreVia) {
            return vias_set[i];
        }
    }
    throw ERR_VIA_DESCONOCIDA + ": " + nombreVia;
}

/**
 *
 * @param {number} inteligencia
 * @returns {number}
 */
function nivelMagiaMaximoPorInteligencia(inteligencia) {
    var nivelMaximo = 0;
    
    switch (inteligencia) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            nivelMaximo = 0;
            break;
        case 6 :
            nivelMaximo = 10;
            break;
        case 7 :
            nivelMaximo = 20;
            break;
        case 8 :
            nivelMaximo = 30;
            break;
        case 9 :
            nivelMaximo = 40;
            break;
        case 10 :
            nivelMaximo = 50;
            break;
        case 11 :
            nivelMaximo = 75;
            break;
        case 12 :
            nivelMaximo = 100;
            break;
        case 13 :
            nivelMaximo = 150;
            break;
        case 14 :
            nivelMaximo = 200;
            break;
        case 15 :
            nivelMaximo = 300;
            break;
        case 16 :
            nivelMaximo = 400;
            break;
        case 17 :
            nivelMaximo = 500;
            break;
        case 18 :
            nivelMaximo = 600;
            break;
        case 19 :
            nivelMaximo = 700;
            break;
        case 20 :
            nivelMaximo = 800;
            break;
    }

    return nivelMaximo;
}

/**
 *
 * @param {number} valorACT
 * @returns {number}
 */
function calculaZeonMagiaInnata(valorACT) {
    var zeon = 0;
    if (valorACT <= 50) {
        zeon = 10;
    } else if (valorACT <= 70) {
        zeon = 20;
    } else if (valorACT <= 90) {
        zeon = 30;
    } else if (valorACT <= 110) {
        zeon = 40;
    } else if (valorACT <= 130) {
        zeon = 50;
    } else if (valorACT <= 150) {
        zeon = 60;
    } else if (valorACT <= 180) {
        zeon = 70;
    } else if (valorACT <= 200) {
        zeon = 80;
    } else {
        zeon = 90;
    }
    return zeon;
}

/**
 *
 * @param {{data:{via:ViaMagia,coste:number}}} event
 */
function eliminarAccesoViaMagia(event) {
    var via = event.data.via;
    var coste = event.data.coste;

    personaje_actual.removeViaMagia(via.getNombre());
    personaje_actual.addNivelMagiaGastado(-1 * coste);
}

/**
 *
 */
function accesoNuevaVia() {
    var arrayViasMagia = [];
    var i;

    for (i=0;i<VIAS_MAGICAS.length;i++) {
        var nombreVia = VIAS_MAGICAS[i];
        arrayViasMagia.push(new OpcionMostrable(nombreVia,""));
    }

    muestraDialogoElegirOpciones(arrayViasMagia, {}, {principal: aplicarAccesoVia, isDisabled: accesoViaDisabled}, true);
}

/**
 *
 * @param {{opcion:string}} parametros
 */
function aplicarAccesoVia(parametros) {
    var nombreVia = parametros.opcion;

    personaje_actual.addNivelVia(nombreVia,2);
    personaje_actual.addNivelMagiaGastado(2 * personaje_actual.getCosteVia(nombreVia));
}

/**
 *
 * @param {{opcion:string}} parametros
 * @returns {boolean}
 */
function accesoViaDisabled(parametros) {
    var nombreVia = parametros.opcion;

    if (personaje_actual.hasVia(nombreVia)) {
        return true;
    }

    return personaje_actual.nivelMagiaMaximo() - personaje_actual.getNivelMagiaGastado() < 2 * personaje_actual.getCosteVia(nombreVia);
}

/**
 *
 * @param {Conjuro} conjuro
 * @param {number} nivel
 * @return {Conjuro}
 */
function getConjuroLibreAprendido(conjuro, nivel) {
    return new Conjuro(conjuro.getNombre(),nivel/*,conjuro.getAccion(),conjuro.getTipos(),conjuro.getEfecto(),conjuro.getCosteZeon(),conjuro.getIntReq(),conjuro.getObjetivo(),conjuro.getMantenimiento()*/,conjuro.getViasCerradas());
}

/**
 *
 * @param {{data:{nivelEnVia:NivelEnVia,unidades:string}}} event
 */
function aumentaNivelViaClick(event) {
    var nivelEnVia = event.data.nivelEnVia;
    var cantidad = event.data.unidades;

    var coste = personaje_actual.getCosteVia(nivelEnVia.getVia().getNombre());
    var costeFinal = coste * cantidad;

    if (cantidad > 0) {
        if (nivelEnVia.getNivel() + cantidad > personaje_actual.getNivelMaximoViaMagia()) {
            alert("No se puede aumentar más");
            return;
        }
    } else {
        if (nivelEnVia.getNivel() + cantidad < nivelEnVia.getNivelMinimo()) {
            alert("No se puede disminuir más");
            return;
        }
    }

    if (personaje_actual.nivelMagiaMaximo() - personaje_actual.getNivelMagiaGastado() < costeFinal) {
        alert("No tienes suficientes niveles de vía libres");
        return;
    }

    personaje_actual.addNivelVia(nivelEnVia.getVia().getNombre(),cantidad);
    personaje_actual.addNivelMagiaGastado(costeFinal);
}

/**
 *
 * @param {{data:{via:ViaMagia,nivel:number}}} event
 */
function elegirConjuroLibreAcceso(event) {
    var via = event.data.via;
    var nivel = event.data.nivel;

    var arrayOpciones = [];
    var nombreVia = via.getNombre();

    var viaLibreAcceso = getVia(VIA_LIBRE_ACCESO);

    var maxNivelConjuro = (Math.floor(nivel/10) + 1) * 10;

    var conjurosLibreAcceso = viaLibreAcceso.getConjuros();

    for (var i = 0; i < conjurosLibreAcceso.length; i++) {
        if (conjurosLibreAcceso[i].getNivel() > maxNivelConjuro) {
            break;
        } else {
            arrayOpciones.push(new OpcionMostrable(conjurosLibreAcceso[i].getNombre(),"","Nivel: " + conjurosLibreAcceso[i].getNivel() /*+ "<hr>Efecto: " + conjurosLibreAcceso[i].getEfecto()*/));
        }
    }

    muestraDialogoElegirOpciones(arrayOpciones, {via: via, nivel: nivel}, {principal: eligeConjuroLibreAcceso, isDisabled: conjuroNoCompatibleConVia}, true);
}

/**
 *
 * @param {{via:ViaMagia,nivel:number,opcion:string}} parametros
 */
function conjuroNoCompatibleConVia(parametros) {
    var via = parametros.via;
    var nivel = parametros.nivel;
    var conjuro = getConjuroLibreAcceso(parametros.opcion);

    var nombreVia = via.getNombre();

    return !conjuro.compatibleConVia(nombreVia);
}

/**
 *
 * @param {{via:ViaMagia,nivel:number,opcion:string}} parametros
 */
function eligeConjuroLibreAcceso(parametros) {
    personaje_actual.addLibreAcceso(parametros.via.getNombre(),parametros.nivel,getConjuroLibreAcceso(parametros.opcion));
}

/**
 *
 */
function elegirConjuroSuelto() {
    var arrayOpciones = [];
    var categorias = [];
    var i;
    var j;
    var maxNivel = maxNivelConjuroSueltoPermitible();

    for (i = 0; i < vias_set.length; i++) {
        categorias.push(new OpcionMostrable(vias_set[i].getNombre(),vias_set[i].getNombre()+"_viamagia"));
        var conjuros = vias_set[i].getConjuros();
        for (j = 0; j < conjuros.length; j++) {
            if ((conjuros[j].getNivel() > maxNivel) && (vias_set[i].getNombre() != VIA_LIBRE_ACCESO)) {
                break;
            } else {
                arrayOpciones.push(new OpcionMostrable(conjuros[j].getNombre(),vias_set[i].getNombre()+"_viamagia","Nivel: " + conjuros[j].getNivel()/* + "<hr>Efecto: " + conjuros[j].getEfecto()*/));
            }
        }
    }

    muestraDialogoElegirOpciones(arrayOpciones, {}, {principal: compraConjuroSuelto, isDisabled: noPuedeComprarConjuroSuelto}, true, categorias);
}

/**
 *
 * @param {{opcion:string, categoria:string}} parametros
 * @returns {boolean}
 */
function noPuedeComprarConjuroSuelto(parametros) {
    var nombreConjuro = parametros.opcion;
    var nombreViaConjuro = parametros.categoria.substring(0,parametros.categoria.indexOf("_"));

    return false;
}

/**
 *
 * @param {{opcion:string, categoria:string}} parametros
 */
function compraConjuroSuelto(parametros) {
    var nombreConjuro = parametros.opcion;
    var nombreViaConjuro = parametros.categoria.substring(0,parametros.categoria.indexOf("_"));

    var via = getVia(nombreViaConjuro);

    var conjuro = via.getConjuroPorNombre(nombreConjuro);

    var coste = costeConjuroSuelto(conjuro.getNivel());

    personaje_actual.addConjuroSuelto(conjuro);
}
var viaLibre = new ViaMagia(VIA_LIBRE_ACCESO,VIA_LIBRE_ACCESO_DESCRIPCION,"");

viaLibre.addConjuro(new Conjuro(
    "Crear Llamas",
    10,
    [VIA_AGUA]
));
viaLibre.addConjuro(new Conjuro(
    "Mover Objetos",
    10,
    [VIA_DESTRUCCION,VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Crear Música",
    10,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Aseamiento",
    10,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Saltar",
    10,
    [VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Apertura",
    10,
    [VIA_DESTRUCCION,VIA_FUEGO]
));
viaLibre.addConjuro(new Conjuro(
    "Atar",
    10,
    [VIA_DESTRUCCION,VIA_ILUSION]
));
viaLibre.addConjuro(new Conjuro(
    "Detección de Magia",
    10,
    [VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Detener Caída",
    10,
    [VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Deshacer Escritura",
    10,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Mensaje Estático",
    10,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Cambiar de Color",
    10,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Crear Sonidos",
    20,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Recrear Imagen",
    20,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Encantar",
    20,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Respirar Líquidos",
    20,
    [VIA_TIERRA,VIA_FUEGO]
));
viaLibre.addConjuro(new Conjuro(
    "Trepar",
    20,
    [VIA_AIRE]
));
viaLibre.addConjuro(new Conjuro(
    "Niebla",
    20,
    [VIA_FUEGO]
));
viaLibre.addConjuro(new Conjuro(
    "Zona Resbaladiza",
    20,
    [VIA_FUEGO]
));
viaLibre.addConjuro(new Conjuro(
    "Reparación",
    20,
    [VIA_DESTRUCCION,VIA_ILUSION]
));
viaLibre.addConjuro(new Conjuro(
    "Pasar Sin Dejar Marca",
    20,
    [VIA_LUZ]
));
viaLibre.addConjuro(new Conjuro(
    "Atraer Alimañas Menores",
    20,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Bolsa Infinita",
    20,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Inhumanidad",
    20,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Nubes",
    30,
    [VIA_FUEGO,VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Causar Miedo",
    30,
    [VIA_LUZ]
));
viaLibre.addConjuro(new Conjuro(
    "Protección Mágica",
    30,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Escudo Mágico",
    30,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Celeridad",
    30,
    [VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Serenidad",
    30,
    [VIA_FUEGO,VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Red",
    30,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Comprensión de Idiomas",
    30,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Levitación",
    30,
    [VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Enviar Mensaje",
    30,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Protección Anticonceptiva",
    30,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Cerrar Mágicamente",
    30,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Cerrar Realmente",
    40,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Purificación",
    40,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Cambio de Aspecto",
    40,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Modificar el Tamaño",
    40,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Invocar Agresividad",
    40,
    [VIA_LUZ]
));
viaLibre.addConjuro(new Conjuro(
    "Eliminar Conjuros",
    40,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Resistencia al Dolor",
    40,
    [VIA_ESENCIA]
));
viaLibre.addConjuro(new Conjuro(
    "Descarga de Magia",
    40,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Eliminar los Sueños",
    40,
    [VIA_LUZ,VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Extender la Presencia",
    40,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Curar Enfermedades",
    40,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Percibir Sentimientos",
    40,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Anulación de Magia",
    50,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Deshacer",
    50,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Maldición",
    50,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Leer la Mente",
    50,
    [VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Alterar Energía",
    50,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Enviar Sueños",
    50,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Absorber Información",
    50,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Amistad",
    50,
    [VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Causar Enfermedad",
    50,
    [VIA_ILUSION,VIA_AGUA]
));
viaLibre.addConjuro(new Conjuro(
    "Transporte Rápido",
    50,
    [VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Enlentecer",
    50,
    [VIA_AIRE]
));
viaLibre.addConjuro(new Conjuro(
    "Mostrar lo Invisible",
    50,
    [VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Ceguera",
    60,
    [VIA_CREACION,VIA_LUZ]
));
viaLibre.addConjuro(new Conjuro(
    "Visualizar Cartografía",
    60,
    [VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Sordera",
    60,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Mudez",
    60,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Curar Heridas",
    60,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Eliminar Cansancio",
    60,
    [VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Montura Mágica",
    60,
    [VIA_ILUSION]
));
viaLibre.addConjuro(new Conjuro(
    "Andar por las Paredes",
    60,
    [VIA_AGUA]
));
viaLibre.addConjuro(new Conjuro(
    "Fusionar con el Cuerpo",
    60,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Nube Ácida",
    60,
    [VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Desproteger",
    60,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Dormir",
    60,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Aumentar Características Mentales",
    70,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Alteración Menor",
    70,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Crear Emociones",
    70,
    [VIA_ILUSION]
));
viaLibre.addConjuro(new Conjuro(
    "Paralizar",
    70,
    [VIA_AIRE]
));
viaLibre.addConjuro(new Conjuro(
    "Aumentar Características Físicas",
    70,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Arma Mágica",
    70,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Debilidad",
    70,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Cuerpo a Magia",
    70,
    [VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Resistir",
    70,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Olvido",
    70,
    [VIA_ESENCIA]
));
viaLibre.addConjuro(new Conjuro(
    "Rechazo",
    70,
    [VIA_ESENCIA,VIA_AGUA]
));
viaLibre.addConjuro(new Conjuro(
    "Plaga",
    70,
    [VIA_ILUSION]
));
viaLibre.addConjuro(new Conjuro(
    "Inutilidad",
    80,
    [VIA_AGUA]
));
viaLibre.addConjuro(new Conjuro(
    "Esfera de Levitación",
    80,
    [VIA_TIERRA,VIA_AGUA]
));
viaLibre.addConjuro(new Conjuro(
    "Vuelo",
    80,
    [VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Dominio",
    80,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Erudición Defensiva",
    80,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Invisibilidad",
    80,
    [VIA_ESENCIA]
));
viaLibre.addConjuro(new Conjuro(
    "Desviar Trayectoria",
    80,
    [VIA_FUEGO]
));
viaLibre.addConjuro(new Conjuro(
    "Estancar Conjuro",
    80,
    [VIA_AIRE]
));
viaLibre.addConjuro(new Conjuro(
    "Contención",
    80,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Marca de Detección",
    80,
    [VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Erudición Ofensiva",
    80,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Blanco Perfecto",
    80,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Desencantamiento",
    90,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Conjuro Natural",
    90,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Inmortalidad",
    90,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Eliminar Necesidades",
    90,
    [VIA_ESENCIA]
));
viaLibre.addConjuro(new Conjuro(
    "Robar Conjuro",
    90,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Portal",
    90,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Prisma de Magia",
    90,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Localización",
    90,
    [VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Inmunidad Física",
    90,
    [VIA_ESENCIA]
));
viaLibre.addConjuro(new Conjuro(
    "Devolución de Conjuro",
    90,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Preparar Conjuro",
    90,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Teletransporte",
    90,
    [VIA_TIERRA]
));
viaLibre.addConjuro(new Conjuro(
    "Ojo del Tiempo",
    100,
    [VIA_OSCURIDAD]
));
viaLibre.addConjuro(new Conjuro(
    "Sellar",
    100,
    []
));
viaLibre.addConjuro(new Conjuro(
    "El Don del Conocimiento",
    100,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Escudar Contra Poderes",
    100,
    [VIA_CREACION]
));
viaLibre.addConjuro(new Conjuro(
    "Fortalecer la Magia",
    100,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Condicionamiento",
    100,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Posesión",
    100,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Imitar Conjuro",
    100,
    [VIA_DESTRUCCION]
));
viaLibre.addConjuro(new Conjuro(
    "Magia Innata",
    100,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Vincular Mantenimiento",
    100,
    []
));
viaLibre.addConjuro(new Conjuro(
    "El Magistrado",
    100,
    []
));
viaLibre.addConjuro(new Conjuro(
    "Predestinación",
    100,
    []
));



vias_set.push(viaLibre);
var viaAgua = new ViaMagia(VIA_AGUA,VIA_AGUA_DESCRIPCION,VIA_FUEGO);

viaAgua.nivelesLibreAcceso.push(4);
viaAgua.nivelesLibreAcceso.push(8);
viaAgua.nivelesLibreAcceso.push(14);
viaAgua.nivelesLibreAcceso.push(18);
viaAgua.nivelesLibreAcceso.push(24);
viaAgua.nivelesLibreAcceso.push(28);
viaAgua.nivelesLibreAcceso.push(34);
viaAgua.nivelesLibreAcceso.push(38);
viaAgua.nivelesLibreAcceso.push(44);
viaAgua.nivelesLibreAcceso.push(48);
viaAgua.nivelesLibreAcceso.push(54);
viaAgua.nivelesLibreAcceso.push(58);
viaAgua.nivelesLibreAcceso.push(64);
viaAgua.nivelesLibreAcceso.push(68);
viaAgua.nivelesLibreAcceso.push(74);
viaAgua.nivelesLibreAcceso.push(78);
viaAgua.nivelesLibreAcceso.push(84);
viaAgua.nivelesLibreAcceso.push(88);
viaAgua.nivelesLibreAcceso.push(94);
viaAgua.nivelesLibreAcceso.push(98);

viaAgua.addConjuro(new Conjuro(
    "Manantial",
    2));
viaAgua.addConjuro(new Conjuro(
    "Crear Frío",
    6));
viaAgua.addConjuro(new Conjuro(
    "Capacidad Acuática",
    10));
viaAgua.addConjuro(new Conjuro(
    "Inmunidad al Frío",
    12));
viaAgua.addConjuro(new Conjuro(
    "Burbuja Protectora",
    16));
viaAgua.addConjuro(new Conjuro(
    "Impacto de Agua",
    20));
viaAgua.addConjuro(new Conjuro(
    "Control sobre los Líquidos",
    22));
viaAgua.addConjuro(new Conjuro(
    "Congelar las Emociones",
    26));
viaAgua.addConjuro(new Conjuro(
    "Controlar el Frío",
    30));
viaAgua.addConjuro(new Conjuro(
    "Congelar",
    32));
viaAgua.addConjuro(new Conjuro(
    "Pantalla de Hielo",
    36));
viaAgua.addConjuro(new Conjuro(
    "Crear Líquidos",
    40));
viaAgua.addConjuro(new Conjuro(
    "Ataque de Hielo",
    42));
viaAgua.addConjuro(new Conjuro(
    "Cristalización",
    46));
viaAgua.addConjuro(new Conjuro(
    "Control Reflejo",
    50));
viaAgua.addConjuro(new Conjuro(
    "Cuerpo Líquido",
    52));
viaAgua.addConjuro(new Conjuro(
    "Reflejar Estados",
    56));
viaAgua.addConjuro(new Conjuro(
    "Tormenta de Hielo",
    60));
viaAgua.addConjuro(new Conjuro(
    "Control de las Mareas",
    62));
viaAgua.addConjuro(new Conjuro(
    "Prisión de Agua",
    66));
viaAgua.addConjuro(new Conjuro(
    "Glacial",
    70));
viaAgua.addConjuro(new Conjuro(
    "Tsunami",
    72));
viaAgua.addConjuro(new Conjuro(
    "Reflejo del Alma",
    76));
viaAgua.addConjuro(new Conjuro(
    "Enlentecer el Tiempo",
    80));
viaAgua.addConjuro(new Conjuro(
    "Crear Ondina",
    82));
viaAgua.addConjuro(new Conjuro(
    "Congelar la Magia",
    86));
viaAgua.addConjuro(new Conjuro(
    "En el Interior del Espejo",
    90));
viaAgua.addConjuro(new Conjuro(
    "Señor de los Hielos",
    92));
viaAgua.addConjuro(new Conjuro(
    "Señor de las Aguas",
    96));
viaAgua.addConjuro(new Conjuro(
    "Un mundo Perfecto",
    100));


vias_set.push(viaAgua);
var viaAire = new ViaMagia(VIA_AIRE,VIA_AIRE_DESCRIPCION,VIA_TIERRA);
viaAire.nivelesLibreAcceso.push(4);
viaAire.nivelesLibreAcceso.push(8);
viaAire.nivelesLibreAcceso.push(14);
viaAire.nivelesLibreAcceso.push(18);
viaAire.nivelesLibreAcceso.push(24);
viaAire.nivelesLibreAcceso.push(28);
viaAire.nivelesLibreAcceso.push(34);
viaAire.nivelesLibreAcceso.push(38);
viaAire.nivelesLibreAcceso.push(44);
viaAire.nivelesLibreAcceso.push(48);
viaAire.nivelesLibreAcceso.push(54);
viaAire.nivelesLibreAcceso.push(58);
viaAire.nivelesLibreAcceso.push(64);
viaAire.nivelesLibreAcceso.push(68);
viaAire.nivelesLibreAcceso.push(74);
viaAire.nivelesLibreAcceso.push(78);
viaAire.nivelesLibreAcceso.push(84);
viaAire.nivelesLibreAcceso.push(88);
viaAire.nivelesLibreAcceso.push(94);
viaAire.nivelesLibreAcceso.push(98);

viaAire.addConjuro(new Conjuro(
    "Crear Viento",
    2));
viaAire.addConjuro(new Conjuro(
    "Mover",
    6));
viaAire.addConjuro(new Conjuro(
    "Reducir Peso",
    10));
viaAire.addConjuro(new Conjuro(
    "No Respirar",
    12));
viaAire.addConjuro(new Conjuro(
    "Movimiento Libre",
    16));
viaAire.addConjuro(new Conjuro(
    "Golpe de Aire",
    20));
viaAire.addConjuro(new Conjuro(
    "Pantalla de Aire",
    22));
viaAire.addConjuro(new Conjuro(
    "Transporte Automático",
    26));
viaAire.addConjuro(new Conjuro(
    "Vuelo",
    30));
viaAire.addConjuro(new Conjuro(
    "Incremento de Reacción",
    32));
viaAire.addConjuro(new Conjuro(
    "Electrificar",
    36));
viaAire.addConjuro(new Conjuro(
    "Tajo de Aire",
    40));
viaAire.addConjuro(new Conjuro(
    "Velocidad",
    42));
viaAire.addConjuro(new Conjuro(
    "Rayo",
    46));
viaAire.addConjuro(new Conjuro(
    "Remolino",
    50));
viaAire.addConjuro(new Conjuro(
    "Forma etérea",
    52));
viaAire.addConjuro(new Conjuro(
    "Control del Aire",
    56));
viaAire.addConjuro(new Conjuro(
    "Control de la Electricidad",
    60));
viaAire.addConjuro(new Conjuro(
    "Movimiento Defensivo",
    62));
viaAire.addConjuro(new Conjuro(
    "Teletransportación",
    66));
viaAire.addConjuro(new Conjuro(
    "Inmaterialidad",
    70));
viaAire.addConjuro(new Conjuro(
    "Huracán",
    72));
viaAire.addConjuro(new Conjuro(
    "Aire Sólido",
    76));
viaAire.addConjuro(new Conjuro(
    "Control del Clima",
    80));
viaAire.addConjuro(new Conjuro(
    "Crear Silfo",
    82));
viaAire.addConjuro(new Conjuro(
    "Telequinesis Superior",
    86));
viaAire.addConjuro(new Conjuro(
    "Ubicar Magia",
    90));
viaAire.addConjuro(new Conjuro(
    "Magia Pasiva",
    92));
viaAire.addConjuro(new Conjuro(
    "Señor del Aire",
    96));
viaAire.addConjuro(new Conjuro(
    "Un Lugar en el Mundo",
    100));


vias_set.push(viaAire);
var viaCreacion = new ViaMagia(VIA_CREACION,VIA_CREACION_DESCRIPCION,VIA_DESTRUCCION);

viaCreacion.addConjuro(new Conjuro(
    "Creación Menor",
    2));
viaCreacion.nivelesLibreAcceso.push(4);
viaCreacion.addConjuro(new Conjuro(
    "Reconstruir",
    6));
viaCreacion.addConjuro(new Conjuro(
    "Crear Energía",
    8));
viaCreacion.addConjuro(new Conjuro(
    "Regeneración",
    10));
viaCreacion.addConjuro(new Conjuro(
    "Modificación Inorgánica",
    12));
viaCreacion.nivelesLibreAcceso.push(14);
viaCreacion.addConjuro(new Conjuro(
    "Aumentar Resistencias",
    16));
viaCreacion.addConjuro(new Conjuro(
    "Escudo Real",
    18));
viaCreacion.addConjuro(new Conjuro(
    "Curación",
    20));
viaCreacion.addConjuro(new Conjuro(
    "Barrera de Daño",
    22));
viaCreacion.nivelesLibreAcceso.push(24);
viaCreacion.addConjuro(new Conjuro(
    "Crear Homúnculo",
    26));
viaCreacion.addConjuro(new Conjuro(
    "Cambio Menor",
    28));
viaCreacion.addConjuro(new Conjuro(
    "Imitar",
    30));
viaCreacion.addConjuro(new Conjuro(
    "Inmunidad",
    32));
viaCreacion.nivelesLibreAcceso.push(34);
viaCreacion.addConjuro(new Conjuro(
    "Reducción de Daño",
    36));
viaCreacion.addConjuro(new Conjuro(
    "Control Físico",
    38));
viaCreacion.addConjuro(new Conjuro(
    "Adquirir Habilidades",
    40));
viaCreacion.addConjuro(new Conjuro(
    "Fusionar",
    42));
viaCreacion.nivelesLibreAcceso.push(44);
viaCreacion.addConjuro(new Conjuro(
    "Crear Recuerdos",
    46));
viaCreacion.addConjuro(new Conjuro(
    "Recuperar",
    48));
viaCreacion.addConjuro(new Conjuro(
    "Adquirir Poderes",
    50));
viaCreacion.addConjuro(new Conjuro(
    "Crear Engendro",
    52));
viaCreacion.nivelesLibreAcceso.push(54);
viaCreacion.addConjuro(new Conjuro(
    "Aura de Protección",
    56));
viaCreacion.addConjuro(new Conjuro(
    "Estancar Esencia",
    58));
viaCreacion.addConjuro(new Conjuro(
    "Escudo Perfecto",
    60));
viaCreacion.addConjuro(new Conjuro(
    "Vitalidad",
    62));
viaCreacion.nivelesLibreAcceso.push(64);
viaCreacion.addConjuro(new Conjuro(
    "Creación Completa",
    66));
viaCreacion.addConjuro(new Conjuro(
    "Potenciar Magia",
    68));
viaCreacion.addConjuro(new Conjuro(
    "Transmutar",
    70));
viaCreacion.addConjuro(new Conjuro(
    "Metamorfismo",
    72));
viaCreacion.nivelesLibreAcceso.push(74);
viaCreacion.addConjuro(new Conjuro(
    "Recrear",
    76));
viaCreacion.addConjuro(new Conjuro(
    "Crear Ser",
    78));
viaCreacion.addConjuro(new Conjuro(
    "Quimera",
    80));
viaCreacion.addConjuro(new Conjuro(
    "Zona de Salvaguardia",
    82));
viaCreacion.nivelesLibreAcceso.push(84);
viaCreacion.addConjuro(new Conjuro(
    "Mantenimiento",
    86));
viaCreacion.addConjuro(new Conjuro(
    "Otorgar Alma",
    88));
viaCreacion.addConjuro(new Conjuro(
    "Creación Mayor",
    90));
viaCreacion.addConjuro(new Conjuro(
    "Magia eterna",
    92));
viaCreacion.nivelesLibreAcceso.push(94);
viaCreacion.addConjuro(new Conjuro(
    "La Barrera",
    96));
viaCreacion.addConjuro(new Conjuro(
    "El Don de la Vida",
    98));
viaCreacion.addConjuro(new Conjuro(
    "Crear",
    100));

vias_set.push(viaCreacion);
var viaDestruccion = new ViaMagia(VIA_DESTRUCCION,VIA_DESTRUCCION_DESCRIPCION,VIA_CREACION);

viaDestruccion.nivelesLibreAcceso.push(4);
viaDestruccion.nivelesLibreAcceso.push(14);
viaDestruccion.nivelesLibreAcceso.push(24);
viaDestruccion.nivelesLibreAcceso.push(34);
viaDestruccion.nivelesLibreAcceso.push(44);
viaDestruccion.nivelesLibreAcceso.push(54);
viaDestruccion.nivelesLibreAcceso.push(64);
viaDestruccion.nivelesLibreAcceso.push(74);
viaDestruccion.nivelesLibreAcceso.push(84);
viaDestruccion.nivelesLibreAcceso.push(94);

viaDestruccion.addConjuro(new Conjuro(
    "Fragilidad",
    2));
viaDestruccion.addConjuro(new Conjuro(
    "Desmantelar",
    6));
viaDestruccion.addConjuro(new Conjuro(
    "Destruir Intensidades",
    8));
viaDestruccion.addConjuro(new Conjuro(
    "Destrucción Menor",
    10));
viaDestruccion.addConjuro(new Conjuro(
    "Esfera de Destrucción",
    12));
viaDestruccion.addConjuro(new Conjuro(
    "Incrementar Debilidad",
    16));
viaDestruccion.addConjuro(new Conjuro(
    "Destrucción de Magia",
    18));
viaDestruccion.addConjuro(new Conjuro(
    "Agravar Daño",
    20));
viaDestruccion.addConjuro(new Conjuro(
    "Destrucción de Matrices",
    22));
viaDestruccion.addConjuro(new Conjuro(
    "Herir",
    26));
viaDestruccion.addConjuro(new Conjuro(
    "Destrucción de Ki",
    28));
viaDestruccion.addConjuro(new Conjuro(
    "Producir Daño",
    30));
viaDestruccion.addConjuro(new Conjuro(
    "Destrucción de Sentidos",
    32));
viaDestruccion.addConjuro(new Conjuro(
    "Descarga",
    36));
viaDestruccion.addConjuro(new Conjuro(
    "Desatar Vínculos",
    38));
viaDestruccion.addConjuro(new Conjuro(
    "Destruir Resistencias",
    40));
viaDestruccion.addConjuro(new Conjuro(
    "Deshacer Estados",
    42));
viaDestruccion.addConjuro(new Conjuro(
    "Cúpula de Destrucción",
    46));
viaDestruccion.addConjuro(new Conjuro(
    "Área de Decaimiento",
    48));
viaDestruccion.addConjuro(new Conjuro(
    "Aura de Destrucción",
    50));
viaDestruccion.addConjuro(new Conjuro(
    "Destruir Recuerdos",
    52));
viaDestruccion.addConjuro(new Conjuro(
    "Bloquear Aprendizaje",
    56));
viaDestruccion.addConjuro(new Conjuro(
    "Negar",
    58));
viaDestruccion.addConjuro(new Conjuro(
    "Destruir Poderes",
    60));
viaDestruccion.addConjuro(new Conjuro(
    "Descarga Mayor",
    62));
viaDestruccion.addConjuro(new Conjuro(
    "Destruir la Voluntad",
    66));
viaDestruccion.addConjuro(new Conjuro(
    "Zona de Debilidad",
    68));
viaDestruccion.addConjuro(new Conjuro(
    "Esencia de Destrucción",
    70));
viaDestruccion.addConjuro(new Conjuro(
    "Muerte",
    72));
viaDestruccion.addConjuro(new Conjuro(
    "Zona Devoradora",
    76));
viaDestruccion.addConjuro(new Conjuro(
    "Destruir Capacidades",
    78));
viaDestruccion.addConjuro(new Conjuro(
    "Sesgar la Existencia",
    80));
viaDestruccion.addConjuro(new Conjuro(
    "Lluvia de Destrucción",
    82));
viaDestruccion.addConjuro(new Conjuro(
    "Destrucción de Zeon",
    86));
viaDestruccion.addConjuro(new Conjuro(
    "Arrojar de los Cielos",
    88));
viaDestruccion.addConjuro(new Conjuro(
    "Vacío",
    90));
viaDestruccion.addConjuro(new Conjuro(
    "Destrucción Mayor",
    92));
viaDestruccion.addConjuro(new Conjuro(
    "Destrucción de Almas",
    96));
viaDestruccion.addConjuro(new Conjuro(
    "Caos",
    98));
viaDestruccion.addConjuro(new Conjuro(
    "Descrear",
    100));



vias_set.push(viaDestruccion);
var viaEsencia = new ViaMagia(VIA_ESENCIA,VIA_ESENCIA_DESCRIPCION,VIA_ILUSION);
viaEsencia.nivelesLibreAcceso.push(4);
viaEsencia.nivelesLibreAcceso.push(8);
viaEsencia.nivelesLibreAcceso.push(14);
viaEsencia.nivelesLibreAcceso.push(18);
viaEsencia.nivelesLibreAcceso.push(24);
viaEsencia.nivelesLibreAcceso.push(28);
viaEsencia.nivelesLibreAcceso.push(34);
viaEsencia.nivelesLibreAcceso.push(38);
viaEsencia.nivelesLibreAcceso.push(44);
viaEsencia.nivelesLibreAcceso.push(48);
viaEsencia.nivelesLibreAcceso.push(54);
viaEsencia.nivelesLibreAcceso.push(58);
viaEsencia.nivelesLibreAcceso.push(64);
viaEsencia.nivelesLibreAcceso.push(68);
viaEsencia.nivelesLibreAcceso.push(74);
viaEsencia.nivelesLibreAcceso.push(78);
viaEsencia.nivelesLibreAcceso.push(84);
viaEsencia.nivelesLibreAcceso.push(88);
viaEsencia.nivelesLibreAcceso.push(94);
viaEsencia.nivelesLibreAcceso.push(98);

viaEsencia.addConjuro(new Conjuro(
 "Afinidad Natural",
 2));
viaEsencia.addConjuro(new Conjuro(
    "Detectar Esencia",
 6));
viaEsencia.addConjuro(new Conjuro(
    "Comunicación por Esencia",
 10));
viaEsencia.addConjuro(new Conjuro(
 "Conocimiento Natural",
 12));
viaEsencia.addConjuro(new Conjuro(
    "Sanación",
 16));
viaEsencia.addConjuro(new Conjuro(
    "Barrera de Almas",
 20));
viaEsencia.addConjuro(new Conjuro(
    "Compartir Sentidos",
 22));
viaEsencia.addConjuro(new Conjuro(
    "Modificar la Esencia",
 26));
viaEsencia.addConjuro(new Conjuro(
    "Veneno de Almas",
 30));
viaEsencia.addConjuro(new Conjuro(
    "Analizar el Alma",
 32));
viaEsencia.addConjuro(new Conjuro(
    "Adquirir Capacidades Naturales",
 36));
viaEsencia.addConjuro(new Conjuro(
    "Revitalizar",
 40));
viaEsencia.addConjuro(new Conjuro(
    "Mente de Vida",
 42));
viaEsencia.addConjuro(new Conjuro(
    "Alterar el Crecimiento",
 46));
viaEsencia.addConjuro(new Conjuro(
 "Imitación Natural",
 50));
viaEsencia.addConjuro(new Conjuro(
 "Forma Espiritual",
 52));
viaEsencia.addConjuro(new Conjuro(
 "Control Natural",
 56));
viaEsencia.addConjuro(new Conjuro(
 "Inducción de Estados",
 60));
viaEsencia.addConjuro(new Conjuro(
    "Devolver al Flujo",
 62));
viaEsencia.addConjuro(new Conjuro(
    "Escudar",
 66));
viaEsencia.addConjuro(new Conjuro(
    "Control Sobrenatural",
 70));
viaEsencia.addConjuro(new Conjuro(
    "Compartir Esencia",
 72));
viaEsencia.addConjuro(new Conjuro(
    "Transmigrar Almas",
 76));
viaEsencia.addConjuro(new Conjuro(
    "Existencia Espiritual",
 80));
viaEsencia.addConjuro(new Conjuro(
 "Creación de Espíritus",
 82));
viaEsencia.addConjuro(new Conjuro(
    "Atar Esencia Vital",
 86));
viaEsencia.addConjuro(new Conjuro(
    "Verdor",
 90));
viaEsencia.addConjuro(new Conjuro(
    "Dominio de la Vida",
 92));
viaEsencia.addConjuro(new Conjuro(
    "Resurrección",
 96));
viaEsencia.addConjuro(new Conjuro(
 "Señor de las Almas",
 100));


vias_set.push(viaEsencia);
var viaFuego = new ViaMagia(VIA_FUEGO,VIA_FUEGO_DESCRIPCION,VIA_AGUA);

viaFuego.nivelesLibreAcceso.push(4);
viaFuego.nivelesLibreAcceso.push(8);
viaFuego.nivelesLibreAcceso.push(14);
viaFuego.nivelesLibreAcceso.push(18);
viaFuego.nivelesLibreAcceso.push(24);
viaFuego.nivelesLibreAcceso.push(28);
viaFuego.nivelesLibreAcceso.push(34);
viaFuego.nivelesLibreAcceso.push(38);
viaFuego.nivelesLibreAcceso.push(44);
viaFuego.nivelesLibreAcceso.push(48);
viaFuego.nivelesLibreAcceso.push(54);
viaFuego.nivelesLibreAcceso.push(58);
viaFuego.nivelesLibreAcceso.push(64);
viaFuego.nivelesLibreAcceso.push(68);
viaFuego.nivelesLibreAcceso.push(74);
viaFuego.nivelesLibreAcceso.push(78);
viaFuego.nivelesLibreAcceso.push(84);
viaFuego.nivelesLibreAcceso.push(88);
viaFuego.nivelesLibreAcceso.push(94);
viaFuego.nivelesLibreAcceso.push(98);

viaFuego.addConjuro(new Conjuro(
    "Crear Fuego",
    2));
viaFuego.addConjuro(new Conjuro(
    "Mitigar Fuego",
    6));
viaFuego.addConjuro(new Conjuro(
    "Inmunidad Contra el Fuego",
    10));
viaFuego.addConjuro(new Conjuro(
    "Sentir el Calor",
    12));
viaFuego.addConjuro(new Conjuro(
    "Bola de Fuego",
    16));
viaFuego.addConjuro(new Conjuro(
    "Control Sobre el Fuego",
    20));
viaFuego.addConjuro(new Conjuro(
    "Barrera de Fuego",
    22));
viaFuego.addConjuro(new Conjuro(
    "Arma Ígnea",
    26));
viaFuego.addConjuro(new Conjuro(
    "Descarga de Calor",
    30));
viaFuego.addConjuro(new Conjuro(
    "Ver en las Cenizas",
    32));
viaFuego.addConjuro(new Conjuro(
    "Aumentar la Temperatura Ambiental",
    36));
viaFuego.addConjuro(new Conjuro(
    "Mina de Fuego",
    40));
viaFuego.addConjuro(new Conjuro(
    "Aumentar el Crítico",
    42));
viaFuego.addConjuro(new Conjuro(
    "Secar",
    46));
viaFuego.addConjuro(new Conjuro(
    "Fundir",
    50));
viaFuego.addConjuro(new Conjuro(
    "Cuerpo a Fuego",
    52));
viaFuego.addConjuro(new Conjuro(
    "Sacrificio Vital",
    56));
viaFuego.addConjuro(new Conjuro(
    "Incinerar",
    60));
viaFuego.addConjuro(new Conjuro(
    "Consumir Esencia",
    62));
viaFuego.addConjuro(new Conjuro(
    "Sacrificio de Poder",
    66));
viaFuego.addConjuro(new Conjuro(
    "Crítico Directo",
    70));
viaFuego.addConjuro(new Conjuro(
    "Magia por Capacidades",
    72));
viaFuego.addConjuro(new Conjuro(
    "Tormenta de Fuego",
    76));
viaFuego.addConjuro(new Conjuro(
    "Consumir Vida por Magia",
    80));
viaFuego.addConjuro(new Conjuro(
    "Crear Ifreet",
    82));
viaFuego.addConjuro(new Conjuro(
    "Pira Absoluta",
    86));
viaFuego.addConjuro(new Conjuro(
    "Devastación",
    90));
viaFuego.addConjuro(new Conjuro(
    "Sacrificar a Otros",
    92));
viaFuego.addConjuro(new Conjuro(
    "Señor del Fuego",
    96));
viaFuego.addConjuro(new Conjuro(
    "Armagedón",
    100));


vias_set.push(viaFuego);
var viaIlusion = new ViaMagia(VIA_ILUSION,VIA_ILUSION_DESCRIPCION,VIA_ESENCIA);
viaIlusion.nivelesLibreAcceso.push(4);
viaIlusion.nivelesLibreAcceso.push(8);
viaIlusion.nivelesLibreAcceso.push(14);
viaIlusion.nivelesLibreAcceso.push(18);
viaIlusion.nivelesLibreAcceso.push(24);
viaIlusion.nivelesLibreAcceso.push(28);
viaIlusion.nivelesLibreAcceso.push(34);
viaIlusion.nivelesLibreAcceso.push(38);
viaIlusion.nivelesLibreAcceso.push(44);
viaIlusion.nivelesLibreAcceso.push(48);
viaIlusion.nivelesLibreAcceso.push(54);
viaIlusion.nivelesLibreAcceso.push(58);
viaIlusion.nivelesLibreAcceso.push(64);
viaIlusion.nivelesLibreAcceso.push(68);
viaIlusion.nivelesLibreAcceso.push(74);
viaIlusion.nivelesLibreAcceso.push(78);
viaIlusion.nivelesLibreAcceso.push(84);
viaIlusion.nivelesLibreAcceso.push(88);
viaIlusion.nivelesLibreAcceso.push(94);
viaIlusion.nivelesLibreAcceso.push(98);

viaIlusion.addConjuro(new Conjuro(
    "Ilusión Sonora",
    2));
viaIlusion.addConjuro(new Conjuro(
    "Ilusión Olfativa",
    6));
viaIlusion.addConjuro(new Conjuro(
    "Ilusión Táctil",
    10));
viaIlusion.addConjuro(new Conjuro(
    "Ilusión Visual",
    12));
viaIlusion.addConjuro(new Conjuro(
    "Detectar Ilusiones",
    16));
viaIlusion.addConjuro(new Conjuro(
    "Engatusar",
    20));
viaIlusion.addConjuro(new Conjuro(
    "Alterar Apariencia",
    22));
viaIlusion.addConjuro(new Conjuro(
    "Invisibilidad Ilusoria",
    26));
viaIlusion.addConjuro(new Conjuro(
    "Imagen Espejo",
    30));
viaIlusion.addConjuro(new Conjuro(
    "Ilusión Total",
    32));
viaIlusion.addConjuro(new Conjuro(
    "Confusión",
    36));
viaIlusion.addConjuro(new Conjuro(
    "Crear Ser Ilusorio",
    40));
viaIlusion.addConjuro(new Conjuro(
    "Resistencia a las Ilusiones",
    42));
viaIlusion.addConjuro(new Conjuro(
    "Detectar Mentira",
    46));
viaIlusion.addConjuro(new Conjuro(
    "Ilusión Fantasmal",
    50));
viaIlusion.addConjuro(new Conjuro(
    "Falsear Detección",
    52));
viaIlusion.addConjuro(new Conjuro(
    "Mentira",
    56));
viaIlusion.addConjuro(new Conjuro(
    "Destruir Ilusiones",
    60));
viaIlusion.addConjuro(new Conjuro(
    "Ser Fantasmal",
    62));
viaIlusion.addConjuro(new Conjuro(
    "Credulidad",
    66));
viaIlusion.addConjuro(new Conjuro(
    "Ataque Fantasmal",
    70));
viaIlusion.addConjuro(new Conjuro(
    "El Don de la Mentira",
    72));
viaIlusion.addConjuro(new Conjuro(
    "Vida Ilusoria",
    76));
viaIlusion.addConjuro(new Conjuro(
    "Ilusión Mayor",
    80));
viaIlusion.addConjuro(new Conjuro(
    "Fijar Ilusión",
    82));
viaIlusion.addConjuro(new Conjuro(
    "Ilusión de Sentidos",
    86));
viaIlusion.addConjuro(new Conjuro(
    "Inexistencia",
    90));
viaIlusion.addConjuro(new Conjuro(
    "Engañar a la Muerte",
    92));
viaIlusion.addConjuro(new Conjuro(
    "Mundo de Mentiras",
    96));
viaIlusion.addConjuro(new Conjuro(
    "La Falsa Realidad",
    100));


vias_set.push(viaIlusion);
var viaLuz = new ViaMagia(VIA_LUZ,VIA_LUZ_DESCRIPCION,VIA_OSCURIDAD);

viaLuz.nivelesLibreAcceso.push(4);
viaLuz.nivelesLibreAcceso.push(14);
viaLuz.nivelesLibreAcceso.push(24);
viaLuz.nivelesLibreAcceso.push(34);
viaLuz.nivelesLibreAcceso.push(44);
viaLuz.nivelesLibreAcceso.push(54);
viaLuz.nivelesLibreAcceso.push(64);
viaLuz.nivelesLibreAcceso.push(74);
viaLuz.nivelesLibreAcceso.push(84);
viaLuz.nivelesLibreAcceso.push(94);

viaLuz.addConjuro(new Conjuro(
    "Crear Luz",
    2));
viaLuz.addConjuro(new Conjuro(
    "Imbuir Calma",
    6));
viaLuz.addConjuro(new Conjuro(
    "Flash Cegador",
    8));
viaLuz.addConjuro(new Conjuro(
    "Escudo de Luz",
    10));
viaLuz.addConjuro(new Conjuro(
    "Percibir",
    12));
viaLuz.addConjuro(new Conjuro(
    "Armadura de Luz",
    16));
viaLuz.addConjuro(new Conjuro(
    "Destrucción de Sombras",
    18));
viaLuz.addConjuro(new Conjuro(
    "Detectar lo Negativo",
    20));
viaLuz.addConjuro(new Conjuro(
    "Descarga de Luz",
    22));
viaLuz.addConjuro(new Conjuro(
    "Holograma",
    26));
viaLuz.addConjuro(new Conjuro(
    "Lazos de Luz",
    28));
viaLuz.addConjuro(new Conjuro(
    "Dominio Lumínico",
    30));
viaLuz.addConjuro(new Conjuro(
    "Detectar Vida",
    32));
viaLuz.addConjuro(new Conjuro(
    "Espía de Luz",
    36));
viaLuz.addConjuro(new Conjuro(
    "Éxtasis",
    38));
viaLuz.addConjuro(new Conjuro(
    "Destruir Sentimientos Negativos",
    40));
viaLuz.addConjuro(new Conjuro(
    "Luz Sanadora",
    42));
viaLuz.addConjuro(new Conjuro(
    "Esfera Buscadora",
    46));
viaLuz.addConjuro(new Conjuro(
    "Zona de Detección",
    48));
viaLuz.addConjuro(new Conjuro(
    "Introducirse en los Sueños",
    50));
viaLuz.addConjuro(new Conjuro(
    "Cuerpo a Luz",
    52));
viaLuz.addConjuro(new Conjuro(
    "Bendición",
    56));
viaLuz.addConjuro(new Conjuro(
    "Crear Sentimientos Positivos",
    58));
viaLuz.addConjuro(new Conjuro(
    "Ver Realmente",
    60));
viaLuz.addConjuro(new Conjuro(
    "Escudar Contra lo Negativo",
    62));
viaLuz.addConjuro(new Conjuro(
    "Encontrar",
    66));
viaLuz.addConjuro(new Conjuro(
    "Restituir",
    68));
viaLuz.addConjuro(new Conjuro(
    "Esquema Hipnótico",
    70));
viaLuz.addConjuro(new Conjuro(
    "Luz Catastrófica",
    72));
viaLuz.addConjuro(new Conjuro(
    "Objetos Luminosos Materiales",
    76));
viaLuz.addConjuro(new Conjuro(
    "Transmisión por Luz",
    78));
viaLuz.addConjuro(new Conjuro(
    "Señor de los Sueños",
    80));
viaLuz.addConjuro(new Conjuro(
    "Creación de Luz",
    82));
viaLuz.addConjuro(new Conjuro(
    "Prisma Reflectante",
    86));
viaLuz.addConjuro(new Conjuro(
    "Omnisciencia Radial",
    86));
viaLuz.addConjuro(new Conjuro(
    "Predecir",
    90));
viaLuz.addConjuro(new Conjuro(
    "Prisión de Luz",
    92));
viaLuz.addConjuro(new Conjuro(
    "Esencia de Luz",
    96));
viaLuz.addConjuro(new Conjuro(
    "Ascensión",
    98));
viaLuz.addConjuro(new Conjuro(
    "Holocausto de Luz",
    100));

vias_set.push(viaLuz);
var viaNigromancia = new ViaMagia(VIA_NIGROMANCIA,VIA_NIGROMANCIA_DESCRIPCION,TODAS_VIAS);

viaNigromancia.nivelesLibreAcceso.push(4);
viaNigromancia.nivelesLibreAcceso.push(14);
viaNigromancia.nivelesLibreAcceso.push(24);
viaNigromancia.nivelesLibreAcceso.push(34);
viaNigromancia.nivelesLibreAcceso.push(44);
viaNigromancia.nivelesLibreAcceso.push(54);
viaNigromancia.nivelesLibreAcceso.push(64);
viaNigromancia.nivelesLibreAcceso.push(74);
viaNigromancia.nivelesLibreAcceso.push(84);
viaNigromancia.nivelesLibreAcceso.push(94);

viaNigromancia.addConjuro(new Conjuro(
    "Sentir la Muerte",
    2));
viaNigromancia.addConjuro(new Conjuro(
    "Más Allá",
    6));
viaNigromancia.addConjuro(new Conjuro(
    "Dominar a los Carroñeros",
    8));
viaNigromancia.addConjuro(new Conjuro(
    "Escudo Espectral",
    10));
viaNigromancia.addConjuro(new Conjuro(
    "Drenar Vida",
    12));
viaNigromancia.addConjuro(new Conjuro(
    "Detección Nigromántica",
    16));
viaNigromancia.addConjuro(new Conjuro(
    "Hablar con los Muertos",
    18));
viaNigromancia.addConjuro(new Conjuro(
    "Paralización Nigromántica",
    20));
viaNigromancia.addConjuro(new Conjuro(
    "Necromitud",
    22));
viaNigromancia.addConjuro(new Conjuro(
    "Descarga de Muerte",
    26));
viaNigromancia.addConjuro(new Conjuro(
    "Levantar Cadáveres",
    28));
viaNigromancia.addConjuro(new Conjuro(
    "Cuerpo Muerto",
    30));
viaNigromancia.addConjuro(new Conjuro(
    "Drenar Magia",
    32));
viaNigromancia.addConjuro(new Conjuro(
    "Destruir No Muertos",
    36));
viaNigromancia.addConjuro(new Conjuro(
    "Drenar Características",
    38));
viaNigromancia.addConjuro(new Conjuro(
    "Controlar a los Muertos",
    40));
viaNigromancia.addConjuro(new Conjuro(
    "Marchitar la Vida",
    42));
viaNigromancia.addConjuro(new Conjuro(
    "Escudo Nigromántico",
    46));
viaNigromancia.addConjuro(new Conjuro(
    "Dominar la Vida",
    48));
viaNigromancia.addConjuro(new Conjuro(
    "Estigma Vampírico",
    50));
viaNigromancia.addConjuro(new Conjuro(
    "Forma Espectral",
    52));
viaNigromancia.addConjuro(new Conjuro(
    "Modificación Nigromántica",
    56));
viaNigromancia.addConjuro(new Conjuro(
    "Llamar a los Muertos",
    58));
viaNigromancia.addConjuro(new Conjuro(
    "Levantar Espectros",
    60));
viaNigromancia.addConjuro(new Conjuro(
    "Fuerza Vital",
    62));
viaNigromancia.addConjuro(new Conjuro(
    "Matar",
    66));
viaNigromancia.addConjuro(new Conjuro(
    "Descarga de Almas",
    68));
viaNigromancia.addConjuro(new Conjuro(
    "Quimera Nigromántica",
    70));
viaNigromancia.addConjuro(new Conjuro(
    "Perversión de Vida",
    72));
viaNigromancia.addConjuro(new Conjuro(
    "Vasallaje",
    76));
viaNigromancia.addConjuro(new Conjuro(
    "Drenar Almas",
    78));
viaNigromancia.addConjuro(new Conjuro(
    "Superar la Muerte",
    80));
viaNigromancia.addConjuro(new Conjuro(
    "Alzamiento",
    82));
viaNigromancia.addConjuro(new Conjuro(
    "Pozo de vida",
    86));
viaNigromancia.addConjuro(new Conjuro(
    "Tierra Maldita",
    88));
viaNigromancia.addConjuro(new Conjuro(
    "Sostenimiento",
    90));
viaNigromancia.addConjuro(new Conjuro(
    "Materia Prima",
    92));
viaNigromancia.addConjuro(new Conjuro(
    "Señor de los Muertos",
    96));
viaNigromancia.addConjuro(new Conjuro(
    "Regresar de Entre los Muertos",
    98));
viaNigromancia.addConjuro(new Conjuro(
    "El Despertar",
    100));



vias_set.push(viaNigromancia);
var viaOscuridad = new ViaMagia(VIA_OSCURIDAD,VIA_OSCURIDAD_DESCRIPCION,VIA_LUZ);
viaOscuridad.nivelesLibreAcceso.push(4);
viaOscuridad.nivelesLibreAcceso.push(14);
viaOscuridad.nivelesLibreAcceso.push(24);
viaOscuridad.nivelesLibreAcceso.push(34);
viaOscuridad.nivelesLibreAcceso.push(44);
viaOscuridad.nivelesLibreAcceso.push(54);
viaOscuridad.nivelesLibreAcceso.push(64);
viaOscuridad.nivelesLibreAcceso.push(74);
viaOscuridad.nivelesLibreAcceso.push(84);
viaOscuridad.nivelesLibreAcceso.push(94);

viaOscuridad.addConjuro(new Conjuro(
    "Crear Oscuridad",
    2));
viaOscuridad.addConjuro(new Conjuro(
    "Imbuir Miedo",
    6));
viaOscuridad.addConjuro(new Conjuro(
    "Ver en la Oscuridad",
    8));
viaOscuridad.addConjuro(new Conjuro(
    "Escudo Oscuro",
    10));
viaOscuridad.addConjuro(new Conjuro(
    "Sombra",
    10));
viaOscuridad.addConjuro(new Conjuro(
    "Armadura Oscura",
    16));
viaOscuridad.addConjuro(new Conjuro(
    "Destrucción de Luz",
    18));
viaOscuridad.addConjuro(new Conjuro(
    "Ocultación de Magia",
    20));
viaOscuridad.addConjuro(new Conjuro(
    "Descarga Oscura",
    22));
viaOscuridad.addConjuro(new Conjuro(
    "Oscuridad Ambiental",
    26));
viaOscuridad.addConjuro(new Conjuro(
    "Lazos Oscuros",
    28));
viaOscuridad.addConjuro(new Conjuro(
    "Dominio Oscuro",
    30));
viaOscuridad.addConjuro(new Conjuro(
    "Ocultación",
    32));
viaOscuridad.addConjuro(new Conjuro(
    "Ofuscar",
    36));
viaOscuridad.addConjuro(new Conjuro(
    "Rabia",
    38));
viaOscuridad.addConjuro(new Conjuro(
    "Destruir Sentimientos Positivos",
    40));
viaOscuridad.addConjuro(new Conjuro(
    "Noche",
    42));
viaOscuridad.addConjuro(new Conjuro(
    "Esfera Oscura",
    46));
viaOscuridad.addConjuro(new Conjuro(
    "Zona de Ocultación",
    48));
viaOscuridad.addConjuro(new Conjuro(
    "Introducirse en las Pesadillas",
    50));
viaOscuridad.addConjuro(new Conjuro(
    "Cuerpo a Oscuridad",
    52));
viaOscuridad.addConjuro(new Conjuro(
    "Perdición",
    56));
viaOscuridad.addConjuro(new Conjuro(
    "Crear Sentimientos Negativos",
    58));
viaOscuridad.addConjuro(new Conjuro(
    "Eliminar Residuos",
    60));
viaOscuridad.addConjuro(new Conjuro(
    "Escudar Contra lo Positivo",
    62));
viaOscuridad.addConjuro(new Conjuro(
    "Oscuridad Devoradora",
    66));
viaOscuridad.addConjuro(new Conjuro(
    "Destrozar",
    68));
viaOscuridad.addConjuro(new Conjuro(
    "Marca del Miedo",
    70));
viaOscuridad.addConjuro(new Conjuro(
    "Oscuridad Catastrófica",
    72));
viaOscuridad.addConjuro(new Conjuro(
    "Objetos Oscuros",
    76));
viaOscuridad.addConjuro(new Conjuro(
    "Transmisión por Sombras",
    78));
viaOscuridad.addConjuro(new Conjuro(
    "Rey de Pesadillas",
    80));
viaOscuridad.addConjuro(new Conjuro(
    "Creación Oscura",
    82));
viaOscuridad.addConjuro(new Conjuro(
    "Ocultarse Ante la Magia",
    86));
viaOscuridad.addConjuro(new Conjuro(
    "Reino de Tinieblas",
    88));
viaOscuridad.addConjuro(new Conjuro(
    "Indetección",
    90));
viaOscuridad.addConjuro(new Conjuro(
    "Prisión de Oscuridad",
    92));
viaOscuridad.addConjuro(new Conjuro(
    "Esencia Oscura",
    96));
viaOscuridad.addConjuro(new Conjuro(
    "Ascensión Oscura",
    98));
viaOscuridad.addConjuro(new Conjuro(
    "Holocausto de Oscuridad",
    100));

vias_set.push(viaOscuridad);
var viaTierra = new ViaMagia(VIA_TIERRA,VIA_TIERRA_DESCRIPCION,VIA_AIRE);

viaTierra.nivelesLibreAcceso.push(4);
viaTierra.nivelesLibreAcceso.push(8);
viaTierra.nivelesLibreAcceso.push(14);
viaTierra.nivelesLibreAcceso.push(18);
viaTierra.nivelesLibreAcceso.push(24);
viaTierra.nivelesLibreAcceso.push(28);
viaTierra.nivelesLibreAcceso.push(34);
viaTierra.nivelesLibreAcceso.push(38);
viaTierra.nivelesLibreAcceso.push(44);
viaTierra.nivelesLibreAcceso.push(48);
viaTierra.nivelesLibreAcceso.push(54);
viaTierra.nivelesLibreAcceso.push(58);
viaTierra.nivelesLibreAcceso.push(64);
viaTierra.nivelesLibreAcceso.push(68);
viaTierra.nivelesLibreAcceso.push(74);
viaTierra.nivelesLibreAcceso.push(78);
viaTierra.nivelesLibreAcceso.push(84);
viaTierra.nivelesLibreAcceso.push(88);
viaTierra.nivelesLibreAcceso.push(94);
viaTierra.nivelesLibreAcceso.push(98);

viaTierra.addConjuro(new Conjuro(
    "Detectar Minerales",
    2));
viaTierra.addConjuro(new Conjuro(
    "Control Mineral",
    6));
viaTierra.addConjuro(new Conjuro(
    "Aumentar Peso",
    10));
viaTierra.addConjuro(new Conjuro(
    "Transformar Mineral",
    12));
viaTierra.addConjuro(new Conjuro(
    "Firmeza",
    16));
viaTierra.addConjuro(new Conjuro(
    "Barrera de Piedra",
    20));
viaTierra.addConjuro(new Conjuro(
    "Lentitud",
    22));
viaTierra.addConjuro(new Conjuro(
    "Coraza",
    26));
viaTierra.addConjuro(new Conjuro(
    "Escudo Magnético",
    30));
viaTierra.addConjuro(new Conjuro(
    "Atravesar lo Sólido",
    32));
viaTierra.addConjuro(new Conjuro(
    "Espina de la Tierra",
    36));
viaTierra.addConjuro(new Conjuro(
    "Rotura",
    40));
viaTierra.addConjuro(new Conjuro(
    "Telemetría",
    42));
viaTierra.addConjuro(new Conjuro(
    "Control Magnético",
    46));
viaTierra.addConjuro(new Conjuro(
    "Forja",
    50));
viaTierra.addConjuro(new Conjuro(
    "Cuerpo Sólido",
    52));
viaTierra.addConjuro(new Conjuro(
    "Resistencia",
    56));
viaTierra.addConjuro(new Conjuro(
    "Petrificar",
    60));
viaTierra.addConjuro(new Conjuro(
    "Grieta",
    62));
viaTierra.addConjuro(new Conjuro(
    "Invertir la Gravedad",
    66));
viaTierra.addConjuro(new Conjuro(
    "Creación Mineral",
    70));
viaTierra.addConjuro(new Conjuro(
    "Erudición del Terreno",
    72));
viaTierra.addConjuro(new Conjuro(
    "Terremoto",
    76));
viaTierra.addConjuro(new Conjuro(
    "Destrucción Gravitacional",
    80));
viaTierra.addConjuro(new Conjuro(
    "Crear Golem",
    82));
viaTierra.addConjuro(new Conjuro(
    "Aumento de Gravedad",
    86));
viaTierra.addConjuro(new Conjuro(
    "Meteoro",
    90));
viaTierra.addConjuro(new Conjuro(
    "Control de la Gravedad",
    92));
viaTierra.addConjuro(new Conjuro(
    "Uno con la Tierra",
    96));
viaTierra.addConjuro(new Conjuro(
    "Control Atómico",
    100));






vias_set.push(viaTierra);
var ERR_PODER_SIN_DIFICULTAD_MINIMA = "Poder sin dificultad mínima";

/**
 *
 * @class DisciplinaPsiquica
 * @param {string} nombre
 * @param {string} descripcion
 * @constructor
 */
function DisciplinaPsiquica(nombre, descripcion) {
    /** @type string */
    this.nombre = nombre;

    /** @type string */
    this.descripcion = descripcion;

    /** @type PoderPsiquico[] */
    this.poderesPsiquicos = [];

    /** @type boolean */
    this.libre = false;
}

DisciplinaPsiquica.prototype = {

    constructor : DisciplinaPsiquica,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {PoderPsiquico[]}
     */
    getPoderesPsiquicos : function() {
        return this.poderesPsiquicos;
    },

    /**
     *
     * @returns {boolean}
     */
    isLibre : function() {
        return this.libre;
    },

    /**
     *
     * @param {PoderPsiquico} poder
     */
    addPoder : function(poder) {
        poder.nombreDisciplinaPsiquica = this.nombre;
        this.poderesPsiquicos.push(poder);
    },

    toJSON : function() {
        return this.nombre;
    }
};

/**
 *
 * @class PoderPsiquico
 * @param {string} nombre
 * @param {number} nivel
 * @param {string} accion
 * @param {boolean} mantenimiento
 * @param {string} descripcion
 * @param {string[]} efectos
 * @constructor
 */
function PoderPsiquico(nombre, nivel, accion, mantenimiento, descripcion, efectos) {
    /** @type string */
    this.nombre = nombre;

    /** @type number */
    this.nivel = nivel;

    /** @type string */
    this.accion = accion;

    /** @type boolean */
    this.mantenimiento = mantenimiento;

    /** @type string */
    this.descripcion = descripcion;

    /** @type string[] */
    this.efectos = efectos;

    /**
     *
     * @type {string}
     */
    this.nombreDisciplinaPsiquica = "";
}

PoderPsiquico.prototype = {

    constructor : PoderPsiquico,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {number}
     */
    getNivel : function() {
        return this.nivel;
    },

    /**
     *
     * @returns {string}
     */
    getAccion : function() {
        return this.accion;
    },

    /**
     *
     * @returns {boolean}
     */
    getMantenimiento : function() {
        return this.mantenimiento;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {string[]}
     */
    getEfectos : function() {
        return this.efectos;
    },

    /**
     *
     * @returns {string}
     * @throws ERR_PODER_SIN_DIFICULTAD_MINIMA
     */
    dificultadMinima : function() {
        for (var i = 0; i < this.efectos.length; i++) {
            if (this.efectos[i].toUpperCase().indexOf("FATIGA") < 0) {
                return DIFICULTADES[i];
            }
        }
        throw ERR_PODER_SIN_DIFICULTAD_MINIMA + ": " + this.nombre;
    },

    /**
     *
     * @returns {boolean}
     */
    puedeComprarse : function() {
        return true;
    },

    toJSON : function() {
        return this.nombre+"--"+this.nombreDisciplinaPsiquica;
    }
};

function DisciplinaPsiquicaAccedida(disciplinaPsiquica) {
    /** @type DisciplinaPsiquica */
    this.disciplina = disciplinaPsiquica;

    /** @type boolean */
    this.anulable = true;

}

DisciplinaPsiquicaAccedida.prototype = {

    constructor : DisciplinaPsiquicaAccedida,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.disciplina.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.disciplina.descripcion;
    },

    /**
     *
     * @returns {PoderPsiquico[]}
     */
    getPoderesPsiquicos : function() {
        return this.disciplina.poderesPsiquicos;
    },

    /**
     *
     * @returns {boolean}
     */
    isLibre : function() {
        return this.disciplina.libre;
    },

    isAnulable : function() {
        return this.anulable;
    },

    setAnulable : function(valor) {
        this.anulable = valor;
    }
};

//region PoderPsiquicoDominado
/**
 *
 * @class PoderPsiquicoDominado
 * @param {PoderPsiquico} poder
 * @param {DisciplinaPsiquica} disciplina
 * @constructor
 */
function PoderPsiquicoDominado(poder, disciplina) {
    /**
     *
     * @type {PoderPsiquico}
     */
    this.poder = poder;

    /**
     *
     * @type {DisciplinaPsiquica}
     */
    this.disciplina = disciplina;

    /**
     *
     * @type {number}
     */
    this.fortalecimiento = 0;

    /**
     *
     * @type {number}
     */
    this.fortalecimientoPrevio = 0;
}

PoderPsiquicoDominado.prototype = {
    constructor : PoderPsiquicoDominado,

    /**
     *
     * @returns {PoderPsiquico}
     */
    getPoder : function() {
        return this.poder;
    },

    /**
     *
     * @returns {DisciplinaPsiquica}
     */
    getDisciplina : function() {
        return this.disciplina;
    },

    /**
     *
     * @returns {number}
     */
    getFortalecimiento : function() {
        return this.fortalecimiento;
    },

    /**
     *
     * @param {number} valor
     */
    addFortalecimiento : function(valor) {
        this.fortalecimiento += valor;
    }
};
//endregion PoderPsiquicoDominado

/**
 *
 * @type {DisciplinaPsiquica[]}
 */
var disciplinasPsiquicas_set = [];

var ERR_DISCIPLINA_DESCONOCIDA = "Error: Disciplina Psiquica desconocida";
var ERR_PODER_DESCONOCIDO = "Error: Poder Psíquico desconocido";
var ERR_CV_INSUFICIENTES = "CV insuficientes";

/**
 *
 * @param {string} nombre
 * @returns {DisciplinaPsiquica}
 * @throws ERR_DISCIPLINA_DESCONOCIDA
 */
function getDisciplina(nombre) {
    for (var i = 0; i < disciplinasPsiquicas_set.length; i++) {
        if (disciplinasPsiquicas_set[i].getNombre() == nombre) {
            return disciplinasPsiquicas_set[i];
        }
    }

    throw ERR_DISCIPLINA_DESCONOCIDA + ": " + nombre;
}

/**
 *
 * @param {DisciplinaPsiquica} disciplina
 * @param {string} nombrePoder
 * @returns {PoderPsiquico}
 */
function getPoder(disciplina, nombrePoder) {
    var poderes = disciplina.getPoderesPsiquicos();
    for (var i = 0; i < poderes.length; i++) {
        if (poderes[i].getNombre() == nombrePoder) {
            return poderes[i];
        }
    }
    throw ERR_PODER_DESCONOCIDO + ": " + nombrePoder + " de la disciplina " + disciplina.getNombre();
}

/**
 * @throws ERR_CV_INSUFICIENTES
 */
function afinidadNuevaDisciplina() {
    if (personaje_actual.getHabilidadDePersonaje(HB_CV).valorFinalActual() - personaje_actual.getCVGastados() < 1) {
        throw ERR_CV_INSUFICIENTES;
    }

    var arrayOpciones = [];

    for (i = 0; i < disciplinasPsiquicas_set.length;i++) {
        var disciplina = disciplinasPsiquicas_set[i];
        if ((!disciplina.isLibre()) && (!personaje_actual.hasDisciplina(disciplina.getNombre()))) {
            arrayOpciones.push(new OpcionMostrable(disciplina.getNombre(),"",disciplina.getDescripcion()));
        }
    }
    muestraDialogoElegirOpciones(arrayOpciones, {}, {principal: compraAfinidadDisciplina, isDisabled: noPuedeComprarDisciplina}, true);

}

/**
 *
 * @param {{}} parametros
 * @returns {boolean}
 */
function noPuedeComprarDisciplina(parametros) {
    var nombreDisciplina = parametros.opcion;

    if (!personaje_actual.hasAccesoDisciplina(nombreDisciplina)) {
        return true;
    }

    if (personaje_actual.hasDisciplina(nombreDisciplina)) {
        return true;
    }

    if (personaje_actual.hasFlag(FLAG_PRIMERA_DISCIPLINA_OBLIGATORIA)) {
        if ((!personaje_actual.hasDisciplina(personaje_actual.disciplinaObligada)) && (personaje_actual.disciplinaObligada != nombreDisciplina)) {
            return true;
        }
    }

    return false;
}

/**
 *
 * @param {{}} parametros
 */
function compraAfinidadDisciplina(parametros) {
    var nombreDisciplina = parametros.opcion;

    personaje_actual.addDisciplina(getDisciplina(nombreDisciplina));
    personaje_actual.addCVGastados(1);
}

/**
 *
 * @param {{}} event
 */
function eliminarAfinidadDisciplina(event) {
    var disciplina = event.data.disciplina;

    personaje_actual.removeDisciplina(disciplina);
    personaje_actual.addCVGastados(-1);
}

/**
 *
 * @param {number} CVsGastados
 * @returns {number}
 */
function siguienteCostePotencial(CVsGastados) {
    var coste = 0;
    switch (CVsGastados) {
        case 0:
            coste =  1;
            break;
        case 1:
            coste =  2;
            break;
        case 3:
            coste =  3;
            break;
        case 6:
            coste =  4;
            break;
        case 10:
            coste =  5;
            break;
        case 15:
            coste =  6;
            break;
        case 21:
            coste =  7;
            break;
        case 28:
            coste =  8;
            break;
        case 36:
            coste =  9;
            break;
        case 45:
            coste =  10;
            break;
        case 55:
            coste =  -1;
            break;
    }
    return coste;
}

/**
 *
 * @param {number} CVsGastados
 * @returns {number}
 */
function previoCostePotencial(CVsGastados) {
    var coste;
    switch (CVsGastados) {
        case 0:
            coste = -1;
            break;
        case 1:
            coste = 1;
            break;
        case 3:
            coste = 2;
            break;
        case 6:
            coste = 3;
            break;
        case 10:
            coste = 4;
            break;
        case 15:
            coste = 5;
            break;
        case 21:
            coste = 6;
            break;
        case 28:
            coste = 7;
            break;
        case 36:
            coste = 8;
            break;
        case 45:
            coste = 9;
            break;
        case 55:
            coste = 10;
            break;
    }
    return coste;
}

/**
 *
 * @param {{}} parametros
 */
function dominarPoder(parametros) {
    var disciplina = parametros.disciplina;
    var nombrePoder = parametros.opcion;

    var nombreDisciplina = disciplina.getNombre();

    personaje_actual.addPoderDominado(disciplina,getPoder(disciplina,nombrePoder));
    personaje_actual.addCVGastados(1);
}

/**
 *
 * @param {{}} parametros
 * @returns {boolean}
 */
function noPuedeDominarPoder(parametros) {
    var disciplina = parametros.disciplina;
    var nombrePoder = parametros.opcion;
    var poder = getPoder(disciplina, nombrePoder);

    var noPuede = false;

    if (personaje_actual.hasPoderDominado(disciplina, nombrePoder)) {
        noPuede =  true;
    }

    if (personaje_actual.maxNivelDominadoDisciplina(disciplina) + 1 < poder.getNivel()) {
        noPuede =  true;
    }

    return noPuede;
}

/**
 *
 * @param {{}} event
 */
function fortalecerPoderPsiquico(event) {
    var disciplina = event.data.disciplina;
    var poder = event.data.poder;
    var cantidad = event.data.cantidad;

    personaje_actual.fortalecerPoder(disciplina, poder, cantidad);
    if (cantidad == 1) {
        personaje_actual.addCVGastados(1);
    } else {
        personaje_actual.addCVGastados(-1);
    }
}

/**
 *
 * @param {{}} event
 */
function eliminarPoderDominado(event) {
    var disciplina = event.data.disciplina;
    var poder = event.data.poder;

    personaje_actual.removePoderDominado(disciplina,poder);
    personaje_actual.addCVGastados(-1);
}

/**
 *
 * @param {{}} event
 */
function comprarInnato(event) {
    var cantidad = event.data.cantidad;

    personaje_actual.addInnatoPsiquico(cantidad);
    personaje_actual.addCVGastados(2 * cantidad);
}

/**
 *
 * @param {number} voluntad
 * @returns {number}
 */
function getPotencialPsiquicoPorVoluntad(voluntad)  {
    if (voluntad <= 4) {
        return 0;
    } else if (voluntad <= 14) {
        return (voluntad-4)*10;
    } else {
        return 100 + ((voluntad-14)*20);
    }
}
var DISCIPLINA_PODERES_MATRICIALES = "Poderes Matriciales";
var DISCIPLINA_DESCRIPCION_PODERES_MATRICIALES = "";

var discPoderesMatriciales = new DisciplinaPsiquica(
    DISCIPLINA_PODERES_MATRICIALES,
    DISCIPLINA_DESCRIPCION_PODERES_MATRICIALES
);

discPoderesMatriciales.libre = true;

discPoderesMatriciales.addPoder(new PoderPsiquico(
    "Sentir matrices",
    0,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 1","10 metros de radio. Permite ver matrices psíquicas activas","25 metros de radio. Detecta poderes latentes en las personas","50 metros de radio / Permite reconocer el poder que se esté utilizando","100 metros de radio","250 metros de radio / Nota las disciplinas a las que es afín un psíquico","500 metros de radio. Mide el potencial de otro psíquico","1 kilómetro de radio / Detecta los CV libres que le quedan a otro psíquico","5 kilómetros de radio. Nota los poderes que posee otro psíquico","100 kilómetros de radio"]
));
discPoderesMatriciales.addPoder(new PoderPsiquico(
    "Destruir matrices",
    0,
    ACCION_PASIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","Poderes de nivel Medio","Poderes de nivel Difícil","Poderes de nivel Muy Difícil","Poderes de nivel Absurdo","Poderes de nivel Casi Imposible","Poderes de nivel Imposible","Poderes de nivel Inhumano"]
));
discPoderesMatriciales.addPoder(new PoderPsiquico(
    "Ocultar matrices",
    0,
    ACCION_PASIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","-2 grados de dificultad","-3 grados de dificultad","-4 grados de dificultad","-5 grados de dificultad","-6 grados de dificultad","-7 grados de dificultad","-8 grados de dificultad","-9 grados de dificultad"]
));
discPoderesMatriciales.addPoder(new PoderPsiquico(
    "Conectar matrices",
    0,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","2 individuos","3 individuos","4 individuos","6 individuos","8 individuos","10 individuos","20 individuos"]
));

disciplinasPsiquicas_set.push(discPoderesMatriciales);

var DISCIPLINA_CRIOQUINESIS = "Crioquinesis";
var DISCIPLINA_DESCRIPCION_CRIOQUINESIS = "";


var discCrioquinesis = new DisciplinaPsiquica(
    DISCIPLINA_CRIOQUINESIS,
    DISCIPLINA_DESCRIPCION_CRIOQUINESIS
);

discCrioquinesis.addPoder(new PoderPsiquico(
    "Percibir temperatura",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 4","Fatiga 2","Fatiga 1","10 metros de radio","50 metros de radio","100 metros de radio","500 metros de radio","1 kilómetro de radio","10 kilómetros de radio","100 kilómetros de radio"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Congelar",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","80 RF","100 RF","120 RF","140 RF","160 RF","180 RF","220 RF"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Crear frío",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 1","1 intensidad","3 intensidades","5 intensidades","7 intensidades","10 intensidades","13 intensidades","16 intensidades","20 intensidades","25 intensidades"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Eliminar el frío",
    1,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 1","-1 intensidad / 80 RF","-3 intensidades / 100 RF","-5 intensidades / 120 RF","-7 intensidades / 140 RF","-10 intensidades / 160 RF","-15 intensidades / 180 RF","-20 intensidades / 200 RF","-30 intensidades / 220 RF","-40 intensidades / 260 RF"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Control sobre el frío",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","4 intensidades / 80 RF","6 intensidades / 100 RF","8 intensidades / 120 RF","12 intensidades / 140 RF","16 intensidades / 160 RF","20 intensidades / 180 RF","25 intensidades / 200 RF","30 intensidades / 240 RF"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Esquirlas de hielo",
    2,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","Fatiga 1","Daño base 80","Daño base 100","Daño base 120","Daño base 160 / Área de 5 metros","Daño base 200 / Área de 25 metros"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Disminuir la temperatura ambiental",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","Fatiga 1","-5º / 1 kilómetro de radio","-10º / 5 kilómetros de radio","-15º / 10 kilómetros de radio","-20º / 25 kilómetros de radio","-30º / 50 kilómetros de radio","-40º / 100 kilómetros de radio"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Escudo de hielo",
    2,
    ACCION_PASIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","600 PV","800 PV","1.200 PV","1.800 PV","2.500 PV","4.000 PV","6.000 PV"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Cristalizar",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","120 RF","140 RF","160 RF","180 RF","220 RF"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Un instante eterno",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","120 RF / 5 metros de radio","140 RF / 10 metros de radio","160 RF / 20 metros de radio","180 RF / 50 metros de radio","200 RF / 100 metros de radio"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Cero absoluto",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","5 metros de radio","10 metros de radio","20 metros de radio","50 metros de radio","100 metros de radio"]
));
discCrioquinesis.addPoder(new PoderPsiquico(
    "Frío mayor",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 20","Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","30 intensidades","40 intensidades","50 intensidades","60 intensidades"]
));

disciplinasPsiquicas_set.push(discCrioquinesis);

if (CUMPLEMENTO_WEB_1_ENABLED) {
    discCrioquinesis.addPoder(new PoderPsiquico(
        "Inmunidad al frío",
        2,
        ACCION_PASIVA,
        true,
        "Permite al psíquico, o al individuo designado por este, ser inmune al efecto de varias intensidades de frío, incluso si se trata de uno de carácter sobrenatural. En el caso de que se reciba un ataque basado en dicho elemento, cada intensidad a la que es inmune disminuye 5 puntos el daño base del ataque, y aumenta en +5 las Resistencias contra sus efectos.",
        ["Fatiga 4","Fatiga 2","Fatiga 1","5 intensidades","10 intensidades","15 intensidades","20 intensidades","30 intensidades","40 intensidades","50 intensidades"]
    ));
};
var DISCIPLINA_ENERGIA = "Energía";
var DISCIPLINA_DESCRIPCION_ENERGIA = "";

var discEnergia = new DisciplinaPsiquica(
    DISCIPLINA_ENERGIA,
    DISCIPLINA_DESCRIPCION_ENERGIA
);

discEnergia.addPoder(new PoderPsiquico(
    "Crear energía",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","1 intensidad","3 intensidades","5 intensidades","7 intensidades","10 intensidades","13 intensidades","16 intensidades","20 intensidades"]
));
discEnergia.addPoder(new PoderPsiquico(
    "Percibir energía",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","10 metros de radio","50 metros de radio","100 metros de radio","250 metros de radio","500 metros de radio","1 kilómetro de radio","10 kilómetros de radio","100 kilómetros de radio"]
));
discEnergia.addPoder(new PoderPsiquico(
    "Creación de energía",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 4","Fatiga 2","Fatiga 1","1 metro cúbico","2 metros cúbicos","3 metros cúbicos","4 metros cúbicos","5 metros cúbicos","10 metros cúbicos","20 metros cúbicos"]
));
discEnergia.addPoder(new PoderPsiquico(
    "Descarga de energía",
    1,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 4","Fatiga 2","Fatiga 1","Daño 50","Daño 70","Daño 100","Daño 120","Daño 140 / Afecta a seres inmateriales","Daño 180 / Afecta a seres inmateriales","Daño 220 / Afecta a seres inmateriales"]
));
discEnergia.addPoder(new PoderPsiquico(
    "Escudo de energía",
    1,
    ACCION_PASIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","300 PV","500 PV","800 PV","1.000 PV","1.400 PV","2.000 PV","3.000 PV"]
));
discEnergia.addPoder(new PoderPsiquico(
    "Deshacer energía",
    2,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","-1 intensidad / 100 RF","-3 intensidades / 120 RF","-5 intensidades / 140 RF","-8 intensidades / 160 RF","-12 intensidades / 180 RF","-18 intensidades / 200 RF","-24 intensidades / 240 RF"]
));
discEnergia.addPoder(new PoderPsiquico(
    "Inmunidad",
    2,
    ACCION_PASIVA,
    true,
    "",
    ["Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","10 intensidades","15 intensidades","20 intensidades","30 intensidades","40 intensidades"]
));
discEnergia.addPoder(new PoderPsiquico(
    "Controlar energía",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","4 intensidades / 80 RF","6 intensidades / 100 RF","8 intensidades / 120 RF","12 intensidades / 140 RF","16 intensidades / 160 RF","20 intensidades / 180 RF","25 intensidades / 220 RF"]
));
discEnergia.addPoder(new PoderPsiquico(
    "Modificar naturaleza",
    2,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","6 intensidades / 100 RF","8 intensidades / 120 RF","12 intensidades / 140 RF","16 intensidades / 160 RF","20 intensidades / 180 RF","25 intensidades / 220 RF"]
));
discEnergia.addPoder(new PoderPsiquico(
    "Cúpula de energía",
    3,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","Daño 100 / 25 metros de radio","Daño 120 / 50 metros de radio","Daño 140 / 100 metros de radio","Daño 160 / 200 metros de radio Puede dañar a seres inmateriales","Daño 200 / 500 metros de radio Puede dañar a seres inmateriales"]
));
discEnergia.addPoder(new PoderPsiquico(
    "Energía mayor",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 20","Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","25 intensidades","35 intensidades","45 intensidades","55 intensidades"]
));

disciplinasPsiquicas_set.push(discEnergia);

var DISCIPLINA_INCREMENTO_FISICO = "Incremento Físico";
var DISCIPLINA_DESCRIPCION_INCREMENTO_FISICO = "";

var discIncrementoFisico = new DisciplinaPsiquica(
    DISCIPLINA_INCREMENTO_FISICO,
    DISCIPLINA_DESCRIPCION_INCREMENTO_FISICO
);

discIncrementoFisico.addPoder(new PoderPsiquico(
    "Incrementar Fuerza",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 4","Fatiga 2","Fuerza +1","Fuerza +2","Fuerza +3","Fuerza +4","Fuerza +5","Fuerza +6","Fuerza +8","Fuerza +10"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Incrementar desplazamiento",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","Tipo de movimiento +1","Tipo de movimiento +2","Tipo de movimiento +3","Tipo de movimiento +4","Tipo de movimiento +5","Tipo de movimiento +6","Tipo de movimiento +8"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Incrementar habilidad",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 4","Fatiga 2","Destreza o Agilidad +1","Destreza o Agilidad +2","Destreza o Agilidad +3","Destreza o Agilidad +4","Destreza o Agilidad +5","Destreza o Agilidad +6","Destreza o Agilidad +8","Destreza o Agilidad +10"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Inhumanidad",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 4","Fatiga 2","Inhumanidad","Inhumanidad, +5 a las habilidades atléticas","Inhumanidad, +10 a las habilidades atléticas","Inhumanidad, +20 a las habilidades atléticas","Zen, +30 a las habilidades atléticas","Zen, +40 a las habilidades atléticas","Zen, +60 a las habilidades atléticas","Zen, +80 a las habilidades atléticas"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Incrementar capacidad de salto",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","+10 a Saltar","+20 a Saltar","+40 a Saltar","+80 a Saltar","+120 a Saltar / Inhumanidad","+180 a Saltar / Inhumanidad","+220 a Saltar / Inhumanidad","+280 a Saltar / Zen","+320 a Saltar / Zen"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Incrementar el sentido acrobático",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","+10 a Acrobacias","+20 a Acrobacias","+40 a Acrobacias","+80 a Acrobacias","+120 a Acrobacias / Inhumanidad","+180 a Acrobacias / Inhumanidad","+220 a Acrobacias / Inhumanidad","+280 a Acrobacias / Zen","+320 a Acrobacias / Zen"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Incremento de reacción",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 4","Fatiga 2","+20 al turno","+40 al turno","+60 al turno","+80 al turno","+120 al turno","+160 al turno","+200 al turno"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Incremento de Percepción",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 4","Fatiga 2","Percepción +1","Percepción +2","Percepción +3","Percepción +4","Percepción +5","Percepción +6","Percepción +8"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Incrementar aguante",
    2,
    ACCION_PASIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 4","Fatiga 2","+10 a la RF","+20 a la RF","+40 a la RF","+80 a la RF","+120 a la RF","+160 a la RF","+200 a la RF"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Regeneración",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","+1 nivel de Regeneración","+2 niveles de Regeneración","+4 niveles de Regeneración","+6 niveles de Regeneración","+8 niveles de Regeneración","+10 niveles de Regeneración","+12 niveles de Regeneración"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Incremento total",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","Características físicas +1","Características físicas +2","Características físicas +4","Características físicas +6","Características físicas +8"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Eliminación de cansancio",
    3,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","2 puntos de Cansancio recuperados","4 puntos de Cansancio recuperados","6 puntos de Cansancio recuperados","10 puntos de Cansancio recuperados","Completamente recuperado"]
));
discIncrementoFisico.addPoder(new PoderPsiquico(
    "Imbuir",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","Poderes de nivel Muy Difícil","Poderes de nivel Absurdo","Poderes de nivel Casi Imposible","Poderes de nivel Imposible","Poderes de nivel Inhumano"]
));

disciplinasPsiquicas_set.push(discIncrementoFisico);










var DISCIPLINA_PIROQUINESIS = "Piroquinesis";
var DISCIPLINA_DESCRIPCION_PIROQUINESIS = "";


var discPiroquinesis = new DisciplinaPsiquica(
    DISCIPLINA_PIROQUINESIS,
    DISCIPLINA_DESCRIPCION_PIROQUINESIS
);

discPiroquinesis.addPoder(new PoderPsiquico(
    "Crear fuego",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 1","1 intensidad","3 intensidades","5 Intensidades","7 intensidades","10 intensidades","13 intensidades","16 intensidades","20 intensidades","25 intensidades"]
));
discPiroquinesis.addPoder(new PoderPsiquico(
    "Mitigar fuego",
    1,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 1","-1 intensidad / 80 RF","-3 intensidades / 100 RF","-5 intensidades / 120 RF","-7 intensidades / 140 RF","-10 intensidades / 160 RF","-15 intensidades / 180 RF","-20 intensidades / 200 RF","-30 intensidades / 220 RF","-40 intensidades / 260 RF"]
));
discPiroquinesis.addPoder(new PoderPsiquico(
    "Controlar el fuego",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","4 intensidades / 80 RF","6 intensidades / 100 RF","8 intensidades / 120 RF","12 intensidades / 140 RF","16 intensidades / 160 RF","20 intensidades / 180 RF","25 intensidades / 200 RF","30 intensidades / 240 RF"]
));
discPiroquinesis.addPoder(new PoderPsiquico(
    "Inmolar",
    1,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 4","Fatiga 2","Fatiga 1","Daño 60 / 5 metros de radio","Daño 80 / 10 metros de radio","Daño 100 / 20 metros de radio","Daño 120 / 30 metros de radio","Daño 150 / 50 metros de radio","Daño 200 / 100 metros de radio","Daño 250 / 200 metros de radio"]
));
discPiroquinesis.addPoder(new PoderPsiquico(
    "Mantenimiento ígneo",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 4","Fatiga 2","Fatiga 1","5 intensidades","10 intensidades","15 intensidades","20 intensidades","30 intensidades","40 intensidades","50 intensidades"]
));
discPiroquinesis.addPoder(new PoderPsiquico(
    "Inmunidad al fuego",
    2,
    ACCION_PASIVA,
    true,
    "",
    ["Fatiga 4","Fatiga 2","Fatiga 1","5 intensidades","10 intensidades","15 intensidades","20 intensidades","30 intensidades","40 intensidades","50 intensidades"]
));
discPiroquinesis.addPoder(new PoderPsiquico(
    "Barrera ígnea",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","Fatiga 1","Daño base 60 / 5 metros de longitud","Daño base 80 / 10 metros de longitud","Daño base 120 / 20 metros de longitud","Daño base 160 / 30 metros de longitud","Daño base 200 / 40 metros de longitud","Daño base 240 / 50 metros de longitud"]
));
discPiroquinesis.addPoder(new PoderPsiquico(
    "Aumentar temperatura ambiental",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","Fatiga 1","+5ºC / 1 kilómetro de radio","+10ºC / 5 kilómetros de radio","+15ºC / 10 kilómetros de radio","+20ºC / 25 kilómetros de radio","+30ºC / 50 kilómetros de radio","+40ºC / 100 kilómetros de radio"]
));
discPiroquinesis.addPoder(new PoderPsiquico(
    "Consumir",
    3,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","120 RF / Daño automático de 80","140 RF / Daño automático de 120","160 RF / Daño automático de 160","180 RF / Daño automático de 200","220 RF / Daño automático de 250"]
));
discPiroquinesis.addPoder(new PoderPsiquico(
    "Nova",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","10 puntos de vida","20 puntos de vida","30 puntos de vida","40 puntos de vida","60 puntos de vida","80 puntos de vida","120 puntos de vida"]
));
discPiroquinesis.addPoder(new PoderPsiquico(
    "Fuego mayor",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 20","Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","30 intensidades","40 intensidades","50 intensidades","60 intensidades"]
));

disciplinasPsiquicas_set.push(discPiroquinesis);

var DISCIPLINA_SENTIENTE = "Sentiente";
var DISCIPLINA_DESCRIPCION_SENTIENTE = "";

var discSentiente = new DisciplinaPsiquica(
    DISCIPLINA_SENTIENTE,
    DISCIPLINA_DESCRIPCION_SENTIENTE
);

discSentiente.addPoder(new PoderPsiquico(
    "Percibir sentimientos",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","100 RP","120 RP","140 RP","160 RP","180 RP","200 RP","220 RP","240 RP"]
));
discSentiente.addPoder(new PoderPsiquico(
    "Detectar sentimientos",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","80 RP / 10 metros de radio","100 RP / 50 metros de radio","120 RP / 100 metros de radio","140 RP / 250 metros de radio","160 RP / 500 metros de radio","180 RP / 1 kilómetro de radio","200 RP / 10 kilómetros de radio","220 RP / 100 kilómetros de radio"]
));
discSentiente.addPoder(new PoderPsiquico(
    "Conectar sentidos",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","60 RP / 10 metros de radio","80 RP / 100 metros de radio","100 RP / 500 metros de radio","120 RP / 1 kilómetro de radio","140 RP / 10 kilómetros de radio","160 RP / 100 kilómetros de radio","180 RP / 1.000 kilómetros de radio","200 RP / cualquier distancia"]
));
discSentiente.addPoder(new PoderPsiquico(
    "Intensificar sentimientos",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","100 RP","120 RP","140 RP","160 RP","180 RP","200 RP","220 RP","240 RP"]
));
discSentiente.addPoder(new PoderPsiquico(
    "Eliminar sentidos",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","100 RP","120 RP","140 RP","160 RP","180 RP","220 RP"]
));
discSentiente.addPoder(new PoderPsiquico(
    "Crear sentimientos",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 4","Fatiga 2","80 RP","100 RP","120 RP","140 RP","160 RP","180 RP","200 RP"]
));
discSentiente.addPoder(new PoderPsiquico(
    "Cargar con sentimientos",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","100 RP / área de 5 metros","120 RP / área de 10 metros","140 RP / área de 25 metros","160 RP / área de 50 metros","180 RP / área de 100 metros","220 RP / área de 500 metros"]
));
discSentiente.addPoder(new PoderPsiquico(
    "Trasladar los sentidos",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","1 kilómetro de radio","10 kilómetros de radio","100 kilómetros de radio","500 kilómetros de radio","1.000 kilómetros de radio","Cualquier distancia"]
));
discSentiente.addPoder(new PoderPsiquico(
    "Área",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 4","10 metros de radio","100 metros de radio","1 kilómetro de radio","10 kilómetros de radio","100 kilómetros de radio","500 kilómetros de radio"]
));
discSentiente.addPoder(new PoderPsiquico(
    "Destruir sentimientos",
    3,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","120 RP","140 RP","160 RP","180 RP","200 RP"]
));

disciplinasPsiquicas_set.push(discSentiente);

var DISCIPLINA_TELEMETRIA = "Telemetría";
var DISCIPLINA_DESCRIPCION_TELEMETRIA = "";

var discTelemetria = new DisciplinaPsiquica(
    DISCIPLINA_TELEMETRIA,
    DISCIPLINA_DESCRIPCION_TELEMETRIA
);

discTelemetria.addPoder(new PoderPsiquico(
    "Percibir residuos",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 1","Una hora","Seis horas","Un día","Tres días","Una semana","Un mes","Un año","Una década","Un siglo"]
));
discTelemetria.addPoder(new PoderPsiquico(
    "Leer el pasado",
    2,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","Una hora","Seis horas","Un día","Una semana","Un mes","Un año"]
));
discTelemetria.addPoder(new PoderPsiquico(
    "Erudición humana",
    2,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","Un día / 80 RP","Una semana / 100 RP","Un mes / 120 RP","Un año / 140 RP","Diez años / 160 RP","Cincuenta años / 180 RP","Toda su vida / 200 RP"]
));
discTelemetria.addPoder(new PoderPsiquico(
    "Ver en la historia",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","Un año","Diez años","Un siglo","Un milenio","Cualquier periodo de tiempo"]
));

disciplinasPsiquicas_set.push(discTelemetria);

var DISCIPLINA_TELEPATIA = "Telepatía";
var DISCIPLINA_DESCRIPCION_TELEPATIA = "";

var discTelepatia = new DisciplinaPsiquica(
    DISCIPLINA_TELEPATIA,
    DISCIPLINA_DESCRIPCION_TELEPATIA
);

discTelepatia.addPoder(new PoderPsiquico(
    "Escaneo de zona",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","100 RP / 10 metros de radio","120 RP / 50 metros de radio","140 RP / 100 metros de radio","160 RP / 250 metros de radio","180 RP / 500 metros de radio","200 RP / 1 kilómetro de radio","220 RP / 10 kilómetros de radio","260 RP / 100 kilómetros de radio"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Lectura mental",
    "1",
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","100 RP","120 RP","140 RP","160 RP","180 RP","200 RP","220 RP","240 RP"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Ilusión psíquica",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","80 RP","100 RP","120 RP","140 RP","160 RP","180 RP","200 RP","220 RP"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Escudo psíquico",
    1,
    ACCION_PASIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","+10 RP","+30 RP","+50 RP","+80 RP","+120 RP","+160 RP","+200 RP","+240 RP"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Comunicación mental",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","100 metros","500 metros","1 kilómetro","10 kilómetros","100 kilómetros","1.000 kilómetros","5.000 kilómetros","Cualquier distancia"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Prohibición mental",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 4","Fatiga 2","80 RP","100 RP","120 RP","140 RP","160 RP","180 RP","200 RP","220 RP"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Análisis mental",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","100 RP","120 RP","140 RP","160 RP","180 RP","200 RP","240 RP"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Conexión psíquica",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","100 metros de radio","500 metros de radio","1 kilómetro de radio","10 kilómetros de radio","100 kilómetros de radio","1.000 kilómetros de radio","Cualquier distancia"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Modificación de recuerdos",
    2,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","100 RP","120 RP","140 RP","160 RP","180 RP","200 RP"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Forma astral",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","Hasta 10 kilómetros de radio","Hasta 100 kilómetros de radio","Hasta 500 kilómetros de radio","Hasta 1.000 kilómetros de radio","Hasta 5.000 kilómetros de radio","Cualquier distancia"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Asalto psíquico",
    2,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 8","Fatiga 4","Fatiga 2","120 RP","140 RP","160 RP","180 RP","200 RP","220 RP","260 RP"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Localización psíquica",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","Hasta 10 kilómetros de radio 140 RP","Hasta 100 kilómetros de radio 160 RP","Hasta 500 kilómetros de radio 180 RP","Hasta 1.000 kilómetros de radio 200 RP","Hasta 5.000 kilómetros de radio 220 RP","Cualquier distancia 260 RP"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Control mental",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","100 RP","120 RP","140 RP","160 RP","180 RP","220 RP"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Muerte psíquica",
    3,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","140 RP","160 RP","180 RP","220 RP","240 RP"]
));
discTelepatia.addPoder(new PoderPsiquico(
    "Área",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 4","10 metros de radio","100 metros de radio","1 kilómetro de radio","10 kilómetros de radio","100 kilómetros de radio","500 kilómetros de radio"]
));

disciplinasPsiquicas_set.push(discTelepatia);
var DISCIPLINA_TELEQUINESIS = "Telequinesis";
var DISCIPLINA_DESCRIPCION_TELEQUINESIS = "";

var discTelequinesis = new DisciplinaPsiquica(
    DISCIPLINA_TELEQUINESIS,
    DISCIPLINA_DESCRIPCION_TELEQUINESIS
);

discTelequinesis.addPoder(new PoderPsiquico(
    "Telequinesis menor",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 1","1 Kg. / Tipo de vuelo 4","2 Kg / Tipo de vuelo 6","5 Kg / Tipo de vuelo 8","10 Kg / Tipo de vuelo 10","20 Kg / Tipo de vuelo 12","40 Kg / Tipo de vuelo 14","100 Kg / Tipo de vuelo 16","200 Kg / Tipo de vuelo 18","500 Kg / Tipo de vuelo 20"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Impacto telequinético",
    1,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 2","Fatiga 1","Fuerza 8","Fuerza 10","Fuerza 12","Fuerza 14","Fuerza 15","Fuerza 16","Fuerza 18","Fuerza 20"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Escudo telequinético",
    1,
    ACCION_PASIVA,
    false,
    "",
    ["Fatiga 2","Fatiga 1","300 PV","500 PV","700 PV","1.000 PV","1.500 PV / Barrera de daño 60","2.000 PV / Barrera de daño 80 Detiene energía","3.000 PV / Barrera de daño 120 Detiene energía","5.000 PV / Barrera de daño 160 Detiene energía"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Armadura telequinética",
    1,
    ACCION_PASIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","TA 1","TA 2","TA 4","TA 6","TA 8","TA 10","TA 12","TA 14"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Presa telequinética",
    1,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 2","Fatiga 1","Fuerza 6","Fuerza 8","Fuerza 10","Fuerza 12 / Radio de 5 metros","Fuerza 14 / Radio de 10 metros","Fuerza 15 /Rradio de 50 metros","Fuerza 16 / Radio de 100 metros","Fuerza 18 / Radio de 500 metros"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Balística",
    2,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 4","Fatiga 2","Fatiga 1","+0 Proyección / 5 metros","+10 Proyección / 10 metros","+20 Proyección / 15 metros","+30 Proyección / 25 metros","+40 Proyección / 40 metros","+50 Proyección / 80 metros","+60 Proyección / 150 metros"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Repulsión",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","Fuerza 6 / Línea de 2 metros","Fuerza 8 / Línea de 5 metros","Fuerza 10 / Línea de 10 metros","Fuerza 12 / Línea de 20 metros","Fuerza 14 / Línea de 50 metros","Fuerza 18 / Línea de 100 metros"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Destrozar",
    2,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 8","Fatiga 6","Fatiga 4","Fatiga 2","100 RF","120 RF","140 RF","160 RF","180 RF","220 RF"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Detección de movimiento",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 4","Fatiga 2","Fatiga 1","120 RF / 10 metros de radio","160 RF / 50 metros de radio","200 RF / 100 metros de radio","240 RF / 500 metros de radio","280 RF / 1 kilómetro de radio","320 RF / 10 kilómetros de radio","400 RF / 100 kilómetros de radio"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Vuelo telequinético",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 4","Fatiga 2","Fatiga 1","Tipo de vuelo 6","Tipo de vuelo 8","Tipo de vuelo 10","Tipo de vuelo 12","Tipo de vuelo 14","Tipo de vuelo 16","Tipo de vuelo 18"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Telequinesis orgánica",
    2,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 6","Fatiga 4","Fatiga 2","100 Kg. / Tipo de vuelo 4 / 100 RF","250 Kg. / Tipo de vuelo 6 / 120 RF","500 Kg. / Tipo de vuelo 8 / 140 RF","1.000 Kg. / Tipo de vuelo 10 / 160 RF","2.500 Kg. / Tipo de vuelo 12 / 180 RF","5.000 Kg. / Tipo de vuelo 14 / 200 RF","10.000 Kg. / Tipo de vuelo 16 / 220 RF"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Telequinesis mayor",
    3,
    ACCION_ACTIVA,
    true,
    "",
    ["Fatiga 24","Fatiga 20","Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 4","500 toneladas / Tipo de vuelo 4","10.000 toneladas / Tipo de vuelo 6","100.00 toneladas / Tipo de vuelo 8","1.000.000 toneladas / Tipo de vuelo 10"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Control del terreno",
    3,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","10 metros de radio / Barrera de daño 40","100 metros de radio / Barrera de daño 60","250 metros de radio / Barrera de daño 80","500 metros de radio / Barrera de daño 100","1 kilómetro de radio / Barrera de daño 140"]
));
discTelequinesis.addPoder(new PoderPsiquico(
    "Reestructuración atómica",
    3,
    ACCION_ACTIVA,
    false,
    "",
    ["Fatiga 24","Fatiga 20","Fatiga 16","Fatiga 12","Fatiga 8","Fatiga 6","Fatiga 4","140 RF / 100 Kg.","160 RF / 10 toneladas","200 RF / 100 toneladas"]
));

disciplinasPsiquicas_set.push(discTelequinesis);
/**
 *
 * @class HabilidadKi
 * @param {string} nombre
 * @param {number} costeCM
 * @param {string[]} requisitos
 * @constructor
 * @param {string} descripcion
 * @param {function} [efecto]
 * @param {boolean} isHabilidad
 * @param {string} [nombreHabilidadMedia]
 */
function HabilidadKi(nombre, descripcion, costeCM, requisitos, efecto, isHabilidad, nombreHabilidadMedia) {
    /** @type string */
    this.nombre = nombre;

    /** @type string */
    this.descripcion = descripcion;

    /** @type number */
    this.costeCM = costeCM;

    /** @type string[] */
    this.requisitos = requisitos;

    /** @type {function} */
    this.efecto = efecto;

    /** @type {boolean} */
    this.esHabilidad = isHabilidad;

    /** @type {string} */
    this.nombreHabilidadMedia = nombreHabilidadMedia || "";
}

HabilidadKi.prototype = {
    constructor : HabilidadKi,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {number}
     */
    getCosteCM : function() {
        return this.costeCM;
    },

    /**
     *
     * @returns {string[]}
     */
    getRequisitos : function() {
        return this.requisitos;
    },

    /**
     *
     * @returns {function}
     */
    getEfecto : function() {
        return this.efecto;
    },

    /**
     *
     * @returns {boolean}
     */
    isHabilidad : function() {
        return this.esHabilidad;
    },

    /**
     *
     * @returns {string}
     */
    getNombreHabilidadMedia : function() {
        return this.nombreHabilidadMedia;
    },

    /**
     *
     * @param {Personaje} personaje
     * @returns {boolean}
     */
    cumple : function(personaje) {
        var cumple = true;
        for (var i = 0; i < this.requisitos.length; i++) {
            if (!personaje.hasHabilidadKi(this.requisitos[i])) {
                cumple = false;
            }
        }
        return cumple;
    },

    toJSON : function() {
        return this.nombre;
    }
};

var ERR_NIVEL_EFECTO_DESCONOCIDO = "Error: nivel de efecto desconocido";

/**
 *
 * @param {string} nombre
 * @param {string} descripcion
 * @param {NivelEfectoTecnica[]} nivelesEfecto
 * @param {string} caracPrimaria
 * @param {ElementosAfines} elementosAfines
 * @param {CaracSecunTecnica[]} caracSecundarias
 * @constructor
 * @param {string} tipoEfecto
 * @param {VentajaTecnica[]} [ventajasOpcionales]
 * @param {string[]} [especial]
 */
function EfectoTecnica(nombre, descripcion, tipoEfecto, nivelesEfecto, caracPrimaria, elementosAfines, caracSecundarias, ventajasOpcionales, especial) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {string}
     */
    this.descripcion = descripcion;

    /**
     *
     * @type {NivelEfectoTecnica[]}
     */
    this.nivelesEfecto = nivelesEfecto;
    for (var i = 0; i < this.nivelesEfecto.length;i++) {
        this.nivelesEfecto[i].nombreEfectoTecnica = this.nombre;
    }

    /**
     *
     * @type {string}
     */
    this.caracPrimaria = caracPrimaria;

    /**
     *
     * @type {ElementosAfines}
     */
    this.elementosAfines = elementosAfines;

    /**
     *
     * @type {string}
     */
    this.tipoEfecto = tipoEfecto;

    /**
     *
     * @type {CaracSecunTecnica[]}
     */
    this.caracSecundarias = caracSecundarias;

    /**
     *
     * @type {VentajaTecnica[]}
     */
    this.ventajasOpcionales = ventajasOpcionales || [];
    for (i = 0; i < this.ventajasOpcionales.length;i++) {
        this.ventajasOpcionales[i].setNombreEfectoTecnica(this.nombre);
    }

    /**
     *
     * @type {string[]}
     */
    this.especial = especial || [];
}

EfectoTecnica.prototype = {
    constructor : EfectoTecnica,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {NivelEfectoTecnica[]}
     */
    getNivelesEfecto :function() {
        return this.nivelesEfecto;
    },

    /**
     *
     * @param {string} nombreEfecto
     * @returns {NivelEfectoTecnica}
     */
    getNivelEfectoPorNombre : function(nombreEfecto) {
        for (var i = 0; i < this.nivelesEfecto.length;i++) {
            if (this.nivelesEfecto[i].getNombre() == nombreEfecto) {
                return this.nivelesEfecto[i];
            }
        }
        throw ERR_NIVEL_EFECTO_DESCONOCIDO + ": " + nombreEfecto + " en efecto " + this.getNombre();
    },

    /**
     *
     * @returns {string}
     */
    getCaracPrimaria :function() {
        return this.caracPrimaria;
    },

    /**
     *
     * @returns {ElementosAfines}
     */
    getElementosAfines : function() {
        return this.elementosAfines;
    },

    /**
     *
     * @returns {string}
     */
    getTipoEfecto : function() {
        return this.tipoEfecto;
    },

    /**
     *
     * @returns {CaracSecunTecnica[]}
     */
    getCaracSecundarias :function() {
        return this.caracSecundarias;
    },

    /**
     *
     * @returns {VentajaTecnica[]}
     */
    getVentajasOpcionales : function() {
        return this.ventajasOpcionales;
    },

    /**
     *
     * @param {string} nombre
     * @returns {VentajaTecnica}
     */
    getVentajaOpcionalPorNombre : function(nombre) {
        for (var i = 0; i < this.ventajasOpcionales.length; i++) {
            if (this.ventajasOpcionales[i].getNombre() == nombre) {
                return this.ventajasOpcionales[i];
            }
        }
        throw ERR_VENTAJA_ERRONEA + ": " + nombre;
    },

    /**
     *
     * @returns {string[]}
     */
    getEspecial : function() {
        return this.especial;
    },

    toJSON : function() {
        return this.nombre;
    }
};

/**
 *
 * @param {string} nombre
 * @param {number} costePrimario
 * @param {number} costeSecundario
 * @param {number} costeCM
 * @param {number} costeMantenimiento
 * @param {number} nivelMinimo
 * @constructor
 */
function NivelEfectoTecnica(nombre, costePrimario, costeSecundario, costeCM, costeMantenimiento, nivelMinimo) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {number}
     */
    this.costePrimario = costePrimario;

    /**
     *
     * @type {number}
     */
    this.costeSecundario = costeSecundario;

    /**
     *
     * @type {number}
     */
    this.costeCM = costeCM;

    /**
     *
     * @type {number}
     */
    this.costeMantenimiento = costeMantenimiento;

    /**
     *
     * @type {number}
     */
    this.nivelMinimo = nivelMinimo;

    /**
     *
     * @type {string}
     */
    this.nombreEfectoTecnica = "";
}

NivelEfectoTecnica.prototype = {
    constructor : NivelEfectoTecnica,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {number}
     */
    getCostePrimario : function() {
        return this.costePrimario;
    },

    /**
     *
     * @returns {number}
     */
    getCosteSecundario : function() {
        return this.costeSecundario;
    },

    /**
     *
     * @returns {number}
     */
    getCosteCM : function() {
        return this.costeCM;
    },

    /**
     *
     * @returns {boolean}
     */
    hasCosteMantenimiento : function() {
        return (this.costeMantenimiento != 0);
    },

    /**
     *
     * @returns {number}
     */
    getCosteMantenimiento : function() {
        return this.costeMantenimiento;
    },

    /**
     *
     * @returns {number}
     */
    getNivelMinimo : function() {
        return this.nivelMinimo;
    },

    toJSON : function() {
        return this.nombre+"--"+this.nombreEfectoTecnica;
    }
};

/**
 *
 * @param {string} nombre
 * @param {string} descripcion
 * @param {NivelVentajaTecnica[]} nivelesVentaja
 * @constructor
 */
function VentajaTecnica(nombre, descripcion, nivelesVentaja) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {string}
     */
    this.descripcion = descripcion;

    /**
     *
     * @type {NivelVentajaTecnica[]}
     */
    this.nivelesVentaja = nivelesVentaja;
    for (var i = 0; i < this.nivelesVentaja.length;i++) {
        this.nivelesVentaja[i].nombreVentajaTecnica = this.nombre;
    }

    /**
     *
     * @type {string}
     */
    this.nombreEfectoTecnica = "";
}

VentajaTecnica.prototype = {
    constructor : VentajaTecnica,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {NivelVentajaTecnica[]}
     */
    getNivelesVentaja : function() {
        return this.nivelesVentaja;
    },

    /**
     *
     * @param nombre
     * @returns {NivelVentajaTecnica}
     */
    getNivelPorNombre : function(nombre) {
        for (var i = 0; i < this.nivelesVentaja.length; i++) {
            if (this.nivelesVentaja[i].getNombre() == nombre) {
                return this.nivelesVentaja[i];
            }
        }
        throw ERR_NIVEL_EFECTO_DESCONOCIDO + ": nombre";
    },

    setNombreEfectoTecnica : function(nombre) {
        this.nombreEfectoTecnica = nombre;
        for (var i = 0; i < this.nivelesVentaja.length;i++) {
            this.nivelesVentaja[i].nombreEfectoTecnica = nombre;
        }
    },

    toJSON : function() {
        return this.nombre+"--"+this.nombreEfectoTecnica;
    }
};

/**
 *
 * @param {string} nombre
 * @param {number} costeKi
 * @param {number} costeCM
 * @param {number} costeMantenimiento
 * @param {number} nivel
 * @constructor
 */
function NivelVentajaTecnica(nombre, costeKi, costeCM, costeMantenimiento, nivel) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {number}
     */
    this.costeKi = costeKi;

    /**
     *
     * @type {number}
     */
    this.costeCM = costeCM;

    /**
     *
     * @type {number}
     */
    this.costeMantenimiento = costeMantenimiento;

    /**
     *
     * @type {number}
     */
    this.nivel = nivel;

    /**
     *
     * @type {string}
     */
    this.nombreVentajaTecnica = "";

    /**
     *
     * @type {string}
     */
    this.nombreEfectoTecnica = "";
}

NivelVentajaTecnica.prototype = {
    constructor : NivelVentajaTecnica,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {number}
     */
    getCosteKi : function() {
        return this.costeKi;
    },

    /**
     *
     * @returns {number}
     */
    getCosteCM : function() {
        return this.costeCM;
    },

    /**
     *
     * @returns {number}
     */
    getCosteMantenimiento : function() {
        return this.costeMantenimiento;
    },

    /**
     *
     * @returns {number}
     */
    getNivel : function() {
        return this.nivel;
    },

    toJSON : function() {
        return this.nombre+"--"+this.nombreVentajaTecnica+"--"+this.nombreEfectoTecnica;
    }
};

/**
 *
 * @param {string} nombre
 * @param {string} descripcion
 * @param {Array} efecto
 * @param {string[]} incompatibles
 * @param {number} costeCM
 * @param {number} nivelMinimo
 * @constructor
 */
function DesventajaTecnica(nombre, descripcion, efecto, incompatibles, costeCM, nivelMinimo) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {string}
     */
    this.descripcion = descripcion;

    /**
     *
     * @type {Array}
     */
    this.efecto = efecto;

    /**
     *
     * @type {string[]}
     */
    this.incompatibles = incompatibles;

    /**
     *
     * @type {number}
     */
    this.costeCM = costeCM;

    /**
     *
     * @type {number}
     */
    this.nivelMinimo = nivelMinimo;
}

DesventajaTecnica.prototype = {
    constructor : DesventajaTecnica,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {Array}
     */
    getEfecto : function() {
        return this.efecto;
    },

    /**
     *
     * @returns {string[]}
     */
    getIncompatibles : function() {
        return this.incompatibles;
    },

    /**
     *
     * @returns {number}
     */
    getCosteCM : function() {
        return this.costeCM;
    },

    /**
     *
     * @returns {number}
     */
    getNivelMinimo : function() {
        return this.nivelMinimo;
    },

    toJSON : function() {
        return this.nombre;
    }
};

/**
 *
 * @param {number} nivel
 * @constructor
 */
function TecnicaKi(nivel) {
    /**
     *
     * @type {string}
     */
    this.nombre = "...";

    /**
     *
     * @type {string}
     */
    this.arbolTecnicas = "...";

    /**
     *
     * @type {string}
     */
    this.descripcion = "...";

    /**
     *
     * @type {number}
     */
    this.nivel = nivel;

    /**
     *
     * @type {number}
     */
    this.maxCM = maxCMTecnica(nivel);

    /**
     *
     * @type {number}
     */
    this.minCM = minCMTecnica(nivel);

    /**
     *
     * @type {number}
     */
    this.maxDesventajas = maxDesventajasTecnica(nivel);

    /**
     *
     * @type {EfectoTecnicaElegido|boolean}
     */
    this.efectoPrimario = false;

    /**
     *
     * @type {EfectoTecnicaElegido[]}
     */
    this.efectosSecundarios = [];

    /**
     *
     * @type {{}}
     */
    this.allEfectos = {};

    /**
     *
     * @type {DesventajaTecnicaElegida[]}
     */
    this.desventajas = [];

    /**
     *
     * @type {ElementosAfines}
     */
    this.ataduraElemental = new ElementosAfines([]);

    /**
     *
     * @type {boolean}
     */
    this.hasAtaduraElemental = false;

    /**
     *
     * @type {CosteKi}
     */
    this.costeKi = false;

    /**
     *
     * @type {CosteKi}
     */
    this.costeMantenimiento = false;

}

TecnicaKi.prototype = {
    constructor : TecnicaKi,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @param {string} valor
     */
    setNombre : function(valor) {
        this.nombre = valor;
        lanzarEvento(EVENT_TECNICA_CREACION);
    },

    /**
     *
     * @returns {string}
     */
    getArbolTecnicas : function() {
        return this.arbolTecnicas;
    },

    /**
     *
     * @param {string} valor
     */
    setArbolTecnicas : function(valor) {
        this.arbolTecnicas = valor;
        lanzarEvento(EVENT_TECNICA_CREACION);
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @param {string} valor
     */
    setDescripcion : function(valor) {
        this.descripcion = valor;
        lanzarEvento(EVENT_TECNICA_CREACION);
    },

    /**
     *
     * @returns {boolean}
     */
    isMantenida : function() {
        var mantenida = false;
        if (this.efectoPrimario) {
            mantenida = this.efectoPrimario.isMantenido();
        }
        for (var i = 0; i < this.efectosSecundarios.length; i++) {
            if (this.efectosSecundarios[i].isMantenido()) {
                mantenida = true;
            }
        }
        return mantenida;
    },

    /**
     *
     * @returns {number}
     */
    getNivel : function() {
        return this.nivel;
    },

    /**
     *
     * @param {number} valor
     */
    setNivel : function(valor) {
        if ((valor >= 1) && (valor <= 3)) {
            this.nivel = valor;
            var notificacionesYaDesactivadas = true;
            if (notificacionesActivas) {
                desactivarNotificaciones();
                notificacionesYaDesactivadas = false;
            }
            this.maxCM = maxCMTecnica(this.nivel);
            this.minCM = minCMTecnica(this.nivel);
            this.maxDesventajas = maxDesventajasTecnica(this.nivel);
            if (!notificacionesYaDesactivadas) {
                activarNotificaciones();
            }
            lanzarEvento(EVENT_TECNICA_CREACION);
        }
    },

    /**
     *
     * @returns {number}
     */
    getMaxCM : function() {
        return this.maxCM;
    },

    /**
     *
     * @returns {number}
     */
    getMinCM : function() {
        return this.minCM;
    },

    /**
     *
     * @returns {number}
     */
    getCosteCM : function() {
        var coste = 0;
        if (this.efectoPrimario) {
            coste += this.efectoPrimario.getCosteCM();
        }
        var i;
        for (i=0; i < this.efectosSecundarios.length;i++) {
            coste += this.efectosSecundarios[i].getCosteCM();
        }
        for (i=0; i < this.desventajas.length;i++) {
            coste += this.desventajas[i].getCosteCM();
        }

        if (this.isMantenida()) {
            coste += this.nivel * 10;
        }

        if (coste < this.minCM) {
            coste = this.minCM;
        }
        return coste;
    },

    /**
     *
     * @param {number} costeCM
     * @returns {boolean}
     */
    puedeAñadirEfectoDeCoste : function(costeCM) {
        var costeActual = this.getCosteCM();

        return (costeActual + costeCM <= this.maxCM);
    },

    /**
     *
     * @param {number} nivelMinimo
     * @returns {boolean}
     */
    puedeAñadirEfectoDeNivelMinimo : function(nivelMinimo) {
        return ( nivelMinimo <= this.nivel )
    },

    /**
     *
     * @param {ElementosAfines} elementosAfines
     */
    puedeAñadirEfectoDeElementos : function(elementosAfines) {
        return (!this.hasAtaduraElemental || (
            (this.ataduraElemental.agua && elementosAfines.agua) ||
                (this.ataduraElemental.fuego && elementosAfines.fuego) ||
                (this.ataduraElemental.aire && elementosAfines.aire) ||
                (this.ataduraElemental.tierra && elementosAfines.tierra) ||
                (this.ataduraElemental.luz && elementosAfines.luz) ||
                (this.ataduraElemental.oscuridad && elementosAfines.oscuridad))
            );
    },

    /**
     *
     * @returns {boolean}
     * @param {EfectoTecnicaElegido} efectoTecnica
     */
    puedeFijarComoPrimario : function(efectoTecnica) {
        var costeActual = 0;
        var elementosAfines = efectoTecnica.getElementosAfines();
        if (this.efectoPrimario) {
            costeActual = this.efectoPrimario.getCosteCM();
        }

        var difCoste = efectoTecnica.getCosteCM() - costeActual;

        if (this.efectoPrimario) {
            if ((this.efectoPrimario.getNombre() != efectoTecnica.getNombre()) &&
                this.hasEfecto(efectoTecnica)) {
                var efectoExistente = this.getEfecto(efectoTecnica.getNombre());
                difCoste -= efectoExistente.getCosteCM();
            }
        }

        var puedePorCoste = this.puedeAñadirEfectoDeCoste(difCoste);

        return (
            puedePorCoste &&
                this.puedeAñadirEfectoDeNivelMinimo(efectoTecnica.getNivelMinimo()) &&
                this.puedeAñadirEfectoDeElementos(elementosAfines)
            );
    },

    /**
     *
     * @param {EfectoTecnicaElegido|boolean} efectoTecnica
     */
    fijaComoPrimario : function(efectoTecnica) {
        if (this.puedeFijarComoPrimario(efectoTecnica)) {
            efectoTecnica.setPrimario(true);
            if (this.efectoPrimario) {
                delete this.allEfectos[this.efectoPrimario.getNombre()];
            }
            this.efectoPrimario = undefined;
            if (this.hasEfecto(efectoTecnica)) {
                this.removeEfectoSecundario(efectoTecnica);
            }
            this.efectoPrimario = efectoTecnica;
            this.allEfectos[efectoTecnica.getNombre()] = efectoTecnica;
            lanzarEvento(EVENT_TECNICA_CREACION);
        }
    },

    /**
     *
     * @param {EfectoTecnicaElegido} efectoTecnica
     * @returns {boolean}
     */
    puedeAñadirSecundario : function(efectoTecnica) {
        var puedePorPrimario = true;
        var costeCM = efectoTecnica.getCosteCM();
        if (this.hasEfecto(efectoTecnica)) {
            if (this.efectoPrimario.getNombre() == efectoTecnica.getNombre()) {
                puedePorPrimario = false;
            } else {
                var efectoExistente = this.getEfecto(efectoTecnica.getNombre());
                costeCM -= efectoExistente.getCosteCM();
            }
        }

        return (
            puedePorPrimario &&
                this.puedeAñadirEfectoDeCoste(costeCM) &&
                this.puedeAñadirEfectoDeNivelMinimo(efectoTecnica.getNivelMinimo()) &&
                this.puedeAñadirEfectoDeElementos(efectoTecnica.getElementosAfines())
            );
    },

    /**
     *
     * @param {EfectoTecnicaElegido} efectoSecundario
     */
    addEfectoSecundario : function(efectoSecundario) {
        if (this.puedeAñadirSecundario(efectoSecundario)) {
            efectoSecundario.setPrimario(false);

            if (this.hasEfecto(efectoSecundario)) {
                this.removeEfectoSecundario(efectoSecundario);
            }
            this.efectosSecundarios.push(efectoSecundario);
            this.allEfectos[efectoSecundario.getNombre()] = efectoSecundario;
            lanzarEvento(EVENT_TECNICA_CREACION);
        }
    },

    /**
     *
     * @param {EfectoTecnicaElegido} efectoSecundario
     */
    removeEfectoSecundario : function(efectoSecundario) {
        this.efectosSecundarios = limpiarArrayObjetosPorFuncion(this.efectosSecundarios,comparaGetNombre,efectoSecundario.getNombre());
        lanzarEvento(EVENT_TECNICA_CREACION);
    },

    /**
     *
     * @param {EfectoTecnicaElegido} efectoTecnica
     * @returns {boolean}
     */
    hasEfecto : function(efectoTecnica) {
        return (this.allEfectos[efectoTecnica.getNombre()] != undefined);
    },

    /**
     *
     * @param {string} nombreEfecto
     * @returns {EfectoTecnicaElegido}
     */
    getEfecto : function(nombreEfecto) {
        return this.allEfectos[nombreEfecto];
    },

    /**
     *
     * @param {DesventajaTecnicaElegida} desventajaTecnica
     * @returns {boolean}
     */
    puedeAñadirDesventaja : function(desventajaTecnica) {
        var porNumero = (this.desventajas.length < this.getMaxDesventajas());

        var porIncompatibles = true;

        /**
         *
         * @type {*}
         */
        var incompatibles = desventajaTecnica.getIncompatibles();

        for (var i = 0; i < incompatibles.length; i++) {
            if (this.hasDesventaja(incompatibles[i])) {
                porIncompatibles = false;
                break;
            }
        }

        return porNumero && porIncompatibles;
    },

    /**
     *
     * @param {DesventajaTecnicaElegida} desventaja
     */
    addDesventaja : function(desventaja) {
        if (this.puedeAñadirDesventaja(desventaja)) {
            this.desventajas.push(desventaja);
            if (desventaja.isAtaduraElemental()) {
                this.ataduraElemental = desventaja.getAtaduraElemental();
                this.hasAtaduraElemental = true;
            }
            lanzarEvento(EVENT_TECNICA_CREACION);
        }
    },

    /**
     *
     * @param {DesventajaTecnicaElegida} desventaja
     */
    removeDesventaja : function(desventaja) {
        if (this.hasDesventaja(desventaja.getNombre())) {
            this.desventajas = limpiarArrayObjetosPorFuncion(this.desventajas,comparaGetNombre,desventaja.getNombre());
            if (desventaja.isAtaduraElemental()) {
                this.ataduraElemental = new ElementosAfines([]);
                this.hasAtaduraElemental = false;
            }
            lanzarEvento(EVENT_TECNICA_CREACION);
        }
    },

    /**
     *
     * @param {string} nombreDesventaja
     * @returns {boolean}
     */
    hasDesventaja : function(nombreDesventaja) {
        for (var i = 0; i < this.desventajas.length; i++) {
            if (this.desventajas[i].getNombre() == nombreDesventaja) {
                return true;
            }
        }
        return false;
    },

    /**
     *
     * @returns {number}
     */
    getMaxDesventajas : function() {
        return this.maxDesventajas;
    },

    /**
     *
     * @returns {EfectoTecnicaElegido}
     */
    getEfectoPrimario : function() {
        return this.efectoPrimario;
    },

    /**
     *
     * @returns {EfectoTecnicaElegido[]}
     */
    getEfectosSecundarios : function() {
        return this.efectosSecundarios;
    },

    /**
     *
     * @returns {DesventajaTecnicaElegida[]}
     */
    getDesventajas : function() {
        return this.desventajas;
    },

    /**
     *
     * @returns {boolean}
     */
    compruebaAtadurasElementales : function() {
        var correcto = true;
        var i;
        var elementosAfines;

        if (this.hasAtaduraElemental) {
            elementosAfines = this.efectoPrimario.getElementosAfines();
            correcto = this.puedeAñadirEfectoDeElementos(elementosAfines);

            for (i = 0;i < this.efectosSecundarios.length;i++) {
                elementosAfines = this.efectosSecundarios[i].getElementosAfines();
                correcto = correcto && this.puedeAñadirEfectoDeElementos(elementosAfines);
            }
        }

        return correcto;
    },

    /**
     *
     * @returns {boolean}
     */
    isCorrecta : function() {
        var costeCM = this.getCosteCM();

        var numDesventajas = this.desventajas.length;

        return (
            (costeCM >= this.minCM) &&
                (costeCM <= this.maxCM) &&
                (numDesventajas <= this.maxDesventajas) &&
                (this.compruebaAtadurasElementales()) &&
                (this.efectoPrimario != false));
    },

    addVentajaEfecto : function(efecto,ventaja) {
        efecto.addVentajaOpcional(ventaja);
        lanzarEvento(EVENT_TECNICA_CREACION);
    },

    removeVentajaEfecto : function(efecto, ventaja) {
        efecto.removeVentajaOpcional(ventaja);
        lanzarEvento(EVENT_TECNICA_CREACION);
    },

    setEfectoMantenido : function(efecto, valor) {
        efecto.setMantenido(valor);
        lanzarEvento(EVENT_TECNICA_CREACION);
    },

    getCosteKi : function() {
        if (!this.costeKi) {
            var costeKi = new CosteKi(0,0,0,0,0,0,AGI);
            if (this.efectoPrimario) {
                costeKi = this.efectoPrimario.getCosteKiTotal();
            }
            for (var i = 0; i < this.efectosSecundarios.length; i++) {
                costeKi = this.efectosSecundarios[i].getCosteKiTotal().sumaCosteKi(costeKi);
            }
            return costeKi;
        } else {
            return this.costeKi;
        }
    },

    getCosteMantenimiento : function() {
        if (!this.costeMantenimiento) {
            var costeMantenimiento = new CosteKi(0,0,0,0,0,0,AGI);
            if (this.efectoPrimario) {
                costeMantenimiento = this.efectoPrimario.getCosteMantenimiento();
            }
            for (var i = 0; i < this.efectosSecundarios.length; i++) {
                costeMantenimiento = this.efectosSecundarios[i].getCosteMantenimiento().sumaCosteKi(costeMantenimiento);
            }
            return costeMantenimiento;
        } else {
            return this.costeMantenimiento;
        }
    }
};

/**
 *
 * @param {EfectoTecnica} efectoTecnica
 * @param {NivelEfectoTecnica} nivelEfectoTecnica
 * @constructor
 */
function EfectoTecnicaElegido(efectoTecnica, nivelEfectoTecnica) {
    /**
     *
     * @type {EfectoTecnica}
     */
    this.efectoTecnica = efectoTecnica;

    /**
     *
     * @type {NivelEfectoTecnica}
     */
    this.nivelElegido = nivelEfectoTecnica;

    /**
     *
     * @type {VentajaTecnicaElegida[]}
     */
    this.ventajasOpcionalesElegidas = [];

    /**
     *
     * @type {boolean}
     */
    this.primario = false;

    /**
     *
     * @type {boolean}
     */
    this.mantenido = false;

    /**
     *
     * @type {CosteKi}
     */
    this.costeKi = new CosteKi(0,0,0,0,0,0,efectoTecnica.getCaracPrimaria());
    this.costeKi.setCoste(efectoTecnica.getCaracPrimaria(),nivelEfectoTecnica.getCosteSecundario());

    /**
     *
     * @type {CosteKi}
     */
    this.costeMantenimiento = new CosteKi(0,0,0,0,0,0,efectoTecnica.getCaracPrimaria());
    this.costeMantenimiento.setCoste(efectoTecnica.getCaracPrimaria(), nivelEfectoTecnica.getCosteMantenimiento());

    /**
     *
     * @type {CaracSecunTecnica[]}
     */
    var caracSec = this.efectoTecnica.getCaracSecundarias();
    for (var i = 0; i < caracSec.length; i++) {
        this.costeKi.mod[caracSec[i].caracteristica] = caracSec[i].modificador;
        this.costeMantenimiento.mod[caracSec[i].caracteristica] = caracSec[i].modificador;
    }

}

EfectoTecnicaElegido.prototype = {
    constructor : EfectoTecnicaElegido,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.efectoTecnica.getNombre();
    },

    /**
     *
     * @returns {string}
     */
    getNombreCompleto : function() {
        return this.efectoTecnica.getNombre() + " " + this.nivelElegido.getNombre();
    },

    /**
     *
     * @returns {ElementosAfines}
     */
    getElementosAfines : function() {
        return this.efectoTecnica.getElementosAfines();
    },

    /**
     *
     * @returns {string}
     */
    getCaracPrimaria : function() {
        return this.efectoTecnica.getCaracPrimaria();
    },

    /**
     *
     * @returns {CaracSecunTecnica[]}
     */
    getCaracSecundarias : function() {
        return this.efectoTecnica.getCaracSecundarias();
    },

    /**
     *
     * @returns {number}
     */
    getCosteMantenimiento : function() {
        return this.costeMantenimiento;
    },

    /**
     *
     * @returns {number}
     */
    getCosteCM : function() {
        var coste = this.nivelElegido.getCosteCM();

        for (var i =0; i < this.ventajasOpcionalesElegidas.length;i++) {
            coste += this.ventajasOpcionalesElegidas[i].getCosteCM();
        }

        var especial = this.efectoTecnica.getEspecial();
        for (i = 0; i < especial.length;i++) {
            if ((especial[i] == COSTE_VENTAJAS_AUMENTA_DOS) && (this.ventajasOpcionalesElegidas.length > 0)) {
                coste += 2 * (this.ventajasOpcionalesElegidas.length-1);
            }
        }

        return coste;
    },

    /**
     *
     * @returns {number}
     */
    getNivelMinimo : function() {
        return this.nivelElegido.getNivelMinimo();
    },

    /**
     *
     * @returns {VentajaTecnica[]}
     */
    getVentajasOpcionales : function() {
        return this.efectoTecnica.getVentajasOpcionales();
    },

    /**
     *
     * @param {string} nombre
     * @returns {VentajaTecnica}
     */
    getVentajaOpcionalPorNombre : function(nombre) {
        return this.efectoTecnica.getVentajaOpcionalPorNombre(nombre);
    },

    /**
     *
     * @returns {VentajaTecnicaElegida[]}
     */
    getVentajasOpcionalesElegidas : function() {
        return this.ventajasOpcionalesElegidas;
    },

    /**
     *
     * @param {VentajaTecnicaElegida} valor
     */
    addVentajaOpcional : function(valor) {
        this.ventajasOpcionalesElegidas.push(valor);
        this.costeKi.addCoste(this.efectoTecnica.getCaracPrimaria(),valor.getCosteKi());
        if (this.isMantenido()) {
            this.costeMantenimiento.addCoste(this.efectoTecnica.getCaracPrimaria(), valor.getCosteMantenimiento());
        }
    },

    /**
     *
     * @param {VentajaTecnicaElegida} valor
     */
    removeVentajaOpcional : function(valor) {
        this.ventajasOpcionalesElegidas = limpiarArrayObjetosPorFuncion(this.ventajasOpcionalesElegidas,comparaGetNombre,valor.getNombre());
        this.initCosteKi();
        if (this.isMantenido()) {
            this.initCosteMantenimiento();
        }
    },

    /**
     *
     */
    initCosteKi : function() {
        var i;
        this.costeKi = new CosteKi(0,0,0,0,0,0,this.efectoTecnica.getCaracPrimaria());
        if (this.primario) {
            this.costeKi.setCoste(this.efectoTecnica.getCaracPrimaria(),this.nivelEfectoTecnica.getCostePrimario());
        } else {
            this.costeKi.setCoste(this.efectoTecnica.getCaracPrimaria(),this.nivelEfectoTecnica.getCosteSecundario());
        }

        for ( i = 0; i < this.ventajasOpcionalesElegidas.length; i++) {
            this.costeKi.addCoste(this.efectoTecnica.getCaracPrimaria(),this.ventajasOpcionalesElegidas[i].getCosteKi());
        }

        var caracSec = this.efectoTecnica.getCaracSecundarias();
        for ( i = 0; i < caracSec.length; i++) {
            this.costeKi.mod[caracSec[i].caracteristica] = caracSec[i].modificador;
        }
    },

    /**
     *
     */
    initCosteMantenimiento : function() {
        var i;
        this.costeMantenimiento = new CosteKi(0,0,0,0,0,0,this.efectoTecnica.getCaracPrimaria());
        this.costeMantenimiento.setCoste(this.efectoTecnica.getCaracPrimaria(),this.nivelEfectoTecnica.getCosteMantenimiento());

        for ( i = 0; i < this.ventajasOpcionalesElegidas.length; i++) {
            this.costeMantenimiento.addCoste(this.efectoTecnica.getCaracPrimaria(),this.ventajasOpcionalesElegidas[i].getCosteMantenimiento());
        }

        for ( i = 0; i < caracSec.length; i++) {
            this.costeMantenimiento.mod[caracSec[i].caracteristica] = caracSec[i].modificador;
        }
    },

    /**
     *
     * @returns {boolean}
     */
    isPrimario : function() {
        return this.primario;
    },

    /**
     *
     * @param {boolean} valor
     */
    setPrimario : function(valor) {
        if (this.primario && !valor) {
            //pasa a secundaria
            this.costeKi.addCoste(this.efectoTecnica.getCaracPrimaria(),-1*this.nivelElegido.getCostePrimario());
            this.costeKi.addCoste(this.efectoTecnica.getCaracPrimaria(),this.nivelElegido.getCosteSecundario());
        } else if (!this.primario && valor) {
            //pasa a primaria
            this.costeKi.addCoste(this.efectoTecnica.getCaracPrimaria(), this.nivelElegido.getCostePrimario());
            this.costeKi.addCoste(this.efectoTecnica.getCaracPrimaria(), -1* this.nivelElegido.getCosteSecundario());
        }

        this.primario = valor;
    },

    /**
     *
     * @returns {boolean}
     */
    isMantenible : function() {
        return this.nivelElegido.hasCosteMantenimiento();
    },

    /**
     *
     * @returns {boolean}
     */
    isMantenido : function() {
        return this.mantenido;
    },

    /**
     *
     * @param {boolean} valor
     */
    setMantenido : function(valor) {
        this.mantenido = valor;
    },

    /**
     *
     * @returns {CosteKi}
     */
    getCosteKi : function() {
        return this.costeKi;
    },

    /**
     * Devuelve el coste total en ki, una vez sumado el coste inicial por mantenimiento
     * @returns {CosteKi}
     */
    getCosteKiTotal : function() {
        var coste = this.costeKi;
        if (this.isMantenido()) {
            coste = coste.sumaCosteKi(this.costeMantenimiento);
        }
        return coste;
    }

};

/**
 *
 * @param {VentajaTecnica} ventajaTecnica
 * @param {NivelVentajaTecnica} nivelVentajaTecnica
 * @constructor
 */
function VentajaTecnicaElegida(ventajaTecnica, nivelVentajaTecnica) {
    /**
     *
     * @type {VentajaTecnica}
     */
    this.ventajaTecnica = ventajaTecnica;

    /**
     *
     * @type {NivelVentajaTecnica}
     */
    this.nivelElegido = nivelVentajaTecnica;
}

VentajaTecnicaElegida.prototype = {
    constructor : VentajaTecnicaElegida,

    /**
     *
     * @returns {VentajaTecnica}
     */
    getVentajaTecnica : function() {
        return this.ventajaTecnica;
    },

    /**
     *
     * @returns {NivelVentajaTecnica}
     */
    getNivelElegido : function() {
        return this.nivelElegido;
    },

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        var nombre = this.ventajaTecnica.getNombre();
        if (this.ventajaTecnica.getNivelesVentaja().length > 1) {
            nombre += " (" + this.nivelElegido.getNombre() + ")";
        }
        return nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.ventajaTecnica.getDescripcion();
    },

    /**
     *
     * @returns {number}
     */
    getCosteKi : function() {
        return this.nivelElegido.getCosteKi();
    },

    /**
     *
     * @returns {number}
     */
    getCosteCM : function() {
        return this.nivelElegido.getCosteCM();
    },

    /**
     *
     * @returns {number}
     */
    getCosteMantenimiento : function() {
        return this.nivelElegido.getCosteMantenimiento();
    },

    /**
     *
     * @returns {number}
     */
    getNivelMinimo : function() {
        return this.nivelElegido.getNivelMinimo();
    }
};

/**
 *
 * @param {DesventajaTecnica} desventajaTecnica
 * @constructor
 */
function DesventajaTecnicaElegida(desventajaTecnica) {
    /**
     *
     * @type {DesventajaTecnica}
     */
    this.desventajaTecnica = desventajaTecnica;

    /**
     *
     * @type {ElementosAfines}
     */
    this.ataduraElemental = new ElementosAfines([]);

    /**
     *
     * @type {string}
     */
    this.descripcion = desventajaTecnica.getDescripcion();

    /**
     *
     * @type {number}
     */
    this.costeCM = desventajaTecnica.getCosteCM();

    /**
     *
     * @type {boolean}
     */
    this.esAtaduraElemental = false;

    /**
     *
     * @type {boolean}
     */
    this.hasDescripcionPropia = false;
}

DesventajaTecnicaElegida.prototype = {
    constructor : DesventajaTecnicaElegida,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        var nombre = this.desventajaTecnica.getNombre();
        if (this.hasDescripcionPropia) {
            nombre += " (" + this.descripcion + ")";
        }
        if (this.isAtaduraElemental()) {
            nombre += " [" + this.getAtaduraElemental().toString() + "]";
        }
        return nombre;
    },

    /**
     *
     * @returns {Array}
     */
    getEfecto : function() {
        return this.desventajaTecnica.getEfecto();
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @param {string} valor
     */
    setDescripcion : function(valor) {
        this.descripcion = valor;
        this.hasDescripcionPropia = true;
    },

    /**
     *
     * @returns {string[]}
     */
    getIncompatibles : function() {
        return this.desventajaTecnica.getIncompatibles();
    },

    /**
     *
     * @returns {number}
     */
    getCosteCM : function() {
        return this.costeCM;
    },

    /**
     *
     * @param {number} valor
     */
    setCosteCM : function(valor) {
        this.costeCM = valor;
    },

    /**
     *
     * @returns {number}
     */
    getNivelMinimo : function() {
        return this.desventajaTecnica.getNivelMinimo();
    },

    /**
     *
     * @returns {boolean}
     */
    isAtaduraElemental : function() {
        return (this.esAtaduraElemental);
    },

    /**
     *
     * @param  {ElementosAfines} valor
     */
    setAtaduraElemental : function(valor) {
        this.esAtaduraElemental = true;
        this.ataduraElemental = valor;
    },

    /**
     *
     * @returns {ElementosAfines}
     */
    getAtaduraElemental : function() {
        return this.ataduraElemental;
    }
};

/**
 *
 * @param {string} caracteristica
 * @param {number} modificador
 * @constructor
 */
function CaracSecunTecnica(caracteristica, modificador) {
    /**
     *
     * @type {string}
     */
    this.caracteristica = caracteristica;

    /**
     *
     * @type {number}
     */
    this.modificador = modificador;
}

/**
 *
 * @constructor
 * @param {string[]} elementosAfines
 */
function ElementosAfines(elementosAfines) {
    /**
     *
     * @type {boolean}
     */
    this.fuego = false;

    /**
     *
     * @type {boolean}
     */
    this.agua = false;

    /**
     *
     * @type {boolean}
     */
    this.tierra = false;

    /**
     *
     * @type {boolean}
     */
    this.aire = false;

    /**
     *
     * @type {boolean}
     */
    this.luz = false;

    /**
     *
     * @type {boolean}
     */
    this.oscuridad = false;

    for (var i = 0; i < elementosAfines.length; i++) {
        switch (elementosAfines[i]) {
            case ELEMENTO_AGUA:
                this.agua = true;
                break;
            case ELEMENTO_AIRE:
                this.aire = true;
                break;
            case ELEMENTO_FUEGO:
                this.fuego = true;
                break;
            case ELEMENTO_TIERRA:
                this.tierra = true;
                break;
            case ELEMENTO_LUZ:
                this.luz = true;
                break;
            case ELEMENTO_OSCURIDAD:
                this.oscuridad = true;
                break;
        }
    }

}

ElementosAfines.prototype = {
    constructor : ElementosAfines,

    toString : function() {
        var str = "";

        if (this.agua) {
            str += "agua,";
        }
        if (this.fuego) {
            str += "fuego,";
        }
        if (this.aire) {
            str += "aire,";
        }
        if (this.tierra) {
            str += "tierra,";
        }
        if (this.luz) {
            str += "luz,";
        }
        if (this.oscuridad) {
            str += "oscuridad,";
        }

        if (str.length > 0) {
            str = str.substr(0,str.length-1);
        }

        return str;
    }
};

var caracsCosteKi = [AGI,DES,CON,FUE,POD,VOL];

function CosteKi(agi, con, des, fue, pod, vol, caracBase) {
    this.coste = {};

    this.coste[AGI] = agi;
    this.coste[DES] = des;
    this.coste[CON] = con;
    this.coste[FUE] = fue;
    this.coste[POD] = pod;
    this.coste[VOL] = vol;

    this.mod = {};

    this.mod[AGI] = -1;
    this.mod[DES] = -1;
    this.mod[CON] = -1;
    this.mod[FUE] = -1;
    this.mod[POD] = -1;
    this.mod[VOL] = -1;

    this.caracbase = caracBase || AGI;

    this.mod[this.caracBase] = 0;
}

CosteKi.prototype = {
    constructor : CosteKi,

    /**
     *
     * @returns {string}
     */
    toString : function() {
        return "A:"+this.coste[AGI]+" C:"+this.coste[CON]+" D:"+this.coste[DES]+" F:"+this.coste[FUE]+" P:"+this.coste[POD]+" V:"+this.coste[VOL];
    },

    /**
     *
     * @param {string} caracteristica
     * @returns {number}
     */
    getCoste : function(caracteristica) {
        return this.coste[caracteristica];
    },

    /**
     * Pasa (valor) de la característica base del coste en Ki a la característica (destino). Si valor es negativo, el paso funciona
     * a la inversa.
     * @param {string} destino
     * @param {number} valor
     */
    pasaCoste : function(destino,valor) {
        if (valor < 0) {
            if (this.coste[destino] < -1 * valor) {
                return;
            }
        }
        if (this.coste[this.caracbase] >= valor) {
            if (this.mod[destino] >= 0) {
                if (this.coste[destino] == 0) {
                    this.coste[this.caracbase] += this.mod[destino];
                }
                this.coste[this.caracbase] -= valor;
                this.coste[destino] += valor;
                if (this.coste[destino] == 0) {
                    this.coste[this.caracbase] -= this.mod[destino];
                }
            }
        }
    },

    /**
     *
     * @returns {string[]}
     */
    getCaracteristicasDestino : function() {
        var result = [];
        for (var i = 0; i < caracsCosteKi.length; i++) {
            if ((this.caracbase != caracsCosteKi[i]) && (this.mod[caracsCosteKi[i]] >= 0)) {
                result.push(caracsCosteKi[i]);
            }
        }
        return result;
    },

    sumaCosteKi : function(otroCoste) {
        return new CosteKi(
            this.coste[AGI]+otroCoste.getCoste(AGI),
            this.coste[CON]+otroCoste.getCoste(CON),
            this.coste[DES]+otroCoste.getCoste(DES),
            this.coste[FUE]+otroCoste.getCoste(FUE),
            this.coste[POD]+otroCoste.getCoste(POD),
            this.coste[VOL]+otroCoste.getCoste(VOL),
            this.caracbase
        );
    },

    setCoste : function(caracteristica, valor) {
        this.coste[caracteristica] = valor;
    },

    addCoste : function(caracteristica, valor) {
        this.setCoste(caracteristica,this.getCoste(caracteristica)+valor);
    }

};


/**
 *
 * @param {HabilidadKi} habilidadKi
 * @param {boolean} anulable
 * @constructor
 * @param  {boolean} ignoraRequisitos
 */
function HabilidadKiComprada(habilidadKi, anulable, ignoraRequisitos) {

    /**
     *
     * @type {HabilidadKi}
     */
    this.habilidadKi = habilidadKi;

    /**
     *
     * @type {boolean}
     */
    this.anulable = anulable;

    /**
     *
     * @type {boolean}
     */
    this.ignoraRequisitos = ignoraRequisitos;
}

HabilidadKiComprada.prototype = {
    constructor : HabilidadKiComprada,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.habilidadKi.nombre;
    },

    /**
     *
     * @returns {number}
     */
    getCosteCM : function() {
        return this.habilidadKi.costeCM;
    },

    /**
     *
     * @returns {string[]}
     */
    getRequisitos : function() {
        if (this.ignoraRequisitos) {
            return [];
        } else {
            return this.habilidadKi.requisitos;
        }
    },

    /**
     *
     * @returns {function}
     */
    getEfecto : function() {
        return this.habilidadKi.efecto;
    },

    /**
     *
     * @returns {boolean}
     */
    isHabilidad : function() {
        return this.habilidadKi.esHabilidad;
    },

    /**
     *
     * @returns {string}
     */
    getNombreHabilidadMedia : function() {
        return this.habilidadKi.nombreHabilidadMedia;
    },

    /**
     *
     * @param {Personaje} personaje
     * @returns {number}
     */
    getValorActual : function(personaje) {
        return Math.floor((personaje.getCMTotal()+personaje.getHabilidadDePersonaje(this.getNombreHabilidadMedia()).valorFinalActual())/2)
    },

    /**
     *
     * @returns {boolean}
     */
    isAnulable : function() {
        return this.anulable;
    },

    /**
     *
     * @returns {boolean}
     */
    isIgnoraRequisitos : function() {
        return this.ignoraRequisitos;
    },

    /**
     *
     * @param {Personaje} personaje
     * @returns {boolean}
     */
    cumple : function(personaje) {
        var cumple = true;
        for (var i = 0; i < this.habilidadKi.requisitos.length; i++) {
            if (!personaje.hasHabilidadKi(this.habilidadKi.requisitos[i])) {
                cumple = false;
            }
        }
        return cumple;
    },

    /**
     *
     * @param {boolean} valor
     */
    setAnulable : function(valor) {
        this.anulable = valor;
    }
};



/**
 *
 * @param {TecnicaKi} tecnicaKi
 * @constructor
 */
function TecnicaKiComprada(tecnicaKi) {
    /**
     *
     * @type {TecnicaKi}
     */
    this.tecnicaKi = tecnicaKi;

    /**
     *
     * @type {boolean}
     */
    this.anulable = true;
}

TecnicaKiComprada.prototype = {
    constructor : TecnicaKiComprada,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.tecnicaKi.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getArbolTecnicas : function() {
        return this.tecnicaKi.arbolTecnicas;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.tecnicaKi.descripcion;
    },

    /**
     *
     * @returns {boolean}
     */
    isMantenida : function() {
        return this.tecnicaKi.isMantenida();
    },

    /**
     *
     * @returns {number}
     */
    getNivel : function() {
        return this.tecnicaKi.nivel;
    },

    /**
     *
     * @returns {number}
     */
    getCosteCM : function() {
        return this.tecnicaKi.getCosteCM();
    },

    /**
     *
     * @param {EfectoTecnicaElegido} efectoTecnica
     * @returns {boolean}
     */
    hasEfecto : function(efectoTecnica) {
        return this.tecnicaKi.hasEfecto(efectoTecnica);
    },

    /**
     *
     * @param {string} nombreEfecto
     * @returns {EfectoTecnicaElegido}
     */
    getEfecto : function(nombreEfecto) {
        return this.tecnicaKi.getEfecto(nombreEfecto);
    },

    /**
     *
     * @param {string} nombreDesventaja
     * @returns {boolean}
     */
    hasDesventaja : function(nombreDesventaja) {
        return this.tecnicaKi.hasDesventaja(nombreDesventaja);
    },

    /**
     *
     * @returns {EfectoTecnicaElegido}
     */
    getEfectoPrimario : function() {
        return this.tecnicaKi.efectoPrimario;
    },

    /**
     *
     * @returns {EfectoTecnicaElegido[]}
     */
    getEfectosSecundarios : function() {
        return this.tecnicaKi.efectosSecundarios;
    },

    /**
     *
     * @returns {DesventajaTecnicaElegida[]}
     */
    getDesventajas : function() {
        return this.tecnicaKi.desventajas;
    },

    /**
     *
     * @returns {boolean}
     */
    compruebaAtadurasElementales : function() {
        return this.tecnicaKi.compruebaAtadurasElementales();
    },

    /**
     *
     * @returns {boolean}
     */
    isCorrecta : function() {
        return this.tecnicaKi.isCorrecta();
    },

    getCosteKi : function() {
        return this.tecnicaKi.getCosteKi();
    },

    getCosteMantenimiento : function() {
        return this.tecnicaKi.getCosteMantenimiento();
    },

    isAnulable : function() {
        return this.anulable;
    },

    setAnulable : function(valor) {
        this.anulable = valor;
    }
};
var EVENT_TECNICA_CREACION = "EVENT_TECNICA_CREACION";
var EVENT_COSTE_KI_CAMBIO = "EVENT_COSTE_KI_CAMBIO";

/**
 *
 * @type {HabilidadKi[]}
 */
var habilidadesKi_set = [];
var allHabilidadesKi = {};

/**
 *
 * @type {TecnicaKi[]}
 */
var tecnicasMuestra_set = [];

/**
 *
 * @type {string[]}
 */
var arbolesTecnicasMuestra_set = [];

var ERR_HABILIDAD_KI_DESCONOCIDA = "Error: habilidad ki desconocida";
var ERR_TECNICA_KI_DESCONOCIDA = "Error: técnica ki desconocida";
var ERR_EFECTO_KI_DESCONOCIDA = "Error: efecto ki desconocida";
var ERR_VENTAJA_KI_DESCONOCIDA = "Error: ventaja de efecto ki desconocida";
var ERR_DESVENTAJA_KI_DESCONOCIDA = "Error: desventaja ki desconocida";

var ELEMENTO_AIRE = "Aire";
var ELEMENTO_AGUA = "Agua";
var ELEMENTO_FUEGO = "Fuego";
var ELEMENTO_TIERRA = "Tierra";
var ELEMENTO_LUZ = "Luz";
var ELEMENTO_OSCURIDAD = "Oscuridad";

var EFECTO_OFENSIVO = "Efecto ofensivo";
var EFECTO_DEFENSIVO = "Efecto defensivo";
var EFECTO_DESTRUCTIVO = "Efecto destructivo";
var EFECTO_ACCION = "Efecto de acción";
var EFECTO_REACCION = "Efecto de reacción";
var EFECTO_ESOTERICO = "Efecto esotérico";
var EFECTO_ESPECIAL = "Efecto especial";

var TIPOS_EFECTOS_TECNICAS = [
    EFECTO_OFENSIVO,
    EFECTO_DEFENSIVO,
    EFECTO_DESTRUCTIVO,
    EFECTO_ACCION,
    EFECTO_REACCION,
    EFECTO_ESOTERICO,
    EFECTO_ESPECIAL
];

var COSTE_VENTAJAS_AUMENTA_DOS = "Cada elección adicional aumenta dos puntos el coste añadido de Ki de la ventaja";
/**
 *
 * @type {EfectoTecnica[]}
 */
var efectosTecnicas = [];
var allEfectosTecnicas = {};

/**
 *
 * @type {DesventajaTecnica[]}
 */
var desventajasTecnicas = [];
var allDesventajasTecnicas = {};

/**
 *
 * @param {string} nombreHabilidadKi
 * @returns {HabilidadKi}
 * @throws ERR_HABILIDAD_KI_DESCONOCIDA
 */
function getHabilidadKi(nombreHabilidadKi) {
    if (allHabilidadesKi[nombreHabilidadKi] != undefined) {
        return allHabilidadesKi[nombreHabilidadKi];
    }
    throw ERR_HABILIDAD_KI_DESCONOCIDA + ": " + nombreHabilidadKi;
}

/**
 *
 * @param {string} nombreEfecto
 * @returns {EfectoTecnica}
 * @throws ERR_EFECTO_KI_DESCONOCIDA
 */
function getEfectoTecnicaKi(nombreEfecto) {
    if (allEfectosTecnicas[nombreEfecto] != undefined) {
        return allEfectosTecnicas[nombreEfecto];
    }
    throw ERR_EFECTO_KI_DESCONOCIDA + ": " + nombreEfecto;
}

/**
 *
 * @param {string} nombreEfecto
 * @returns {DesventajaTecnica}
 * @throws ERR_DESVENTAJA_KI_DESCONOCIDA_KI_DESCONOCIDA
 */
function getDesventajaTecnicaKi(nombreEfecto) {
    if (allDesventajasTecnicas[nombreEfecto] != undefined) {
        return allDesventajasTecnicas[nombreEfecto];
    }
    throw ERR_DESVENTAJA_KI_DESCONOCIDA_KI_DESCONOCIDA + ": " + nombreEfecto;
}

/**
 *
 * @param {string} nombreTecnicaKi
 * @returns {TecnicaKi}
 * @throws ERR_TECNICA_KI_DESCONOCIDA
 */
function getTecnicaKi(nombreTecnicaKi) {
    for(var i = 0;i < tecnicasMuestra_set.length ;i++) {
        if (tecnicasMuestra_set[i].getNombre() == nombreTecnicaKi) {
            return tecnicasMuestra_set[i];
        }
    }
    throw ERR_TECNICA_KI_DESCONOCIDA + ": " + nombreTecnicaKi;
}

/**
 *
 * @param {HabilidadKi} habilidadKi
 */
function addHabilidadKi(habilidadKi) {
    habilidadesKi_set.push(habilidadKi);
    allHabilidadesKi[habilidadKi.getNombre()] = habilidadKi;
}

/**
 *
 * @param {number} caracteristica
 * @returns {number}
 */
function valorKiBase(caracteristica) {
    if (caracteristica <= 10) {
        return caracteristica;
    } else {
        return 10 + (2*(caracteristica-10));
    }
}

/**
 *
 * @param {number} caracteristica
 * @returns {number}
 */
function acumulacionKiBase(caracteristica) {
    if (caracteristica <= 9) {
        return 1;
    } else if (caracteristica <= 12) {
        return 2;
    } else if (caracteristica <= 15) {
        return 3;
    } else {
        return 4;
    }

}

/**
 *
 * @param {boolean} aplicar
 */
function efectoControlKi(aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_PUEDE_USAR_TECNICAS);
    } else {
        personaje_actual.removeFlag(FLAG_PUEDE_USAR_TECNICAS);
    }
}

/**
 *
 * @param {boolean} aplicar
 */
function efectoDeteccionKi(aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_DETECCION_KI);
    } else {
        personaje_actual.removeFlag(FLAG_DETECCION_KI);
    }
}

/**
 *
 * @param {boolean} aplicar
 */
function efectoKiArmaduraEnergia(aplicar) {
    if (aplicar) {
        personaje_actual.setArmaduraNatural(sumarArmadura(personaje_actual.getArmaduraNatural(),[0,0,0,0,0,0,2]));
    } else {
        personaje_actual.setArmaduraNatural(sumarArmadura(personaje_actual.getArmaduraNatural(),[0,0,0,0,0,0,-2]));
    }
}

/**
 *
 * @param {boolean} aplicar
 */
function efectoExtrusionAura(aplicar) {
    var bonoDaño = new Bono(BONO_DAÑO,BONO_DAÑO,10,"",false,BONO_ESPECIAL,HAB_KI_EXTENSION_AURA_ARMA)
    var bonoEntereza = new Bono(BONO_ENTEREZA,BONO_ENTEREZA,10,"",false,BONO_ESPECIAL,HAB_KI_EXTENSION_AURA_ARMA)
    var bonoRotura = new Bono(BONO_ROTURA,BONO_ROTURA,5,"",false,BONO_ESPECIAL,HAB_KI_EXTENSION_AURA_ARMA)
    if (aplicar) {
        personaje_actual.addBono(bonoDaño,false,false);
        personaje_actual.addBono(bonoEntereza,false,false);
        personaje_actual.addBono(bonoRotura,false,true);
    } else {
        personaje_actual.removeBono(bonoDaño,false);
        personaje_actual.removeBono(bonoEntereza,false);
        personaje_actual.removeBono(bonoRotura,true);
    }
}

/**
 *
 * @param {boolean} aplicar
 */
function efectoOcultacionKi(aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_OCULTACION_KI);
    } else {
        personaje_actual.removeFlag(FLAG_OCULTACION_KI);
    }
}

/**
 *
 * @param {boolean} aplicar
 */
function efectoInhumanidad(aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_INHUMANIDAD);
    } else {
        personaje_actual.removeFlag(FLAG_INHUMANIDAD);
    }
}

/**
 *
 * @param {boolean} aplicar
 */
function efectoZen(aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_ZEN);
    } else {
        personaje_actual.removeFlag(FLAG_ZEN);
    }
}

/**
 *
 * @param {boolean} aplicar
 */
function sinEfecto(aplicar) {

}

/**
 *
 * @param {{opcion:string}} parametros
 */
function eligeHabilidadKi(parametros) {
    var habilidadKi = getHabilidadKi(parametros.opcion);

    desactivarNotificaciones();
    personaje_actual.addCMGastado(habilidadKi.getCosteCM());
    activarNotificaciones();
    personaje_actual.addHabilidadKi(habilidadKi.getNombre(), false, true);
}

/**
 *
 * @param {{data:{habilidadKi:HabilidadKi}}} event
 */
function anularHabilidadKi(event) {
    var habilidadKi = event.data.habilidadKi;

    desactivarNotificaciones();
    personaje_actual.addCMGastado(-1 * habilidadKi.getCosteCM());
    activarNotificaciones();
    personaje_actual.removeHabilidadKi(habilidadKi.getNombre());
}

/**
 *
 * @param {{opcion:string}} parametros
 * @returns {boolean}
 */
function noPuedeComprarHabilidadKi(parametros) {
    /**
     *
     * @type {HabilidadKi}
     */
    var habilidadKi = getHabilidadKi(parametros.opcion);
    var puede = true;

    if (!habilidadKi.cumple(personaje_actual)) {
        puede = false;
    }

    if (habilidadKi.getCosteCM() > personaje_actual.getCMTotal()-personaje_actual.getCMGastado()) {
        puede = false;
    }

    if (personaje_actual.hasHabilidadKi(parametros.opcion)) {
        puede = false;
    }

    return !puede;
}

/**
 *
 * @param {number} nivel
 * @returns {number}
 */
function maxCMTecnica(nivel) {
    var maxCM;

    if (nivel == 1) {
        maxCM = 50;
    } else if (nivel == 2) {
        maxCM = 100;
    } else {
        maxCM = 200;
    }

    return maxCM;
}

/**
 *
 * @param {number} nivel
 * @returns {number}
 */
function minCMTecnica(nivel) {
    var minCM;

    if (nivel == 1) {
        minCM = 20;
    } else if (nivel == 2) {
        minCM = 40;
    } else {
        minCM = 60;
    }

    return minCM;
}

/**
 *
 * @param {number} nivel
 * @returns {number}
 */
function maxDesventajasTecnica(nivel) {
    var maxDesventajas;

    if (nivel == 1) {
        maxDesventajas = 1;
    } else if (nivel == 2) {
        maxDesventajas = 2;
    } else {
        maxDesventajas = 3;
    }

    return maxDesventajas;
}

/**
 *
 * @param {number} nivel
 * @returns {number}
 */
function costeTecnicaMantenida(nivel) {
    var coste;

    if (nivel == 1) {
        coste = 10;
    } else if (nivel == 2) {
        coste = 20;
    } else {
        coste = 30;
    }

    return coste;
}


/**
 *
 * @param {{opcion:string}} parametros
 */
function eligeTecnicaKi(parametros) {
    var tecnicaKi = getTecnicaKi(parametros.opcion);

    desactivarNotificaciones();
    personaje_actual.addCMGastado(tecnicaKi.getCosteCM());
    activarNotificaciones();
    personaje_actual.addTecnicaKi(tecnicaKi);
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi}}} event
 */
function anularTecnicaKi(event) {
    var tecnicaKi = event.data.tecnicaKi;

    desactivarNotificaciones();
    personaje_actual.addCMGastado(-1 * tecnicaKi.getCosteCM());
    activarNotificaciones();
    personaje_actual.removeTecnicaKi(tecnicaKi.getNombre());
}

/**
 *
 * @param {{opcion:string}} parametros
 * @returns {boolean}
 */
function noPuedeComprarTecnicaKi(parametros) {
    /**
     *
     * @type {TecnicaKi}
     */
    var tecnicaKi = getTecnicaKi(parametros.opcion);

    return !personaje_actual.puedeComprarTecnicaKi(tecnicaKi);
}


/*
 Paso 1: Selecciona el nivel de la Técnica.

 Paso 2: Decide su efecto principal.
 Elige el efecto principal de la Técnica. Recuerda que su coste en puntos de Ki es el que se encuentra en la casilla Primario.

 Paso 3: Elige sus efectos secundarios.
 La Técnica no tiene por qué tener efectos secundarios. De cualquier modo, puedes elegir tantos como creas que te permitirá tu CM.
 El coste en puntos de Ki de los efectos secundarios debe de mirarse en la casilla Secundario.

 Paso 4: Calcula el CM de la Técnica.
 Por muchas desventajas que se elija, no es posible disminuir más de la
 mitad el CM originario de la Técnica.

 Paso 5: Calcula el coste de acumulación de los efectos.
 Mira el coste de Ki de los efectos que has elegido y en qué características se basan.

 Paso 6: Modifica los costes de acumulación entre atributos.
 Este es el paso más complicado. Ahora que ya sabes lo que cuesta cada efecto en puntos de Ki, puedes modificar su valor entre las características
 opcionales. Puedes coger todos o sólo parte de los puntos de Ki que cuesta acumular la Técnica y repartirlos entre tantas características opcionales
 como quieras. Cada una tiene un valor añadido que debes sumar al coste de acumulación si quieres invertir puntos en ella. Si deseas repartir una
 cantidad entre distintas características opcionales, debes sumar siempre el valor añadido del cambio de cada característica.

 MANTENIMIENTO
 Es posible mantener
 sólo parte de los efectos de una Técnica y dejar que otros se extingan.

 */

/**
 *
 * @param {EfectoTecnica} efectoTecnica
 */
function addEfectoTecnica(efectoTecnica) {
    efectosTecnicas.push(efectoTecnica);
    allEfectosTecnicas[efectoTecnica.getNombre()] = efectoTecnica;
}

/**
 *
 * @param {DesventajaTecnica} desventajaTecnica
 */
function addDesventajaTecnica(desventajaTecnica) {
    desventajasTecnicas.push(desventajaTecnica);
    allDesventajasTecnicas[desventajaTecnica.getNombre()] = desventajaTecnica;
}

/**
 *
 * @returns {boolean}
 */
function noPuedeComprarTecnicas() {
    return !personaje_actual.hasFlag(FLAG_PUEDE_USAR_TECNICAS);
}

/**
 *
 */
function crearTecnicaKi() {
    var nuevaTecnica = new TecnicaKi(1);
    muestraDialogoCrearTecnicaKi(nuevaTecnica);
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi}}} event
 */
function elegirManualNombreTecnica(event) {
    var tecnicaKi = event.data.tecnicaKi;
    muestraDialogoElegirOpcion(LISTA_INTRODUCCION_USUARIO,{tecnicaKi:tecnicaKi},{principal:asignarNombreTecnica,isDisabled:alwaysEnabled});
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi,opcion:string}} parametros
 */
function asignarNombreTecnica(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    tecnicaKi.setNombre(parametros.opcion);
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi}}} event
 */
function elegirNivelTecnica(event) {
    var tecnicaKi = event.data.tecnicaKi;

    muestraDialogoElegirOpciones([new OpcionMostrable("1",""),new OpcionMostrable("2",""),new OpcionMostrable("3","")],{tecnicaKi:tecnicaKi},{principal:asignarNivelTecnica,isDisabled:alwaysEnabled},true);
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi,opcion:string}} parametros
 */
function asignarNivelTecnica(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    tecnicaKi.setNivel(parseInt(parametros.opcion));
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi}}} event
 */
function elegirManualDescripcionTecnica(event) {
    var tecnicaKi = event.data.tecnicaKi;
    muestraDialogoElegirOpcion(LISTA_INTRODUCCION_USUARIO,{tecnicaKi:tecnicaKi},{principal:asignarDescripcionTecnica,isDisabled:alwaysEnabled});
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi,opcion:string}} parametros
 */
function asignarDescripcionTecnica(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    tecnicaKi.setDescripcion(parametros.opcion);
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi,efecto:EfectoTecnica}}} event
 */
function añadeEfectoPrimarioTecnica(event) {
    var tecnicaKi = event.data.tecnicaKi;
    var efectoTecnica = event.data.efecto;

    var arrayOpciones = [];
    var nivelesEfecto = efectoTecnica.getNivelesEfecto();
    for (var i = 0; i < nivelesEfecto.length; i++) {
        arrayOpciones.push(new OpcionMostrable(nivelesEfecto[i].getNombre(),"","CM: "+nivelesEfecto[i].getCosteCM()+", coste ki: " + nivelesEfecto[i].getCostePrimario()));
    }

    muestraDialogoElegirOpciones(arrayOpciones,{tecnicaKi:tecnicaKi,efecto:efectoTecnica},{principal:asignaEfectoPrimarioTecnica,isDisabled:noPuedeElegirEfectoPrimario},true);
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi,efecto:EfectoTecnica,opcion:string}} parametros
 */
function asignaEfectoPrimarioTecnica(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    var efectoTecnica = parametros.efecto;
    var nivelElegido = efectoTecnica.getNivelEfectoPorNombre(parametros.opcion);

    tecnicaKi.fijaComoPrimario(new EfectoTecnicaElegido(efectoTecnica,nivelElegido));
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi,efecto:EfectoTecnica,opcion:string}} parametros
 */
function noPuedeElegirEfectoPrimario(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    var efectoTecnica = parametros.efecto;
    var nivelElegido = efectoTecnica.getNivelEfectoPorNombre(parametros.opcion);

    return !tecnicaKi.puedeFijarComoPrimario(new EfectoTecnicaElegido(efectoTecnica,nivelElegido));
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi,efecto:EfectoTecnica}}} event
 */
function añadeEfectoSecundarioTecnica(event) {
    var tecnicaKi = event.data.tecnicaKi;
    var efectoTecnica = event.data.efecto;

    var arrayOpciones = [];
    var nivelesEfecto = efectoTecnica.getNivelesEfecto();
    for (var i = 0; i < nivelesEfecto.length; i++) {
        arrayOpciones.push(new OpcionMostrable(nivelesEfecto[i].getNombre(),"","CM: "+nivelesEfecto[i].getCosteCM()+", coste ki: " + nivelesEfecto[i].getCosteSecundario()));
    }

    muestraDialogoElegirOpciones(arrayOpciones,{tecnicaKi:tecnicaKi,efecto:efectoTecnica},{principal:asignaEfectoSecundarioTecnica,isDisabled:noPuedeElegirEfectoSecundario},true);
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi,desventaja:DesventajaTecnica}}} event
 */
function añadeDesventajaTecnica(event) {
    var tecnicaKi = event.data.tecnicaKi;
    var desventajaTecnicaElegida = new DesventajaTecnicaElegida(event.data.desventaja);
    var efectoDesventaja = desventajaTecnicaElegida.getEfecto();

    if (efectoDesventaja.length == 0) {
        tecnicaKi.addDesventaja(desventajaTecnicaElegida);
    } else {
        var funcCall = efectoDesventaja[0];
        var arguments = efectoDesventaja.slice(0,efectoDesventaja.length);
        arguments.shift();
        arguments.push(tecnicaKi);
        arguments.push(desventajaTecnicaElegida);
        funcCall.apply(this,arguments);
    }
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi,efecto:EfectoTecnica,opcion:string}} parametros
 */
function asignaEfectoSecundarioTecnica(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    var efectoTecnica = parametros.efecto;
    var nivelElegido = efectoTecnica.getNivelEfectoPorNombre(parametros.opcion);

    tecnicaKi.addEfectoSecundario(new EfectoTecnicaElegido(efectoTecnica,nivelElegido));
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi,efecto:EfectoTecnica,opcion:string}} parametros
 */
function noPuedeElegirEfectoSecundario(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    var efectoTecnica = parametros.efecto;
    var nivelElegido = efectoTecnica.getNivelEfectoPorNombre(parametros.opcion);

    return !tecnicaKi.puedeAñadirSecundario(new EfectoTecnicaElegido(efectoTecnica,nivelElegido));
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi,efect:EfectoTecnicaElegido}}} event
 */
function quitaEfectoSecundario(event) {
    event.data.tecnicaKi.removeEfectoSecundario(event.data.efecto);
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi,efecto:EfectoTecnicaElegido,ventaja:VentajaTecnicaElegida}}} event
 */
function quitaVentajaEfecto(event) {
    event.data.tecnicaKi.removeVentajaEfecto(event.data.efecto,event.data.ventaja);
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi,desventaja:DesventajaTecnicaElegida}}} event
 */
function quitaDesventajaTecnica(event) {
    event.data.tecnicaKi.removeDesventaja(event.data.desventaja);
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi,efectoTecnica:EfectoTecnicaElegido,activado:boolean}}} event
 */
function cambiaMantenimiento(event) {
    var tecnicaKi = event.data.tecnicaKi;
    var efecto = event.data.efectoTecnica;
    var activado = event.data.activado;

    if ((activado) && (!efecto.isMantenido())) {
        tecnicaKi.setEfectoMantenido(efecto,true);
    } else if ((!activado) && (efecto.isMantenido())) {
        tecnicaKi.setEfectoMantenido(efecto,false);
    }
}

/**
 *
 * @param {TecnicaKi} tecnicaKi
 * @param {DesventajaTecnica} desventaja
 * @returns {boolean}
 */
function puedeAñadirseDesventajaATecnica(tecnicaKi,desventaja) {
    var puede = true;
    var desventajasActuales = tecnicaKi.getDesventajas();

    if (desventajasActuales.length >= tecnicaKi.getMaxDesventajas()) {
        puede = false;
    }

    for (var i = 0; i < desventajasActuales.length; i++) {
        var incompatibles = desventajasActuales[i].getIncompatibles();
        for (var j= 0; j < incompatibles.length;j++) {
            if (incompatibles[j] == desventaja.getNombre()) {
                puede = false;
                break;
            }
        }
    }

    return puede;
}

/**
 *
 * @param {number} numAtaduras
 * @param {TecnicaKi} tecnicaKi
 * @param {DesventajaTecnicaElegida} desventajaTecnicaElegida
 */
function elegirAtaduraElemental(numAtaduras, tecnicaKi, desventajaTecnicaElegida) {

    var gruposOpciones = [
        new GrupoOpciones("Atadura Elemental",[ELEMENTO_AGUA,ELEMENTO_AIRE,ELEMENTO_FUEGO,ELEMENTO_TIERRA,ELEMENTO_LUZ,ELEMENTO_OSCURIDAD],numAtaduras)
    ];
    parametros = {
        tecnicaKi:tecnicaKi,
        desventajaTecnicaElegida: desventajaTecnicaElegida
    };
    dialogoSeleccionMultiple(gruposOpciones,parametros,ataduraElementalElegida);
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi,desventajaTecnicaElegida:DesventajaTecnicaElegida,grupoOpciones:GrupoOpciones[]}}  parametros
 */
function ataduraElementalElegida(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    var desventajaTecnicaElegida = parametros.desventajaTecnicaElegida;
    var grupoOpciones = parametros.gruposOpciones[0];

    var ataduras = grupoOpciones.opcionesElegidas;

    var elementos = new ElementosAfines(ataduras);

    desventajaTecnicaElegida.setAtaduraElemental(elementos);

    tecnicaKi.addDesventaja(desventajaTecnicaElegida);
}

/**
 *
 * @param {number} minCM
 * @param {number} maxCM
 * @param {TecnicaKi} tecnicaKi
 * @param {DesventajaTecnicaElegida} desventajaTecnicaElegida
 */
function introducirCosteCMYDescripcion(minCM, maxCM, tecnicaKi, desventajaTecnicaElegida) {

    var arrayOpciones = [];

    for (var i = minCM; i <= maxCM; i += 5) {
        arrayOpciones.push(new OpcionMostrable(i,""));
    }
    desventajaTecnicaElegida.setDescripcion(prompt("Especifica la condición",""));
    parametros = {
        tecnicaKi:tecnicaKi,
        desventajaTecnicaElegida: desventajaTecnicaElegida
    };
    muestraDialogoElegirOpciones(arrayOpciones,parametros,{principal:costeCMIntroducido,isDisabled:alwaysEnabled},true);
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi,desventajaTecnicaElegida:DesventajaTecnicaElegida,opcion:string}}  parametros
 */
function costeCMIntroducido(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    var desventajaTecnicaElegida = parametros.desventajaTecnicaElegida;
    var costeCM = parametros.opcion;

    desventajaTecnicaElegida.setCosteCM(costeCM);

    tecnicaKi.addDesventaja(desventajaTecnicaElegida);
}

/**
 *
 */
function comprarHabilidadKi() {
    var arrayOpciones = [];

    for (var i = 0; i < habilidadesKi_set.length; i++) {
        arrayOpciones.push(new OpcionMostrable(habilidadesKi_set[i].getNombre(),"",habilidadesKi_set[i].getDescripcion()));
    }

    muestraDialogoElegirOpciones(arrayOpciones, {}, {principal: eligeHabilidadKi, isDisabled: noPuedeComprarHabilidadKi}, true);
}

/**
 *
 */
function comprarTecnicaKi() {
    var arrayOpciones = [];
    var categorias = [];

    for (var i = 0; i < tecnicasMuestra_set.length; i++) {
        arrayOpciones.push(new OpcionMostrable(tecnicasMuestra_set[i].getNombre(),tecnicasMuestra_set[i].getArbolTecnicas(),tecnicasMuestra_set[i].getDescripcion()));
    }

    for (i = 0; i < arbolesTecnicasMuestra_set.length;i++) {
        categorias.push(new OpcionMostrable(arbolesTecnicasMuestra_set[i],arbolesTecnicasMuestra_set[i]));
    }

    muestraDialogoElegirOpciones(arrayOpciones, {}, {principal: eligeTecnicaKi, isDisabled: noPuedeComprarTecnicaKi}, true,categorias);
}

/**
 *
 * @param {TecnicaKi} tecnicaKi
 * @param {EfectoTecnica} efecto
 * @param {boolean} esPrincipal
 */
function puedeComprarseEfecto(tecnicaKi, efecto, esPrincipal) {
    var puede = true;

    if (!tecnicaKi.puedeAñadirEfectoDeElementos(efecto.getElementosAfines())) {
        puede = false;
    }

    return puede;
}
var HAB_KI_USO_DEL_KI = "Uso del Ki";
var HAB_KI_CONTROL_DEL_KI = "Control del Ki";
var HAB_KI_DETECCION_KI = "Detección del Ki";
var HAB_KI_ERUDICION = "Erudición";
var HAB_KI_ELIMINACION_PESO = "Eliminación de peso";
var HAB_KI_LEVITACION = "Levitación";
var HAB_KI_MOVIMIENTO_OBJETOS = "Movimiento de objetos";
var HAB_KI_VUELO = "Vuelo";
var HAB_KI_EXTRUSION_DE_PRESENCIA = "Extrusión de presencia";
var HAB_KI_ARMADURA_ENERGIA = "Armadura de energía";
var HAB_KI_EXTENSION_AURA_ARMA = "Extensión del aura al arma";
var HAB_KI_DESTRUCCION_KI = "Destrucción por Ki";
var HAB_KI_TRANSMISION_KI = "Transmisión del Ki";
var HAB_KI_CURACION_KI = "Curación por Ki";
var HAB_KI_USO_ENERGIA_NECESARIA = "Uso de la Energía Necesaria";
var HAB_KI_OCULTACION_KI = "Ocultación del Ki";
var HAB_KI_FALSA_MUERTE = "Falsa muerte";
var HAB_KI_ELIMINACION_NECESIDADES = "Eliminación de necesidades";
var HAB_KI_ELIMINACION_PENALIZADORES = "Eliminación de penalizadores";
var HAB_KI_RECUPERACION = "Recuperación";
var HAB_KI_AUMENTO_CARACTERISTICAS = "Aumento de características";
var HAB_KI_INHUMANIDAD = "Inhumanidad";
var HAB_KI_ZEN = "Zen";

addHabilidadKi(new HabilidadKi(
    HAB_KI_USO_DEL_KI,
    "",
    40,
    [],
    sinEfecto,
    false
));
addHabilidadKi(new HabilidadKi(
    HAB_KI_CONTROL_DEL_KI,
    "",
    30,
    [HAB_KI_USO_DEL_KI],
    efectoControlKi,
    false
));
addHabilidadKi(new HabilidadKi(HAB_KI_DETECCION_KI, "", 20, [HAB_KI_CONTROL_DEL_KI], efectoDeteccionKi, true, HB_ADVERTIR));
addHabilidadKi(new HabilidadKi(HAB_KI_ERUDICION, "", 10, [HAB_KI_DETECCION_KI], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_ELIMINACION_PESO, "", 10, [HAB_KI_USO_DEL_KI], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_LEVITACION, "", 20, [HAB_KI_ELIMINACION_PESO], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_MOVIMIENTO_OBJETOS, "", 10, [HAB_KI_LEVITACION], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_VUELO, "", 20, [HAB_KI_LEVITACION], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_EXTRUSION_DE_PRESENCIA, "", 10, [HAB_KI_USO_DEL_KI], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_ARMADURA_ENERGIA, "", 10, [HAB_KI_EXTRUSION_DE_PRESENCIA], efectoKiArmaduraEnergia, false));
addHabilidadKi(new HabilidadKi(HAB_KI_EXTENSION_AURA_ARMA, "", 10, [HAB_KI_EXTRUSION_DE_PRESENCIA], efectoExtrusionAura, false));
addHabilidadKi(new HabilidadKi(HAB_KI_DESTRUCCION_KI, "", 20, [HAB_KI_EXTRUSION_DE_PRESENCIA], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_TRANSMISION_KI, "", 10, [HAB_KI_USO_DEL_KI], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_CURACION_KI, "", 10, [HAB_KI_TRANSMISION_KI], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_USO_ENERGIA_NECESARIA, "", 10, [HAB_KI_USO_DEL_KI], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_OCULTACION_KI, "", 10, [HAB_KI_USO_ENERGIA_NECESARIA], efectoOcultacionKi, true, HB_OCULTARSE));
addHabilidadKi(new HabilidadKi(HAB_KI_FALSA_MUERTE, "", 10, [HAB_KI_OCULTACION_KI], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_ELIMINACION_NECESIDADES, "", 10, [HAB_KI_USO_ENERGIA_NECESARIA], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_ELIMINACION_PENALIZADORES, "", 20, [HAB_KI_USO_ENERGIA_NECESARIA], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_RECUPERACION, "", 20, [HAB_KI_ELIMINACION_PENALIZADORES], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_AUMENTO_CARACTERISTICAS, "", 20, [HAB_KI_USO_ENERGIA_NECESARIA], sinEfecto, false));
addHabilidadKi(new HabilidadKi(HAB_KI_INHUMANIDAD, "", 30, [HAB_KI_USO_DEL_KI], efectoInhumanidad, false));
addHabilidadKi(new HabilidadKi(HAB_KI_ZEN, "", 50, [HAB_KI_INHUMANIDAD], efectoZen, false));


addDesventajaTecnica(new DesventajaTecnica(
    "Atadura elemental (1 elemento)",
    "",
    [elegirAtaduraElemental,1],
    ["Atadura elemental (2 elementos)"],
    -15,
    1
));
addDesventajaTecnica(new DesventajaTecnica(
    "Atadura elemental (2 elementos)",
    "",
    [elegirAtaduraElemental,2],
    ["Atadura elemental (1 elemento)"],
    -10,
    1
));
addDesventajaTecnica(new DesventajaTecnica(
    "Daño reducido (Mitad de daño)",
    "",
    [],
    ["Daño reducido (Ningún daño)"],
    -10,
    1
));
addDesventajaTecnica(new DesventajaTecnica(
    "Daño reducido (Ningún daño)",
    "",
    [],
    ["Daño reducido (Mitad de daño)"],
    -20,
    1
));
addDesventajaTecnica(new DesventajaTecnica(
    "Requerimientos especiales (Intesidad simple)",
    "",
    [],
    ["Requerimientos especiales (Intesidad mayor)"],
    -10,
    1
));
addDesventajaTecnica(new DesventajaTecnica(
    "Requerimientos especiales (Intesidad mayor)",
    "",
    [],
    ["Requerimientos especiales (Intesidad simple)"],
    -15,
    1
));
addDesventajaTecnica(new DesventajaTecnica(
    "Condición determinada",
    "",
    [introducirCosteCMYDescripcion,-25,-5],
    [],
    0,
    1
));
addDesventajaTecnica(new DesventajaTecnica(
    "Predeterminación",
    "",
    [],
    [],
    -20,
    2
));

addEfectoTecnica(new EfectoTecnica(
    "Ataque adicional",
    "",
    EFECTO_ACCION,
    [
        new NivelEfectoTecnica("+1",6,9,20,3,1),
        new NivelEfectoTecnica("+2",12,15,30,6,1),
        new NivelEfectoTecnica("+3",18,22,40,9,1),
        new NivelEfectoTecnica("+4",24,29,50,12, 2),
        new NivelEfectoTecnica("+5",30,36,60,15, 3)
    ],
    DES,
    new ElementosAfines([ELEMENTO_AIRE,ELEMENTO_AGUA]),
    [
        new CaracSecunTecnica(AGI, 2),
        new CaracSecunTecnica(POD, 3),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(CON, 1)
    ],
    [
        new VentajaTecnica(
            "Ataque continuo",
            "",
            [
                new NivelVentajaTecnica("Ataque continuo",10,30,5,1)
            ]
        ),
        new VentajaTecnica(
            "Bono de Cansancio añadido",
            "",
            [
                new NivelVentajaTecnica("Cansancio añadido",8,30,2,1)
            ]
        )
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Ataque adicional limitado",
    "",
    EFECTO_ACCION,
    [
        new NivelEfectoTecnica("+1",3,5,5,1,1),
        new NivelEfectoTecnica("+2",6,9,10,2,1),
        new NivelEfectoTecnica("+3",9,12,15,3,1),
        new NivelEfectoTecnica("+4",12,15,20,4,1),
        new NivelEfectoTecnica("+5",15,19,30,6,1),
        new NivelEfectoTecnica("+6",18,22,40,8, 2),
        new NivelEfectoTecnica("+8",22,26,50,10, 2),
        new NivelEfectoTecnica("+10",26,32,60,12, 3)
    ],
    DES,
    new ElementosAfines([ELEMENTO_AIRE,ELEMENTO_AGUA,ELEMENTO_OSCURIDAD]),
    [
        new CaracSecunTecnica(AGI, 2),
        new CaracSecunTecnica(POD, 3),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(CON, 1)
    ],
    [
        new VentajaTecnica(
            "Ataque continuo",
            "",
            [
                new NivelVentajaTecnica("Ataque continuo",10,30,5,1)
            ]
        )
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Defensa adicional",
    "",
    EFECTO_ACCION,
    [
        new NivelEfectoTecnica("+1",1,2,5,1,1),
        new NivelEfectoTecnica("+2",2,4,5,2,1),
        new NivelEfectoTecnica("+3",3,5,10,3,1),
        new NivelEfectoTecnica("+4",4,6,15,4,1),
        new NivelEfectoTecnica("+6",5,8,20,6,1),
        new NivelEfectoTecnica("+8",6,9,25,8,1),
        new NivelEfectoTecnica("+10",7,10,30,10, 2),
        new NivelEfectoTecnica("Ilimitadas",8,11,35,12,3)
    ],
    AGI,
    new ElementosAfines([ELEMENTO_LUZ]),
    [
        new CaracSecunTecnica(DES, 1),
        new CaracSecunTecnica(POD, 3),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(CON, 1)
    ],
    [
        new VentajaTecnica(
            "Bono de Cansancio añadido",
            "",
            [
                new NivelVentajaTecnica("Cansancio añadido",6,20,2,1)
            ]
        )
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Acción adicional",
    "",
    EFECTO_ACCION,
    [
        new NivelEfectoTecnica("+1",1,2,5,1,1),
        new NivelEfectoTecnica("+2",2,4,5,2,1),
        new NivelEfectoTecnica("+3",3,5,10,3,1),
        new NivelEfectoTecnica("+4",4,6,15,4,1),
        new NivelEfectoTecnica("+5",5,8,20,6,1),
        new NivelEfectoTecnica("+6",6,9,25,8,1),
        new NivelEfectoTecnica("+8",7,10,30,10, 2),
        new NivelEfectoTecnica("+10",8,11,35,12, 3)
    ],
    DES,
    new ElementosAfines([ELEMENTO_AIRE]),
    [
        new CaracSecunTecnica(AGI, 1),
        new CaracSecunTecnica(POD, 3),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(CON, 1)
    ],
    [
        new VentajaTecnica(
            "Bono de Cansancio añadido",
            "",
            [
                new NivelVentajaTecnica("Cansancio añadido",6,20,1,1)
            ]
        )
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Habilidad de parada",
    "",
    EFECTO_DEFENSIVO,
    [
        new NivelEfectoTecnica("+10",2,4,5,1,1),
        new NivelEfectoTecnica("+25",3,5,5,1,1),
        new NivelEfectoTecnica("+40",4,6,10,2,1),
        new NivelEfectoTecnica("+50",5,8,15,3,1),
        new NivelEfectoTecnica("+75",8,11,20,4,1),
        new NivelEfectoTecnica("+90",12,15,25,5,1),
        new NivelEfectoTecnica("+100",14,18,30,8,1),
        new NivelEfectoTecnica("+125",18,22,35,10, 2),
        new NivelEfectoTecnica("+150",22,26,40,12, 2),
        new NivelEfectoTecnica("+175",26,32,45,14, 3),
        new NivelEfectoTecnica("+200",30,36,50,16, 3)
    ],
    DES,
    new ElementosAfines([ELEMENTO_LUZ,ELEMENTO_AGUA,ELEMENTO_TIERRA]),
    [
        new CaracSecunTecnica(AGI, 2),
        new CaracSecunTecnica(POD, 2),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(FUE, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Habilidad de parada limitada",
    "",
    EFECTO_DEFENSIVO,
    [
        new NivelEfectoTecnica("+10",1,2,5,1,1),
        new NivelEfectoTecnica("+25",2,4,5,1,1),
        new NivelEfectoTecnica("+40",3,5,10,1,1),
        new NivelEfectoTecnica("+50",4,6,10,2,1),
        new NivelEfectoTecnica("+75",6,9,15,3,1),
        new NivelEfectoTecnica("+90",8,11,20,4,1),
        new NivelEfectoTecnica("+100",10,13,25,6,1),
        new NivelEfectoTecnica("+125",12,15,30,8, 2),
        new NivelEfectoTecnica("+150",16,20,35,10, 2),
        new NivelEfectoTecnica("+175",20,24,40,12, 3),
        new NivelEfectoTecnica("+200",24,29,45,14, 3)
    ],
    DES,
    new ElementosAfines([ELEMENTO_LUZ,ELEMENTO_AGUA,ELEMENTO_TIERRA]),
    [
        new CaracSecunTecnica(AGI, 2),
        new CaracSecunTecnica(POD, 2),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(FUE, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Habilidad de esquiva",
    "",
    EFECTO_DEFENSIVO,
    [
        new NivelEfectoTecnica("+10",2,4,5,1,1),
        new NivelEfectoTecnica("+25",3,5,5,1,1),
        new NivelEfectoTecnica("+40",4,6,10,2,1),
        new NivelEfectoTecnica("+50",5,8,15,3,1),
        new NivelEfectoTecnica("+75",8,11,20,4,1),
        new NivelEfectoTecnica("+90",12,15,25,5,1),
        new NivelEfectoTecnica("+100",14,18,30,8,1),
        new NivelEfectoTecnica("+125",18,22,35,10, 2),
        new NivelEfectoTecnica("+150",22,26,40,12, 2),
        new NivelEfectoTecnica("+175",26,32,45,14, 3),
        new NivelEfectoTecnica("+200",30,36,50,16, 3)
    ],
    AGI,
    new ElementosAfines([ELEMENTO_LUZ,ELEMENTO_AIRE,ELEMENTO_AGUA]),
    [
        new CaracSecunTecnica(DES, 2),
        new CaracSecunTecnica(POD, 2),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(FUE, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Habilidad de esquiva limitada",
    "",
    EFECTO_DEFENSIVO,
    [
        new NivelEfectoTecnica("+10",1,2,5,1,1),
        new NivelEfectoTecnica("+25",2,4,5,1,1),
        new NivelEfectoTecnica("+40",3,5,10,1,1),
        new NivelEfectoTecnica("+50",4,6,10,2,1),
        new NivelEfectoTecnica("+75",6,9,15,3,1),
        new NivelEfectoTecnica("+90",8,11,20,4,1),
        new NivelEfectoTecnica("+100",10,13,25,6,1),
        new NivelEfectoTecnica("+125",12,15,30,8, 2),
        new NivelEfectoTecnica("+150",16,20,35,10, 2),
        new NivelEfectoTecnica("+175",20,24,40,12, 3),
        new NivelEfectoTecnica("+200",24,29,45,14, 3)
    ],
    AGI,
    new ElementosAfines([ELEMENTO_LUZ,ELEMENTO_AIRE,ELEMENTO_OSCURIDAD]),
    [
        new CaracSecunTecnica(DES, 2),
        new CaracSecunTecnica(POD, 2),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(CON, 2)
    ]
));



addEfectoTecnica(new EfectoTecnica(
    "Multiplicador al daño",
    "",
    EFECTO_DESTRUCTIVO,
    [
        new NivelEfectoTecnica("x2",10,15,25,4,1),
        new NivelEfectoTecnica("x3",15,20,40,8, 2),
        new NivelEfectoTecnica("x4",20,30,80,12, 3)
    ],
    FUE,
    [ELEMENTO_FUEGO,ELEMENTO_TIERRA],
    [
        new CaracSecunTecnica(DES, 3),
        new CaracSecunTecnica(POD, 1),
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Aumento de daño",
    "",
    EFECTO_DESTRUCTIVO,
    [
        new NivelEfectoTecnica("+10",1,2,5,1,1),
        new NivelEfectoTecnica("+25",2,4,5,1,1),
        new NivelEfectoTecnica("+40",3,5,10,1,1),
        new NivelEfectoTecnica("+50",4,6,15,2,1),
        new NivelEfectoTecnica("+75",6,9,20,3,1),
        new NivelEfectoTecnica("+90",8,11,25,4,1),
        new NivelEfectoTecnica("+100",10,13,30,5,1),
        new NivelEfectoTecnica("+125",14,18,35,6, 2),
        new NivelEfectoTecnica("+150",16,20,40,8, 2),
        new NivelEfectoTecnica("+175",18,22,45,10, 3),
        new NivelEfectoTecnica("+200",20,24,50,12, 3)
    ],
    FUE,
    [ELEMENTO_FUEGO,ELEMENTO_TIERRA],
    [
        new CaracSecunTecnica(DES, 3),
        new CaracSecunTecnica(POD, 2),
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 1)
    ],
    [
        new VentajaTecnica(
            "Sacrificio",
            "",
            [
                new NivelVentajaTecnica("Sacrificio vital",4,15,3,1),
                new NivelVentajaTecnica("Sacrificio vital doble",10,50,4,1),
                new NivelVentajaTecnica("Sacrificio de salud",2,10,2,1),
                new NivelVentajaTecnica("Sacrificio de características",2,10,2,1)
            ]
        )
    ]
));

addEfectoTecnica(new EfectoTecnica(
    "Estados",
    "",
    EFECTO_ESOTERICO,
    [
        new NivelEfectoTecnica("40",1,2,5,1,1),
        new NivelEfectoTecnica("60",2,4,5,1,1),
        new NivelEfectoTecnica("80",3,5,10,2,1),
        new NivelEfectoTecnica("100",5,8,15,3,1),
        new NivelEfectoTecnica("120",6,9,20,4,1),
        new NivelEfectoTecnica("140",8,11,20,5, 2),
        new NivelEfectoTecnica("180",10,13,30,6, 2),
        new NivelEfectoTecnica("200",14,18,50,8, 3),
        new NivelEfectoTecnica("240",18,22,80,10, 3)
    ],
    POD,
    new ElementosAfines([ELEMENTO_OSCURIDAD,ELEMENTO_LUZ]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(FUE, 4),
        new CaracSecunTecnica(DES, 4),
        new CaracSecunTecnica(CON, 4)
    ],
    [
        new VentajaTecnica(
            "Estado añadido: Penalizador a la acción",
            "",
            [
                new NivelVentajaTecnica("Penalizador a la acción",2,5,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Ceguera",
            "",
            [
                new NivelVentajaTecnica("Ceguera",5,15,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Reducción de RF",
            "",
            [
                new NivelVentajaTecnica("Reducción de RF",2, 10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Reducción de características (AGI)",
            "",
            [
                new NivelVentajaTecnica("Reducción de características",2,10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Reducción de características (CON)",
            "",
            [
                new NivelVentajaTecnica("Reducción de características",2,10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Reducción de características (DES)",
            "",
            [
                new NivelVentajaTecnica("Reducción de características",2,10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Reducción de características (FUE)",
            "",
            [
                new NivelVentajaTecnica("Reducción de características",2,10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Reducción de características (INT)",
            "",
            [
                new NivelVentajaTecnica("Reducción de características",2,10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Reducción de características (PER)",
            "",
            [
                new NivelVentajaTecnica("Reducción de características",2,10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Reducción de características (POD)",
            "",
            [
                new NivelVentajaTecnica("Reducción de características",2,10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Reducción de características (VOL)",
            "",
            [
                new NivelVentajaTecnica("Reducción de características",2,10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Paralización parcial",
            "",
            [
                new NivelVentajaTecnica("Paralización parcial",6,10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Daño",
            "",
            [
                new NivelVentajaTecnica("Daño",5,10,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Inconsciencia",
            "",
            [
                new NivelVentajaTecnica("Inconsciencia",8,15,0,1)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Coma",
            "",
            [
                new NivelVentajaTecnica("Coma",10,30,0,2)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Paralización total",
            "",
            [
                new NivelVentajaTecnica("Paralización total",8,20,0,2)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Drenaje de vida",
            "",
            [
                new NivelVentajaTecnica("Drenaje de vida",8,15,0,2)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Control",
            "",
            [
                new NivelVentajaTecnica("Control",10,40,0,3)
            ]
        ),
        new VentajaTecnica(
            "Estado añadido: Muerte",
            "",
            [
                new NivelVentajaTecnica("Muerte",12,50,0,3)
            ]
        )
    ],
    [COSTE_VENTAJAS_AUMENTA_DOS]
));

addEfectoTecnica(new EfectoTecnica(
    "Maniobras de combate y apuntar",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("-10",1,2,5,1,1),
        new NivelEfectoTecnica("-25",2,4,5,1,1),
        new NivelEfectoTecnica("-50",3,5,10,2,1),
        new NivelEfectoTecnica("-75",4,6,10,2, 2),
        new NivelEfectoTecnica("-100",6,9,15,3, 2),
        new NivelEfectoTecnica("-120",8,11,20,3, 3)
    ],
    DES,
    new ElementosAfines([ELEMENTO_AIRE]),
    [
        new CaracSecunTecnica(AGI, 1),
        new CaracSecunTecnica(POD, 2),
        new CaracSecunTecnica(VOL, 2),
        new CaracSecunTecnica(CON, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Aumentar armadura",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("1",1,2,5,1,1),
        new NivelEfectoTecnica("2",2,4,5,1,1),
        new NivelEfectoTecnica("3",4,6,10,2,1),
        new NivelEfectoTecnica("4",6,9,15,2,1),
        new NivelEfectoTecnica("5",8,11,20,3, 2),
        new NivelEfectoTecnica("6",10,13,25,3, 2),
        new NivelEfectoTecnica("7",12,15,30,4, 2),
        new NivelEfectoTecnica("8",14,18,40,5, 3)
    ],
    CON,
    new ElementosAfines([ELEMENTO_TIERRA,ELEMENTO_AGUA,ELEMENTO_LUZ]),
    [
        new CaracSecunTecnica(POD, 1),
        new CaracSecunTecnica(VOL, 2),
        new CaracSecunTecnica(FUE, 2),
        new CaracSecunTecnica(AGI, 3)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Destruir armadura",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("-1 TA",1,2,5,1,1),
        new NivelEfectoTecnica("-2 TA",2,4,5,1,1),
        new NivelEfectoTecnica("-3 TA",3,5,10,2,1),
        new NivelEfectoTecnica("-4 TA",4,6,10,2,1),
        new NivelEfectoTecnica("-5 TA",5,8,15,3, 2),
        new NivelEfectoTecnica("-6 TA",6,9,20,3, 2),
        new NivelEfectoTecnica("-7 TA",8,11,25,4, 2),
        new NivelEfectoTecnica("-8 TA",10,13,30,5, 3)
    ],
    FUE,
    new ElementosAfines([ELEMENTO_OSCURIDAD,ELEMENTO_FUEGO]),
    [
        new CaracSecunTecnica(POD, 1),
        new CaracSecunTecnica(VOL, 2),
        new CaracSecunTecnica(DES, 2),
        new CaracSecunTecnica(CON, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Aumentar rotura",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("+5",1,2,5,1,1),
        new NivelEfectoTecnica("+10",2,4,10,1,1),
        new NivelEfectoTecnica("+15",4,6,15,2,1),
        new NivelEfectoTecnica("+20",6,9,20,3,1),
        new NivelEfectoTecnica("+25",8,11,25,4, 2),
        new NivelEfectoTecnica("+30",12,15,30,5, 2),
        new NivelEfectoTecnica("+35",14,18,35,6, 2),
        new NivelEfectoTecnica("+40",18,22,40,8, 3)
    ],
    FUE,
    new ElementosAfines([ELEMENTO_TIERRA,ELEMENTO_FUEGO]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(POD, 2),
        new CaracSecunTecnica(DES, 4),
        new CaracSecunTecnica(CON, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Aumentar entereza",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("+10",1,2,5,1,1),
        new NivelEfectoTecnica("+15",2,4,5,1,1),
        new NivelEfectoTecnica("+20",3,5,10,2,1),
        new NivelEfectoTecnica("+25",4,6,10,2,1),
        new NivelEfectoTecnica("+30",5,8,15,3, 2),
        new NivelEfectoTecnica("+35",6,9,20,3, 2),
        new NivelEfectoTecnica("+40",7,10,25,4, 3)
    ],
    FUE,
    new ElementosAfines([ELEMENTO_TIERRA,ELEMENTO_FUEGO]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(POD, 2),
        new CaracSecunTecnica(DES, 4),
        new CaracSecunTecnica(CON, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Ataque a distancia",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("5 metros",1,2,5,1,1),
        new NivelEfectoTecnica("10 metros",2,4,10,1,1),
        new NivelEfectoTecnica("20 metros",3,5,10,2,1),
        new NivelEfectoTecnica("50 metros",4,6,15,3,1),
        new NivelEfectoTecnica("100 metros",5,8,20,4,1),
        new NivelEfectoTecnica("250 metros",6,9,25,5, 2),
        new NivelEfectoTecnica("500 metros",8,11,30,6, 2),
        new NivelEfectoTecnica("1 kilómetro",10,13,35,8,2),
        new NivelEfectoTecnica("5 kilómetros",14,18,40,10, 3),
        new NivelEfectoTecnica("10 kilómetros",18,22,45,12, 3),
        new NivelEfectoTecnica("100 kilómetros",22,26,50,14, 3)
    ],
    POD,
    new ElementosAfines([ELEMENTO_AIRE,ELEMENTO_AGUA,ELEMENTO_FUEGO]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(DES, 2),
        new CaracSecunTecnica(AGI, 3),
        new CaracSecunTecnica(CON, 4)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Ataque con área",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("1 metro",1,2,5,1,1),
        new NivelEfectoTecnica("5 metros",2,4,10,1,1),
        new NivelEfectoTecnica("10 metros",3,5,15,2,1),
        new NivelEfectoTecnica("25 metros",4,6,20,3,1),
        new NivelEfectoTecnica("50 metros",6,9,25,4, 2),
        new NivelEfectoTecnica("100 metros",8,11,30,5, 2),
        new NivelEfectoTecnica("500 metros",10,13,40,6, 2),
        new NivelEfectoTecnica("1 kilómetro",12,15,50,8, 3),
        new NivelEfectoTecnica("5 kilómetros",16,20,60,10, 3)
    ],
    POD,
    new ElementosAfines([ELEMENTO_OSCURIDAD,ELEMENTO_LUZ,ELEMENTO_FUEGO]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(DES, 2),
        new CaracSecunTecnica(AGI, 3),
        new CaracSecunTecnica(CON, 3)
    ],
    [
        new VentajaTecnica(
            "Elección de blanco",
            "",
            [
                new NivelVentajaTecnica("Elección de blanco",2,10,1,1)
            ]
        )
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Transporte automático",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("10 metros",2,4,5,1,1),
        new NivelEfectoTecnica("20 metros",3,5,10,2,1),
        new NivelEfectoTecnica("50 metros",4,6,10,3,1),
        new NivelEfectoTecnica("100 metros",5,8,15,4,1),
        new NivelEfectoTecnica("250 metros",6,9,20,5,1),
        new NivelEfectoTecnica("500 metros",8,11,25,6, 2),
        new NivelEfectoTecnica("1 kilómetro",10,13,30,7, 2),
        new NivelEfectoTecnica("5 kilómetros",14,18,35,8, 2),
        new NivelEfectoTecnica("10 kilómetros",18,22,40,10, 3),
        new NivelEfectoTecnica("100 kilómetros",22,26,50,12, 3)
    ],
    AGI,
    new ElementosAfines([ELEMENTO_AIRE,ELEMENTO_LUZ,ELEMENTO_OSCURIDAD]),
    [
        new CaracSecunTecnica(FUE, 2),
        new CaracSecunTecnica(POD, 3),
        new CaracSecunTecnica(DES, 2),
        new CaracSecunTecnica(CON, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Potenciar crítico",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("+10",2,4,5,1,1),
        new NivelEfectoTecnica("+25",3,5,5,2,1),
        new NivelEfectoTecnica("+40",4,6,10,3,1),
        new NivelEfectoTecnica("+50",5,8,15,4,1),
        new NivelEfectoTecnica("+75",8,11,20,6,1),
        new NivelEfectoTecnica("+90",12,15,25,8,1),
        new NivelEfectoTecnica("+100",14,18,30,10,1),
        new NivelEfectoTecnica("+125",18,22,35,12, 2),
        new NivelEfectoTecnica("+150",22,26,40,14, 2),
        new NivelEfectoTecnica("+175",26,32,45,16, 3),
        new NivelEfectoTecnica("+200",30,36,50,18, 3)
    ],
    POD,
    new ElementosAfines([ELEMENTO_FUEGO,ELEMENTO_TIERRA]),
    [
        new CaracSecunTecnica(FUE, 1),
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(DES, 2),
        new CaracSecunTecnica(CON, 2)
    ],
    [
        new VentajaTecnica(
            "Crítico automático",
            "",
            [
                new NivelVentajaTecnica("Crítico automático",8,30,4,1)
            ]
        )
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Armas físicas de Ki",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("+0",2,4,5,1,1),
        new NivelEfectoTecnica("+5",4,6,5,1,1),
        new NivelEfectoTecnica("+10",6,9,10,2,1),
        new NivelEfectoTecnica("+15",8,11,15,3, 2),
        new NivelEfectoTecnica("+20",10,13,20,4, 3)
    ],
    POD,
    new ElementosAfines([ELEMENTO_LUZ,ELEMENTO_OSCURIDAD,ELEMENTO_TIERRA]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 1),
        new CaracSecunTecnica(FUE, 2),
        new CaracSecunTecnica(DES, 3)
    ],
    [
        new VentajaTecnica(
            "Proyectiles",
            "",
            [
                new NivelVentajaTecnica("Proyectiles",2,10,1,1)
            ]
        )
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Apresamiento",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("4",2,4,5,1,1),
        new NivelEfectoTecnica("6",3,5,10,2,1),
        new NivelEfectoTecnica("8",4,6,10,3,1),
        new NivelEfectoTecnica("10",5,8,15,4,1),
        new NivelEfectoTecnica("12",6,9,20,5,1),
        new NivelEfectoTecnica("14",8,11,25,6, 2),
        new NivelEfectoTecnica("16",10,13,30,7, 2),
        new NivelEfectoTecnica("18",14,18,35,8, 3),
        new NivelEfectoTecnica("20",18,22,40,10, 3)
    ],
    FUE,
    new ElementosAfines([ELEMENTO_TIERRA]),
    [
        new CaracSecunTecnica(DES, 1),
        new CaracSecunTecnica(VOL, 2),
        new CaracSecunTecnica(CON, 2),
        new CaracSecunTecnica(POD, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Proyección",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("4",1,2,5,1,1),
        new NivelEfectoTecnica("6",2,4,5,2,1),
        new NivelEfectoTecnica("8",3,5,10,3,1),
        new NivelEfectoTecnica("10",4,6,10,4,1),
        new NivelEfectoTecnica("12",5,8,15,5,1),
        new NivelEfectoTecnica("14",6,9,20,6, 2),
        new NivelEfectoTecnica("16",8,11,25,7, 2),
        new NivelEfectoTecnica("18",10,13,30,8, 3),
        new NivelEfectoTecnica("20",12,15,35,10, 3)
    ],
    FUE,
    new ElementosAfines([ELEMENTO_TIERRA,ELEMENTO_FUEGO]),
    [
        new CaracSecunTecnica(POD, 1),
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 2),
        new CaracSecunTecnica(DES, 3)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Escudo de energía",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("100",2,4,5,1,1),
        new NivelEfectoTecnica("200",3,5,5,1,1),
        new NivelEfectoTecnica("300",4,6,10,2,1),
        new NivelEfectoTecnica("400",5,8,15,3,1),
        new NivelEfectoTecnica("500",8,11,20,4,1),
        new NivelEfectoTecnica("800",12,15,25,5, 2),
        new NivelEfectoTecnica("1.000",14,18,30,8, 2),
        new NivelEfectoTecnica("1.250",18,22,35,10, 2),
        new NivelEfectoTecnica("1.500",22,26,40,12, 3),
        new NivelEfectoTecnica("2.000",26,32,45,14, 3)
    ],
    POD,
    new ElementosAfines([ELEMENTO_LUZ,ELEMENTO_AGUA]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 2),
        new CaracSecunTecnica(FUE, 2),
        new CaracSecunTecnica(DES, 3)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Intangibilidad",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("Intangibilidad",3,5,10,2,1)
    ],
    POD,
    new ElementosAfines([ELEMENTO_LUZ,ELEMENTO_OSCURIDAD,ELEMENTO_AGUA]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 3),
        new CaracSecunTecnica(FUE, 3),
        new CaracSecunTecnica(DES, 3)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Espejismo",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("1",1,2,5,1,1),
        new NivelEfectoTecnica("2",2,4,5,2,1),
        new NivelEfectoTecnica("4",4,6,10,3,1),
        new NivelEfectoTecnica("6",6,9,10,4,1),
        new NivelEfectoTecnica("10",8,11,15,6, 2),
        new NivelEfectoTecnica("15",10,13,20,8, 2),
        new NivelEfectoTecnica("20",12,15,25,10, 2),
        new NivelEfectoTecnica("25",14,18,30,12, 3)
    ],
    VOL,
    new ElementosAfines([ELEMENTO_AGUA,ELEMENTO_OSCURIDAD]),
    [
        new CaracSecunTecnica(POD, 1),
        new CaracSecunTecnica(AGI, 2),
        new CaracSecunTecnica(DES, 3),
        new CaracSecunTecnica(CON, 3)
    ],
    [
        new VentajaTecnica(
            "Indetección",
            "",
            [
                new NivelVentajaTecnica("Media",1,5,0,1),
                new NivelVentajaTecnica("Difícil",2,10,0,1),
                new NivelVentajaTecnica("Muy Difícil",3,10,0,1),
                new NivelVentajaTecnica("Absurdo",4,15,0,1),
                new NivelVentajaTecnica("Casi Imposible",5,15,0,1),
                new NivelVentajaTecnica("Imposible",6,20,0,2),
                new NivelVentajaTecnica("Inhumano",7,25,0,2),
                new NivelVentajaTecnica("Zen",8,30,0,3)
            ]
        )
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Reflectar el ataque",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("Reflectar",12,15,30,8,2)
    ],
    POD,
    new ElementosAfines([ELEMENTO_LUZ,ELEMENTO_OSCURIDAD,ELEMENTO_AGUA]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(FUE, 2),
        new CaracSecunTecnica(AGI, 3),
        new CaracSecunTecnica(DES, 3)
    ],
    [
        new VentajaTecnica(
            "Elección del blanco",
            "",
            [
                new NivelVentajaTecnica("Elección del blanco",2,10,2,1)
            ]
        ),
        new VentajaTecnica(
            "Reflectar habilidades esotéricas",
            "",
            [
                new NivelVentajaTecnica("Reflectar habilidades esotéricas",4,20,1,1)
            ]
        )
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Ataque capaz de dañar energía",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("Ataque capaz de dañar energía",1,2,5,1,1)
    ],
    POD,
    new ElementosAfines([ELEMENTO_FUEGO,ELEMENTO_LUZ,ELEMENTO_OSCURIDAD]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 2),
        new CaracSecunTecnica(FUE, 3),
        new CaracSecunTecnica(DES, 3)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Ataque elemental (Fuego)",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("Elemental (Fuego)",2,4,5,1,1)
    ],
    POD,
    new ElementosAfines([ELEMENTO_FUEGO]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 2),
        new CaracSecunTecnica(FUE, 3),
        new CaracSecunTecnica(DES, 3)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Ataque elemental (Aire)",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("Elemental (Aire)",2,4,5,1,1)
    ],
    POD,
    new ElementosAfines([ELEMENTO_AIRE]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 2),
        new CaracSecunTecnica(FUE, 3),
        new CaracSecunTecnica(DES, 3)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Ataque elemental (Agua)",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("Elemental (Agua)",2,4,5,1,1)
    ],
    POD,
    new ElementosAfines([ELEMENTO_AGUA]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 2),
        new CaracSecunTecnica(FUE, 3),
        new CaracSecunTecnica(DES, 3)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Ataque elemental (Tierra)",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("Elemental (Tierra)",2,4,5,1,1)
    ],
    POD,
    new ElementosAfines([ELEMENTO_TIERRA]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 2),
        new CaracSecunTecnica(FUE, 3),
        new CaracSecunTecnica(DES, 3)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Ataque sobrenatural",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("Energía",5,8,10,1,1)
    ],
    POD,
    new ElementosAfines([ELEMENTO_LUZ,ELEMENTO_OSCURIDAD]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(CON, 2),
        new CaracSecunTecnica(FUE, 3),
        new CaracSecunTecnica(DES, 3)
    ]

));
addEfectoTecnica(new EfectoTecnica(
    "Acumulación",
    "",
    EFECTO_ESPECIAL,
    [
        new NivelEfectoTecnica("100",2,4,5,1,1),
        new NivelEfectoTecnica("200",3,5,5,1,1),
        new NivelEfectoTecnica("300",4,6,10,2,1),
        new NivelEfectoTecnica("400",5,8,15,3,1),
        new NivelEfectoTecnica("600",8,11,20,4,1),
        new NivelEfectoTecnica("800",12,15,25,5,1),
        new NivelEfectoTecnica("1.000",14,18,30,8, 2),
        new NivelEfectoTecnica("1.200",18,22,35,10, 2),
        new NivelEfectoTecnica("1.400",22,26,40,12, 3)
    ],
    CON,
    new ElementosAfines([ELEMENTO_TIERRA]),
    [
        new CaracSecunTecnica(VOL, 1),
        new CaracSecunTecnica(FUE, 3),
        new CaracSecunTecnica(POD, 3),
        new CaracSecunTecnica(DES, 3)
    ]
));


addEfectoTecnica(new EfectoTecnica(
    "Habilidad de ataque",
    "",
    EFECTO_OFENSIVO,
    [
        new NivelEfectoTecnica("+10", 2, 4, 5, 1, 1),
        new NivelEfectoTecnica("+25", 3, 5, 5, 2, 1),
        new NivelEfectoTecnica("+40", 4, 6, 10, 3, 1),
        new NivelEfectoTecnica("+50", 5, 8, 15, 4, 1),
        new NivelEfectoTecnica("+75", 8, 11, 20, 6, 1),
        new NivelEfectoTecnica("+90", 12, 15, 25, 8, 1),
        new NivelEfectoTecnica("+100", 14, 18, 30, 10, 1),
        new NivelEfectoTecnica("+125", 18, 22, 35, 12, 2),
        new NivelEfectoTecnica("+150", 22, 26, 40, 14, 2),
        new NivelEfectoTecnica("+175", 26, 32, 45, 16, 3),
        new NivelEfectoTecnica("+200", 30, 36, 50, 18, 3)
    ],
    DES,
    new ElementosAfines([ELEMENTO_AIRE, ELEMENTO_FUEGO, ELEMENTO_OSCURIDAD]),
    [
        new CaracSecunTecnica(AGI, 2),
        new CaracSecunTecnica(POD, 2),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(FUE, 2)
    ]
));

addEfectoTecnica(new EfectoTecnica(
    "Habilidad de contraataque",
    "",
    EFECTO_OFENSIVO,
    [
        new NivelEfectoTecnica("+10", 1, 2, 5, 1, 1),
        new NivelEfectoTecnica("+25", 2, 4, 5, 2, 1),
        new NivelEfectoTecnica("+40", 3, 5, 10, 3, 1),
        new NivelEfectoTecnica("+50", 4, 6, 10, 4, 1),
        new NivelEfectoTecnica("+75", 6, 9, 15, 6, 1),
        new NivelEfectoTecnica("+90", 9, 12, 20, 8, 1),
        new NivelEfectoTecnica("+100", 12, 15, 25, 10, 1),
        new NivelEfectoTecnica("+125", 14, 18, 30, 12, 2),
        new NivelEfectoTecnica("+150", 18, 22, 35, 14, 2),
        new NivelEfectoTecnica("+175", 22, 26, 40, 16, 3),
        new NivelEfectoTecnica("+200", 26, 32, 45, 18, 3)
    ],
    DES,
    new ElementosAfines([ELEMENTO_AIRE, ELEMENTO_AGUA, ELEMENTO_TIERRA]),
    [
        new CaracSecunTecnica(AGI, 2),
        new CaracSecunTecnica(POD, 2),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(FUE, 2)
    ]
));
addEfectoTecnica(new EfectoTecnica(
    "Incrementar turno",
    "",
    EFECTO_REACCION,
    [
        new NivelEfectoTecnica("+25",1,2,5,1,1),
        new NivelEfectoTecnica("+50",2,4,10,1,1),
        new NivelEfectoTecnica("+75",4,6,15,2,1),
        new NivelEfectoTecnica("+100",6,9,20,3,1),
        new NivelEfectoTecnica("+125",8,11,25,4, 2),
        new NivelEfectoTecnica("+150",10,13,30,5, 2),
        new NivelEfectoTecnica("+175",12,15,35,6, 3),
        new NivelEfectoTecnica("+200",14,18,40,7, 3)
    ],
    AGI,
    new ElementosAfines([ELEMENTO_AIRE]),
    [
        new CaracSecunTecnica(DES, 1),
        new CaracSecunTecnica(POD, 3),
        new CaracSecunTecnica(VOL, 3),
        new CaracSecunTecnica(CON, 2)
    ]
));

arbolesTecnicasMuestra_set.push("Celéritas");
var celeritas = new TecnicaKi(1);
celeritas.setNombre("Excisum Aeris");
celeritas.setArbolTecnicas("Celéritas");
celeritas.costeKi = new CosteKi(4,0,4,0,2,0);
celeritas.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque a distancia"],allEfectosTecnicas["Ataque a distancia"].getNivelesEfecto()[3]));
celeritas.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Incrementar turno"],allEfectosTecnicas["Incrementar turno"].getNivelesEfecto()[1]));

tecnicasMuestra_set.push(celeritas);

celeritas = new TecnicaKi(1);
celeritas.setNombre("Velocitas Ventus");
celeritas.setArbolTecnicas("Celéritas");
celeritas.costeKi = new CosteKi(7,0,7,0,4,0);
celeritas.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque adicional limitado"],allEfectosTecnicas["Ataque adicional limitado"].getNivelesEfecto()[2]));
celeritas.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Incrementar turno"],allEfectosTecnicas["Incrementar turno"].getNivelesEfecto()[1]));

tecnicasMuestra_set.push(celeritas);

celeritas = new TecnicaKi(2);
celeritas.setNombre("Excisum Magister");
celeritas.setArbolTecnicas("Celéritas");
celeritas.costeKi = new CosteKi(8,0,8,0,5,0);
celeritas.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Habilidad de ataque"],allEfectosTecnicas["Habilidad de ataque"].getNivelesEfecto()[4]));
celeritas.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Incrementar turno"],allEfectosTecnicas["Incrementar turno"].getNivelesEfecto()[4]));

tecnicasMuestra_set.push(celeritas);

celeritas = new TecnicaKi(2);
celeritas.setNombre("Magnus Exactor");
celeritas.setArbolTecnicas("Celéritas");
celeritas.costeKi = new CosteKi(7,0,7,0,3,0);
celeritas.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque con área"],allEfectosTecnicas["Ataque con área"].getNivelesEfecto()[2]));
celeritas.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Incrementar turno"],allEfectosTecnicas["Incrementar turno"].getNivelesEfecto()[5]));

tecnicasMuestra_set.push(celeritas);

celeritas = new TecnicaKi(3);
celeritas.setNombre("Summun");
celeritas.setArbolTecnicas("Celéritas");
celeritas.costeKi = new CosteKi(15,0,17,0,8,0);
celeritas.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque adicional limitado"],allEfectosTecnicas["Ataque adicional limitado"].getNivelesEfecto()[6]));
celeritas.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Incrementar turno"],allEfectosTecnicas["Incrementar turno"].getNivelesEfecto()[6]));

tecnicasMuestra_set.push(celeritas);


arbolesTecnicasMuestra_set.push("Ignis");

var desventajaAtaduraElementalFuego = new DesventajaTecnicaElegida(allDesventajasTecnicas["Atadura elemental (1 elemento)"]);
desventajaAtaduraElementalFuego.ataduraElemental = new ElementosAfines([ELEMENTO_FUEGO]);

var ignis = new TecnicaKi(1);
ignis.setNombre("Feuer");
ignis.setArbolTecnicas("Ignis");
ignis.costeKi = new CosteKi(0,0,0,3,1,5);
ignis.costeMantenimiento = new CosteKi(0,0,0,1,0,1);
var efecto = new EfectoTecnicaElegido(allEfectosTecnicas["Aumento de daño"],allEfectosTecnicas["Aumento de daño"].getNivelesEfecto()[1]);
ignis.fijaComoPrimario(efecto);
ignis.setEfectoMantenido(efecto,true);
efecto = new EfectoTecnicaElegido(allEfectosTecnicas["Ataque elemental (Fuego)"],allEfectosTecnicas["Ataque elemental (Fuego)"].getNivelesEfecto()[0]);
ignis.addEfectoSecundario(efecto);
ignis.setEfectoMantenido(efecto,true);

ignis.addDesventaja(desventajaAtaduraElementalFuego);

tecnicasMuestra_set.push(ignis);

ignis = new TecnicaKi(1);
ignis.setNombre("Le Feu");
ignis.setArbolTecnicas("Ignis");
ignis.costeKi = new CosteKi(0,0,3,1,3,5);
ignis.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Habilidad de ataque"],allEfectosTecnicas["Habilidad de ataque"].getNivelesEfecto()[2]));
ignis.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque a distancia"],allEfectosTecnicas["Ataque a distancia"].getNivelesEfecto()[2]));

ignis.addDesventaja(desventajaAtaduraElementalFuego);

tecnicasMuestra_set.push(ignis);

ignis = new TecnicaKi(2);
ignis.setNombre("Horecka");
ignis.setArbolTecnicas("Ignis");
ignis.costeKi = new CosteKi(0,0,6,2,6,10);
ignis.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Multiplicador al daño"],allEfectosTecnicas["Multiplicador al daño"].getNivelesEfecto()[0]));
ignis.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque con área"],allEfectosTecnicas["Ataque con área"].getNivelesEfecto()[4]));

ignis.addDesventaja(desventajaAtaduraElementalFuego);

var desventajaMantenerActivoFeuer = new DesventajaTecnicaElegida(allDesventajasTecnicas["Condición determinada"]);
desventajaMantenerActivoFeuer.descripcion = "Mantener activo Feuer";
desventajaMantenerActivoFeuer.costeCM = -10;

ignis.addDesventaja(desventajaMantenerActivoFeuer);

tecnicasMuestra_set.push(ignis);

ignis = new TecnicaKi(2);
ignis.setNombre("Vatra");
ignis.setArbolTecnicas("Ignis");
ignis.costeKi = new CosteKi(0,3,6,1,6,11);
ignis.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Habilidad de ataque"],allEfectosTecnicas["Habilidad de ataque"].getNivelesEfecto()[4]));
ignis.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Aumento de daño"],allEfectosTecnicas["Aumento de daño"].getNivelesEfecto()[4]));
ignis.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Potenciar crítico"],allEfectosTecnicas["Potenciar crítico"].getNivelesEfecto()[2]));

ignis.addDesventaja(desventajaAtaduraElementalFuego);
ignis.addDesventaja(desventajaMantenerActivoFeuer);

tecnicasMuestra_set.push(ignis);

ignis = new TecnicaKi(3);
ignis.setNombre("Eld");
ignis.setArbolTecnicas("Ignis");
ignis.costeKi = new CosteKi(0,0,10,10,0,19);
var efectoAtaque = new EfectoTecnicaElegido(allEfectosTecnicas["Aumento de daño"],allEfectosTecnicas["Aumento de daño"].getNivelesEfecto()[0]);
efectoAtaque.addVentajaOpcional(new VentajaTecnicaElegida(efectoAtaque.getVentajasOpcionales()[0],efectoAtaque.getVentajasOpcionales()[0].nivelesVentaja[1]));
ignis.fijaComoPrimario(efectoAtaque);

ignis.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Habilidad de ataque"],allEfectosTecnicas["Habilidad de ataque"].getNivelesEfecto()[8]));

ignis.addDesventaja(desventajaAtaduraElementalFuego);
ignis.addDesventaja(desventajaMantenerActivoFeuer);

tecnicasMuestra_set.push(ignis);

arbolesTecnicasMuestra_set.push("El Dragón");

var dragon = new TecnicaKi(1);
dragon.setNombre("Las escamas");
dragon.setArbolTecnicas("El Dragón");
dragon.costeKi = new CosteKi(1,3,3,0,0,0);
dragon.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Defensa adicional"],allEfectosTecnicas["Defensa adicional"].getNivelesEfecto()[4]));

tecnicasMuestra_set.push(dragon);

dragon = new TecnicaKi(1);
dragon.setNombre("Las garras");
dragon.setArbolTecnicas("El Dragón");
dragon.costeKi = new CosteKi(4,4,4,2,0,0);
dragon.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque adicional"],allEfectosTecnicas["Ataque adicional"].getNivelesEfecto()[0]));
dragon.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Aumento de daño"],allEfectosTecnicas["Aumento de daño"].getNivelesEfecto()[2]));

tecnicasMuestra_set.push(dragon);

dragon = new TecnicaKi(2);
dragon.setNombre("El colmillo");
dragon.setArbolTecnicas("El Dragón");
dragon.costeKi = new CosteKi(6,8,5,3,0,0);
dragon.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Destruir armadura"],allEfectosTecnicas["Destruir armadura"].getNivelesEfecto()[5]));
dragon.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Maniobras de combate y apuntar"],allEfectosTecnicas["Maniobras de combate y apuntar"].getNivelesEfecto()[2]));
dragon.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Habilidad de ataque"],allEfectosTecnicas["Habilidad de ataque"].getNivelesEfecto()[3]));

tecnicasMuestra_set.push(dragon);

dragon = new TecnicaKi(2);
dragon.setNombre("La cola");
dragon.setArbolTecnicas("El Dragón");
dragon.costeKi = new CosteKi(6,8,6,2,0,0);
dragon.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Habilidad de ataque"],allEfectosTecnicas["Habilidad de ataque"].getNivelesEfecto()[2]));
dragon.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque con área"],allEfectosTecnicas["Ataque con área"].getNivelesEfecto()[3]));
dragon.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Proyección"],allEfectosTecnicas["Proyección"].getNivelesEfecto()[6]));

tecnicasMuestra_set.push(dragon);

dragon = new TecnicaKi(3);
dragon.setNombre("El aliento del Dragón");
dragon.setArbolTecnicas("El Dragón");
dragon.costeKi = new CosteKi(10,10,10,15,6,0);
dragon.fijaComoPrimario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque a distancia"],allEfectosTecnicas["Ataque a distancia"].getNivelesEfecto()[7]));
dragon.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque con área"],allEfectosTecnicas["Ataque con área"].getNivelesEfecto()[5]));
dragon.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Ataque capaz de dañar energía"],allEfectosTecnicas["Ataque capaz de dañar energía"].getNivelesEfecto()[0]));
dragon.addEfectoSecundario(new EfectoTecnicaElegido(allEfectosTecnicas["Multiplicador al daño"],allEfectosTecnicas["Multiplicador al daño"].getNivelesEfecto()[0]));

var desventajaPredeterminacion = allDesventajasTecnicas["Predeterminación"];
dragon.addDesventaja(new DesventajaTecnicaElegida(desventajaPredeterminacion));

tecnicasMuestra_set.push(dragon);


/**
 *
 * @class Ventaja
 * @param {string} nombre El nombre de la ventaja
 * @param {string} descripcion La descripción de la ventaja.
 * @param {string} descripcionEfecto La descripción del efecto mecánico de la ventaja.
 * @param {string} repetible Tipo de repetible
 * @param {number[]} coste Array de costes posibles en PC.
 * @param {ElementoProhibido[]} incompatibles Array con Ventajas incompatibles con ésta.
 * @param {boolean} anulable Una vez comprada, puede darse marcha atrás y devolverla.
 * @param {string[]} elegir Array de listas de opciones a especificar
 * @param {function[]} delegadoVentaja objeto de tipo DelegadoVentaja
 * @constructor
 * @param {string} grupo
 * @param {string[]} [flagsNecesarios]
 */
function Ventaja(nombre, descripcion, descripcionEfecto, repetible, coste, incompatibles, anulable, elegir, delegadoVentaja, grupo, flagsNecesarios) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {string}
     */
    this.descripcion = descripcion;

    /**
     *
     * @type {string}
     */
    this.descripcionEfecto = descripcionEfecto;

    /**
     *
     * @type {string}
     */
    this.repetible = repetible;

    /**
     *
     * @type {number[]}
     */
    this.costes = coste;

    /**
     *
     * @type {ElementoProhibido[]}
     */
    this.incompatibles = incompatibles;

    /**
     *
     * @type {boolean}
     */
    this.anulable = anulable;

    /**
     *
     * @type {string[]}
     */
    this.elegir = elegir;

    /**
     *
     * @type {string[]}
     */
    this.flagsNecesarios = flagsNecesarios || [];

    /**
     *
     * @type {string}
     */
    this.grupo = grupo;

    /**
     *
     * @type {function[]}
     */
    this.delegadoVentaja = delegadoVentaja;

    /**
     *
     * @type {boolean}
     */
    this.isBasica = false;
}

Ventaja.prototype = {
    constructor : Ventaja,

    toString : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcionEfecto : function() {
        return this.descripcionEfecto;
    },

    /**
     *
     * @returns {string}
     */
    getRepetible : function() {
        return this.repetible;
    },

    /**
     *
     * @returns {number[]}
     */
    getCostes : function() {
        return this.costes;
    },

    /**
     *
     * @returns {ElementoProhibido[]}
     */
    getIncompatibles : function() {
        return this.incompatibles;
    },

    /**
     *
     * @returns {boolean}
     */
    isAnulable : function() {
        return this.anulable;
    },

    /**
     *
     * @returns {string[]}
     */
    getElegir : function() {
        return this.elegir;
    },

    /**
     *
     * @returns {string[]}
     */
    getFlagsNecesarios : function() {
        return this.flagsNecesarios;
    },

    /**
     *
     * @returns {string}
     */
    getGrupo : function() {
        return this.grupo;
    },

    /**
     *
     * @returns {Function[]}
     */
    getDelegadoVentaja : function() {
        return this.delegadoVentaja;
    },

    toJSON : function() {
        return this.nombre;
    }
};

/**
 *
 * @class RepartoCostes
 * @constructor
 */
function RepartoCostes() {
    /**
     *
     * @type {number}
     */
    this.libres = 0;

    /**
     *
     * @type {number}
     */
    this.don = 0;

    /**
     *
     * @type {number}
     */
    this.psiquica = 0;
}

RepartoCostes.prototype = {
    constructor : RepartoCostes,

    /**
     *
     * @param {string} atributo
     * @param {number} valor
     */
    setValor : function(atributo, valor) {
        this[atributo] = valor;
    },

    /**
     *
     * @returns {number}
     */
    getLibres : function() {
        return this.libres;
    },

    /**
     *
     * @param {number} valor
     */
    setLibres : function(valor) {
        this.libres = valor;
    },

    /**
     *
     * @returns {number}
     */
    getDon : function() {
        return this.don;
    },

    /**
     *
     * @param {number} valor
     */
    setDon : function(valor) {
        this.don = valor;
    },

    /**
     *
     * @returns {number}
     */
    getPsiquica : function() {
        return this.psiquica;
    },

    /**
     *
     * @param {number} valor
     */
    setPsiquica : function(valor) {
        this.psiquica = valor;
    }
};

//region ElementoPCComprado
/**
 *
 * @class ElementoPCComprado
 * @param {Ventaja} elementoPC
 * @param {number}pc
 * @param {string} opcion
 * @param {string} origen
 * @constructor
 */
function ElementoPCComprado(elementoPC, pc, opcion, origen) {
    /** @type Ventaja */
    this.ventaja = elementoPC;

    /** @type number */
    this.pc = pc;

    /** @type string */
    this.opcion = opcion;

    /** @type string */
    this.origen = origen;

    /** @type RepartoCostes */
    this.repartoCostes = new RepartoCostes();

    /** @type boolean */
    this.anulable = elementoPC.isAnulable();
}

ElementoPCComprado.prototype = {
    constructor : ElementoPCComprado,


    toString : function() {
        return this.ventaja.toString() + " (" + this.pc + " PC)";
    },

    /**
     *
     * @returns {Ventaja}
     */
    getVentaja : function() {
        return this.ventaja;
    },

    /**
     *
     * @returns {number}
     */
    getPc : function() {
        return this.pc;
    },

    /**
     *
     * @returns {string}
     */
    getOpcion : function() {
        return this.opcion;
    },

    /**
     *
     * @returns {string}
     */
    getOrigen : function() {
        return this.origen;
    },

    /**
     *
     * @returns {RepartoCostes}
     */
    getRepartoCostes : function() {
        return this.repartoCostes;
    },

    /**
     *
     * @param {RepartoCostes} valor
     */
    setRepartoCostes : function(valor) {
        this.repartoCostes = valor;
    },

    /**
     *
     * @returns {boolean}
     */
    isAnulable : function() {
        return this.anulable;
    },

    /**
     * @param {boolean} valor
     */
    setAnulable : function(valor) {
        this.anulable = valor;
    }
};
//endregion ElementoPCComprado

/**
 *
 * @type {Ventaja[]}
 */
var ventajas_set = [];

/**
 *
 * @type {Ventaja[]}
 */
var desventajas_set = [];

/**
 *
 * @type {{}}
 */
var elementosPuntosCreacion = {};

var ERR_VENTAJA_ERRONEA = "Error: Nombre de ventaja erróneo";

var VENTAJA = "Ventaja";

var REPETIBLE_TOTAL = "Totalmente repetible";
var REPETIBLE_OPCIONES = "Repetible eligiendo otras opciones";
var NO_REPETIBLE = "No repetible";
var NO_COMPRABLE = "No comprable con PC";

var LISTA_CARACTERISTICAS = "Especificar Característica";
var LISTA_TIPOS_SECUNDARIAS = "Especificar Tipo de habilidad secundaria";
var LISTA_HABILIDADES_SECUNDARIAS = "Especioficar habilidad secundaria";
var LISTA_DISCIPLINAS_PSIQUICAS = "Especificar disciplina psíquica";
var LISTA_AJUSTE_TAMAÑO = "Especificar ajuste tamaño";
var LISTA_DESCRIPCION = "Especificar una descripción";
var LISTA_PODER_PSIQUICO ="Especificar un poder psiquico";
var LISTA_SHAJADS_BERYLS = "Especificar Shajad o Beryl";
var LISTA_VIAS_MAGIA = "Especificar vía de magia";
var LISTA_DESEQUILIBRIO_SEPHIROTICO = "Especificar desequilibrio sephirotico";
var LISTA_INTRODUCCION_USUARIO = "Introducir detalles";
var ELEGIR_POD_VOL = "Elegir Poder o Voluntad";
var ELEGIR_REPARTO_5_INT_POD_VOL = "Repartir 5 puntos entre INT, VOL y POD";
var LISTA_HABILIDAD_COMBATE = "Elegir ataque, parada o esquiva";


var ORIGEN_RAZA = "por raza";
var ORIGEN_PC = "por PC";
var ORIGEN_ELAN = "por Elan";

var GRUPO_CARACTERISTICAS = "Ventajas de Características";
var GRUPO_RESISTENCIAS = "Ventajas de Resistencias";
var GRUPO_CAPACIDADES = "Ventajas de otras Capacidades";
var GRUPO_DON = "Ventajas del Don";
var GRUPO_PSIQUICAS = "Ventajas Psíquicas";
var GRUPO_KI = "Ventajas del Ki";
var GRUPO_OTRAS = "Otras Ventajas";
var GRUPO_RAZAS = "Ventajas de Raza";
var GRUPO_SECUNDARIAS = "Ventajas de Habilidades Secundarias";
var GRUPO_ELAN = "Ventajas de Elan";

/**
 *
 * @type {string[]}
 */
var categoriasDeVentajasComprables = [
    GRUPO_CARACTERISTICAS,
    GRUPO_RESISTENCIAS,
    GRUPO_CAPACIDADES,
    GRUPO_SECUNDARIAS,
    GRUPO_KI,
    GRUPO_DON,
    GRUPO_PSIQUICAS,
    GRUPO_OTRAS
];

/**
 *
 * @param {Ventaja} ventaja
 */
function addVentaja(ventaja) {
    ventajas_set.push(ventaja);
    elementosPuntosCreacion[ventaja.getNombre()] = ventaja;
}

/**
 *
 * @param {Ventaja} desventaja
 */
function addDesventaja(desventaja) {
    desventajas_set.push(desventaja);
    elementosPuntosCreacion[desventaja.getNombre()] = desventaja;
}

/**
 *
 * @param a
 * @param b
 * @returns {number}
 * @constructor
 */
function SortVentajaComprada(a, b){
    return SortPorAtributoNombre(a.ventaja, b.ventaja);
}

/**
 *
 */
function initVentajas() {
    ventajas_set.sort(SortPorAtributoNombre);
    desventajas_set.sort(SortPorAtributoNombre);

}

/**
 *
 * @param {string} nombre
 * @returns {Ventaja}
 * @throws ERR_VENTAJA_ERRONEA
 */
function getVentaja(nombre) {
    if (elementosPuntosCreacion[nombre] != undefined) {
        return elementosPuntosCreacion[nombre];
    }

    for (var i = 0; i < ventajas_set.length;i++) {
        if (ventajas_set[i].getNombre() == nombre) {
            return ventajas_set[i];
        }
    }

    for (i = 0; i < desventajas_set.length;i++) {
        if (desventajas_set[i].getNombre() == nombre) {
            return desventajas_set[i];
        }
    }

    throw ERR_VENTAJA_ERRONEA;
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 * @param {string} caracteristica
 * @param {number} valor
 */
function aumentaCaracteristica(coste, opcion, aplicar, caracteristica, valor) {
    if (aplicar) {
        asignarNuevoValorCaracteristica(caracteristica, {valor:personaje_actual.getCaracteristica(caracteristica)+valor});
    } else {
        asignarNuevoValorCaracteristica(caracteristica, {valor:personaje_actual.getCaracteristica(caracteristica)-valor});
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 * @param {number} valor
 */
function aumentaTamaño(coste, opcion, aplicar, valor) {
    if (aplicar) {
        personaje_actual.addTamaño(valor);
    } else {
        personaje_actual.addTamaño(-1*valor);
    }
    
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 * @param {string} resistencia
 * @param {number} valor
 * @param {string} origen
 */
function aumentaResistencia(coste, opcion, aplicar, resistencia, valor, origen) {
    var bono = new Bono(BONO_RESISTENCIA,resistencia,valor,"",false,BONO_INNATO,origen);
    if (aplicar) {
        personaje_actual.addBono(bono, false, true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 * @param {number} valor
 */
function aumentaCansancio(coste, opcion, aplicar, valor) {
    if (aplicar) {
        personaje_actual.addPuntosCansancio(valor);
    } else {
        personaje_actual.addPuntosCansancio(-1 * valor);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 * @param {number} valor
 * @param {string} origen
 */
function aumentaRegeneracion(coste, opcion, aplicar, valor, origen) {
    var bono = new Bono(BONO_REGENERACION,BONO_REGENERACION,valor,"",false,BONO_ESPECIAL, origen);
    if (aplicar) {
        personaje_actual.addBono(bono,false,true);
        lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES)
    }else {
        personaje_actual.removeBono(bono,true);
        lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES)
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function indetectabilidadNephilimDanjayni(coste, opcion, aplicar) {
    var bono = new Bono(BONO_KI,HAB_KI_OCULTACION_KI,30,"",false,BONO_ESPECIAL,RAZA_NEPH_DANJAYNI);
    if (aplicar) {
        personaje_actual.addHabilidadKi(HAB_KI_OCULTACION_KI, true, false);
        personaje_actual.addBono(bono,false,true);
    } else {
        personaje_actual.removeHabilidadKi(HAB_KI_OCULTACION_KI);
        personaje_actual.removeBono(bono,true);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function indetectabilidadDanjayni(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.addHabilidadKi(HAB_KI_OCULTACION_KI, true, false);
    } else {
        personaje_actual.removeHabilidadKi(HAB_KI_OCULTACION_KI);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function alasSerafinEbudan(coste, opcion, aplicar) {
    if (aplicar) {
        //TODO añadir alas como arma
        //TODO añadir tipo de movimiento volando 12
    } else {

    }
}


/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function armasJayan(coste, opcion, aplicar) {
    //TODO otorgar armas naturales segun tabla 82
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function debilidadJayan(coste, opcion, aplicar) {
    aumentaResistencia(0,0,aplicar,RM,-20,RAZA_JAYAN);
    aumentaCaracteristica(0,0,aplicar,POD,-1);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function cuerpoDaimah(coste, opcion, aplicar) {
    aumentaCaracteristica(0,0,aplicar,AGI,1);
    aumentaCaracteristica(0,0,aplicar,DES,1);
    aumentaCaracteristica(0,0,aplicar,CON,-1);
    aumentaCaracteristica(0,0,aplicar,VOL,-1);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function perfeccionDukZarist(coste, opcion, aplicar) {
    aumentaCaracteristica(0,0,aplicar,AGI,1);
    aumentaCaracteristica(0,0,aplicar,DES,1);
    aumentaCaracteristica(0,0,aplicar,CON,1);
    aumentaCaracteristica(0,0,aplicar,FUE,1);
    aumentaCaracteristica(0,0,aplicar,INT,1);
    aumentaCaracteristica(0,0,aplicar,PER,1);
    aumentaCaracteristica(0,0,aplicar,POD,1);
    aumentaCaracteristica(0,0,aplicar,VOL,1);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function giganteNephilimJayan(coste, opcion, aplicar) {
    aumentaTamaño(0,0,aplicar,2);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function giganteJayan(coste, opcion, aplicar) {
    aumentaTamaño(0,0,aplicar,2);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function fisicoJayan(coste, opcion, aplicar) {
    aumentaCaracteristica(0,0,aplicar,FUE,2);
    aumentaCaracteristica(0,0,aplicar,CON,1);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function resistenciasExcepcionalesNephilimSylvain(coste, opcion,aplicar) {
    aumentaResistencia(0,0,aplicar,RM,10, RAZA_NEPH_SYLVAIN);
    aumentaResistencia(0,0,aplicar,RP,10, RAZA_NEPH_SYLVAIN);
    aumentaResistencia(0,0,aplicar,RE,20, RAZA_NEPH_SYLVAIN);
    aumentaResistencia(0,0,aplicar,RF,5, RAZA_NEPH_SYLVAIN);
    aumentaResistencia(0,0,aplicar,RV,5, RAZA_NEPH_SYLVAIN);
}

function resistenciasAnimicasExcepcionalesSylvain(coste, opcion, aplicar) {
    aumentaResistencia(0,0,aplicar,RM,30, RAZA_SYLVAIN);
    aumentaResistencia(0,0,aplicar,RP,30, RAZA_SYLVAIN);
}

function inmunidadEnfermedadesVenenosSylvain(coste, opcion, aplicar) {
    aumentaResistencia(0,0,aplicar,RE,20, RAZA_SYLVAIN);
    aumentaResistencia(0,0,aplicar,RV,10, RAZA_SYLVAIN);
}

function caracteristicasSobrehumanasSylvain(coste, opcion, aplicar) {
    aumentaCaracteristica(coste,opcion,aplicar,DES,1);
    aumentaCaracteristica(coste,opcion,aplicar,AGI,1);
    aumentaCaracteristica(coste,opcion,aplicar,POD,1);
    aumentaCaracteristica(coste,opcion,aplicar,INT,1);
    aumentaCaracteristica(coste,opcion,aplicar,FUE,-1);
    aumentaCaracteristica(coste,opcion,aplicar,CON,-1);
}

function obligadoComprarDon(coste, opcion, aplicar) {
    if (aplicar) {
        aplicarVentajaFinal(getVentaja("Don"),2,""); //TODO si no tiene suficientes PC tendrá que limpiar sus ventajas
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function aparienciaNephilimDanjayni(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual._aparienciaDanjayni = personaje_actual.apariencia;
        if (personaje_actual.getApariencia() < 3) {
            personaje_actual.setApariencia(3);
        } else if (personaje_actual.getApariencia() > 7) {
            personaje_actual.setApariencia(7);
        }
    } else {
        personaje_actual.setApariencia(personaje_actual._aparienciaDanjayni);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function aspectoDesagradable(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual._aspectoDesagradable = personaje_actual.apariencia;
        personaje_actual.setApariencia(2);
    } else {
        personaje_actual.setApariencia(personaje_actual._aspectoDesagradable);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function resistenciasNephilimDukZarist(coste, opcion, aplicar) {
    desactivarNotificaciones();
    if (aplicar) {
        if (personaje_actual.getSexo() == SEXO_HOMBRE) {
            aumentaResistencia(0,0, aplicar,RF,20, RAZA_NEPH_DUKZARIST);
            aumentaResistencia(0,0, aplicar,RM,15, RAZA_NEPH_DUKZARIST);
        } else {
            aumentaResistencia(0,0, aplicar,RF,15, RAZA_NEPH_DUKZARIST);
            aumentaResistencia(0,0, aplicar,RM,20, RAZA_NEPH_DUKZARIST);
        }
    } else {
        aumentaResistencia(0,0, aplicar,RF,20, RAZA_NEPH_DUKZARIST);
        aumentaResistencia(0,0, aplicar,RM,15, RAZA_NEPH_DUKZARIST);
        aumentaResistencia(0,0, aplicar,RF,15, RAZA_NEPH_DUKZARIST);
        aumentaResistencia(0,0, aplicar,RM,20, RAZA_NEPH_DUKZARIST);
    }
    aumentaResistencia(0,0, aplicar,RP,15, RAZA_NEPH_DUKZARIST);
    aumentaResistencia(0,0, aplicar,RE,15, RAZA_NEPH_DUKZARIST);
    aumentaResistencia(0,0, aplicar,RV,15, RAZA_NEPH_DUKZARIST);
    activarNotificaciones();
    lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
}


/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function resistenciasDukZarist(coste, opcion, aplicar) {
    desactivarNotificaciones();
    if (aplicar) {
        if (personaje_actual.getSexo() == SEXO_HOMBRE) {
            aumentaResistencia(0,0, aplicar,RF,20, RAZA_DUKZARIST);
            aumentaResistencia(0,0, aplicar,RM,15, RAZA_DUKZARIST);
        } else {
            aumentaResistencia(0,0, aplicar,RF,15, RAZA_DUKZARIST);
            aumentaResistencia(0,0, aplicar,RM,20, RAZA_DUKZARIST);
        }
    } else {
        aumentaResistencia(0,0, aplicar,RF,20, RAZA_DUKZARIST);
        aumentaResistencia(0,0, aplicar,RM,15, RAZA_DUKZARIST);
        aumentaResistencia(0,0, aplicar,RF,15, RAZA_DUKZARIST);
        aumentaResistencia(0,0, aplicar,RM,20, RAZA_DUKZARIST);
    }
    aumentaResistencia(0,0, aplicar,RP,15, RAZA_DUKZARIST);
    aumentaResistencia(0,0, aplicar,RE,15, RAZA_DUKZARIST);
    aumentaResistencia(0,0, aplicar,RV,15, RAZA_DUKZARIST);
    activarNotificaciones();
    lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function fuegoNephilimDukZarist(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_PRIMERA_DISCIPLINA_OBLIGATORIA);
        personaje_actual.disciplinaObligada = DISCIPLINA_PIROQUINESIS;
    } else {
        personaje_actual.removeFlag(FLAG_PRIMERA_DISCIPLINA_OBLIGATORIA);
        delete personaje_actual.disciplinaObligada;
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function obligacionDukZarist(coste, opcion, aplicar) {
    if (aplicar) {
        //TODO debe desarrollar don o acceso psíquico
        personaje_actual.setFlag(FLAG_PRIMERA_DISCIPLINA_OBLIGATORIA);
        personaje_actual.disciplinaObligada = DISCIPLINA_PIROQUINESIS;
    } else {
        personaje_actual.removeFlag(FLAG_PRIMERA_DISCIPLINA_OBLIGATORIA);
        delete personaje_actual.disciplinaObligada;
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function repetirUnaTirada(coste, opcion, aplicar) {
    var nuevaTirada = d10();
    var minCaracteristica = 100;
    for (var i = 0; i < CARACTERISTICAS_NOMBRES.length; i++) {
        if (minCaracteristica > personaje_actual.getCaracteristica(CARACTERISTICAS_NOMBRES[i])) {
            minCaracteristica = personaje_actual.getCaracteristica(CARACTERISTICAS_NOMBRES[i]);
        }
    }

    var div = $("<div></div>");

    div.append("Resultado de la tirada: " + nuevaTirada);
    if (nuevaTirada < minCaracteristica) {
        nuevaTirada = minCaracteristica;
        div.append("<br>Ajustado al mínimo del personaje: " + nuevaTirada);
    }
    div.append("<br>");

    muestraDialogoElegirCaracteristica(asignarNuevoValorCaracteristica,{valor:nuevaTirada},div);
}

/**
 *
 * @param {string} caracteristica
 * @param {{}} parametros
 */
function asignarNuevoValorCaracteristica(caracteristica,parametros) {
    personaje_actual.setCaracteristica(caracteristica,parametros.valor);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function sumarUnoAUnaCaracteristica(coste, opcion, aplicar) {
    if (aplicar) {
        asignarNuevoValorCaracteristica(opcion,{valor:personaje_actual.getCaracteristica(opcion)+1});
    } else {
        asignarNuevoValorCaracteristica(opcion,{valor:personaje_actual.getCaracteristica(opcion)-1});
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function restarDosAUnaCaracteristica(coste, opcion, aplicar) {
    if (aplicar) {
        asignarNuevoValorCaracteristica(opcion,{valor:personaje_actual.getCaracteristica(opcion)-2});
    } else {
        asignarNuevoValorCaracteristica(opcion,{valor:personaje_actual.getCaracteristica(opcion)+2});
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function saludEnfermiza(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_RE_A_MITAD);
    } else {
        personaje_actual.removeFlag(FLAG_RE_A_MITAD);
    }
    lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function vulnerabilidadMagia(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_RM_A_MITAD);
    } else {
        personaje_actual.removeFlag(FLAG_RM_A_MITAD);
    }
    lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function debilidadFisica(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_RF_A_MITAD);
    } else {
        personaje_actual.removeFlag(FLAG_RF_A_MITAD);
    }
    lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function vulnerabilidadVenenos(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_RV_A_MITAD);
    } else {
        personaje_actual.removeFlag(FLAG_RV_A_MITAD);
    }
    lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function cambiarUnaCaracteristicaPorNueve(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual["_cambiarPorNueve"+opcion] = personaje_actual.getCaracteristica(opcion);
        asignarNuevoValorCaracteristica(opcion,{valor:9});
    } else {
        asignarNuevoValorCaracteristica(opcion,{valor:personaje_actual["_cambiarPorNueve"+opcion]});
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function resistenciaFisicaExcepcional(coste, opcion, aplicar) {
    desactivarNotificaciones();
    aumentaResistencia(0,0, aplicar,RF,25*coste, "Resistencia física excepcional");
    aumentaResistencia(0,0, aplicar,RE,25*coste, "Resistencia física excepcional");
    aumentaResistencia(0,0, aplicar,RV,25*coste, "Resistencia física excepcional");
    activarNotificaciones();
    lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function resistenciaMagicaExcepcional(coste, opcion, aplicar) {
    aumentaResistencia(0,0, aplicar,RM,25*coste, "Resistencia mágica excepcional");
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function resistenciaPsiquicaExcepcional(coste, opcion, aplicar) {
    aumentaResistencia(0,0, aplicar,RP,25*coste, "Resistencia psíquica excepcional");
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function accesoPsiquicoBasico(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.addAccesoDisciplina(opcion);
        personaje_actual.setFlag(FLAG_PSIQUICO);
    } else {
        var accesoLimpio = [];
        var accesoActual = personaje_actual.getAccesoDisciplinas();
        for (var i = 0; i < accesoActual.length;i++) {
            if (accesoActual[i] != opcion) {
                accesoLimpio.push(personaje_actual.addAccesoDisciplina(accesoActual[i]));
            }
        }
        personaje_actual.setAccesoDisciplinas(accesoLimpio);
        personaje_actual.removeFlag(FLAG_PSIQUICO);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function accesoPsiquicoCompleto(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_ACCESO_TODAS_DISCIPLINAS);
        personaje_actual.setFlag(FLAG_PSIQUICO);
    } else {
        personaje_actual.removeFlag(FLAG_ACCESO_TODAS_DISCIPLINAS);
        personaje_actual.removeFlag(FLAG_PSIQUICO);
    }
    lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function fondosIniciales(coste, opcion, aplicar) {
    var mo = 0;
    if (coste == 1) {
        mo = 2000;
    } else if (coste == 2) {
        mo = 5000;
    } else if (coste == 3) {
        mo = 10000;
    }
    if (aplicar) {
        personaje_actual.addOro(mo);
    } else {
        personaje_actual.addOro(-1 * mo); //TODO ¿y si se ha gastado?
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function aptoEnUnCampo(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.addCosteReducido(new Coste(opcion, 1, false, UDS_PD));
    } else {
        personaje_actual.removeCosteReducido(opcion,1);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function aptoEnUnaMateria(coste, opcion,aplicar) {
    if (aplicar) {
        personaje_actual.addCosteReducido(new Coste(opcion, coste, false, UDS_PD));
    } else {
        personaje_actual.removeCosteReducido(opcion,coste);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function sentidosAgudos(coste, opcion,aplicar) {
    var bonoA = new Bono(BONO_HABILIDAD,HB_ADVERTIR,50,"",false,BONO_ESPECIAL,"Sentidos Agudos");
    var bonoB = new Bono(BONO_HABILIDAD,HB_BUSCAR,50,"",false,BONO_ESPECIAL,"Sentidos Agudos");

    desactivarNotificaciones();
    if (aplicar) {
        personaje_actual.addBono(bonoA,false,false);
        personaje_actual.addBono(bonoB,false,false);
    } else {
        personaje_actual.removeBono(bonoA, true);
        personaje_actual.removeBono(bonoB, true);
    }
    activarNotificaciones();
    lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function don(coste, opcion,aplicar) {
    aumentaResistencia(0,0,aplicar,RM,10, "Don");
    verLoSobrenatural(coste,opcion,aplicar);
    if (aplicar) {
        personaje_actual.setFlag(FLAG_DON);
    } else {
        personaje_actual.removeFlag(FLAG_DON);
    }
    lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA)
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function verLoSobrenatural(coste, opcion,aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_DESARROLLAR_VALORACION_MAGICA);
    } else {
        personaje_actual.removeFlag(FLAG_DESARROLLAR_VALORACION_MAGICA);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function aprendizajeInnato(coste, opcion,aplicar) {
    var bono = new Bono(BONO_HABILIDAD,opcion,10*coste,"",true,BONO_CATEGORIA,"Aprendizaje Innato");
    if (aplicar) {
        personaje_actual.addBono(bono,false, true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function aprendizajeInnatoCampo(coste, opcion,aplicar) {
    var valorBono = 0;
    if (coste == 2) {
        valorBono = 5;
    } else {
        valorBono = 10;
    }

    var bono = new Bono(BONO_HABILIDAD,opcion,valorBono,"",true,BONO_CATEGORIA,"Aprendizaje Innato en un campo");
    if (aplicar) {
        personaje_actual.addBono(bono,false,true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function conocedorTodasMaterias(coste, opcion,aplicar) {
    var i;
    var grupoHab;
    var habi;

    if (aplicar) {
        personaje_actual.setFlag(FLAG_CONOCEDOR_TODAS_MATERIAS);
        for ( i = 0; i < habilidades_secundarias.length;i++) {
            grupoHab = habilidades_secundarias[i];
            for (var j= 0;j<grupoHab.length;j++) {
                habi = getHabilidad(grupoHab[j]);
                personaje_actual.addBono(new Bono(BONO_HABILIDAD,habi.getNombre(),10,"",false,BONO_ESPECIAL,"Conocedor de Todas las Materias"),false,false);
            }
        }
    } else {
        personaje_actual.removeFlag(FLAG_CONOCEDOR_TODAS_MATERIAS);
        for ( i = 0; i < habilidades_secundarias.length;i++) {
            grupoHab = habilidades_secundarias[i];
            for (var j= 0;j<grupoHab.length;j++) {
                habi = getHabilidad(grupoHab[j]);
                personaje_actual.removeBono(new Bono(BONO_HABILIDAD, habi.getNombre(), 10, "", false, BONO_ESPECIAL, "Conocedor de Todas las Materias"), false);
            }
        }
    }

    lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function reflejosRapidos(coste, opcion,aplicar) {
    var valorBono = 0;
    if (coste == 1) {
        valorBono = 25;
    } else if (coste == 2) {
        valorBono = 45;
    } else {
        valorBono = 60;
    }

    var bono = new Bono(BONO_TURNO,BONO_TURNO,valorBono,"",false,BONO_ESPECIAL,"Reflejos rápidos");
    if (aplicar) {
        personaje_actual.addBono(bono,false,true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function reaccionLenta(coste, opcion,aplicar) {
    var valorBono = 30*coste;

    var bono = new Bono(BONO_TURNO,BONO_TURNO,valorBono,"",false,BONO_ESPECIAL,"Reacción lenta");
    if (aplicar) {
        personaje_actual.addBono(bono,false,true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function ajusteTamaño(coste, opcion,aplicar) {
    aumentaTamaño(coste,opcion,aplicar,parseInt(opcion));
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function armaduraNatural(coste, opcion,aplicar) {
    if (aplicar) {
        personaje_actual.setArmaduraNatural(sumarArmadura(personaje_actual.getArmaduraNatural(),[2,2,2,2,2,2,0]));
    } else {
        personaje_actual.setArmaduraNatural(sumarArmadura(personaje_actual.getArmaduraNatural(),[-2,-2,-2,-2,-2,-2,0]));
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function armaduraMistica(coste, opcion,aplicar) {
    if (aplicar) {
        personaje_actual.setArmaduraNatural(sumarArmadura(personaje_actual.getArmaduraNatural(),[0,0,0,0,0,0,4]));
    } else {
        personaje_actual.setArmaduraNatural(sumarArmadura(personaje_actual.getArmaduraNatural(),[0,0,0,0,0,0,-4]));
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function maestroMarcial(coste, opcion,aplicar) {
    var bono = new Bono(BONO_CM,BONO_CM,40*coste,"",false,BONO_ESPECIAL,"Maestro Marcial");
    if (aplicar) {
        personaje_actual.addBono(bono,false,true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function infatigable(coste, opcion,aplicar) {
    aumentaCansancio(coste,opcion,aplicar,3*coste);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function exhausto(coste, opcion, aplicar) {
    aumentaCansancio(coste,opcion,aplicar,-1);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function curtido(coste, opcion,aplicar) {
    if (aplicar) {
        personaje_actual.addPX(50*coste);
    } else {
        personaje_actual.addPX(-50*coste);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function elan(coste, opcion,aplicar) {
    var valorElan = 0;

    if (coste == 1) {
        valorElan = 20;
    } else if (coste == 2) {
        valorElan = 40;
    } else {
        valorElan = 50;
    }
    if (aplicar) {
        personaje_actual.addElan(new Elan(opcion,valorElan));
    } else {
        personaje_actual.removeElan(opcion);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function aptoDesarrolloMagia(coste, opcion,aplicar) {
    var bono = new Bono(BONO_INT_APRENDER_CONJURO,BONO_INT_APRENDER_CONJURO,3,"",false,BONO_ESPECIAL,"Apto para el desarrollo de la magia");
    if (aplicar) {
        personaje_actual.addBono(bono,false,true);
    } else {
        personaje_actual.removeBono(bono,true);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function magiaInnataMejorada(coste, opcion,aplicar) {
    var bono = new Bono(BONO_MAGIA_INNATA,BONO_MAGIA_INNATA,10*coste,"",false,BONO_ESPECIAL,"Magia innata mejorada");
    if (aplicar) {
        personaje_actual.addBono(bono,false,true);
    } else {
        personaje_actual.removeBono(bono,true);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function conocimientoNaturalVia(coste, opcion,aplicar) {
    if (aplicar) {
        personaje_actual.addNivelVia(opcion,40);
    } else {
        personaje_actual.addNivelVia(opcion,-40);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function lazoExistencial(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_LAZO_EXISTENCIAL);
    } else {
        personaje_actual.removeFlag(FLAG_LAZO_EXISTENCIAL);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function resistenciaCelestialElan(coste, opcion, aplicar) {
    var bonoRF = new Bono(BONO_RESISTENCIA,RF,Math.floor(personaje_actual.getSincronizacionElan(BERYL_MIKAEL)/2),"",false,BONO_ESPECIAL,ELAN_MIKAEL_RESISTENCIA_CELESTIAL);
    var bonoRE = new Bono(BONO_RESISTENCIA,RE,Math.floor(personaje_actual.getSincronizacionElan(BERYL_MIKAEL)/2),"",false,BONO_ESPECIAL,ELAN_MIKAEL_RESISTENCIA_CELESTIAL);
    var bonoRV = new Bono(BONO_RESISTENCIA,RV,Math.floor(personaje_actual.getSincronizacionElan(BERYL_MIKAEL)/2),"",false,BONO_ESPECIAL,ELAN_MIKAEL_RESISTENCIA_CELESTIAL);
    var bonoRM = new Bono(BONO_RESISTENCIA,RM,Math.floor(personaje_actual.getSincronizacionElan(BERYL_MIKAEL)/2),"",false,BONO_ESPECIAL,ELAN_MIKAEL_RESISTENCIA_CELESTIAL);
    var bonoRP = new Bono(BONO_RESISTENCIA,RP,Math.floor(personaje_actual.getSincronizacionElan(BERYL_MIKAEL)/2),"",false,BONO_ESPECIAL,ELAN_MIKAEL_RESISTENCIA_CELESTIAL);
    if (aplicar) {
        personaje_actual.addBono(bonoRF,true,true);
        personaje_actual.addBono(bonoRE,true,true);
        personaje_actual.addBono(bonoRV,true,true);
        personaje_actual.addBono(bonoRM,true,true);
        personaje_actual.addBono(bonoRP,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:resistenciaCelestialElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bonoRF,true);
        personaje_actual.removeBono(bonoRE,true);
        personaje_actual.removeBono(bonoRV,true);
        personaje_actual.removeBono(bonoRM,true);
        personaje_actual.removeBono(bonoRP,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:resistenciaCelestialElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {{}} event
 */
function actualizaVentajaDependienteElan(event) {
    event.data.callback(0,"",true);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function liderElan(coste, opcion, aplicar) {
    var bono = new Bono(BONO_HABILIDAD,HB_LIDERAZGO,Math.floor(personaje_actual.getSincronizacionElan(BERYL_AZRAEL)),"",false,BONO_ESPECIAL,ELAN_AZRAEL_LIDER);
    if (aplicar) {
        personaje_actual.addBono(bono,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:liderElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bono,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:liderElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function valorHeroesElan(coste, opcion, aplicar) {
    var bono = new Bono(BONO_HABILIDAD,HB_FRIALDAD,Math.floor(personaje_actual.getSincronizacionElan(BERYL_AZRAEL)),"",false,BONO_ESPECIAL,ELAN_AZRAEL_VALOR_HEROES);
    if (aplicar) {
        personaje_actual.addBono(bono,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:valorHeroesElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bono,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:valorHeroesElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function guerreroAzraelElan(coste, opcion, aplicar) {
    aumentaCaracteristica(coste, opcion, aplicar, FUE, 1);
    aumentaCaracteristica(coste, opcion, aplicar, DES, 1);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function esteticaElan(coste, opcion, aplicar) {
    var bono = new Bono(BONO_HABILIDAD,HB_ESTILO,Math.floor(personaje_actual.getSincronizacionElan(BERYL_BARAKIEL)),"",false,BONO_ESPECIAL,ELAN_BARAKIEL_SABER_CIENCIA);
    if (aplicar) {
        personaje_actual.addBono(bono,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:esteticaElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bono,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:esteticaElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function saberCienciaElan(coste, opcion, aplicar) {
    var bono = new Bono(BONO_HABILIDAD,HB_CIENCIA,Math.floor(personaje_actual.getSincronizacionElan(BERYL_BARAKIEL)),"",false,BONO_ESPECIAL,ELAN_BARAKIEL_SABER_CIENCIA);
    if (aplicar) {
        personaje_actual.addBono(bono,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:saberCienciaElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bono,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:saberCienciaElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function bellezaPerfectaElan(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual._bellezaPerfectaElan = personaje_actual.getApariencia();
        personaje_actual.setApariencia(10);
    } else {
        personaje_actual.setApariencia(personaje_actual._bellezaPerfectaElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function esenciaBarakielElan(coste, opcion, aplicar) {
    //TODO ignorar desventajas y debilidades
    if (aplicar) {
        personaje_actual.setFlag(FLAG_IGNORAR_DESVENTAJAS);
    } else {
        personaje_actual.removeFlag(FLAG_IGNORAR_DESVENTAJAS);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function divinidadCuerpoAlmaElan(coste, opcion, aplicar) {
    var i;
    var carac;
    var valor;

    if (aplicar) {
        for (i = 0; i < CARACTERISTICAS_NOMBRES.length; i++) {
            carac = CARACTERISTICAS_NOMBRES[i];
            valor = 10 + personaje_actual.getRaza().getBonoCaracteristica(carac);

            personaje_actual["_divinidadCuerpoAlmaElan" + carac] = valor - personaje_actual.getCaracteristica(carac);

            if (valor > personaje_actual.getCaracteristica(carac)) {
                personaje_actual.setCaracteristica(carac,valor);
            }
        }
    } else {
        for (i = 0; i < CARACTERISTICAS_NOMBRES.length; i++) {
            carac = CARACTERISTICAS_NOMBRES[i];
            valor = personaje_actual["_divinidadCuerpoAlmaElan" + carac];
            if (valor > 0) {
                personaje_actual.setCaracteristica(carac,personaje_actual.getCaracteristica(carac)-valor);
            }
        }
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function aptitudArtisticaGabriel(coste, opcion, aplicar) {
    var bonoMusica = new Bono(BONO_HABILIDAD,HB_MUSICA,Math.floor(personaje_actual.getSincronizacionElan(BERYL_GABRIEL)),"",false,BONO_ESPECIAL,ELAN_GABRIEL_APTITUD_ARTISTICA);
    var bonoArte = new Bono(BONO_HABILIDAD,HB_ARTE,Math.floor(personaje_actual.getSincronizacionElan(BERYL_GABRIEL)),"",false,BONO_ESPECIAL,ELAN_GABRIEL_APTITUD_ARTISTICA);
    if (aplicar) {
        personaje_actual.addBono(bonoMusica,true,true);
        personaje_actual.addBono(bonoArte,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:aptitudArtisticaGabriel},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bonoMusica,true);
        personaje_actual.removeBono(bonoArte,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:aptitudArtisticaGabriel},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function conocimientoNaturalezaElan(coste, opcion, aplicar) {
    var bonoHerbolaria = new Bono(BONO_HABILIDAD,HB_HERBOLARIA,Math.floor(personaje_actual.getSincronizacionElan(BERYL_RAFAEL)),"",false,BONO_ESPECIAL,ELAN_RAFAEL_CONOCIMIENTO_NATURALEZA);
    if (aplicar) {
        personaje_actual.addBono(bonoHerbolaria,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:conocimientoNaturalezaElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bonoHerbolaria,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:conocimientoNaturalezaElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function conocimientoAnimalElan(coste, opcion, aplicar) {
    var bonoAnimales = new Bono(BONO_HABILIDAD,HB_ANIMALES,Math.floor(personaje_actual.getSincronizacionElan(BERYL_RAFAEL)),"",false,BONO_ESPECIAL,ELAN_RAFAEL_CONOCIMIENTO_ANIMAL);
    if (aplicar) {
        personaje_actual.addBono(bonoAnimales,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:conocimientoAnimalElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bonoAnimales,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:conocimientoAnimalElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function esenciaSobrenaturalElan(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual._esenciaSobrenaturalElan = personaje_actual.getGnosis();
        personaje_actual.setGnosis(30);
    } else {
        personaje_actual.setGnosis(personaje_actual._esenciaSobrenaturalElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function comunionUrielElan(coste, opcion, aplicar) {
    aumentaCaracteristica(coste, opcion, aplicar, POD, 1);
    aumentaCaracteristica(coste, opcion, aplicar, DES, 1);
    aumentaCaracteristica(coste, opcion, aplicar, VOL, 1);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function poderOscuroElan(coste, opcion, aplicar) {
    aumentaCaracteristica(coste, opcion, aplicar, POD, 1);
    aumentaCaracteristica(coste, opcion, aplicar, INT, 1);
    aumentaCaracteristica(coste, opcion, aplicar, VOL, 1);
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function conocimientoSobrenaturalElan(coste, opcion, aplicar) {
    var bonoAnimales = new Bono(BONO_HABILIDAD,HB_OCULTISMO,Math.floor(personaje_actual.getSincronizacionElan(SHAJAD_EREBUS)),"",false,BONO_ESPECIAL,ELAN_EREBUS_CONOCIMIENTO_SOBRENATURAL);
    if (aplicar) {
        personaje_actual.addBono(bonoAnimales,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:conocimientoSobrenaturalElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bonoAnimales,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:conocimientoSobrenaturalElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function presenciaTenebrosaElan(coste, opcion, aplicar) {
    var bonoAnimales = new Bono(BONO_HABILIDAD,HB_INTIMIDAR,Math.floor(personaje_actual.getSincronizacionElan(SHAJAD_EREBUS)),"",false,BONO_ESPECIAL,ELAN_EREBUS_PRESENCIA_TENEBROSA);
    if (aplicar) {
        personaje_actual.addBono(bonoAnimales,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:presenciaTenebrosaElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bonoAnimales,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:presenciaTenebrosaElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function influjoSobrenaturalElan(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setCaracteristica(opcion,personaje_actual.getCaracteristica(opcion)+2);
    } else {
        personaje_actual.setCaracteristica(opcion,personaje_actual.getCaracteristica(opcion)-2);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function demiurgoElan(coste, opcion, aplicar) {
    //TODO 5 puntos a repartir entre Inteligencia, Poder y Voluntad
}


/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function donPoliticaElan(coste, opcion, aplicar) {
    var bonoPersuasion = new Bono(BONO_HABILIDAD,HB_PERSUASION,Math.floor(personaje_actual.getSincronizacionElan(SHAJAD_JEDAH)),"",false,BONO_ESPECIAL,ELAN_JEDAH_DON_POLITICA);
    var bonoLiderazgo = new Bono(BONO_HABILIDAD,HB_LIDERAZGO,Math.floor(personaje_actual.getSincronizacionElan(SHAJAD_JEDAH)),"",false,BONO_ESPECIAL,ELAN_JEDAH_DON_POLITICA);
    if (aplicar) {
        personaje_actual.addBono(bonoPersuasion,true,true);
        personaje_actual.addBono(bonoLiderazgo,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:donPoliticaElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bonoPersuasion,true);
        personaje_actual.removeBono(bonoLiderazgo,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:donPoliticaElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function poderConocimientoElan(coste, opcion, aplicar) {
    for (var i = 0; i < habilidades_intelectuales_set.length; i++) {
        var bono = new Bono(BONO_HABILIDAD,habilidades_intelectuales_set[i],Math.floor(personaje_actual.getSincronizacionElan(SHAJAD_JEDAH)/2),"",false,BONO_ESPECIAL,ELAN_JEDAH_PODER_CONOCIMIENTO);
        if (aplicar) {
            personaje_actual.addBono(bono,true,false);
        } else {
            personaje_actual.removeBono(bono,false);
        }
    }
    lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);

    if (aplicar) {
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:poderConocimientoElan},actualizaVentajaDependienteElan);
    } else {
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:serenidadMelancoliaElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function serenidadMelancoliaElan(coste, opcion, aplicar) {
    var bonoFrialdad = new Bono(BONO_HABILIDAD,HB_FRIALDAD,Math.floor(personaje_actual.getSincronizacionElan(SHAJAD_MESEGUIS)),"",false,BONO_ESPECIAL,ELAN_MESEGUIS_SERENIDAD_MELANCOLIA);
    var bonoResistirDolor = new Bono(BONO_HABILIDAD,HB_RESISTENCIA_DOLOR,Math.floor(personaje_actual.getSincronizacionElan(SHAJAD_MESEGUIS)),"",false,BONO_ESPECIAL,ELAN_MESEGUIS_SERENIDAD_MELANCOLIA);
    if (aplicar) {
        personaje_actual.addBono(bonoFrialdad,true,true);
        personaje_actual.addBono(bonoResistirDolor,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:serenidadMelancoliaElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bonoFrialdad,true);
        personaje_actual.removeBono(bonoResistirDolor,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:serenidadMelancoliaElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function resistenteElan(coste, opcion, aplicar) {
    var bonoRF = new Bono(BONO_RESISTENCIA,RF,Math.floor(personaje_actual.getSincronizacionElan(SHAJAD_NOAH)/2),"",false,BONO_ESPECIAL,ELAN_NOAH_RESISTENTE);
    if (aplicar) {
        personaje_actual.addBono(bonoRF,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:resistenteElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bonoRF,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:resistenteElan},actualizaVentajaDependienteElan);
    }
}

/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function dañoIncrementadoElan(coste, opcion, aplicar) {
    var bonoDaño = new Bono(BONO_DAÑO,BONO_DAÑO,Math.floor(personaje_actual.getSincronizacionElan(SHAJAD_ZEMIAL)/2),"",false,BONO_ESPECIAL,ELAN_ZEMIAL_DAÑO_INCREMENTADO);
    if (aplicar) {
        personaje_actual.addBono(bonoDaño,true,true);
        DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{callback:dañoIncrementadoElan},actualizaVentajaDependienteElan);
    } else {
        personaje_actual.removeBono(bonoDaño,true);
        DISPATCHER.off(EVENT_CHARACTER_SECCION_ELAN,{callback:dañoIncrementadoElan},actualizaVentajaDependienteElan);
    }
}

//region Pantalla del Director


/**
 *
 * @param {number} coste
 * @param {string} opcion
 * @param {boolean} aplicar
 */
function dificilDeMatar(coste, opcion, aplicar) {
    var bono = new Bono(BONO_PV,BONO_PV,10*coste,"", true,BONO_INNATO,"Difícil de matar");
    if (aplicar) {
        personaje_actual.addBono(bono, false, true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

function sentidoDelCombate(coste, opcion, aplicar) {
    var bono = new Bono(BONO_HABILIDAD,opcion,5,"",true,BONO_INNATO,"Sentido del combate");

    if (aplicar) {
        personaje_actual.addBono(bono, false, true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

function bonificadorNaturalIncrementado(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_BONO_NATURAL_EXTRA);
    } else {
        personaje_actual.removeFlag(FLAG_BONO_NATURAL_EXTRA);
    }
}

function usoDeArmadura(coste, opcion, aplicar) {
    var bono = new Bono(BONO_HABILIDAD,HB_ARMADURA,5*coste,"",true,BONO_INNATO,"Uso de armadura");

    if (aplicar) {
        personaje_actual.addBono(bono, false, true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

function versatil(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_VERSATIL);
    } else {
        personaje_actual.removeFlag(FLAG_VERSATIL);
    }
}

function habilidoso(coste, opcion, aplicar) {
    var bono = new Bono(BONO_HABILIDAD,HB_TRUCOS_MANOS,30,"",true,BONO_ESPECIAL,"Habilidoso");

    if (aplicar) {
        personaje_actual.addBono(bono, false, true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

function naturalezaMagica(coste, opcion, aplicar) {
    var bono = new Bono(BONO_HABILIDAD,HB_ZEON,50*coste,"",true,BONO_INNATO,"Naturaleza mágica");

    if (aplicar) {
        personaje_actual.addBono(bono, false, true);
    } else {
        personaje_actual.removeBono(bono, true);
    }
}

function magiaOpuesta(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_MAGIA_OPUESTA);
    } else {
        personaje_actual.removeFlag(FLAG_MAGIA_OPUESTA);
    }
}



function sinBonificadorNatural(coste, opcion, aplicar) {
    if (aplicar) {
        personaje_actual.setFlag(FLAG_SIN_BONIFICADOR_NATURAL);
    } else {
        personaje_actual.removeFlag(FLAG_SIN_BONIFICADOR_NATURAL);
    }
}

function novato(coste, opcion, aplicar) {
    //TODO restar 100 px. Si es nivel 1, pasa a ser nivel 0
}

//endregion Pantalla del Director
//region Core Exxet
addVentaja(new Ventaja(
    "Repetir una tirada de características",
    "",
    "Te permite lanzar un dado adicional una vez que has generado las características de tu personaje, y utilizar el resultado obtenido en lugar de uno de los anteriores. La nueva cifra no podrá ser inferior al valor de tu tirada más baja.",
    REPETIBLE_TOTAL,   //getRepetible
    [1],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [repetirUnaTirada],
    GRUPO_CARACTERISTICAS,
    []
));
addVentaja(new Ventaja(
    "Sumar un punto a una característica",
    "",
    "Añade un punto al valor de una característica.",
    REPETIBLE_TOTAL,   //repetible
    [1],      //coste
    [],
    true,  //anulable
    [LISTA_CARACTERISTICAS],
    [sumarUnoAUnaCaracteristica],
    GRUPO_CARACTERISTICAS,
    []
));
addVentaja(new Ventaja(
    "Sustituir una característica por un nueve",
    "",
    "Sustituye una característica por un nueve sin importar cuál fuese su valor original.",
    REPETIBLE_TOTAL,   //repetible
    [2],      //coste
    [],
    true,  //anulable
    [LISTA_CARACTERISTICAS],
    [cambiarUnaCaracteristicaPorNueve],
    GRUPO_CARACTERISTICAS
));
addVentaja(new Ventaja(
    "Resistencia física excepcional",
    "",
    "Añade un bonificador especial de +25 a la Resistencia física (RF), Resistencia contra venenos (RV) y Resistencia contra enfermedades (RE). La inversión de un segundo punto de creación aumenta el nivel de las Resistencias a +50.",
    NO_REPETIBLE,   //repetible
    [1,2],      //coste
    [],
    true,  //anulable
    [],
    [resistenciaFisicaExcepcional],
    GRUPO_RESISTENCIAS
));
addVentaja(new Ventaja(
    "Resistencia mágica excepcional",
    "",
    "Añade un bonificador especial de +25 a la Resistencia mágica (RM). La inversión de un segundo punto de creación aumenta el nivel de la Resistencia a +50.",
    NO_REPETIBLE,   //repetible
    [1,2],      //coste
    [],
    true,  //anulable
    [],
    [resistenciaMagicaExcepcional],
    GRUPO_RESISTENCIAS
));
addVentaja(new Ventaja(
    "Resistencia psíquica excepcional",
    "",
    "Esta ventaja añade un bonificador especial de +25 a la Resistencia mental (RP) del personaje. La inversión de un segundo punto de creación aumenta el nivel de la Resistencia a +50.",
    NO_REPETIBLE,   //repetible
    [1,2],      //coste
    [],
    true,  //anulable
    [],
    [resistenciaPsiquicaExcepcional],
    GRUPO_RESISTENCIAS
));
var ventajaTemp = new Ventaja(
    "Acceso a una disciplina psíquica",
    "",
    "Esta ventaja permite utilizar un CV para adquirir afinidad a una única disciplina psíquica y a los poderes matriciales.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [
        new ElementoProhibido(VENTAJA,"Acceso libre a cualquier disciplina psíquica")
    ],    //incompatibles
    true,  //anulable
    [LISTA_DISCIPLINAS_PSIQUICAS],
    [accesoPsiquicoBasico],
    GRUPO_PSIQUICAS
);
ventajaTemp.isBasica = true;
addVentaja(ventajaTemp);
ventajaTemp = new Ventaja(
    "Acceso libre a cualquier disciplina psíquica",
    "",
    "Esta ventaja capacita al personaje a acceder libremente a tantas disciplinas psíquicas como desee empleando sus CV.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [
        new ElementoProhibido(VENTAJA,"Acceso a una disciplina psíquica")
    ],    //incompatibles
    true,  //anulable
    [],
    [accesoPsiquicoCompleto],
    GRUPO_PSIQUICAS
);
ventajaTemp.isBasica = true;
addVentaja(ventajaTemp);

addVentaja(new Ventaja(
    "Fondos iniciales",
    "",
    "Esta ventaja proporciona una cantidad de dinero inicial o equipo valorado en 2.000 Escudos de Oro (MO), 5.000 o 10.000.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [fondosIniciales],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Afinidad animal",
    "",
    "El alcance de esta ventaja debe de ser interpretada por el Director de Juego.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Regeneración básica",
    "",
    "Aumenta dos niveles la Regeneración del personaje.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [
        new ElementoProhibido(VENTAJA,"Regeneración avanzada"),
        new ElementoProhibido(VENTAJA,"Regeneración mayor")
    ],    //incompatibles
    true,  //anulable
    [],
    [aumentaRegeneracion,2,"Regeneración básica"],
    GRUPO_CAPACIDADES
));
addVentaja(new Ventaja(
    "Regeneración avanzada",
    "",
    "Aumenta cuatro niveles la Regeneración del personaje.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [
        new ElementoProhibido(VENTAJA,"Regeneración básica"),
        new ElementoProhibido(VENTAJA,"Regeneración mayor")
    ],    //incompatibles
    true,  //anulable
    [],
    [aumentaRegeneracion,4,"Regeneración avanzada"],
    GRUPO_CAPACIDADES
));
addVentaja(new Ventaja(
    "Regeneración mayor",
    "",
    "Aumenta seis niveles la Regeneración del personaje.",
    NO_REPETIBLE,   //repetible
    [3],      //coste
    [
        new ElementoProhibido(VENTAJA,"Regeneración básica"),
        new ElementoProhibido(VENTAJA,"Regeneración avanzada")
    ],    //incompatibles
    true,  //anulable
    [],
    [aumentaRegeneracion,6,"Regeneración mayor"],
    GRUPO_CAPACIDADES
));
addVentaja(new Ventaja(
    "Encanto",
    "",
    "El alcance de esta ventaja debe de ser interpretada por el Director de Juego.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Ambidestria",
    "",
    "Un personaje ambidiestro podrá efectuar maniobras con cualquier mano con idéntica habilidad. En combate, permite reducir a –10 los ataques efectuados con un arma adicional.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Visión nocturna",
    "",
    "Permite ignorar cualquier penalizador causado por la oscuridad, siempre que no se trate de un lugar con carencia absoluta de luz o algún tipo de oscuridad mágica, en cuyo caso, sólo quedan reducidos a la mitad.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Buena suerte",
    "",
    "Se reduce un punto la cifra requerida para pifiar. En circunstancias normales el personaje pifiará con un 2. Si alcanza la maestría en una habilidad, sólo pifiará con un 1.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Inquietante",
    "",
    "El personaje puede resultar inquietante si lo desea. El alcance de esta ventaja debe de ser interpretado por el Director de Juego.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Apto en un campo",
    "",
    "El coste de desarrollo de habilidades secundarias de ese campo se reduce en un punto. Si se da el caso de que la categoría del personaje posee una habilidad secundaria concreta dentro de dicho campo con un coste inferior al del resto de habilidades, este valor también se reducirá.",
    REPETIBLE_OPCIONES,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_TIPOS_SECUNDARIAS],
    [aptoEnUnCampo],
    GRUPO_SECUNDARIAS
));
addVentaja(new Ventaja(
    "Apto en una materia",
    "",
    "Esta ventaja reduce un punto el coste de desarrollo de una habilidad secundaria por cada Punto de Creación que se invierta.",
    REPETIBLE_OPCIONES,   //repetible
    [1,2],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_HABILIDADES_SECUNDARIAS],
    [aptoEnUnaMateria],
    GRUPO_SECUNDARIAS
));
addVentaja(new Ventaja(
    "Sentidos agudos",
    "",
    "Añade un punto a la Percepción del personaje a la hora de realizar controles de características y un bonificador especial de +50 a sus habilidades secundarias de Advertir y Buscar.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [sentidosAgudos],
    GRUPO_OTRAS
));
ventajaTemp = new Ventaja(
    "Don",
    "",
    "El personaje está dotado de la capacidad de ver y utilizar la magia. Añadirá además un bonificador especial de +10 a su RM, puesto que su naturaleza sobrenatural resiste mejor los efectos místicos. Nota: Ten en cuenta que tanto los hechiceros como otras categorías especializadas en el lanzamiento de conjuros requieren escoger esta ventaja para poder usar sortilegios.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [don],
    GRUPO_DON
);
ventajaTemp.isBasica = true;
addVentaja(ventajaTemp);

addVentaja(new Ventaja(
    "Aprendizaje innato",
    "",
    "Otorga un bono de categoría de +10 por nivel en una habilidad secundaria. Este bono se suma a cualquier otro bonificador innato que pudiera obtener el personaje gracias a su categoría. La inversión de un punto adicional aumenta el bono a +20.",
    REPETIBLE_OPCIONES,   //repetible
    [1,2],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_HABILIDADES_SECUNDARIAS],
    [aprendizajeInnato],
    GRUPO_SECUNDARIAS
));
addVentaja(new Ventaja(
    "Aprendizaje innato en un campo",
    "",
    "Otorga un bono de categoría de +5 o +10 por nivel a todas las habilidades de un campo. Estos bonificadores se suman a cualquier otro bono innato que pudiera obtener el personaje por su categoría.",
    REPETIBLE_OPCIONES,   //repetible
    [2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_TIPOS_SECUNDARIAS],
    [aprendizajeInnatoCampo],
    GRUPO_SECUNDARIAS
));
addVentaja(new Ventaja(
    "Conocedor de todas las materias",
    "",
    "El personaje no aplica nunca el penalizador de –30 por no haber invertido PD en una habilidad secundaria y tiene un bonificador natural de 10 en todas sus habilidades secundarias, que se suma directamente al bono que le otorgue su característica.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [conocedorTodasMaterias],
    GRUPO_SECUNDARIAS
));
addVentaja(new Ventaja(
    "Sueño ligero",
    "",
    "El personaje sólo aplica un penalizador de –20 a su habilidad de Advertir mientras duerme.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Reflejos rápidos",
    "",
    "Otorga un bonificador especial de +25 al turno. Los Puntos de Creación adicionales aumentarán el bono a +45 y a +60 respectivamente.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [reflejosRapidos],
    GRUPO_CAPACIDADES
));
addVentaja(new Ventaja(
    "Inmunidad al dolor y al cansancio",
    "",
    "Los penalizadores provocados por el dolor y el Cansancio se reducen a la mitad.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Tamaño no natural",
    "",
    "El personaje puede aumentar o disminuir hasta cinco puntos su Tamaño en el momento de su creación.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_AJUSTE_TAMAÑO],
    [ajusteTamaño],
    GRUPO_CAPACIDADES
));
addVentaja(new Ventaja(
    "Afortunado",
    "",
    "El alcance de esta ventaja debe de ser interpretada por el Director de Juego. En cualquier caso, nunca sufrirá los efectos negativos de una trampa o de un ataque que se determinen mediante el azar.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Armadura natural",
    "",
    "Otorga un Tipo de Armadura natural de 2 contra todas las clases de ataques salvo las de energía. Aunque cuenta como una protección, no se aplican penalizadores al turno por emplear capas de armaduras adicionales.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [armaduraNatural],
    GRUPO_CAPACIDADES
));
addVentaja(new Ventaja(
    "Armadura mística",
    "",
    "Otorga un Tipo de Armadura natural de 4 contra los ataques basados en Energía. Aunque cuenta como una armadura, no se aplican penalizadores al turno por emplear capas de protección adicionales.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [armaduraMistica],
    GRUPO_CAPACIDADES
));
addVentaja(new Ventaja(
    "Artefacto",
    "",
    "El jugador y el Director de Juego deberán ponerse de acuerdo con las habilidades del artefacto. Los puntos invertidos adicionalmente aumentan teóricamente las capacidades del objeto.",
    REPETIBLE_TOTAL,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_DESCRIPCION],
    [],
    GRUPO_OTRAS
));
ventajaTemp = new Ventaja(
    "Acceso a poderes psíquicos naturales",
    "",
    "El personaje es capaz de utilizar de manera natural un único poder mental determinado. En realidad no es un verdadero psíquico, por lo que no puede emplear CVs para adquirir nuevas habilidades ni para potenciar el poder que posee. Su potencial psíquico no se basa en su Voluntad ni requiere lanzar dados para calcularlo, sino que tiene automáticamente un valor de Difícil (DIF). El poder elegido puede ser de cualquier nivel, pero si tiene un requerimiento base superior a Difícil no es posible utilizarlo. Puede usarse una vez por minuto sin que el personaje sufra ningún tipo de penalización, pero cada uso adicional sin el periodo de descanso requerido causa la pérdida de un punto de Cansancio. La inversión de puntos adicionales aumenta el potencial psíquico natural a Muy Difícil (MDF) y a Absurdo (ABS), respectivamente.",
    REPETIBLE_OPCIONES,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_PODER_PSIQUICO],
    [],
    GRUPO_PSIQUICAS
);
ventajaTemp.isBasica = true;
addVentaja(ventajaTemp);

addVentaja(new Ventaja(
    "Maestro marcial",
    "",
    "Añade 40 puntos al Conocimiento Marcial base. Los Puntos de Creación adicionales aumentan el añadido a 80 y 120 puntos respectivamente.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [maestroMarcial],
    GRUPO_KI
));
addVentaja(new Ventaja(
    "Infatigable",
    "",
    "Aumenta tres puntos el Cansancio del personaje. Los Puntos de Creación adicionales lo incrementan seis y nueve puntos respectivamente.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [infatigable],
    GRUPO_CAPACIDADES
));
addVentaja(new Ventaja(
    "Ver lo sobrenatural",
    "",
    "El personaje ve lo sobrenatural, tanto magia y matrices psíquicas como criaturas espirituales. Por tanto, no aplica el penalizador de cegado en ninguna de dichas situaciones.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [verLoSobrenatural],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Sentido del peligro",
    "",
    "El personaje no puede ser cogido por sorpresa, salvo por una diferencia de 150 en turno contra su adversario.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS
));
addVentaja(new Ventaja(
    "Curtido",
    "",
    "El personaje comienza con 50 puntos de experiencia añadidos. Los Puntos de Creación adicionales aumentan los puntos de experiencia iniciales a 100 y a 150, respectivamente. Este aumento permite subir de nivel de modo convencional si se alcanzan los puntos de experiencia necesarios.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [curtido],
    GRUPO_CAPACIDADES
));
addVentaja(new Ventaja(
    "Recuperación de Ki",
    "",
    "El personaje recupera un punto de Ki por característica cada diez minutos, en lugar de uno por hora. La inversión de puntos adicionales disminuye el tiempo a cinco y un minuto respectivamente.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_KI
));
addVentaja(new Ventaja(
    "Elan",
    "",
    "El personaje tiene Elan de 20 de la entidad que elija. La inversión de puntos adicionales aumenta su nivel a 40 y 50 respectivamente.",
    REPETIBLE_TOTAL,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_SHAJADS_BERYLS],
    [elan],
    GRUPO_CAPACIDADES
));
addVentaja(new Ventaja(
    "Aprendizaje",
    "",
    "Obtiene un beneficio adicional de 3 puntos de experiencia a la cantidad que le otorgue el Director de Juego al finalizar cada sesión de juego. Los Puntos de Creación adicionales aumentan el beneficio a 6 y 9 puntos respectivamente.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_CAPACIDADES
));
//endregion Core Exxet

//region Pantalla del Director
addVentaja(new Ventaja(
    "Difícil de matar",
    "",
    "Obtiene un bonificador de +10, +20 o +30 pv por nivel. También un +10, +20 o +30 a los controles de Resistencia de " +
        "las reglas opcionales de Entre la vida y la muerte",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [dificilDeMatar],
    GRUPO_CAPACIDADES,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Al límite",
    "",
    "Cuando los pv bajan por debajo de una cuarta parte del total, gana  un bono +20 a toda acción.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_CAPACIDADES,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Inmunidad sobrenatural",
    "",
    "Ignora los conjuros de valor zeónico 60, 90 o 120 o inferiores, y supera cualquier RM de efecto místico no mayor de 80, 100 o 120. No puede acceder al Don o Ver lo Sobrenatural, y no puede esta ventaja ser comprada por Sylvain, Duk'zarist o Daimah",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [
        new ElementoProhibido(VENTAJA,"Don"),
        new ElementoProhibido(VENTAJA,"Ver lo sobrenatural")
    ],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_RESISTENCIAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Sin límite de familiares",
    "",
    "Puede crear un lazo de familiar con tantas criaturas como desee.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Sentido del combate",
    "",
    "El personaje consigue un bono innato de +5 a ataque, parada o esquiva.",
    NO_REPETIBLE,   //repetible
    [3],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_HABILIDAD_COMBATE],
    [sentidoDelCombate],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Bonificador natural incrementado",
    "",
    "El personaje obtiene un bonificador natural adicional.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [bonificadorNaturalIncrementado],
    GRUPO_SECUNDARIAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Uso de armadura",
    "",
    "El personaje consigue un bono innato de +5, +10 o +15 a llevar armadura.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [usoDeArmadura],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Versátil",
    "",
    "Al personaje le cuesta la mitad de PD cambiar de categoría y no tiene que esperar dos niveles.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [versatil],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Superviviente",
    "",
    "El personaje aguanta en puntos de vida negativa diez veces el valor de su CON, en lugar de sólo cinco. Además suma +40 a su RF para estabilizare. Al salir de entre la vida y la muerte, el negativo será sólo de -30. " +
        "Si se usan las reglas opcionales de puntos de vida en negativos, el +40 es a los controles para resistir.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_RESISTENCIAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Tocado por el destino",
    "",
    "Una ocasión por partida, puede repetir una tirada y elegir el nuevo resultado. Puede adquirirse tantas veces como se quiera.",
    REPETIBLE_TOTAL,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Inmunidad psíquica",
    "",
    "Obtiene un +60 a todo control de Frialdad dedicado a mitigar sus estados emocionales. No es compatible con Fobia, Cobardía o Adicción Grave",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [
        new ElementoProhibido(VENTAJA,"Fobia grave"),
        new ElementoProhibido(VENTAJA,"Cobardía"),
        new ElementoProhibido(VENTAJA,"Adicción o vicio grave")
    ],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_RESISTENCIAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Habilidoso",
    "",
    "Obtiene un bono de +30 a Trucos de manos y puede aplicar un +3 a cualquier control enfrentado de DES.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [habilidoso],
    GRUPO_SECUNDARIAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Libre albedrío",
    "",
    "Obtiene un bono de +60 a todo control de Resistencia relacionado con posesión o dominación.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_RESISTENCIAS,
    [FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Seductor",
    "",
    "Obtiene un bono de +60 en los controles de Persuasión relacionados con la seducción.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_SECUNDARIAS,
    [FLAG_PANTALLA_ENABLED]
));
//endregion Pantalla del Director

addVentaja(new Ventaja(
    "Apto para el desarrollo de la magia",
    "",
    "El personaje añade 3 puntos a su característica de Inteligencia para calcular la Inteligencia Requerida de los conjuros. Este bonificador no se aplica para ninguna otra habilidad, ni siquiera para calcular su nivel de magia.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    new Array(aptoDesarrolloMagia),
    GRUPO_DON,
    [FLAG_DON]
));
addVentaja(new Ventaja(
    "Potencial enfrentado",
    "",
    "El personaje aplica un bonificador de +50 a sus tiradas para calcular el resultado del choque de conjuros.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    [FLAG_DON]
));
addVentaja(new Ventaja(
    "Recuperación superior de magia",
    "",
    "El personaje recupera sus puntos de Zeon al doble de su regeneración zeónica. Los Puntos de Creación adicionales le permiten aumentarla al triple y al cuádruple de lo normal.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    [FLAG_DON]
));
addVentaja(new Ventaja(
    "Magia innata mejorada",
    "",
    "Los conjuros innatos del brujo tienen un potencial de +10 a lo indicado por su ACT. Los Puntos de Creación adicionales aumentan el valor de los conjuros innatos a +20 y +30 respectivamente.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    new Array(magiaInnataMejorada),
    GRUPO_DON,
    [FLAG_DON]
));
addVentaja(new Ventaja(
    "Inutilidad somática",
    "",
    "El personaje no reduce su ACT por no ser capaz de gesticular.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    [FLAG_DON]
));
addVentaja(new Ventaja(
    "Inutilidad oral",
    "",
    "El personaje puede lanzar conjuros en completo silencio sin ver reducido su ACT.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    [FLAG_DON]
));
addVentaja(new Ventaja(
    "Desequilibrio elemental",
    "",
    "El personaje dispone de un bono especial de +20 a su ACT y un +20 a su RM en la vía mágica que elija. Cuando utilice conjuros de la vía opuesta, aplicará un penalizador de –20 a su ACT y un –20 a su RM. Si la vía elegida es la nigromancia, el penalizador se aplicará a todas las demás.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    new Array(LISTA_VIAS_MAGIA),
    [],
    GRUPO_DON,
    [FLAG_DON]
));
addVentaja(new Ventaja(
    "Desequilibrio sephirótico",
    "",
    "El brujo dispone de un bono especial de +20 a su ACT y un +20 en su RM en las cinco vías mágicas de un segmento del árbol que elija. En el resto aplicará un penalizador de –20 a su ACT y un –20 a su RM. La nigromancia no está incluida en esta ventaja, al encontrarse fuera del árbol.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    new Array(LISTA_DESEQUILIBRIO_SEPHIROTICO),
    [],
    GRUPO_DON,
    [FLAG_DON]
));
addVentaja(new Ventaja(
    "Conocimiento natural de vía",
    "",
    "Esta ventaja otorga conocimientos innatos de una vía a nivel 40 sin invertir en ella puntos de nivel de magia. Al ser un conocimiento natural, el hechicero puede seguir desarrollandola a partir de nivel 40 gastando en ella nuevos puntos de nivel de magia.",
    REPETIBLE_OPCIONES,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    new Array(LISTA_VIAS_MAGIA),
    new Array(conocimientoNaturalVia),
    GRUPO_DON,
    [FLAG_DON]
));


//region Pantalla del Director

addVentaja(new Ventaja(
    "Magia opuesta",
    "",
    "El personaje no dobla el coste de nivel de las vías opuestas.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [magiaOpuesta],
    GRUPO_DON,
    [FLAG_DON, FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Naturaleza mágica",
    "",
    "Obtiene un bono innato de +50, +100 ó +150 puntos de Zeon por nivel.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [naturalezaMagica],
    GRUPO_DON,
    [FLAG_DON, FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Poder natural",
    "",
    "Para calcular el potencial máximo de sus conjuros, el personaje utiliza su característica se Poder en lugar de su Inteligencia.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    [FLAG_DON, FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Dicción mágica",
    "",
    "No reduce el ACT al ejecutar conjuros inscritos en grimorios, pergaminos o libros, usando su potencial al máximo incluso si no es capaz de gesticular.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    [FLAG_DON, FLAG_PANTALLA_ENABLED]
));
//endregion Pantalla del Director

addVentaja(new Ventaja(
    "Calibre",
    "",
    "Los CV invertidos para mejorar la Proyección Psíquica aumentarán su habilidad en +20 en lugar de +10.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    [FLAG_PSIQUICO]
));
addVentaja(new Ventaja(
    "Concentración extrema",
    "",
    "El psíquico dobla el bono que le reporta la concentración a su potencial. Por ejemplo, si se concentra un asalto completo obtiene un +20 en lugar de un +10.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    [FLAG_PSIQUICO]
));
addVentaja(new Ventaja(
    "Mantenimiento añadido",
    "",
    "Los poderes mantenidos innatamente se hallan un nivel de dificultad por encima de lo que le permite su potencial psíquico.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    [FLAG_PSIQUICO]
));
addVentaja(new Ventaja(
    "Resistencia a la fatiga psíquica",
    "",
    "Si el psíquico obtiene un fracaso en el uso de uno de sus poderes, no pierde puntos de Cansancio una vez que se ha quedado sin CVs libres por gastar. Los poderes de tercer nivel no son afectados por esta ventaja.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [
        new ElementoProhibido(VENTAJA,"Extenuación psíquica")
    ],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    [FLAG_PSIQUICO]
));
addVentaja(new Ventaja(
    "Recuperación de CVs",
    "",
    "El índice de recuperación de CVs libres es de un punto por cada diez minutos transcurridos. La inversión de Puntos de Creación adicionales lo acrecienta a uno cada cinco o un minuto respectivamente.",
    NO_REPETIBLE,   //repetible
    [1,2,3],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    [FLAG_PSIQUICO]
));
addVentaja(new Ventaja(
    "Desequilibrio psíquico",
    "",
    "El psíquico obtiene automáticamente un nivel de dificultad superior al que ha obtenido con su potencial al utilizar los poderes de una disciplina determinada.",
    REPETIBLE_OPCIONES,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    new Array(LISTA_DISCIPLINAS_PSIQUICAS),
    [],
    GRUPO_PSIQUICAS,
    [FLAG_PSIQUICO]
));
addVentaja(new Ventaja(
    "Concentración pasiva",
    "",
    "El psíquico puede concentrarse para potenciar un poder incluso mientras ejecuta acciones activas.",
    NO_REPETIBLE,   //repetible
    [2],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    [FLAG_PSIQUICO]
));

//region Pantalla del Director

addVentaja(new Ventaja(
    "Ambivalencia psíquica",
    "",
    "Al dividir el potencial psíquico para realizar más de un poder por asalto, obtiene un bono especial acumulativo de +5 por cada poder que declare.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    [FLAG_PSIQUICO, FLAG_PANTALLA_ENABLED]
));

addVentaja(new Ventaja(
    "Modificador psíquico incrementado",
    "",
    "El personaje dobla cualquier modificador natural que tenga la disciplina psíquica que usa. Los negativos también son incrementados.",
    NO_REPETIBLE,   //repetible
    [1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    [FLAG_PSIQUICO, FLAG_PANTALLA_ENABLED]
));
//endregion Pantalla del Director
addDesventaja(new Ventaja(
    "Reducir dos puntos a una característica",
    "",
    "Reduce en dos puntos una de las características básicas. Limitación: Esta desventaja sólo puede adquirirse en una ocasión. No es posible disminuir una característica por debajo de 3.",
    NO_REPETIBLE,   //getRepetible
    [-1],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_CARACTERISTICAS],
    [restarDosAUnaCaracteristica],
    GRUPO_CARACTERISTICAS,
    []
));
addDesventaja(new Ventaja(
    "Salud enfermiza",
    "",
    "La RE del personaje queda reducida a la mitad.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [saludEnfermiza],
    GRUPO_RESISTENCIAS,
    []
));
addDesventaja(new Ventaja(
    "Lenta curación",
    "",
    "El personaje recupera sólo la mitad de puntos de vida de cualquier cantidad que debiera recobrar, ya sea mediante regeneración normal o medios místicos.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Miopía",
    "",
    "Aplicará un negativo de –50 a cualquier tirada de la habilidad Advertir o Buscar en la que se emplee la vista y un –3 a cualquier control de Percepción que la requiera. Este penalizador también se aplicará a la puntería. Si consigue unas gafas, el negativo penalizador se reduciría como el Director de Juego considere conveniente.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Vulnerabilidad a los venenos",
    "",
    "La RV del personaje queda reducida a la mitad.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [vulnerabilidadVenenos],
    GRUPO_RESISTENCIAS,
    []
));
addDesventaja(new Ventaja(
    "Fácil posesión",
    "",
    "El personaje aplica un negativo de –50 a cualquier RP o RM que realice contra algún tipo de dominio o posesión capaz de modificar su conducta.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_RESISTENCIAS,
    []
));
addDesventaja(new Ventaja(
    "Vulnerabilidad a la magia",
    "",
    "La RM del personaje queda reducida a la mitad.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [vulnerabilidadMagia],
    GRUPO_RESISTENCIAS,
    []
));
addDesventaja(new Ventaja(
    "Vulnerable al frío",
    "",
    "El personaje sufre un penalizador de –80 a cualquier Resistencia contra ese elemento y un –30 a toda acción en climas extremos.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Vulnerable al calor",
    "",
    "El personaje sufre un penalizador de –80 a cualquier Resistencia contra ese elemento y un –30 a toda acción en climas extremos.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Extremidad atrofiada",
    "",
    "El personaje aplica un penalizador de –80 a todas las acciones físicas que requieran el uso del miembro atrofiado.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Debilidad física",
    "",
    "La RF del personaje queda reducida a la mitad.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [debilidadFisica],
    GRUPO_RESISTENCIAS,
    []
));
addDesventaja(new Ventaja(
    "Aspecto desagradable",
    "",
    "Reduce la apariencia del personaje a 2. Limitación: El personaje tiene que tener como mínimo un 7 en apariencia. Esta característica debe de haber sido generada mediante una tirada, no elegida libremente por el jugador.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [aspectoDesagradable],
    GRUPO_OTRAS,
    [FLAG_APARIENCIA_ALEATORIA,FLAG_APARIENCIA_MINIMA_7]
));
addDesventaja(new Ventaja(
    "Desafortunado",
    "",
    "El Director de Juego deberá interpretar el alcance de esta desventaja. En un grupo, alguien desafortunado será siempre el que caiga en la trampa aleatoria y el primero al que ataquen cuando el azar decida quién recibe el primer impacto.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Enfermedad grave",
    "",
    "El personaje aplicará un penalizador acumulativo de –10 a toda acción por cada mes que transcurra. El Director de Juego determinará una fecha en secreto, llegada la cual morirá.",
    NO_REPETIBLE,
    [-2],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Alergia grave",
    "",
    "Los negativos a toda acción por entrar en contacto con dicha sustancia variarán entre un –40 y un –80, dependiendo de la gravedad o del tiempo que se haya permanecido en contacto con dicho elemento.",
    REPETIBLE_OPCIONES,
    [-1],
    [],
    true,
    [LISTA_INTRODUCCION_USUARIO],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Sueño profundo",
    "",
    "El personaje aplicará un penalizador de –200 a cualquier tirada de percepción mientras duerme. Durante los diez asaltos posteriores a su despertar, aplicará un penalizador de –40 a toda acción.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Fobia grave",
    "",
    "El personaje aplicará el estado de miedo siempre que se encuentre con el objeto de su fobia.",
    REPETIBLE_OPCIONES,
    [-1],
    [],
    true,
    [LISTA_INTRODUCCION_USUARIO],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Mala suerte",
    "",
    "La cifra requerida para pifiar aumenta en dos puntos. En las habilidades normales pifiará con un resultado de 5 y, si es maestro, lo hará con 4.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Mudo",
    "",
    "El personaje no puede hablar.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Ciego",
    "",
    "El personaje no podrá usar ninguna habilidad que requiera ver. Aplicará en todo momento el penalizador de cegado.",
    NO_REPETIBLE,
    [-2],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Sordo",
    "",
    "El personaje no podrá emplear ninguna habilidad que requiera el uso del oído.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Aprendizaje lento",
    "",
    "El personaje tiene un penalizador de 4 puntos de experiencia a los otorgados por el Director de Juego al finalizar la sesión. El punto de desventaja adicional aumenta este penalizador a 8.",
    NO_REPETIBLE,
    [-1,-2],
    [],
    true,
    [],
    [],
    GRUPO_CAPACIDADES,
    []
));
addDesventaja(new Ventaja(
    "Reacción lenta",
    "",
    "El personaje aplicará un penalizador especial de –30 a su turno. El punto de desventaja adicional aumenta este negativo hasta –60.",
    NO_REPETIBLE,
    [-1,-2],
    [],
    true,
    [],
    [reaccionLenta],
    GRUPO_CAPACIDADES,
    []
));
addDesventaja(new Ventaja(
    "Arma exclusiva",
    "",
    "El personaje aplicará un penalizador de –30 a su habilidad de combate con cualquier arma distinta a la suya. Limitación: Esta desventaja sólo puede ser adquirida por los arquetipos de Luchador, Acechador, Domine o Sin Categoría.",
    NO_REPETIBLE, //TODO SOLO ARQUETIPOS INDICADOS
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Adicción o vicio grave",
    "",
    "El personaje aplicará un penalizador acumulativo de –10 por cada día que transcurra sin satisfacer su vicio.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [LISTA_INTRODUCCION_USUARIO],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Vulnerable al dolor",
    "",
    "Dobla cualquier penalizador causado por el dolor, ya sea producido por críticos o efectos místicos.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    []
));
addDesventaja(new Ventaja(
    "Exhausto",
    "",
    "Dobla los penalizadores a la acción provocados por la fatiga y resta un punto el Cansancio base del personaje.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [exhausto],
    GRUPO_CAPACIDADES,
    []
));

//region Pantalla del Director

addDesventaja(new Ventaja(
    "Endeble",
    "",
    "Cuando los pv bajan por debajo de un tercio del total sufre un -30 a toda acción hasta recuperarse.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_CAPACIDADES,
    [FLAG_PANTALLA_ENABLED]
));

addDesventaja(new Ventaja(
    "Cobardía",
    "",
    "Al encontrarse con un riesgo real, sufre el estado de Miedo. Si supera un control MDF de Frialdad puede reducir el penalizador a -20.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));

addDesventaja(new Ventaja(
    "Patoso",
    "",
    "Sufre un penalizador de -30 a toda habilidad manual que requiera coordinación y un -3 a todos los controles enfrentados de DES.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));

addDesventaja(new Ventaja(
    "Sin bonificador natural",
    "",
    "No aplica el bonificador natural por nivel.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [sinBonificadorNatural],
    GRUPO_SECUNDARIAS,
    [FLAG_PANTALLA_ENABLED]
));

addDesventaja(new Ventaja(
    "Insufrible",
    "",
    "A interpretar por el DJ.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));

addDesventaja(new Ventaja(
    "Novato",
    "",
    "Empieza con 100px menos que los demás.",
    NO_REPETIBLE,
    [-1],
    [],
    true,
    [],
    [novato],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));

addDesventaja(new Ventaja(
    "Destino aciago",
    "",
    "No puede obtener tiradas abiertas.",
    NO_REPETIBLE,
    [-2],
    [],
    true,
    [],
    [],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));


addDesventaja(new Ventaja(
    "Maldito",
    "",
    "Interpretado por el DJ.",
    REPETIBLE_OPCIONES,
    [-1,-2],
    [],
    true,
    [LISTA_INTRODUCCION_USUARIO],
    [],
    GRUPO_OTRAS,
    [FLAG_PANTALLA_ENABLED]
));
//endregion Pantalla del Director
addDesventaja(new Ventaja(
    "Obligación oral",
    "",
    "El personaje debe de tener la capacidad de hablar para acumular magia y realizar sus conjuros.",
    NO_REPETIBLE,   //getRepetible
    [-1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    []
));
addDesventaja(new Ventaja(
    "Obligación somática",
    "",
    "El personaje debe moverse libremente para acumular magia y realizar sus conjuros.",
    NO_REPETIBLE,   //getRepetible
    [-1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    []
));
addDesventaja(new Ventaja(
    "Extenuación mágica",
    "",
    "El mago perderá un punto de Cansancio al lanzar un conjuro con un potencial superior a 100, dos si es mayor a 300 y tres si lo es de 500.",
    NO_REPETIBLE,   //getRepetible
    [-1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    []
));
addDesventaja(new Ventaja(
    "Lenta recuperación de magia",
    "",
    "La regeneración zeónica del personaje se reduce a la mitad.",
    NO_REPETIBLE,   //getRepetible
    [-1],      //coste
    [
        new ElementoProhibido(VENTAJA,"Magia estanca")
    ],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    []
));
addDesventaja(new Ventaja(
    "Magia atada a acción",
    "",
    "Sólo es posible usar magia si se realiza la acción o se cumple la condición determinada por la desventaja. En el caso de que la acción sea una habilidad secundaria, el mago deberá superar un control contra Difícil (DIF) para lanzar sus conjuros.",
    NO_REPETIBLE,   //getRepetible
    [-1],      //coste
    [],    //incompatibles
    true,  //anulable
    [LISTA_INTRODUCCION_USUARIO],
    [],
    GRUPO_DON,
    []
));
addDesventaja(new Ventaja(
    "Magia estanca",
    "",
    "El personaje carece de regeneración zeónica, por lo que no recuperará naturalmente los puntos de Zeon que consuma. Sólo podrá volver a conseguir magia drenándola de objetos que lo permitan o de seres vivos con el Don. Esta desventaja no puede combinarse a la de lenta recuperación de magia.",
    NO_REPETIBLE,   //getRepetible
    [-2],      //coste
    [
        new ElementoProhibido(VENTAJA,"Lenta recuperación de magia")
    ],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    []
));
addDesventaja(new Ventaja(
    "Lazo existencial",
    "",
    "El mago no podrá elegir los conjuros de Libre Acceso de sus vías de magia y será incapaz de acceder a conjuros elegidos libremente.",
    NO_REPETIBLE,   //getRepetible
    [-1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [lazoExistencial],
    GRUPO_DON,
    []
));
addDesventaja(new Ventaja(
    "Brujería",
    "",
    "El hechicero requiere obligatoriamente emplear componentes materiales para lanzar hechizos. Cada conjuro requerirá un componente distinto determinado por el Director de Juego, según su origen y los conocimientos del brujo.",
    NO_REPETIBLE,   //getRepetible
    [-2],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_DON,
    []
));

addDesventaja(new Ventaja(
    "Extenuación psíquica",
    "",
    "El personaje pierde el doble de puntos de Cansancio de lo que indique su fatiga psíquica. Límitación: Esta desventaja no puede cogerse en combinación con Resistencia a la fatiga psíquica.",
    NO_REPETIBLE,   //getRepetible
    [-1],      //coste
    [
        new ElementoProhibido(VENTAJA,"Resistencia a la fatiga psíquica")
    ],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    []
));
addDesventaja(new Ventaja(
    "Sin concentración",
    "",
    "Un psíquico con esta desventaja no podrá aplicar bonificadores a su potencial psíquico concentrándose.",
    NO_REPETIBLE,   //getRepetible
    [-1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    []
));
addDesventaja(new Ventaja(
    "Poder único",
    "",
    "El psíquico sólo podrá utilizar un único poder psíquico por asalto. Ello no le impide seguir usando otros mantenidos, siempre que los originara en asaltos anteriores.",
    NO_REPETIBLE,   //getRepetible
    [-1],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    []
));
addDesventaja(new Ventaja(
    "Consumición psíquica",
    "",
    "Si un psíquico sufre un fracaso psíquico, pierde automáticamente los mismos puntos de vida que la cantidad por la que no alcanzó el potencial mínimo requerido.",
    NO_REPETIBLE,   //getRepetible
    [-2],      //coste
    [],    //incompatibles
    true,  //anulable
    [],
    [],
    GRUPO_PSIQUICAS,
    []
));

var INCALCULABLE = -999;

/**
 *
 * @class Dinero
 * @param {number} oro
 * @param {number} plata
 * @param {number} cobre
 * @constructor
 */
function Dinero(oro, plata, cobre) {
    /** @type number */
    this.oro = oro;

    /** @type number */
    this.plata = plata;

    /** @type number */
    this.cobre = cobre;
}

Dinero.prototype = {
    constructor : Dinero,

    /**
     *
     * @returns {number}
     */
    getOro : function() {
        return this.oro;
    },

    /**
     *
     * @param {number} valor
     */
    setOro : function(valor) {
        this.oro = valor;
    },

    /**
     *
     * @param {number} valor
     */
    addOro : function(valor) {
        this.setOro(this.getOro() + valor);
    },

    /**
     *
     * @returns {number}
     */
    getPlata : function() {
        return this.plata;
    },

    /**
     *
     * @param {number} valor
     */
    setPlata : function(valor) {
        this.plata = valor;
    },

    /**
     *
     * @returns {number}
     */
    getCobre : function() {
        return this.cobre;
    },

    /**
     *
     * @param {number} valor
     */
    setCobre : function(valor) {
        this.cobre = valor;
    },
    /**
     *
     * @returns {number}
     */
    totalEnCobre : function() {
        if ((this.oro == INCALCULABLE) ||
            (this.plata == INCALCULABLE) ||
            (this.cobre == INCALCULABLE)) {
            return INCALCULABLE;
        }
        return ((((this.oro*100)+this.plata)*10)+this.cobre);
    }
};


var ARMADURA_LOC_CAMISOLA = "Camisola";
var ARMADURA_LOC_COMPLETA = "Completa";
var ARMADURA_LOC_PETO = "Peto";

var ARMADURA_CLASE_BLANDA = "Blanda";
var ARMADURA_CLASE_DURA = "Dura";

var TAM_ARMA_P = "Pequeño";
var TAM_ARMA_P3 = "P";
var TAM_ARMA_M = "Medio";
var TAM_ARMA_M3 = "M";
var TAM_ARMA_G = "Grande";
var TAM_ARMA_G3 = "G";
var TAM_ARMA_E = "Enorme";
var TAM_ARMA_E3 = "E";
var TAM_ARMA_GG = "Gigante";
var TAM_ARMA_GG3 = "GG";

var CAT_ARMA_ARMA_CORTA = "Arma Corta";
var CAT_ARMA_HACHA = "Hacha";
var CAT_ARMA_MAZA = "Maza";
var CAT_ARMA_ESPADA = "Espada";
var CAT_ARMA_MANDOBLE = "Mandoble";
var CAT_ARMA_ASTA = "Asta";
var CAT_ARMA_CUERDA = "Cuerda";
var CAT_ARMA_ESCUDO = "Escudo";
var CAT_ARMA_SIN_ARMAS = "Sin Armas";
var CAT_ARMA_PROYECTILES = "Arma de Proyectiles";
var CAT_ARMA_MUNICION = "Munición";
var CAT_ARMA_LANZAMIENTO = "Arma Arrojadiza";

var REGLA_ARMA_PRECISA = "Precisa";
var REGLA_ARMA_PRECISA_EXP = "Este tipo de armas permite al personaje disminuir a la mitad los penalizadores de los golpes apuntados, y los de la maniobra de Engatillar. Sólo se aplica en ataques cuerpo a cuerpo, no con proyectiles lanzados.";

var REGLA_ARMA_DOS_MANOS = "Arma a dos manos";
var REGLA_ARMA_DOS_MANOS_EXP = "Son las que se usan necesariamente con ambas manos. Las de este tipo permiten al personaje doblar el bono de Fuerza para calcular su daño final.";

var REGLA_ARMA_UNA_O_DOS_MANOS = "Arma a una o dos manos";
var REGLA_ARMA_UNA_O_DOS_MANOS_EXP = "Pueden utilizarse indistintamente con una o ambas manos. Si se usan con las dos, también permiten doblar el bono de Fuerza para calcular su daño final. En ellas aparecen indicados dos números en la fuerza requerida; el primero es el necesario para usarla con dos manos, y el segundo con sólo una.";

var REGLA_ARMA_COMPLEJA = "Compleja";
var REGLA_ARMA_COMPLEJA_EXP = "Esta clase de armas es excepcionalmente difícil de utilizar. Por ello, un personaje aumenta dos puntos su índice de Pifia, fracasando con un resultado de 5 en un D100. Si alcanza la maestría con ella, desaparece completamente este penalizador.";

var REGLA_ARMA_LANZABLE = "Lanzable";
var REGLA_ARMA_LANZABLE_EXP = "Todas las armas con esta regla especial están equilibradas o pensadas para ser usadas a distancia. Los personajes que tengan habilidad con ellas podrán emplearlas tanto físicamente como arrojándolas, sin la necesidad de adquirir la Tabla de armas de lanzamiento.";

var REGLA_ARMA_PRESA = "Presa";
var REGLA_ARMA_PRESA_EXP = "Son aquellas que permiten, a quienes las empleen, utilizar maniobras específicas de Presa para atrapar al oponente. Al contrario de lo que ocurre con las manos desnudas, al presar con ellas, un personaje no puede elegir usar sus propias características, sino que deberá utilizar la Fuerza natural del arma. Dicha característica representa su capacidad innata para trabar a sus adversarios. Naturalmente, se siguen utilizando los bonificadores a los controles enfrentados que se apliquen por la diferencia entre las habilidades de los contendientes. En el caso de las armas de calidad, cada bono natural de +5 añade un +1 a su Fuerza para presar.";

var REGLA_ARMA_TRABA_EL_ARMA = "Traba el arma";
var REGLA_ARMA_TRABA_EL_ARMA_EXP = "Artefactos que, por su diseño y características, disponen de la oportunidad de trabar o desarmar al oponente. Si realizando una parada con una de estas armas se consigue un contraataque, el personaje podrá realizar un ataque para Desarmar al adversario sin ningún tipo de penalizador.";

var REGLA_LANZA_CABALLERIA = "REGLA_LANZA_CABALLERIA"; //TODO

var REGLA_RED_GLADIADOR = "REGLA_RED_GLADIADOR";//TODO

var REGLA_ANCIANO_PRIMAVERA = "REGLA_ANCIANO_PRIMAVERA"; //TODO

var REGLA_CUERVO = "REGLA_CUERVO"; //TODO

var REGLA_KATANA_DOBLE_HOJA = "REGLA_KATANA_DOBLE_HOJA"; //TODO

var REGLA_KUSARI_GAMA = "REGLA_KUSARI_GAMA"; //TODO

var REGLA_SHUKO = "REGLA_SHUKO"; //TODO

var REGLA_BUMERAN = "REGLA_BUMERAN"; //TODO

var REGLA_KATAR = "REGLA_KATAR"; //TODO

var REGLA_ESCUDO_CORPORAL = "REGLA_ESCUDO_CORPORAL"; //TODO +30 a la parada,     +15 a la esquiva

var REGLA_ESCUDO = "REGLA_ESCUDO"; //TODO +20 a la parada,     +10 a la esquiva

var REGLA_RODELA = "REGLA_RODELA"; //TODO +10 a la parada,     +5 a la esquiva

var REGLA_ARCABUZ = "REGLA_ARCABUZ"; //TODO

var REGLA_BALISTA_LIGERA = "REGLA_BALISTA_LIGERA";
var REGLA_BALISTA_PESADA = "REGLA_BALISTA_PESADA";
var REGLA_BALLESTA = "REGLA_BALLESTA";
var REGLA_BALLESTA_MANO = "REGLA_BALLESTA_MANO";
var REGLA_BALLESTA_REPETICION = "REGLA_BALLESTA_REPETICION";
var REGLA_BALLESTA_PESADA = "REGLA_BALLESTA_PESADA";
var REGLA_BOLEADORAS = "REGLA_BOLEADORAS";
var REGLA_CAÑON = "REGLA_CAÑON";
var REGLA_TURCUS = "REGLA_TURCUS";
var REGLA_PISTOLA_MECHA = "REGLA_PISTOLA_MECHA";
var REGLA_FLECHA_FAJO = "REGLA_FLECHA_FAJO";
var REGLA_FLECHA_MELLA = "REGLA_FLECHA_MELLA";

var MUNICION_PISTOLA_MECHA = "MUNICION_PISTOLA_MECHA";
var MUNICION_ARCABUZ = "MUNICION_ARCABUZ";
var MUNICION_CERBATANA = "MUNICION_CERBATANA";
var MUNICION_CAÑON = "MUNICION_CAÑON";
var MUNICION_ARCO_CORTO = "MUNICION_ARCO_CORTO";
var MUNICION_ARCO_LARGO = "MUNICION_ARCO_LARGO";
var MUNICION_ARCO_LARGO_COMPUESTO = "MUNICION_ARCO_LARGO_COMPUESTO";
var MUNICION_BALLESTA = "MUNICION_BALLESTA";
var MUNICION_BALLESTA_REPETICION = "MUNICION_BALLESTA_REPETICION";
var MUNICION_BALLESTA_LIGERA = "MUNICION_BALLESTA_LIGERA";
var MUNICION_BALLESTA_PESADA = "MUNICION_BALLESTA_PESADA";
var MUNICION_BALISTA_LIGERA = "MUNICION_BALISTA_LIGERA";
var MUNICION_BALISTA_PESADA = "MUNICION_BALISTA_PESADA";

/**
 *
 * @class Equipo
 * @param {string} nombre
 * @param {Dinero} costeDinero
 * @param {number} peso
 * @param {string} disponibilidad
 * @param {number} entereza
 * @param {number} presencia
 * @param {number} bonoHabilidad
 * @constructor
 */
function Equipo(nombre, costeDinero, peso, disponibilidad, entereza, presencia, bonoHabilidad) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;
    /**
     *
     * @type {Dinero}
     */
    this.costeDinero = costeDinero;
    /**
     *
     * @type {number}
     */
    this.peso = peso;
    /**
     *
     * @type {string}
     */
    this.disponibilidad = disponibilidad;
    /**
     *
     * @type {number}
     */
    this.entereza = entereza;
    /**
     *
     * @type {number}
     */
    this.presencia = presencia;
    /**
     *
     * @type {number}
     */
    this.bonoHabilidad = bonoHabilidad;
}

Equipo.prototype = {
    constructor: Equipo,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @param {string} valor
     */
    setNombre : function(valor) {
        this.nombre = valor;
    },

    /**
     *
     * @returns {Dinero}
     */
    getCosteDinero : function() {
        return this.costeDinero;
    },

    /**
     *
     * @returns {number}
     */
    getPeso : function() {
        return this.peso;
    },

    /**
     *
     * @returns {string}
     */
    getDisponibilidad : function() {
        return this.disponibilidad;
    },

    /**
     *
     * @param {string} valor
     */
    setDisponibilidad : function(valor) {
        this.disponibilidad = valor;
    },

    /**
     *
     * @returns {number}
     */
    getEntereza : function() {
        return this.entereza;
    },

    /**
     *
     * @returns {number}
     */
    getPresencia : function() {
        return this.presencia;
    },

    /**
     *
     * @returns {number}
     */
    getBonoHabilidad : function() {
        return this.bonoHabilidad;
    },

    /**
     *
     * @returns {Equipo}
     */
    duplicar: function() {
        return new Equipo(this.nombre, this.costeDinero, this.peso, this.disponibilidad, this.entereza, this.presencia, this.bonoHabilidad);
    }
};

/**
 *
 * @class Arma
 * @extends {Equipo}
 * @param {string} nombre
 * @param {Dinero} costeDinero
 * @param {number} peso
 * @param {string} disponibilidad
 * @param {string[]} categorias
 * @param {number} velocidad
 * @param {number} dmgBase
 * @param {number} entereza
 * @param {number} rotura
 * @param {number} fueReq
 * @param {number} fueReq2manos
 * @param {number} presencia
 * @param {string} criticoPrimario
 * @param {string} criticoSecundario
 * @param {string[]} especial
 * @param {string} bonoDmg
 * @constructor
 */
function Arma(nombre, costeDinero, peso, disponibilidad, categorias, velocidad, dmgBase, entereza, rotura, fueReq, fueReq2manos, presencia, criticoPrimario, criticoSecundario, especial, bonoDmg) {
    Arma.parent.constructor.call(this,nombre,costeDinero,peso,disponibilidad,entereza,presencia,0);

    /** @type string[] */
    this.categorias = categorias;

    /** @type number */
    this.velocidad = velocidad;

    /** @type number */
    this.dañoBase = dmgBase;

    /** @type number */
    this.rotura = rotura;

    /** @type number */
    this.fueReq = fueReq;

    /** @type number */
    this.fueReq2manos = fueReq2manos;

    /** @type string */
    this.criticoPrimario = criticoPrimario;

    /** @type string */
    this.criticoSecundario = criticoSecundario;

    /** @type string[] */
    this.especial = especial;

    /** @type string */
    this.bonoDaño = bonoDmg;

    /** @type number */
    this.modificadorAtaqueParada = 0;

    /** @type number */
    this.modificadorTADefensor = 0;
}

extend(Arma,Equipo);

/**
 *
 * @returns {string}
 */
Arma.prototype.getCategoria = function() {
    var categoria = "";

    for (var i = 0; i < this.categorias.length; i++) {
        categoria += this.categorias[i];
        if (i+1 < this.categorias.length) {
            categoria += "/";
        }
    }

    return categoria;
}

/**
 *
 * @returns {string[]}
 */
Arma.prototype.getCategorias = function() {
    return this.categorias;
};

/**
 *
 * @returns {number}
 */
Arma.prototype.getVelocidad = function() {
    return this.velocidad;
};

/**
 *
 * @returns {number}
 */
Arma.prototype.getDañoBase = function() {
    return this.dañoBase;
};

/**
 *
 * @returns {number}
 */
Arma.prototype.getRotura = function() {
    return this.rotura;
};

/**
 *
 * @returns {number}
 */
Arma.prototype.getFueReq = function() {
    return this.fueReq;
};

/**
 *
 * @returns {number}
 */
Arma.prototype.getFueReq2Manos = function() {
    return this.fueReq2manos;
};

/**
 *
 * @returns {string}
 */
Arma.prototype.getCriticoPrimario = function() {
    return this.criticoPrimario;
};

/**
 *
 * @returns {string}
 */
Arma.prototype.getCriticoSecundario = function() {
    return this.criticoSecundario;
};

/**
 *
 * @returns {string[]}
 */
Arma.prototype.getEspecial = function() {
    return this.especial;
};

/**
 *
 * @returns {string}
 */
Arma.prototype.getBonoDaño = function() {
    return this.bonoDaño;
};

/**
 *
 * @returns {number}
 */
Arma.prototype.getModificadorAtaqueParada = function() {
    return this.modificadorAtaqueParada;
};

/**
 *
 * @returns {number}
 */
Arma.prototype.getModificadorTADefensor = function() {
    return this.modificadorTADefensor;
};

/**
 *
 * @returns {string}
 */
Arma.prototype.getTamaño = function() {
    var tamFinal = "";
    for (var i = 0; i < this.categorias.length;i++) {
        var tam = tamañoCategoriaArma(this.categorias[i]);
        if (tamFinal == "") {
            tamFinal = tam;
        } else {
            if (indiceTamaño(tam) > indiceTamaño(tamFinal)) {
                tamFinal = tam;
            }
        }
    }
    return tamFinal;
};

/**
 *
 * @returns {Arma}
 */
Arma.prototype.duplicar = function() {
    return new Arma(this.nombre, this.costeDinero, this.peso, this.disponibilidad, this.categorias, this.velocidad, this.dañoBase, this.entereza, this.rotura, this.fueReq, this.fueReq2manos, this.presencia, this.criticoPrimario, this.criticoSecundario, this.especial, BONO_FUE);
};

Arma.prototype.toJSON = function() {
    return this.nombre;
};



/**
 *
 * @class Armadura
 * @extends Equipo
 * @param {string} nombre
 * @param {Dinero} costeDinero
 * @param {number} peso
 * @param {string} disponibilidad
 * @param {number} requisitoArmadura
 * @param {number} penalizadorArmadura
 * @param {number} penalizadorNatural
 * @param {number} restriccionMovimiento
 * @param {number} entereza
 * @param {number} presencia
 * @param {string} localizacion
 * @param {string} clase
 * @param {number[]} tas
 * @constructor
 */
function Armadura(nombre,costeDinero,peso,disponibilidad,requisitoArmadura,penalizadorArmadura,penalizadorNatural,restriccionMovimiento,entereza,presencia,localizacion,clase,tas) {
    Armadura.parent.constructor.call(this,nombre,costeDinero,peso,disponibilidad,entereza,presencia,0);

    /** @type number */
    this.requisitoArmadura = requisitoArmadura;

    /** @type number */
    this.penalizadorNatural = penalizadorNatural;

    /** @type number */
    this.restriccionMovimiento = restriccionMovimiento;

    /** @type string */
    this.localizacion = localizacion;

    /** @type string */
    this.clase = clase;

    /** @type number[] */
    this.tas = tas;
}

extend(Armadura,Equipo);

/**
 *
 * @returns {number}
 */
Armadura.prototype.getRequisitoArmadura = function() {
    return this.requisitoArmadura;
};

/**
 *
 * @returns {number}
 */
Armadura.prototype.getPenalizadorNatural =  function() {
    return this.penalizadorNatural;
};

/**
 *
 * @returns {number}
 */
Armadura.prototype.getRestriccionMovimiento = function() {
    return this.restriccionMovimiento;
};

/**
 *
 * @returns {string}
 */
Armadura.prototype.getLocalizacion = function() {
    return this.localizacion;
};

/**
 *
 * @returns {string}
 */
Armadura.prototype.getClase = function() {
    return this.clase;
};

/**
 *
 * @returns {number[]}
 */
Armadura.prototype.getTAs = function() {
    return this.tas;
};

/**
 *
 * @returns {Armadura}
 */
Armadura.prototype.duplicar = function() {
    return new Armadura(this.nombre,
        this.costeDinero,
        this.peso,
        this.disponibilidad,
        this.requisitoArmadura,
        this.penalizadorArmadura,
        this.penalizadorNatural,
        this.restriccionMovimiento,
        this.entereza,
        this.presencia,
        this.localizacion,
        this.clase,
        this.tas);
};

Armadura.prototype.toJSON = function() {
    return this.nombre;
};


//TODO añadir yelmos (core exxet 83)
//TODO cambiar tas para que sean su propia clase




/**
 *
 * @type {Arma[]}
 */
var armas_set = [];
/**
 *
 * @type {Armadura[]}
 */
var armaduras_set = [];

/**
 *
 * @type {Equipo[]}
 */
var vestimenta_set = [];
var transporte_set = [];
var comida_set = [];
var vivienda_set = [];
var decoracion_set = [];
var venenos_set = [];
var varios_set = [];


var ERR_ARMA_DESCONOCIDA = "Error: Arma desconocida";
var ERR_INDICE_TAM_DESCONOCIDO = "Error: tamaño desconocido";

/**
 * Inicializa las listas de equipo. Las ordena.
 */
function initEquipo() {
    armas_set.sort(SortPorAtributoNombre);
    armaduras_set.sort(SortPorAtributoNombre);

}

/**
 * Devuelve el arma indicada por el nombre
 * @param {string} nombreArma El nombre del arma que se busca
 * @returns {Arma}
 * @throws ERR_ARMA_DESCONOCIDA
 */
function getArma(nombreArma) {
    for (var i = 0; i < armas_set.length; i++) {
        if (armas_set[i].getNombre() == nombreArma) {
            return armas_set[i]
        }
    }
    throw ERR_ARMA_DESCONOCIDA + ": " + nombreArma;
}

/**
 * Aplica un modificador de -5 a +25 a un arma y devuelve el arma modificada
 * @param {Arma} arma El arma a modificar
 * @param {number} modificador El modificador, en múltiplos de 5. Puede ser -5,0,5,10,15,20,25
 * @returns {Arma}
 */
function armaConModificador(arma,modificador) {
    var textMod = modificadorBonito(modificador);
    var armaConMod = arma.duplicar();
    armaConMod.setNombre(armaConMod.getNombre() + " " + textMod);

    alterarCosteDisponibilidad(modificador, armaConMod);

    if (modificador > 0) {
        armaConMod.rotura += 2*(modificador/5);
        armaConMod.presencia += modificador*10;
        armaConMod.entereza += modificador*2;
        armaConMod.dañoBase += modificador*2;
        armaConMod.modificadorAtaqueParada = modificador;
        armaConMod.velocidad += modificador;
        armaConMod.modificadorTADefensor -= modificador/5;
    } else if (modificador == -5) {
        armaConMod.rotura += 2*(modificador/5);
        armaConMod.entereza += modificador*2;
        armaConMod.dañoBase += modificador*2;
        armaConMod.modificadorAtaqueParada = modificador;
        armaConMod.velocidad += modificador;
        armaConMod.modificadorTADefensor -= modificador/5;
    }

    return armaConMod;
}

/**
 * Altera el coste (atributo costeDinero) y la disponibilidad (atributo disponibilidad) de una pieza de equipo con modificador
 * @param {number} modificador Puede ser -5,0,5,10,15,20,25
 * @param {Equipo} equipo La pieza de equipo
 */
function alterarCosteDisponibilidad(modificador, equipo) {
    switch (modificador) {
        case -5:
            equipo.getCosteDinero().setOro(equipo.getCosteDinero().getOro()/2);
            equipo.getCosteDinero().setPlata(equipo.getCosteDinero().getPlata()/2);
            equipo.getCosteDinero().setCobre(equipo.getCosteDinero().getCobre()/2);
            break;
        case 0:
            break;
        case 5:
            equipo.getCosteDinero().setOro(equipo.getCosteDinero().getOro()*20);
            equipo.getCosteDinero().setPlata(equipo.getCosteDinero().getPlata()*20);
            equipo.getCosteDinero().setCobre(equipo.getCosteDinero().getCobre()*20);
            equipo.setDisponibilidad(DISP_A);
            break;
        case 10:
        case 15:
        case 20:
        case 25:
            equipo.getCosteDinero().setOro(INCALCULABLE);
            equipo.getCosteDinero().setPlata(INCALCULABLE);
            equipo.getCosteDinero().setCobre(INCALCULABLE);
            equipo.setDisponibilidad(NO_DISPONIBLE);
            break;
    }
}

/**
 * Aplica un modificador de -5 a +25 a una armadura y devuelve la armadura modificada
 * @param {Armadura} armadura La armadura a modificar
 * @param {number} modificador El modificador, en múltiplos de 5. Puede ser -5,0,5,10,15,20,25
 * @returns {Armadura}
 */
function armaduraConModificador(armadura,modificador) {
    var textMod = modificadorBonito(modificador);
    var armaduraConMod = armadura.duplicar();
    armaduraConMod.setNombre(armaduraConMod.getNombre() + " " + textMod);

    alterarCosteDisponibilidad(modificador, armaduraConMod);

    var modificadorEntre5 = modificador/5;

    armaduraConMod.penalizadorNatural += modificador;
    if (armaduraConMod.penalizadorNatural  > 0) {
        armaduraConMod.penalizadorNatural = 0;
    }
    armaduraConMod.requisitoArmadura -= modificador;
    if (armaduraConMod.requisitoArmadura < 0) {
        armaduraConMod.requisitoArmadura = 0;
    }
    armaduraConMod.tas = sumarArmadura(armaduraConMod.tas,[modificadorEntre5,modificadorEntre5,modificadorEntre5,modificadorEntre5,modificadorEntre5,modificadorEntre5,modificadorEntre5]);
    if (modificador > 0) {
        armaduraConMod.presencia += modificador*10;
    }
    armaduraConMod.entereza += modificador;
    armaduraConMod.restriccionMovimiento -= modificadorEntre5;
    if (armaduraConMod.restriccionMovimiento < 0) {
        armaduraConMod.restriccionMovimiento = 0;
    }

    return armaduraConMod;
}

/**
 * Aplica un tamaño Enorme o Gigante a un arma.
 * @param arma Arma El arma a modificar
 * @param tam String TAM_ARMA_E o TAM_ARMA_GG
 * @returns {Arma}
 */
function armaMayor(arma, tam) {
    var newArma = arma.duplicar();

    switch (tam) {
        case TAM_ARMA_E:
            newArma.fueReq += 2;
            newArma.fueReq2manos += 2;
            var bonoDañoEnorme = ((arma.bonoDaño/5)%2==0) ? arma.bonoDaño/2 : (arma.bonoDaño-5) /2;
            newArma.bonoDaño += bonoDañoEnorme;
            newArma.entereza += 6;
            newArma.rotura += 3;
            break;
        case TAM_ARMA_GG:
            newArma.fueReq += 5;
            newArma.fueReq2manos += 5;
            newArma.bonoDaño *= 2;
            newArma.entereza += 16;
            newArma.rotura += 8;
            break;
        default:
            break;
    }

    return newArma;
}

/**
 * Aplica un modificador a una pieza de equipo (ni arma ni armadura)
 * @param equipo Equipo La pieza de equipo a modificar.
 * @param modificador number Puede ser -5,0,5,10,15,20 o 25
 * @returns {Equipo}
 */
function equipoConModificador(equipo,modificador) {
    var textMod = modificadorBonito(modificador);
    var equipoConMod = equipo.duplicar();
    equipoConMod.setNombre(equipoConMod.getNombre() + " " + textMod);

    alterarCosteDisponibilidad(modificador, equipoConMod);

    if (modificador > 0) {
        equipoConMod.presencia += modificador*10;
    }
    equipoConMod.entereza += modificador*2;
    equipoConMod.bonoHabilidad += 10;

    return equipoConMod;
}

/**
 * Suma un array de tipos de armadura a otro
 * @param valoresTA_1 number[7] El primer array de tipos de armadura
 * @param valoresTA_2 number[7] El segundo array de tipos de armadura
 * @returns {Array}
 */
function sumarArmadura(valoresTA_1,valoresTA_2) {
    var salida =  [];
    for (var i=0;i<valoresTA_1.length;i++) {
        salida.push(valoresTA_1[i]+valoresTA_2[i]);
    }
    return salida;
}

function getTiposMixtos(tiposBase) {
    var tiposMixtos = [];
    armas:
    for (var i=0; i < armas_set.length;i++) {
        var arma = armas_set[i];
        var categorias = armas_set[i].getCategorias();
        for (var j=0; j < categorias.length;j++) {
            var categoria = categorias[j];
            for (var k = 0; k < tiposBase.length;k++) {
                var tipoBase = tiposBase[k];
                if (categoria == tipoBase) {
                    tiposMixtos.push(arma.getCategoria());
                    continue armas;
                }
            }
        }
    }
    return tiposMixtos;
}

function getTiposDistintos(tiposBase) {
    var tiposDistintos = [];
    armas:
        for (var i=0; i < armas_set.length;i++) {
            var arma = armas_set[i];
            var categorias = armas_set[i].getCategorias();
            for (var j=0; j < categorias.length;j++) {
                var categoria = categorias[j];
                for (var k = 0; k < tiposBase.length;k++) {
                    var tipoBase = tiposBase[k];
                    if (categoria == tipoBase) {
                        continue armas;
                    }
                }
            }
            tiposDistintos.push(arma.getCategoria());
        }
    return tiposDistintos;
}

function getAllTipos() {
    var tipos = [];
        for (var i=0; i < armas_set.length;i++) {
            var arma = armas_set[i];
            tipos.push(arma.getCategoria());
        }
    return tipos;
}

function noPuedeComprarManejoArma(parametros) {
    var arma = parametros.opcion;

    return personaje_actual.hasArmaManejada(arma);
}

function noPuedeComprarManejoTipo(parametros) {
    var tipo = parametros.opcion;

    return personaje_actual.hasTipoArmaManejada(tipo);
}

function tamañoCategoriaArma(categoriaArma) {
    switch (categoriaArma) {
        case CAT_ARMA_SIN_ARMAS:
        case CAT_ARMA_ARMA_CORTA:
            return TAM_ARMA_P;
        case CAT_ARMA_MANDOBLE:
        case CAT_ARMA_ASTA:
            return TAM_ARMA_G;
        case CAT_ARMA_HACHA:
        case CAT_ARMA_MAZA:
        case CAT_ARMA_ESPADA:
        case CAT_ARMA_CUERDA:
        default:
            return TAM_ARMA_M;
    }
}

/**
 * Indice de tamaño de las armas
 * @param tam String El tamaño del arma. Puede ser TAM_ARMA_P, TAM_ARMA_M, TAM_ARMA_G, TAM_ARMA_E, TAM_ARMA_GG
 * @returns {number}
 * @throws ERR_INDICE_TAM_DESCONOCIDO
 */
function indiceTamaño(tam) {
    var indice;
    switch (tam) {
        case TAM_ARMA_P:
            indice = 10;
            break;
        case TAM_ARMA_M:
            indice =  20;
            break;
        case TAM_ARMA_G:
            indice =  30;
            break;
        case TAM_ARMA_E:
            indice =  40;
            break;
        case TAM_ARMA_GG:
            indice =  50;
            break;
        default:
            throw ERR_INDICE_TAM_DESCONOCIDO + ": " + tam;
    }
    return indice;
}
var ARMA_SIN_ARMAS = "Sin armas";
armas_set.push(new Arma(ARMA_SIN_ARMAS, new Dinero(0, 0, 0), 0, DISP_TOTAL, [CAT_ARMA_SIN_ARMAS], 20, 10, 0, -2, 0, 0, 0, ATAQUE_CON3, "", [REGLA_ARMA_PRECISA], BONO_NO));

var ARMA_ALABARDA = "Alabarda";
armas_set.push(new Arma(ARMA_ALABARDA, new Dinero(12, 0, 0), 3, DISP_TOTAL, [CAT_ARMA_ASTA, CAT_ARMA_MANDOBLE], -15, 60, 15, 4, 6, 11, 20, ATAQUE_FIL3, ATAQUE_CON3, [REGLA_ARMA_DOS_MANOS], BONO_FUE));
var ARMA_ARPON = "Arpón";
armas_set.push(new Arma(ARMA_ARPON, new Dinero(0, 50, 0), 2, DISP_TOTAL, [CAT_ARMA_ASTA], -5, 35, 11, 0, 5, 5, 15, ATAQUE_PEN3, "", [REGLA_ARMA_UNA_O_DOS_MANOS, REGLA_ARMA_LANZABLE], BONO_FUE));
var ARMA_CADENA = "Cadena";
armas_set.push(new Arma(ARMA_CADENA, new Dinero(0, 50, 0), 2, DISP_TOTAL, [CAT_ARMA_CUERDA], 0, 25, 13, 2, 6, 6, 15, ATAQUE_CON3, "", [REGLA_ARMA_COMPLEJA, REGLA_ARMA_PRESA], BONO_FUE));
var ARMA_CESTUS = "Cestus";
armas_set.push(new Arma(ARMA_CESTUS, new Dinero(3, 0, 0), 0.5, DISP_TOTAL, [CAT_ARMA_ARMA_CORTA], 10, 25, 11, -2, 3, 3, 15, ATAQUE_PEN3, ATAQUE_FIL3, [], BONO_FUE));
var ARMA_CIMITARRA = "Cimitarra";
armas_set.push(new Arma(ARMA_CIMITARRA, new Dinero(10, 0, 0), 1, DISP_B, [CAT_ARMA_ESPADA], -5, 50, 13, 4, 5, 5, 20, ATAQUE_FIL3, "", [], BONO_FUE));
var ARMA_DAGA = "Daga";
armas_set.push(new Arma(ARMA_DAGA, new Dinero(0, 50, 0), 0.5, DISP_TOTAL, [CAT_ARMA_ARMA_CORTA], 20, 30, 10, -2, 5, 5, 15, ATAQUE_PEN3, ATAQUE_FIL3, [REGLA_ARMA_LANZABLE, REGLA_ARMA_PRECISA], BONO_FUE));
var ARMA_DAGA_PARADA = "Daga de parada";
armas_set.push(new Arma(ARMA_DAGA_PARADA, new Dinero(10, 0, 0), 0.6, DISP_B, [CAT_ARMA_ARMA_CORTA], 15, 30, 12, 0, 3, 3, 20, ATAQUE_PEN3, ATAQUE_FIL3, [REGLA_ARMA_LANZABLE, REGLA_ARMA_TRABA_EL_ARMA, REGLA_ARMA_PRECISA], BONO_FUE));
var ARMA_ESPADA_ANCHA = "Espada ancha";
armas_set.push(new Arma(ARMA_ESPADA_ANCHA, new Dinero(4, 0, 0), 1.5, DISP_TOTAL, [CAT_ARMA_ESPADA], -5, 55, 15, 3, 5, 5, 25, ATAQUE_FIL3, "", [], BONO_FUE));
var ARMA_ESPADA_BASTARDA = "Espada bastarda";
armas_set.push(new Arma(ARMA_ESPADA_BASTARDA, new Dinero(20, 0, 0), 2, DISP_B, [CAT_ARMA_ESPADA, CAT_ARMA_MANDOBLE], -30, 70, 15, 5, 7, 9, 25, ATAQUE_FIL3, ATAQUE_CON3, [REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_ESPADA_CORTA = "Espada corta";
armas_set.push(new Arma(ARMA_ESPADA_CORTA, new Dinero(2, 0, 0), 0.8, DISP_TOTAL, [CAT_ARMA_ARMA_CORTA], 15, 40, 12, 1, 4, 4, 20, ATAQUE_PEN3, ATAQUE_FIL3, [REGLA_ARMA_PRECISA], BONO_FUE));
var ARMA_ESPADA_LARGA = "Espada larga";
armas_set.push(new Arma(ARMA_ESPADA_LARGA, new Dinero(5, 0, 0), 1.4, DISP_TOTAL, [CAT_ARMA_ESPADA], 0, 50, 13, 3, 6, 6, 25, ATAQUE_FIL3, "", [], BONO_FUE));
var ARMA_ESTILETE = "Estilete";
armas_set.push(new Arma(ARMA_ESTILETE, new Dinero(0, 60, 0), 0.4, DISP_TOTAL, [CAT_ARMA_ARMA_CORTA], 20, 25, 8, -3, 3, 3, 15, ATAQUE_PEN3, "", [REGLA_ARMA_LANZABLE, REGLA_ARMA_PRECISA], BONO_FUE));
var ARMA_ESTOQUE = "Estoque";
armas_set.push(new Arma(ARMA_ESTOQUE, new Dinero(25, 0, 0), 1.2, DISP_B, [CAT_ARMA_ESPADA], 15, 40, 11, 2, 4, 4, 20, ATAQUE_PEN3, ATAQUE_FIL3, [REGLA_ARMA_PRECISA], BONO_FUE));
var ARMA_FLORETE = "Florete";
armas_set.push(new Arma(ARMA_FLORETE, new Dinero(15, 0, 0), 1, DISP_B, [CAT_ARMA_ESPADA, CAT_ARMA_ARMA_CORTA], 15, 35, 9, -2, 3, 3, 20, ATAQUE_PEN3, "", [REGLA_ARMA_PRECISA], BONO_FUE));
var ARMA_GARFIO = "Garfio";
armas_set.push(new Arma(ARMA_GARFIO, new Dinero(1, 0, 0), 0.5, DISP_TOTAL, [CAT_ARMA_ARMA_CORTA], 10, 30, 11, -2, 3, 3, 15, ATAQUE_PEN3, "", [], BONO_FUE));
var ARMA_GARROTE = "Garrote";
armas_set.push(new Arma(ARMA_GARROTE, new Dinero(0, 50, 0), 1.5, DISP_TOTAL, [CAT_ARMA_MAZA], 0, 30, 11, -2, 5, 5, 15, ATAQUE_CON3, "", [], BONO_FUE));
var ARMA_GRAN_MARTILLO_GUERRA = "Gran martillo de guerra";
armas_set.push(new Arma(ARMA_GRAN_MARTILLO_GUERRA, new Dinero(15, 0, 0), 5, DISP_TOTAL, [CAT_ARMA_MAZA], -35, 70, 16, 6, 7, 10, 20, ATAQUE_CON3, "", [REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_GUADAÑA = "Guadaña";
armas_set.push(new Arma(ARMA_GUADAÑA, new Dinero(0, 20, 0), 2.5, DISP_TOTAL, [CAT_ARMA_ASTA, CAT_ARMA_MANDOBLE], 0, 35, 12, 2, 5, 9, 25, ATAQUE_FIL3, ATAQUE_CON3, [REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_HACHA_DOS_MANOS = "Hacha a dos manos";
armas_set.push(new Arma(ARMA_HACHA_DOS_MANOS, new Dinero(40, 0, 0), 5, DISP_TOTAL, [CAT_ARMA_HACHA, CAT_ARMA_MANDOBLE], -70, 100, 17, 7, 9, 11, 30, ATAQUE_FIL3, ATAQUE_CON3, [REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_HACHA_GUERRA = "Hacha de guerra";
armas_set.push(new Arma(ARMA_HACHA_GUERRA, new Dinero(15, 0, 0), 1.5, DISP_B, [CAT_ARMA_HACHA], -30, 70, 15, 5, 7, 7, 25, ATAQUE_FIL3, ATAQUE_CON3, [REGLA_ARMA_LANZABLE], BONO_FUE));
var ARMA_HACHA_MANO = "Hacha de mano";
armas_set.push(new Arma(ARMA_HACHA_MANO, new Dinero(2, 0, 0), 1, DISP_TOTAL, [CAT_ARMA_HACHA], 0, 45, 13, 4, 5, 5, 15, ATAQUE_FIL3, "", [REGLA_ARMA_LANZABLE], BONO_FUE));
var ARMA_JABALINA = "Jabalina";
armas_set.push(new Arma(ARMA_JABALINA, new Dinero(2, 0, 0), 1, DISP_TOTAL, [CAT_ARMA_ASTA], 5, 35, 10, -2, 4, 4, 20, ATAQUE_PEN3, "", [REGLA_ARMA_LANZABLE], BONO_FUE));
var ARMA_LANZA = "Lanza";
armas_set.push(new Arma(ARMA_LANZA, new Dinero(4, 0, 0), 3, DISP_TOTAL, [CAT_ARMA_ASTA], 5, 40, 13, 2, 4, 6, 25, ATAQUE_PEN3, "", [REGLA_ARMA_LANZABLE, REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_LANZA_CABALLERIA = "Lanza de caballería";
armas_set.push(new Arma(ARMA_LANZA_CABALLERIA, new Dinero(20, 0, 0), 2, DISP_B, [CAT_ARMA_ASTA], -30, 80, 12, 7, 8, 8, 25, ATAQUE_PEN3, "", [REGLA_LANZA_CABALLERIA], BONO_FUE));
var ARMA_LATIGO = "Látigo";
armas_set.push(new Arma(ARMA_LATIGO, new Dinero(5, 0, 0), 1, DISP_TOTAL, [CAT_ARMA_CUERDA], -20, 35, 9, -3, 4, 4, 20, ATAQUE_FIL3, ATAQUE_CON3, [REGLA_ARMA_COMPLEJA, REGLA_ARMA_PRESA], BONO_FUE));
var ARMA_LAZO = "Lazo";
armas_set.push(new Arma(ARMA_LAZO, new Dinero(0, 20, 0), 0.3, DISP_TOTAL, [CAT_ARMA_CUERDA], 10, 5, 9, -3, 4, 4, 20, ATAQUE_CON3, "", [REGLA_ARMA_COMPLEJA, REGLA_ARMA_PRESA], BONO_FUE));
var ARMA_MANDOBLE = "Mandoble";
armas_set.push(new Arma(ARMA_MANDOBLE, new Dinero(50, 0, 0), 2.5, DISP_B, [CAT_ARMA_MANDOBLE], -60, 90, 18, 6, 8, 10, 30, ATAQUE_FIL3, ATAQUE_CON3, [REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_MANGUAL = "Mangual";
armas_set.push(new Arma(ARMA_MANGUAL, new Dinero(15, 0, 0), 1, DISP_TOTAL, [CAT_ARMA_MAZA, CAT_ARMA_MANDOBLE], -50, 80, 14, 6, 8, 10, 20, ATAQUE_CON3, "", [REGLA_ARMA_COMPLEJA], BONO_FUE));
var ARMA_MARTILLO_GUERRA = "Martillo de guerra";
armas_set.push(new Arma(ARMA_MARTILLO_GUERRA, new Dinero(4,0,0),1.2,DISP_TOTAL,[CAT_ARMA_MAZA],-5,50,15,4,6,6,15,ATAQUE_CON3,[]));
var ARMA_MAYAL = "Mayal";
armas_set.push(new Arma(ARMA_MAYAL, new Dinero(12, 0, 0), 1.2, DISP_TOTAL, [CAT_ARMA_MAZA, CAT_ARMA_CUERDA], 0, 40, 13, 4, 6, 6, 15, ATAQUE_CON3, "", [REGLA_ARMA_COMPLEJA], BONO_FUE));
var ARMA_MAZA = "Maza";
armas_set.push(new Arma(ARMA_MAZA, new Dinero(2, 0, 0), 1.8, DISP_TOTAL, [CAT_ARMA_MAZA], 0, 40, 14, 4, 6, 6, 15, ATAQUE_CON3, "", [], BONO_FUE));
var ARMA_MAZA_PESADA = "Maza pesada";
armas_set.push(new Arma(ARMA_MAZA_PESADA, new Dinero(15, 0, 0), 2.5, DISP_TOTAL, [CAT_ARMA_MAZA, CAT_ARMA_MANDOBLE], -15, 60, 16, 5, 6, 10, 15, ATAQUE_CON3, "", [REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_RED_GLADIADOR = "Red de gladiador";
armas_set.push(new Arma(ARMA_RED_GLADIADOR, new Dinero(1, 0, 0), 0.5, DISP_TOTAL, [CAT_ARMA_CUERDA], 0, 5, 13, -4, 4, 4, 15, ATAQUE_CON3, ATAQUE_FIL3, [REGLA_ARMA_LANZABLE, REGLA_ARMA_PRESA, REGLA_RED_GLADIADOR], BONO_FUE));
var ARMA_SABLE = "Sable";
armas_set.push(new Arma(ARMA_SABLE, new Dinero(20, 0, 0), 1, DISP_B, [CAT_ARMA_ESPADA], 10, 45, 12, 3, 6, 6, 20, ATAQUE_FIL3, ATAQUE_PEN3, [], BONO_FUE));
var ARMA_TRIDENTE = "Tridente";
armas_set.push(new Arma(ARMA_TRIDENTE, new Dinero(3, 0, 0), 2, DISP_TOTAL, [CAT_ARMA_ASTA], -10, 40, 12, 3, 6, 7, 15, ATAQUE_PEN3, "", [REGLA_ARMA_LANZABLE, REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_VARA = "Vara";
armas_set.push(new Arma(ARMA_VARA, new Dinero(0, 40, 0), 1, DISP_TOTAL, [CAT_ARMA_ASTA], 10, 30, 11, 0, 4, 4, 30, ATAQUE_CON3, "", [REGLA_ARMA_DOS_MANOS], BONO_FUE));
var ARMA_ABANICO_COMBATE = "Abanico de combate";
armas_set.push(new Arma(ARMA_ABANICO_COMBATE, new Dinero(5, 0, 0), 0.2, DISP_B, [CAT_ARMA_ARMA_CORTA], 20, 30, 8, 0, 4, 4, 25, ATAQUE_FIL3, ATAQUE_CON3, [REGLA_ARMA_PRECISA, REGLA_ARMA_LANZABLE], BONO_FUE));
var ARMA_ANCIANO_PRIMAVERA = "Anciano de primavera";
armas_set.push(new Arma(ARMA_ANCIANO_PRIMAVERA, new Dinero(15, 0, 0), 3, DISP_B, [CAT_ARMA_ASTA], 15, 35, 12, 2, 4, 4, 25, ATAQUE_FIL3, ATAQUE_PEN3, [REGLA_ARMA_COMPLEJA, REGLA_ARMA_DOS_MANOS, REGLA_ANCIANO_PRIMAVERA], BONO_FUE));
var ARMA_CUERVO = "Cuervo";
armas_set.push(new Arma(ARMA_CUERVO, new Dinero(5, 0, 0), 0.5, DISP_B, [CAT_ARMA_ARMA_CORTA], 10, 35, 11, 2, 4, 4, 25, ATAQUE_CON3, ATAQUE_FIL3, [REGLA_ARMA_COMPLEJA, REGLA_ARMA_PRECISA, REGLA_CUERVO], BONO_FUE));
var ARMA_KATANA = "Katana";
armas_set.push(new Arma(ARMA_KATANA, new Dinero(50, 0, 0), 1, DISP_B, [CAT_ARMA_ESPADA], 0, 50, 11, 3, 5, 6, 40, ATAQUE_FIL3, "", [REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_KATANA_DOBLE_HOJA = "Katana de doble hoja";
armas_set.push(new Arma(ARMA_KATANA_DOBLE_HOJA, new Dinero(75, 0, 0), 2, DISP_B, [CAT_ARMA_ESPADA], -5, 55, 11, 3, 8, 8, 40, ATAQUE_FIL3, "", [REGLA_KATANA_DOBLE_HOJA], BONO_FUE));
var ARMA_KUSARI_GAMA = "Kusari-Gama";
armas_set.push(new Arma(ARMA_KUSARI_GAMA, new Dinero(10, 0, 0), 1, DISP_B, [CAT_ARMA_ARMA_CORTA, CAT_ARMA_CUERDA], 5, 40, 12, 4, 5, 5, 25, ATAQUE_FIL3, ATAQUE_CON3, [REGLA_ARMA_DOS_MANOS, REGLA_ARMA_PRESA, REGLA_KUSARI_GAMA], BONO_FUE));
var ARMA_NO_DACHI = "No-Dachi";
armas_set.push(new Arma(ARMA_NO_DACHI, new Dinero(70, 0, 0), 1.5, DISP_B, [CAT_ARMA_MANDOBLE], -35, 80, 14, 4, 8, 10, 40, ATAQUE_FIL3, "", [REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_NUNCHAKU = "Nunchaku";
armas_set.push(new Arma(ARMA_NUNCHAKU, new Dinero(2, 0, 0), 0.6, DISP_B, [CAT_ARMA_CUERDA], 15, 30, 11, 0, 5, 5, 15, ATAQUE_CON3, "", [], BONO_FUE));
var ARMA_SAI = "Sai";
armas_set.push(new Arma(ARMA_SAI, new Dinero(1, 0, 0), 0.4, DISP_B, [CAT_ARMA_ARMA_CORTA], 15, 35, 12, 0, 4, 4, 25, ATAQUE_PEN3, ATAQUE_FIL3, [REGLA_ARMA_PRECISA, REGLA_ARMA_TRABA_EL_ARMA], BONO_FUE));
var ARMA_SHURIKEN = "Shuriken";
armas_set.push(new Arma(ARMA_SHURIKEN, new Dinero(0, 50, 0), 0.1, DISP_B, [CAT_ARMA_ARMA_CORTA], 20, 25, 10, 1, 4, 4, 20, ATAQUE_FIL3, ATAQUE_PEN3, [REGLA_ARMA_LANZABLE], BONO_FUE));
var ARMA_SHUKO = "Shuko";
armas_set.push(new Arma(ARMA_SHUKO, new Dinero(3, 0, 0), 0.3, DISP_B, [CAT_ARMA_ARMA_CORTA], 10, 20, 9, -2, 4, 4, 25, ATAQUE_PEN3, "", [REGLA_SHUKO], BONO_FUE));
var ARMA_TANTO = "Tanto";
armas_set.push(new Arma(ARMA_TANTO, new Dinero(20, 0, 0), 0.5, DISP_B, [CAT_ARMA_ARMA_CORTA], 20, 40, 9, 1, 3, 3, 40, ATAQUE_FIL3, "", [REGLA_ARMA_PRECISA], BONO_FUE));
var ARMA_TONFA = "Tonfa";
armas_set.push(new Arma(ARMA_TONFA, new Dinero(1, 0, 0), 0.3, DISP_B, [CAT_ARMA_ARMA_CORTA], 20, 30, 13, 0, 4, 4, 25, ATAQUE_CON3, "", [REGLA_ARMA_PRECISA], BONO_FUE));
var ARMA_BUMERAN = "Bumerán";
armas_set.push(new Arma(ARMA_BUMERAN, new Dinero(3, 0, 0), 0.6, DISP_B, [CAT_ARMA_ARMA_CORTA], 10, 30, 10, 0, 4, 4, 15, ATAQUE_CON3, ATAQUE_FIL3, [REGLA_ARMA_LANZABLE, REGLA_BUMERAN], BONO_FUE));
var ARMA_GARRAS = "Garras";
armas_set.push(new Arma(ARMA_GARRAS, new Dinero(3, 0, 0), 0.5, DISP_B, [CAT_ARMA_ARMA_CORTA], 15, 30, 12, 2, 4, 4, 15, ATAQUE_FIL3, ATAQUE_PEN3, [], BONO_FUE));
var ARMA_QUEBRADORA = "Quebradora";
armas_set.push(new Arma(ARMA_QUEBRADORA, new Dinero(30, 0, 0), 1, DISP_B, [CAT_ARMA_MANDOBLE], -20, 50, 16, 8, 8, 10, 25, ATAQUE_CON3, ATAQUE_FIL3, [REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_KATAR = "Katar";
armas_set.push(new Arma(ARMA_KATAR, new Dinero(40, 0, 0), 0.6, DISP_B, [CAT_ARMA_ARMA_CORTA], 10, 40, 13, 3, 8, 8, 25, ATAQUE_PEN3, ATAQUE_FIL3, [REGLA_ARMA_COMPLEJA, REGLA_KATAR], BONO_FUE));
var ARMA_ARCABUZ = "Arcabuz";
armas_set.push(new Arma(ARMA_ARCABUZ, new Dinero(500, 0, 0), 4.5, DISP_A, [CAT_ARMA_PROYECTILES], -20, 0, 9, -3, 6, 6, 20, "", "", [REGLA_ARMA_COMPLEJA, REGLA_ARCABUZ], BONO_FUE));
var ARMA_ARCO_CORTO = "Arco corto";
armas_set.push(new Arma(ARMA_ARCO_CORTO, new Dinero(5, 0, 0), 0.8, DISP_TOTAL, [CAT_ARMA_PROYECTILES], -10, 0, 7, -3, 4, 4, 15, "", "", [REGLA_ARMA_DOS_MANOS], BONO_FUE));
var ARMA_ARCO_LARGO = "Arco largo";
armas_set.push(new Arma(ARMA_ARCO_LARGO, new Dinero(20, 0, 0), 1.4, DISP_TOTAL, [CAT_ARMA_PROYECTILES], -30, 0, 8, -2, 7, 7, 20, "", "", [REGLA_ARMA_DOS_MANOS], BONO_FUE));
var ARMA_ARCO_LARGO_COMPUESTO = "Arco largo compuesto";
armas_set.push(new Arma(ARMA_ARCO_LARGO_COMPUESTO, new Dinero(80, 0, 0), 1.8, DISP_B, [CAT_ARMA_PROYECTILES], -30, 0, 8, -2, 7, 7, 25, "", "", [REGLA_ARMA_DOS_MANOS], BONO_FUE));
var ARMA_BALA = "Bala";
armas_set.push(new Arma(ARMA_BALA, new Dinero(0, 20, 0), 0, DISP_B, [CAT_ARMA_MUNICION], 0, 60, 11, 5, 0, 0, 15, ATAQUE_PEN3, "", [MUNICION_PISTOLA_MECHA, MUNICION_ARCABUZ], BONO_FUE));
var ARMA_BALA_CAÑON = "Bala de cañón";
armas_set.push(new Arma(ARMA_BALA_CAÑON, new Dinero(10, 0, 0), 15, DISP_A, [CAT_ARMA_MUNICION], 0, 150, 20, 14, 0, 0, 15, ATAQUE_CON3, "", [MUNICION_CAÑON], BONO_FUE));
var ARMA_BALISTA_LIGERA = "Balista ligera";
armas_set.push(new Arma(ARMA_BALISTA_LIGERA, new Dinero(100, 0, 0), 180, DISP_TOTAL, [CAT_ARMA_PROYECTILES], -80, 0, 18, 0, 0, 0, 25, "", "", [REGLA_BALISTA_LIGERA], BONO_FUE));
var ARMA_BALISTA_PESADA = "Balista pesada";
armas_set.push(new Arma(ARMA_BALISTA_PESADA, new Dinero(250, 0, 0), 350, DISP_B, [CAT_ARMA_PROYECTILES], -100, 0, 20, 0, 0, 0, 30, "", "", [REGLA_BALISTA_PESADA], BONO_FUE));
var ARMA_BALLESTA = "Ballesta";
armas_set.push(new Arma(ARMA_BALLESTA, new Dinero(50, 0, 0), 2.5, DISP_B, [CAT_ARMA_PROYECTILES], 0, 0, 8, -2, 4, 8, 20, "", "", [REGLA_BALLESTA, REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_BALLESTA_MANO = "Ballesta de mano";
armas_set.push(new Arma(ARMA_BALLESTA_MANO, new Dinero(250, 0, 0), 1.5, DISP_B, [CAT_ARMA_PROYECTILES], 10, 0, 5, -4, 3, 3, 15, "", "", [REGLA_BALLESTA_MANO], BONO_FUE));
var ARMA_BALLESTA_REPETICION = "Ballesta de repetición";
armas_set.push(new Arma(ARMA_BALLESTA_REPETICION, new Dinero(200, 0, 0), 4, DISP_A, [CAT_ARMA_PROYECTILES], 0, 0, 6, -2, 5, 8, 20, "", "", [REGLA_BALLESTA_REPETICION, REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_BALLESTA_PESADA = "Ballesta pesada";
armas_set.push(new Arma(ARMA_BALLESTA_PESADA, new Dinero(70, 0, 0), 3, DISP_B, [CAT_ARMA_PROYECTILES], -20, 0, 8, -1, 7, 10, 20, "", "", [REGLA_BALLESTA_PESADA, REGLA_ARMA_UNA_O_DOS_MANOS], BONO_FUE));
var ARMA_BOLAS = "Bolas";
armas_set.push(new Arma(ARMA_BOLAS, new Dinero(1, 0, 0), 0.2, DISP_TOTAL, [CAT_ARMA_LANZAMIENTO], 0, 20, 10, 2, 5, 5, 15, ATAQUE_CON3, "", [], BONO_FUE));
var ARMA_BOLEADORAS = "Boleadoras";
armas_set.push(new Arma(ARMA_BOLEADORAS, new Dinero(2, 0, 0), 1, DISP_TOTAL, [CAT_ARMA_LANZAMIENTO], -10, 30, 6, 2, 5, 5, 15, ATAQUE_CON3, "", [REGLA_ARMA_PRESA, REGLA_ARMA_COMPLEJA, REGLA_BOLEADORAS], BONO_FUE));
var ARMA_CAÑON = "Cañón";
armas_set.push(new Arma(ARMA_CAÑON, new Dinero(5000, 0, 0), 400, DISP_A, [CAT_ARMA_PROYECTILES], -100, 0, 24, 0, 0, 0, 30, "", "", [REGLA_CAÑON], BONO_FUE));
var ARMA_CERBATANA = "Cerbatana";
armas_set.push(new Arma(ARMA_CERBATANA, new Dinero(1, 0, 0), 0.4, DISP_TOTAL, [CAT_ARMA_PROYECTILES], -10, 0, 3, -3, 4, 4, 15, "", "", [], BONO_FUE));
var ARMA_DARDO_CERBATANA = "Dardo de cerbatana";
armas_set.push(new Arma(ARMA_DARDO_CERBATANA, new Dinero(0, 20, 0), 0.1, DISP_TOTAL, [CAT_ARMA_MUNICION], 0, 5, 2, -4, 0, 0, 15, ATAQUE_PEN3, "", [MUNICION_CERBATANA], BONO_FUE));
var ARMA_DARDOS_MANO = "Dardos de mano";
armas_set.push(new Arma(ARMA_DARDOS_MANO, new Dinero(0, 50, 0), 0.1, DISP_TOTAL, [CAT_ARMA_LANZAMIENTO], 20, 20, 3, -4, 3, 3, 15, ATAQUE_PEN3, "", [], BONO_FUE));

var ARMA_FLECHA_DESCARGA = "Flecha de descarga";
armas_set.push(new Arma(ARMA_FLECHA_DESCARGA, new Dinero(0, 2, 0), 0.1, DISP_TOTAL, [CAT_ARMA_MUNICION], 0, 40, 4, 1, 0, 0, 20, ATAQUE_PEN3, "", [MUNICION_ARCO_CORTO, MUNICION_ARCO_LARGO, MUNICION_ARCO_LARGO_COMPUESTO], BONO_FUE));
var ARMA_FLECHA_FAJO = "Flecha de fajo";
armas_set.push(new Arma(ARMA_FLECHA_FAJO, new Dinero(0, 1, 0), 0.1, DISP_TOTAL, [CAT_ARMA_MUNICION], 0, 30, 3, 0, 0, 0, 20, ATAQUE_PEN3, "", [MUNICION_ARCO_CORTO, MUNICION_ARCO_LARGO, MUNICION_ARCO_LARGO_COMPUESTO, REGLA_FLECHA_FAJO], BONO_FUE));
var ARMA_FLECHA_MELLA = "Flecha de mella";
armas_set.push(new Arma(ARMA_FLECHA_MELLA, new Dinero(0, 50, 0), 0.1, DISP_TOTAL, [CAT_ARMA_MUNICION], 0, 30, 3, 0, 0, 0, 20, ATAQUE_PEN3, "", [MUNICION_ARCO_CORTO, MUNICION_ARCO_LARGO, MUNICION_ARCO_LARGO_COMPUESTO, REGLA_FLECHA_MELLA], BONO_FUE));
var ARMA_PISTOLA_MECHA = "Pistola de mecha";
armas_set.push(new Arma(ARMA_PISTOLA_MECHA, new Dinero(600, 0, 0), 2, DISP_A, [CAT_ARMA_PROYECTILES], 0, 0, 8, -3, 4, 4, 20, "", "", [REGLA_ARMA_COMPLEJA, REGLA_PISTOLA_MECHA], BONO_FUE));

var ARMA_SAETA = "Saeta";
armas_set.push(new Arma(ARMA_SAETA, new Dinero(0, 1, 0), 0.1, DISP_B, [CAT_ARMA_MUNICION], 0, 40, 3, 0, 0, 0, 15, ATAQUE_PEN3, "", [MUNICION_BALLESTA, MUNICION_BALLESTA_REPETICION], BONO_FUE));
var ARMA_SAETA_LIGERA = "Saeta ligera";
armas_set.push(new Arma(ARMA_SAETA_LIGERA, new Dinero(0, 2, 0), 0.1, DISP_A, [CAT_ARMA_MUNICION], 0, 30, 2, -1, 0, 0, 15, ATAQUE_PEN3, "", [MUNICION_BALLESTA_LIGERA], BONO_FUE));
var ARMA_SAETA_PESADA = "Saeta pesada";
armas_set.push(new Arma(ARMA_SAETA_PESADA, new Dinero(0, 1, 0), 0.2, DISP_B, [CAT_ARMA_MUNICION], 0, 60, 4, 1, 0, 0, 15, ATAQUE_PEN3, "", [MUNICION_BALLESTA_PESADA], BONO_FUE));
var ARMA_TURCUS = "Turcus";
armas_set.push(new Arma(ARMA_TURCUS, new Dinero(5, 0, 0), 0.8, DISP_B, [CAT_ARMA_LANZAMIENTO], 0, 40, 9, 2, 6, 6, 20, ATAQUE_FIL3, "", [REGLA_TURCUS], BONO_FUE));
var ARMA_VIROTE_LIGERO = "Virote ligero";
armas_set.push(new Arma(ARMA_VIROTE_LIGERO, new Dinero(0, 10, 0), 2, DISP_TOTAL, [CAT_ARMA_MUNICION], 0, 120, 16, 8, 0, 0, 15, ATAQUE_PEN3, "", [MUNICION_BALISTA_LIGERA], BONO_FUE));
var ARMA_VIROTE_PESADO = "Virote pesado";
armas_set.push(new Arma(ARMA_VIROTE_PESADO, new Dinero(0, 50, 0), 5, DISP_B, [CAT_ARMA_MUNICION], 0, 150, 18, 12, 0, 0, 15, ATAQUE_PEN3, "", [MUNICION_BALISTA_PESADA], BONO_FUE));


var ARMA_ESCUDO = "Escudo";
armas_set.push(new Arma(ARMA_ESCUDO, new Dinero(20, 0, 0), 2, DISP_TOTAL, [CAT_ARMA_ESCUDO], -25, 20, 16, 0, 7, 7, 25, ATAQUE_CON3, "", [REGLA_ESCUDO], BONO_FUE));

var ARMA_ESCUDO_CORPORAL = "Escudo corporal";
armas_set.push(new Arma(ARMA_ESCUDO_CORPORAL, new Dinero(50, 0, 0), 6, DISP_TOTAL, [CAT_ARMA_ESCUDO], -40, 25, 18, 1, 10, 10, 25, ATAQUE_CON3, "", [REGLA_ESCUDO_CORPORAL], BONO_FUE));

var ARMA_RODELA = "Rodela";
armas_set.push(new Arma(ARMA_RODELA, new Dinero(5, 0, 0), 1, DISP_TOTAL, [CAT_ARMA_ESCUDO], -15, 15, 14, 0, 5, 5, 20, ATAQUE_CON3, "", [REGLA_RODELA], BONO_FUE));



var ARMADURA_ACOLCHADA = "Acolchada";
armaduras_set.push(new Armadura(
    ARMADURA_ACOLCHADA,
    new Dinero(1,0,0),
    3,
    DISP_TOTAL,
    0,       //Llevar armadura
    -5,     //penalizador natural
    0,      //restriccion movimiento
    10,     //entereza
    25,     //presencia
    ARMADURA_LOC_CAMISOLA,
    ARMADURA_CLASE_BLANDA,
    [1,1,1,1,2,2,0]
));

var ARMADURA_COTA_CUERO = "Cota de cuero";
armaduras_set.push(new Armadura(
    ARMADURA_COTA_CUERO,
    new Dinero(1,0,0),
    3,
    DISP_TOTAL,
    0,       //Llevar armadura
    0,     //penalizador natural
    0,      //restriccion movimiento
    15,     //entereza
    25,     //presencia
    ARMADURA_LOC_CAMISOLA,
    ARMADURA_CLASE_BLANDA,
    [1,0,2,1,2,1,0]
));

var ARMADURA_GABARDINA = "Gabardina";
armaduras_set.push(new Armadura(
    ARMADURA_GABARDINA,
    new Dinero(0,5,0),
    1.5,
    DISP_B,
    0,       //Llevar armadura
    -5,     //penalizador natural
    0,      //restriccion movimiento
    10,     //entereza
    25,     //presencia
    ARMADURA_LOC_COMPLETA,
    ARMADURA_CLASE_BLANDA,
    [1,0,2,1,2,2,0]
));

var ARMADURA_PIEL = "Piel";
armaduras_set.push(new Armadura(
    ARMADURA_PIEL,
    new Dinero(5,0,0),
    2,
    DISP_TOTAL,
    10,       //Llevar armadura
    -10,     //penalizador natural
    0,      //restriccion movimiento
    10,     //entereza
    25,     //presencia
    ARMADURA_LOC_CAMISOLA,
    ARMADURA_CLASE_BLANDA,
    [2,1,2,1,2,2,0]
));

var ARMADURA_COMPLETA_CUERO = "Completa de cuero";
armaduras_set.push(new Armadura(
    ARMADURA_COMPLETA_CUERO,
    new Dinero(5,0,0),
    7,
    DISP_TOTAL,
    10,       //Llevar armadura
    0,     //penalizador natural
    1,      //restriccion movimiento
    12,     //entereza
    25,     //presencia
    ARMADURA_LOC_COMPLETA,
    ARMADURA_CLASE_BLANDA,
    [1,0,2,1,2,1,0]
));

var ARMADURA_CUERO_ENDURECIDO = "Cuero endurecido";
armaduras_set.push(new Armadura(
    ARMADURA_CUERO_ENDURECIDO,
    new Dinero(15,0,0),
    4,
    DISP_TOTAL,
    20,       //Llevar armadura
    -10,     //penalizador natural
    0,      //restriccion movimiento
    13,     //entereza
    25,     //presencia
    ARMADURA_LOC_PETO,
    ARMADURA_CLASE_DURA,
    [2,2,2,2,2,2,0]
));

var ARMADURA_CUERO_TACHONADO = "Cuero tachonado";
armaduras_set.push(new Armadura(
    ARMADURA_CUERO_TACHONADO,
    new Dinero(25,0,0),
    4.5,
    DISP_TOTAL,
    25,       //Llevar armadura
    -10,     //penalizador natural
    1,      //restriccion movimiento
    14,     //entereza
    25,     //presencia
    ARMADURA_LOC_PETO,
    ARMADURA_CLASE_DURA,
    [3,1,2,2,1,2,0]
));

var ARMADURA_MALLAS = "Mallas";
armaduras_set.push(new Armadura(
    ARMADURA_MALLAS,
    new Dinero(70,0,0),
    13,
    DISP_TOTAL,
    30,       //Llevar armadura
    -15,     //penalizador natural
    1,      //restriccion movimiento
    15,     //entereza
    30,     //presencia
    ARMADURA_LOC_COMPLETA,
    ARMADURA_CLASE_BLANDA,
    [4,2,1,2,0,1,0]
));

var ARMADURA_PETO = "Peto";
armaduras_set.push(new Armadura(
    ARMADURA_PETO,
    new Dinero(40,0,0),
    4,
    DISP_B,
    40,       //Llevar armadura
    -15,     //penalizador natural
    1,      //restriccion movimiento
    16,     //entereza
    30,     //presencia
    ARMADURA_LOC_PETO,
    ARMADURA_CLASE_DURA,
    [4,5,4,1,0,1,0]
));

var ARMADURA_PIEZAS = "Piezas";
armaduras_set.push(new Armadura(
    ARMADURA_PIEZAS,
    new Dinero(40,0,0),
    6,
    DISP_B,
    50,       //Llevar armadura
    -20,     //penalizador natural
    2,      //restriccion movimiento
    15,     //entereza
    30,     //presencia
    ARMADURA_LOC_COMPLETA,
    ARMADURA_CLASE_DURA,
    [4,3,2,3,2,2,0]
));

var ARMADURA_ANILLAS = "Anillas";
armaduras_set.push(new Armadura(
    ARMADURA_ANILLAS,
    new Dinero(50,0,0),
    9,
    DISP_TOTAL,
    60,       //Llevar armadura
    -20,     //penalizador natural
    2,      //restriccion movimiento
    15,     //entereza
    30,     //presencia
    ARMADURA_LOC_CAMISOLA,
    ARMADURA_CLASE_BLANDA,
    [4,3,1,2,0,1,0]
));

var ARMADURA_SEMICOMPLETA = "Semicompleta";
armaduras_set.push(new Armadura(
    ARMADURA_SEMICOMPLETA,
    new Dinero(100,0,0),
    13,
    DISP_TOTAL,
    70,       //Llevar armadura
    -20,     //penalizador natural
    3,      //restriccion movimiento
    16,     //entereza
    35,     //presencia
    ARMADURA_LOC_COMPLETA,
    ARMADURA_CLASE_DURA,
    [4,4,4,2,0,1,1]
));

var ARMADURA_ESCAMAS = "Escamas";
armaduras_set.push(new Armadura(
    ARMADURA_ESCAMAS,
    new Dinero(120,0,0),
    9,
    DISP_B,
    80,       //Llevar armadura
    -25,     //penalizador natural
    3,      //restriccion movimiento
    17,     //entereza
    35,     //presencia
    ARMADURA_LOC_COMPLETA,
    ARMADURA_CLASE_DURA,
    [4,4,4,3,0,3,1]
));

var ARMADURA_PLACAS = "Placas";
armaduras_set.push(new Armadura(
    ARMADURA_PLACAS,
    new Dinero(300,0,0),
    18,
    DISP_TOTAL,
    90,       //Llevar armadura
    -35,     //penalizador natural
    4,      //restriccion movimiento
    17,     //entereza
    40,     //presencia
    ARMADURA_LOC_COMPLETA,
    ARMADURA_CLASE_DURA,
    [5,4,5,3,0,3,1]
));

var ARMADURA_COMPLETA = "Completa";
armaduras_set.push(new Armadura(
    ARMADURA_COMPLETA,
    new Dinero(400,0,0),
    20,
    DISP_B,
    100,       //Llevar armadura
    -50,     //penalizador natural
    4,      //restriccion movimiento
    18,     //entereza
    45,     //presencia
    ARMADURA_LOC_COMPLETA,
    ARMADURA_CLASE_DURA,
    [5,5,5,4,0,4,2]
));

var ARMADURA_COMPLETA_PESADA = "Completa pesada";
armaduras_set.push(new Armadura(
    ARMADURA_COMPLETA_PESADA,
    new Dinero(700,0,0),
    30,
    DISP_A,
    120,       //Llevar armadura
    -60,     //penalizador natural
    5,      //restriccion movimiento
    19,     //entereza
    45,     //presencia
    ARMADURA_LOC_COMPLETA,
    ARMADURA_CLASE_DURA,
    [6,6,6,4,0,4,2]
));

var ARMADURA_CAMPAÑA_PESADA = "De campaña pesada";
armaduras_set.push(new Armadura(
    ARMADURA_CAMPAÑA_PESADA,
    new Dinero(800,0,0),
    25,
    DISP_A,
    150,       //Llevar armadura
    -70,     //penalizador natural
    6,      //restriccion movimiento
    20,     //entereza
    50,     //presencia
    ARMADURA_LOC_COMPLETA,
    ARMADURA_CLASE_DURA,
    [7,7,7,4,0,4,2]
));

/*
Para animales Coste Disp.
    Barda ligera 20 MO B
Barda pesada 150 MO B


*/
/**
 *
 * @class TablaArmas
 * @param {string} nombre
 * @param {string} descripcion
 * @param {string} efectos
 * @param {number} coste
 * @param {string} tipoTabla
 * @param {string[]} opciones
 * @param {string} categoria
 * @constructor
 */
function TablaArmas(nombre, descripcion, efectos, coste, tipoTabla, opciones, categoria) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {string}
     */
    this.descripcion = descripcion;

    /**
     *
     * @type {string}
     */
    this.efectos = efectos;

    /**
     *
     * @type {number}
     */
    this.coste = coste;

    /**
     *
     * @type {string}
     */
    this.categoriaTabla = categoria;

    /**
     *
     * @type {string}
     */
    this.tipoTabla = tipoTabla;

    /**
     *
     * @type {string[]}
     */
    this.opciones = opciones;
}

TablaArmas.prototype = {
    constructor : TablaArmas,

    toString : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {string}
     */
    getEfectos : function() {
        return this.efectos;
    },

    /**
     *
     * @returns {number}
     */
    getCoste : function() {
        return this.coste;
    },

    /**
     *
     * @returns {string}
     */
    getCategoriaTabla : function() {
        return this.categoriaTabla;
    },

    /**
     *
     * @returns {string}
     */
    getTipoTabla : function() {
        return this.tipoTabla;
    },

    /**
     *
     * @returns {string[]}
     */
    getOpciones : function() {
        return this.opciones;
    },

    /**
     *
     * @returns {string}
     */
    toJSON : function() {
        return this.nombre;
    }
};

/**
 *
 * @param {TablaArmas} tablaArmas
 * @param {string} opcion
 * @constructor
 */
function TablaArmasComprada(tablaArmas, opcion) {

    /**
     *
     * @type {TablaArmas}
     */
    this.tablaArmas = tablaArmas;

    /**
     *
     * @type {string}
     */
    this.opcion = opcion;

    /**  @type boolean */
    this.anulable = true;

}

TablaArmasComprada.prototype = {
    constructor : TablaArmasComprada,

    toString : function() {
        if (this.opcion) {
            return this.tablaArmas.toString() + ": " + this.opcion;
        } else {
            return this.tablaArmas.toString();
        }
    },

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.tablaArmas.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.tablaArmas.descripcion;
    },

    /**
     *
     * @returns {string}
     */
    getEfectos : function() {
        return this.tablaArmas.efectos;
    },

    /**
     *
     * @param {Personaje} personaje
     * @returns {number}
     */
    getCoste : function(personaje) {
        var coste = this.tablaArmas.coste;
        if (personaje.getCategoria().getNombre() == CAT_MAESTRO_ARMAS) {
            if ((this.getCategoriaTabla() == CATEGORIA_TABLA_ARMAS_ESTILOS) ||
                (this.getCategoriaTabla() == CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS) ||
                (this.getCategoriaTabla() == CATEGORIA_TABLA_ARMAS_GENERALES)) {
                coste /= 2;
            }
        }


        return coste;
    },

    /**
     *
     * @returns {string}
     */
    getCategoriaTabla : function() {
        return this.tablaArmas.categoriaTabla;
    },

    /**
     *
     * @returns {string}
     */
    getTipoTabla : function() {
        return this.tablaArmas.tipoTabla;
    },

    /**
     *
     * @returns {string[]}
     */
    getOpciones : function() {
        return this.tablaArmas.opciones;
    },

    /**
     *
     * @returns {string}
     */
    getOpcion : function() {
        return this.opcion;
    },

    /**
     *
     * @param {string} valor
     */
    setOpcion : function(valor) {
        this.opcion = valor;
    },

    /**
     *
     * @returns {boolean}
     */
    isAnulable : function() {
        return this.anulable;
    },

    /**
     *
     * @param {boolean} valor
     */
    setAnulable : function(valor) {
        this.anulable = valor;
    }


};
/**
 *
 * @type {TablaArmas[]}
 */
var tablasArmas_set = [];

var ERR_TABLA_DESCONOCIDA = "Error: Tabla de Armas desconocida";

var CATEGORIA_TABLA_ARMAS_GENERALES = "Tablas de armas generales";
var CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS = "Tablas de armas arquetípicas";
var CATEGORIA_TABLA_ARMAS_ESTILOS = "Tablas de estilos";
var CATEGORIA_TABLA_MISTICAS = "Tablas Místicas";
var CATEGORIA_TABLA_PSIQUICAS = "Tablas Psíquicas";

/**
 *
 * @type {string[]}
 */
var CATEGORIAS_TABLAS_ARMAS = [
    CATEGORIA_TABLA_ARMAS_GENERALES,
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS,
    CATEGORIA_TABLA_ARMAS_ESTILOS,
    CATEGORIA_TABLA_MISTICAS,
    CATEGORIA_TABLA_PSIQUICAS
];

/**
 *
 * @param {string} nombre
 * @returns {TablaArmas}
 * @throws ERR_TABLA_DESCONOCIDA
 */
function getTablaArmas(nombre) {
    for (var i = 0; i < tablasArmas_set.length;i++) {
        if (tablasArmas_set[i].getNombre() == nombre) {
            return tablasArmas_set[i];
        }
    }
    throw ERR_TABLA_DESCONOCIDA + ": " + nombre;
}
var TABLA_ESPECIAL = "Especial";
var TABLA_MANEJO_CATEGORIA = "TABLA_MANEJO_CATEGORIA";
var TABLA_SIN_EFECTO = "TABLA_SIN_EFECTO";
var TABLA_MANEJO_ARMAS = "TABLA_MANEJO_ARMAS";

var TABLA_ARMA_SIMILAR = "Arma Similar";
var TABLA_ARMA_MIXTA = "TABLA_ARMA_MIXTA";
var TABLA_ARMA_DISTINTA = "TABLA_ARMA_DISTINTA";
var TABLA_TIPOLOGIA = "TABLA_TIPOLOGIA";

tablasArmas_set.push(new TablaArmas(
    "Arma similar",
    "",
    "Otorga la capacidad de usar un arma adicional del mismo tipo que una que el personaje ya conoce.",
    10,
    TABLA_ESPECIAL,
    [TABLA_ARMA_SIMILAR],
    CATEGORIA_TABLA_ARMAS_GENERALES
));

tablasArmas_set.push(new TablaArmas(
    "Arma mixta",
    "",
    "Otorga la capacidad de usar un arma mixta que tiene, por lo menos, un mismo tipo en común con otra que el personaje ya conoce.",
    15,
    TABLA_ESPECIAL,
    [TABLA_ARMA_MIXTA],
    CATEGORIA_TABLA_ARMAS_GENERALES
));

tablasArmas_set.push(new TablaArmas(
    "Arma distinta / Desarmado",
    "",
    "Otorga la capacidad de usar un arma de un tipo que no conoce el personaje.",
    20,
    TABLA_ESPECIAL,
    [TABLA_ARMA_DISTINTA],
    CATEGORIA_TABLA_ARMAS_GENERALES
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de tipología",
    "",
    "Permite utilizar una determinada tipología de armas sin aplicar ningún penalizador a su habilidad marcial. Deben de elegirse las de una clase concreta, ya sea pura o mixta. Si por ejemplo el personaje domina el uso de las espadas, podrá manejar cualquiera de ellas sin negativos, pero no así un mandoble, al ser un arma de tipología mixta.",
    50,
    TABLA_ESPECIAL,
    [TABLA_TIPOLOGIA],
    CATEGORIA_TABLA_ARMAS_GENERALES
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de proyectiles",
    "",
    "Adquiere la pericia de usar cualquier arma de disparo con la misma habilidad de ataque.",
    50,
    TABLA_MANEJO_CATEGORIA,
    [CAT_ARMA_PROYECTILES],
    CATEGORIA_TABLA_ARMAS_GENERALES
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de lanzamiento",
    "",
    "Adquiere la pericia de lanzar toda clase de artefactos con la misma habilidad de ataque.",
    50,
    TABLA_MANEJO_CATEGORIA,
    [CAT_ARMA_LANZAMIENTO],
    CATEGORIA_TABLA_ARMAS_GENERALES
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de armas improvisadas",
    "",
    "Esta tabla permite utilizar cualquier tipo de objeto común como arma improvisada.",
    50,
    TABLA_SIN_EFECTO,
    [],
    CATEGORIA_TABLA_ARMAS_GENERALES
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Asesino",
    "",
    "Otorga pericia en las siguientes armas: Espada Corta, Ballesta de Mano, Garrote, Cerbatana y Estilete.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_ESPADA_CORTA,ARMA_BALLESTA_MANO,ARMA_GARROTE,ARMA_CERBATANA,ARMA_ESTILETE],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Bárbaro",
    "",
    "Otorga pericia en las siguientes armas: Hacha de Guerra, Hacha a dos manos, Mandoble, Espada Bastarda y Maza a Dos Manos.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_HACHA_GUERRA,ARMA_HACHA_DOS_MANOS,ARMA_MANDOBLE,ARMA_ESPADA_BASTARDA,ARMA_MAZA_PESADA],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Caballero",
    "",
    "Otorga pericia en las siguientes armas: Espada Larga, Lanza de Caballería, Maza, Espada Bastarda y Escudo Medio.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_ESPADA_LARGA,ARMA_LANZA_CABALLERIA,ARMA_MAZA,ARMA_ESPADA_BASTARDA,ARMA_ESCUDO],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Nómada",
    "",
    "Otorga pericia en las siguientes armas: Daga, Turcus, Arco Largo, Cimitarra y Lanza.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_DAGA,ARMA_TURCUS,ARMA_ARCO_LARGO,ARMA_CIMITARRA,ARMA_LANZA],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Gladiador",
    "",
    "Otorga pericia en las siguientes armas: Espada Corta, Red de Gladiador, Rodela, Tridente y Látigo.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_ESPADA_CORTA,ARMA_RED_GLADIADOR,ARMA_RODELA,ARMA_TRIDENTE,ARMA_LATIGO],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Cazador",
    "",
    "Otorga pericia en las siguientes armas: Jabalina, Arco, Espada Corta, Lanza y Boleadoras.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_JABALINA,ARMA_ARCO_LARGO,ARMA_ARCO_CORTO,ARMA_ARCO_LARGO_COMPUESTO,ARMA_LANZA,ARMA_BOLEADORAS],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Soldado",
    "",
    "Otorga pericia en las siguientes armas: Ballesta, Espada Larga, Alabarda, Lanza y Escudo Medio.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_BALLESTA,ARMA_ESPADA_LARGA,ARMA_ALABARDA,ARMA_LANZA,ARMA_ESCUDO],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Ninja",
    "",
    "Otorga pericia en las siguientes armas: Katana, Tanto, Garras, Shuriken y Kusari Gama.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_KATANA,ARMA_TANTO,ARMA_GARRAS,ARMA_SHURIKEN,ARMA_KUSARI_GAMA],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Duelista",
    "",
    "Otorga pericia en las siguientes armas: Estoque, Florete, Daga de Parada, Sable y Espada Larga.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_ESTOQUE,ARMA_FLORETE,ARMA_DAGA_PARADA,ARMA_SABLE,ARMA_ESPADA_LARGA],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Aborigen",
    "",
    "Otorga pericia en las siguientes armas: Jabalina, Lanza, Escudo Corporal, Arco y Cerbatana.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_JABALINA,ARMA_LANZA,ARMA_ESCUDO_CORPORAL,ARMA_ARCO_LARGO,ARMA_ARCO_CORTO,ARMA_ARCO_LARGO_COMPUESTO,ARMA_CERBATANA],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Pirata",
    "",
    "Otorga pericia en las siguientes armas: Arpón, Red de Gladiador, Garfio, Sable y Hacha de mano.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_ARPON,ARMA_RED_GLADIADOR,ARMA_GARFIO,ARMA_SABLE,ARMA_HACHA_MANO],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Bandido",
    "",
    "Otorga pericia en las siguientes armas: Daga, Ballesta, Espada Corta, Maza y Garrote.",
    50,
    TABLA_MANEJO_ARMAS,
    [ARMA_DAGA,ARMA_BALLESTA,ARMA_ESPADA_CORTA,ARMA_MAZA,ARMA_GARROTE],
    CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS
));

tablasArmas_set.push(new TablaArmas(
    "Batto jutsu / Iai jutsu",
    "",
    "El personaje puede desenfundar su arma sin aplicar el penalizador de -25 a su habilidad de ataque o parada. No tiene efectos sobre armas a dos manos.",
    30,
    TABLA_SIN_EFECTO,
    [],
    CATEGORIA_TABLA_ARMAS_ESTILOS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Área",
    "",
    "Reduce a la mitad el penalizador de la maniobra Ataque en área, por lo que al ejecutarla, un personaje aplica sólo un -25 a su habilidad.",
    50,
    TABLA_SIN_EFECTO,
    [],
    CATEGORIA_TABLA_ARMAS_ESTILOS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Precisión",
    "",
    "Reduce a la mitad el penalizador de la maniobra Engatillar, por lo que un personaje sufre sólo un -50 a su habilidad al ejecutarla.",
    50,
    TABLA_SIN_EFECTO,
    [],
    CATEGORIA_TABLA_ARMAS_ESTILOS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Desarme",
    "",
    "Reduce a la mitad el penalizador de la maniobra Desarmar, por lo que un personaje sufre sólo un -20 a su habilidad al ejecutarla.",
    40,
    TABLA_SIN_EFECTO,
    [],
    CATEGORIA_TABLA_ARMAS_ESTILOS
));

tablasArmas_set.push(new TablaArmas(
    "Tabla de Ataque Encadenado",
    "",
    "Al realizar ataques adicionales, el personaje puede usar las armas de tamaño Grande aplicando el penalizador de armas de tamaño Medio (es decir, un -30), y las de tamaño Medio como si fueran Pequeñas (un -20). No tiene efectos sobre armas Pequeñas.",
    50,
    TABLA_SIN_EFECTO,
    [],
    CATEGORIA_TABLA_ARMAS_ESTILOS
));

tablasArmas_set.push(new TablaArmas(
    "Proyección Mágica como ataque",
    "",
    "Permite utilizar la habilidad de ataque de un personaje como Proyección Mágica ofensiva. Sólo se emplea la habilidad base, y no los puntos de mejora innata que proporcionan algunas categorías de combate. No puede utilizarse para lanzar conjuros pasivos ni defensivos.",
    75,
    TABLA_SIN_EFECTO,
    [],
    CATEGORIA_TABLA_MISTICAS
));

tablasArmas_set.push(new TablaArmas(
    "Proyección Mágica como defensa",
    "",
    "Permite utilizar la habilidad de defensa de un personaje como Proyección Mágica defensiva. Sólo se emplea la habilidad base, y no los puntos de mejora innata que proporcionan algunas categorías de combate. No puede utilizarse para dirigir conjuros de carácter ofensivo.",
    75,
    TABLA_SIN_EFECTO,
    [],
    CATEGORIA_TABLA_MISTICAS
));


tablasArmas_set.push(new TablaArmas(
    "Tabla de Proyección Psíquica",
    "",
    "Otorga la capacidad de usar las habilidades de combate del personaje como Proyección Psíquica. La ofensiva se utiliza para atacar, y la defensiva para levantar escudos. Sólo se emplea la habilidad base, no los puntos de mejora innata que proporcionan algunas categorías de combate.",
    100,
    TABLA_SIN_EFECTO,
    [],
    CATEGORIA_TABLA_PSIQUICAS
));


/**
 *
 * @class Raza
 * @param {string} nombre
 * @param {Ventaja[]} ventajas
 * @param {Ventaja[]} desventajas
 * @constructor
 */
function Raza(nombre, ventajas, desventajas, modNivel) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {Ventaja[]}
     */
    this.ventajas = ventajas;

    /**
     *
     * @type {Ventaja[]}
     */
    this.desventajas = desventajas;

    /**
     *
     * @type {number[]}
     */
    this.bonosCaracteristicas = [0,0,0,0,0,0,0,0];

    /**
     *
     * @type {number}
     */
    this.modificadorNivel = modNivel;
}

Raza.prototype = {
    constructor : Raza,

    toString : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {Ventaja[]}
     */
    getVentajas : function() {
        return this.ventajas;
    },

    /**
     *
     * @returns {Ventaja[]}
     */
    getDesventajas : function() {
        return this.desventajas;
    },

    /**
     *
     * @returns {ExplicaVentajaRaza[]}
     */
    getExplicacion : function() {
        var exp = [];

        for (var i = 0; i < this.ventajas.length; i++) {
            exp.push(new ExplicaVentajaRaza(this.ventajas[i].getNombre(),this.ventajas[i].getDescripcion(),this.ventajas[i].getDescripcionEfecto()));
        }
        for (var j = 0; j < this.desventajas.length; j++) {
            exp.push(new ExplicaVentajaRaza(this.desventajas[j].getNombre(),this.desventajas[j].getDescripcion(),this.desventajas[j].getDescripcionEfecto()));
        }

        return exp;
    },

    /**
     *
     * @param {string} caracteristica
     * @returns {number}
     */
    getBonoCaracteristica : function(caracteristica) {
        return this.bonosCaracteristicas[getIndiceCaracteristica(caracteristica)];
    },

    /**
     *
     * @returns {number}
     */
    getModNivel : function() {
        return this.modificadorNivel;
    },

    toJSON : function() {
        return this.nombre;
    }
}

/**
 *
 * @class ExplicaVentajaRaza
 * @param {string} nombre
 * @param {string} descripcion
 * @param {string} reglas
 * @constructor
 */
function ExplicaVentajaRaza(nombre, descripcion, reglas) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {string}
     */
    this.descripcion = descripcion;

    /**
     *
     * @type {string}
     */
    this.reglas = reglas;
}

ExplicaVentajaRaza.prototype = {
    constructor : ExplicaVentajaRaza,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {string}
     */
    getReglas : function() {
        return this.reglas;
    }
}
/**
 *
 * @type {Raza[]}
 */
var razas_set = [];

var ERR_RAZA_ERRONEA = "Error: Nombre de raza erróneo";

/**
 *
 * @param {string} nombre
 * @returns {Raza}
 * @throws ERR_RAZA_ERRONEA
 */
function getRaza(nombre) {
    for (var i=0;i<razas_set.length;i++) {
        if (razas_set[i].getNombre() == nombre) {
            return razas_set[i];
        }
    }
    throw ERR_RAZA_ERRONEA;
}




var RAZA_HUMANO = "Humano";

var razaHumano =new Raza(RAZA_HUMANO, [], [], 0);

razas_set.push(razaHumano);

allRazas[RAZA_HUMANO] = razaHumano;
var RAZA_SYLVAIN = "Sylvain";

var SYLV_CARACTERISTICAS = "Características sobrehumanas (Sylvain)";
var SYLV_RESISTENCIAS = "Resistencias anímicas excepcionales (Sylvain)";
var SYLV_INMUNIDAD = "Inmunidad a las enfermedades y venenos naturales (Sylvain)";
var SYLV_INHUMANAS = "Acciones inhumanas (Sylvain)";
var SYLV_NECESIDADES = "Necesidades Limitadas (Sylvain)";
var SYLV_CURACION = "Curación Rápida (Sylvain)";
var SYLV_PRESENTIR = "Presentir lo oscuro y lo luminoso (Sylvain)";
var SYLV_OBLIGACION = "Obligación mágica (Sylvain)";
var SYLV_VISION = "Su visión del mundo (Sylvain)";
var SYLV_LAZO = "Lazo hacia la luz (Sylvain)";

ventajas_set.push(new Ventaja(
    SYLV_CARACTERISTICAS,
    "",
    "Aplica un bono de +1 a las características de DES, AGI, POD e INT, pero sufren un penalizador de -1 a su FUE y CON.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [
        new ElementoProhibido(VENTAJA,"Inmunidad sobrenatural")
    ],    //incompatibles
    false,  //anulable
    [],
    [caracteristicasSobrehumanasSylvain],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    SYLV_RESISTENCIAS,
    "",
    "aplican un bono de +30 a su Resistencia Mágica y Psíquica (RM y RP). Un Sylvain no puede elegir las desventajas de Vulnerabilidad a la magia o Fácil posesión.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [new ElementoProhibido(VENTAJA,"Fácil posesión"),
        new ElementoProhibido(VENTAJA,"Vulnerabilidad a la magia")
    ],    //incompatibles
    false,  //anulable
    [],
    [resistenciasAnimicasExcepcionalesSylvain],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    SYLV_INMUNIDAD,
    "",
    "Obtienen además un bono de +20 a su RE y un +10 a su RV. No pueden elegir las desventajas de: Salud enfermiza, Vulnerable a los venenos o enfermedad grave incurable.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [
        new ElementoProhibido(VENTAJA,"Salud enfermiza"),
        new ElementoProhibido(VENTAJA,"Vulnerabilidad a los venenos"),
        new ElementoProhibido(VENTAJA,"Enfermedad grave")
    ],    //incompatibles
    false,  //anulable
    [],
    [inmunidadEnfermedadesVenenosSylvain],
    GRUPO_RAZAS,
    []
));


ventajas_set.push(new Ventaja(
    SYLV_INHUMANAS,
    "",
    "Por naturaleza, un Sylvain puede alcanzar la dificultad de Inhumano en los controles de dificultades.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [
    ],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    SYLV_NECESIDADES,
    "",
    "Disminuyen sus necesidades de sueño y comida hasta una quinta parte de las que necesita un humano.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    SYLV_CURACION,
    "",
    "Suman tres puntos a su nivel de Regeneración natural.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaRegeneracion,3,SYLV_CURACION],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    SYLV_PRESENTIR,
    "",
    "De un modo sobrenatural, perciben la esencia oscura o luminosa que desprenden sus almas. Esta habilidad no les permite reconocer a un individuo que se halle oculto por un conjuro o mediante una habilidad del Ki.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    SYLV_LAZO,
    "",
    "Cualquier ser de dicho elemento sentirá afinidad hacia ellos y no pueden elegir la ventaja Desequilibrio hacia la oscuridad. Además, poseen un bono especial de +10 a cualquier control de Resistencia que realicen contra efectos de lumínicos, y un penalizador equivalente contra la oscuridad.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [new ElementoProhibido(VENTAJA,"Desequilibrio elemental","Oscuridad")],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    SYLV_OBLIGACION,
    "",
    "Están obligados a elegir la ventaja de Don.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [obligadoComprarDon],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    SYLV_VISION,
    "",
    "Sufre un penalizador de -3 a los puntos de experiencia que obtenga al finalizar una sesión de juego.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

var razaSylvain = new Raza(RAZA_SYLVAIN, [
    getVentaja(SYLV_CARACTERISTICAS),
    getVentaja(SYLV_RESISTENCIAS),
    getVentaja(SYLV_INMUNIDAD),
    getVentaja(SYLV_INHUMANAS),
    getVentaja(SYLV_NECESIDADES),
    getVentaja(SYLV_CURACION),
    getVentaja(SYLV_PRESENTIR),
    getVentaja(SYLV_LAZO)
], [
    getVentaja(SYLV_OBLIGACION),
    getVentaja(SYLV_VISION)
], 2);

razas_set.push(razaSylvain);

allRazas[RAZA_SYLVAIN] = razaSylvain;


var RAZA_DANJAYNI = "D'Anjayni";

var DANJ_OLVIDO = "Olvido (D'Anjayni)";
var DANJ_INDETECTABILIDAD = "Indetectabilidad (D'Anjayni)";
var DANJ_ROSTRO = "El rostro de la araña (D'Anjayni)";
var DANJ_PASAR = "Pasar sin dejar rastro (D'Anjayni)";
var DANJ_SUSURROS = "Susurros silenciosos (D'Anjayni)";

var DANJ_NATURALEZA = "Naturaleza observadora (D'Anjayni)";


ventajas_set.push(new Ventaja(
    DANJ_OLVIDO,
    "",
    "A términos de juego, cualquiera que vea o hable con el personaje deberá superar una Resistencia Mágica (RM) contra 120, " +
        "u olvidará su apariencia y la conversación que han mantenido. ",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DANJ_INDETECTABILIDAD,
    "",
    "Su capacidad para evitar ser detectados por medios sobrenaturales les otorga un bono de +50 a cualquier Resistencia contra tales efectos. Además, poseen de manera innata la habilidad de Ocultación del Ki.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [indetectabilidadDanjayni],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DANJ_ROSTRO,
    "",
    "Mientras esté empleando El rostro de la araña, su habilidad de Olvido se resiente fuertemente, reduciendo la Resistencia a tan sólo 80.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DANJ_PASAR,
    "",
    "Su rastro se borra a medida que camina, por lo que si alguien intenta rastrearles, aplicará un -60 a su habilidad.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DANJ_SUSURROS,
    "",
    "Todo aquel que intente escucharlas aplicará un -80 a sus controles si no es su receptor.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    DANJ_NATURALEZA,
    "",
    "Sufre un penalizador de -3 a los puntos de experiencia que obtenga al finalizar una sesión de juego.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

var razaDanjayni = new Raza(RAZA_DANJAYNI, [
    getVentaja(DANJ_OLVIDO),
    getVentaja(DANJ_INDETECTABILIDAD),
    getVentaja(DANJ_ROSTRO),
    getVentaja(DANJ_PASAR),
    getVentaja(DANJ_SUSURROS)
], [
    getVentaja(DANJ_NATURALEZA)
], 1);

razas_set.push(razaDanjayni);

allRazas[RAZA_DANJAYNI] = razaDanjayni;

var RAZA_EBUDAN = "Ebudan";

var EBUD_ORINIE = "Or'inie (Ebudan)";
var EBUD_ALAS = "Alas de Serafín (Ebudan)";
var EBUD_ESENCIA = "Esencia Celestial (Ebudan)";

ventajas_set.push(new Ventaja(
    EBUD_ORINIE,
    "",
    "El Ebudan puede aplicar un bonificador de +30 a cualquier Resistencia contra efectos de dominio, control emocional u " +
        "olvido que puedan impedirle realizar el Sue´ Aman. Una vez conseguido, esta habilidad desaparece completamente y " +
        "puede elegir entre trascender al flujo de almas y renacer como entidades espirituales con Gnosis 30, o permanecer " +
        "en el mundo para guiar a otros miembros de su especie. En un caso u otro, ganan un bono de +2 a su POD y a su VOL.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    EBUD_ALAS,
    "",
    "Las características de las alas (ambas se consideran una sola " +
        "unidad como arma) son las siguientes: poseen un turno de +20, un daño base de 60 más el bono de Fuerza, su crítico primario es de Filo, de tipo mandoble, " +
        "con una entereza y rotura de 20 y 5 respectivamente. Por su complejidad, no pueden utilizarlas en combinación con armas empuñadas. Además, pueden " +
        "detener proyectiles como si se tratasen de un escudo. Si cumplen el Sue´ Aman, un Ebudan es capaz de dañar energía con ellas.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [alasSerafinEbudan],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    EBUD_ESENCIA,
    "",
    "A efectos de juego, el Ebudan se vuelve invulnerable a cualquier ataque natural que no sea capaz de dañar energía.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

var razaEbudan = new Raza(
    RAZA_EBUDAN,
    [
        getVentaja(EBUD_ORINIE),
        getVentaja(EBUD_ALAS),
        getVentaja(EBUD_ESENCIA)
    ],
    [],
    1
);

razas_set.push(razaEbudan);

allRazas[RAZA_EBUDAN] = razaEbudan;

var RAZA_JAYAN = "Jayán";

var JAY_GIGANTES = "Gigantes (Jayán)";
var JAY_FISICO = "Físico excepcional (Jayán)";
var JAY_CANSANCIO = "Aguante al cansancio (Jayán)";
var JAY_RESISTENCIA = "Resistencia física (Jayán)";
var JAY_OJO = "El tercer ojo (Jayán)";
var JAY_ARMAS = "Armas naturales (Jayán)";
var JAY_FUERZA = "Fuerza inhumana (Jayán)";

var JAY_DEBILIDAD = "Debilidad contra magia (Jayán)";

ventajas_set.push(new Ventaja(
    JAY_GIGANTES,
    "",
    "Suman dos puntos a su característica de Tamaño y no pueden elegir la ventaja Tamaño desigual para disminuirlo.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [
        new ElementoProhibido(VENTAJA,"Tamaño no natural",-5),
        new ElementoProhibido(VENTAJA,"Tamaño no natural",-4),
        new ElementoProhibido(VENTAJA,"Tamaño no natural",-3),
        new ElementoProhibido(VENTAJA,"Tamaño no natural",-2),
        new ElementoProhibido(VENTAJA,"Tamaño no natural",-1)
    ],    //incompatibles
    false,  //anulable
    [],
    [giganteJayan],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    JAY_FISICO,
    "",
    "Suman un +2 a su característica de FUE y un +1 a su CON. Adicionalmente, no es posible utilizar la desventaja de Reducir dos puntos a una característica para rebajar su Fuerza.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [
        new ElementoProhibido(VENTAJA,"Reducir dos puntos a una característica",FUE)
    ],
    [fisicoJayan],
    GRUPO_RAZAS,
    []
));

//noinspection MagicNumberJS
ventajas_set.push(new Ventaja(
    JAY_CANSANCIO,
    "",
    "Aplican un bonificador de tres puntos al valor máximo de su Cansancio",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaCansancio, 3],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    JAY_RESISTENCIA,
    "",
    "Obtienen +20 a su RF.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaResistencia, RF, 20],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    JAY_OJO,
    "",
    "Esta habilidad no funciona con conjuros, efectos místicos o matrices psíquicas.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    JAY_ARMAS,
    "",
    "Incluso desarmados, sus ataques producen un daño base de 40 ó 60 más el bono de Fuerza, dependiendo de su tamaño (Ver la Tabla 82). Naturalmente, es necesario desarrollar su habilidad de combate con ellas para no aplicar penalizadores.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [armasJayan],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    JAY_FUERZA,
    "",
    "Su increíble físico permite a los Jayán realizar acciones de dificultad Inhumana en todos aquellos controles que dependan de la característica de Fuerza.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    JAY_DEBILIDAD,
    "",
    "Aplican un penalizador de -20 a su RM. Además, restan un punto de su característica de POD.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [debilidadJayan],
    GRUPO_RAZAS,
    []
));

var razaJayan = new Raza(
    RAZA_JAYAN,
    [
        getVentaja(JAY_GIGANTES),
        getVentaja(JAY_FISICO),
        getVentaja(JAY_CANSANCIO),
        getVentaja(JAY_RESISTENCIA),
        getVentaja(JAY_OJO),
        getVentaja(JAY_ARMAS),
        getVentaja(JAY_FUERZA)
    ],
    [
        getVentaja(JAY_DEBILIDAD)
    ],
    1);

razas_set.push(razaJayan);

allRazas[RAZA_JAYAN] = razaJayan;

var RAZA_DAIMAH = "Daimah";

var DAIM_CUERPO = "Cuerpo felino (Daimah)";
var DAIM_SENTIR = "Sentir el bosque (Daimah)";
var DAIM_GARRAS = "Garras y dientes (Daimah)";
var DAIM_HABILIDAD = "Habilidad inhumana (Daimah)";
var DAIM_PEQUEÑO = "Pequeño tamaño (Daimah)";
var DAIM_NATURALEZA = "Naturaleza curativa (Daimah)";
var DAIM_RESISTENCIA = "Resistencia a las caídas (Daimah)";
var DAIM_INMUNIDAD = "Inmunidad natural (Daimah)";
var DAIM_ESENCIA = "Esencia mística (Daimah)";
var DAIM_MOVIMIENTO = "Movimiento por los bosques (Daimah)";
var DAIM_VER = "Ver la esencia (Daimah)";

ventajas_set.push(new Ventaja(
    DAIM_CUERPO,
    "",
    "Aplican un bono de +1 a sus características de AGI y DES, pero un -1 a su CON y VOL",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [cuerpoDaimah],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_SENTIR,
    "",
    "Son capaces de notar las sensaciones de los animales y las plantas, detectando si tienen miedo, se sienten tranquilos o les ocurre algo extraño.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_GARRAS,
    "",
    "Empleadas de este modo, tiene un daño base de 30 puntos más el bono de Fuerza. Lógicamente, es necesario desarrollar su habilidad de combate con ellas para no aplicar penalizadores.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_HABILIDAD,
    "",
    "La capacidad de los Daimah les permite alcanzar la dificultad de Inhumano en aquellos controles y habilidades que dependan de su Agilidad y su Destreza.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_PEQUEÑO,
    "",
    "Restan un punto de su característica de Tamaño",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaTamaño,-1],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_NATURALEZA,
    "",
    "Mientras esté en una espesa zona boscosa o selvática, el Nephilim suma ocho puntos a su nivel de Regeneración.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_RESISTENCIA,
    "",
    "Restan dos grados a la dificultad que necesitan superar para evitar daños en la Tabla 68.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_INMUNIDAD,
    "",
    "Por tanto, son inmunes a todos los venenos que provengan de animales o plantas naturales, al igual que a las enfermedades que no sean de origen místico.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_ESENCIA,
    "",
    "Están obligados a elegir la ventaja de Don.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [
        new ElementoProhibido(VENTAJA,"Inmunidad sobrenatural")
    ],    //incompatibles
    false,  //anulable
    [],
    [obligadoComprarDon],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_MOVIMIENTO,
    "",
    "A pesar de lo espeso del follaje o de lo cerrado de la vegetación, un Daimah no tiene penalizadores al movimiento por moverse en este entorno.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_VER,
    "",
    "Esta habilidad se considera un poder innato de detección, pero un individuo puede resistirse naturalmente si supera una RM contra 140.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));


var razaDaimah = new Raza(
    RAZA_DAIMAH,
    [
        getVentaja(DAIM_CUERPO),
        getVentaja(DAIM_SENTIR),
        getVentaja(DAIM_GARRAS),
        getVentaja(DAIM_HABILIDAD),
        getVentaja(DAIM_NATURALEZA),
        getVentaja(DAIM_RESISTENCIA),
        getVentaja(DAIM_INMUNIDAD),
        getVentaja(DAIM_ESENCIA),
        getVentaja(DAIM_MOVIMIENTO),
        getVentaja(DAIM_VER)
    ],
    [
        getVentaja(DAIM_PEQUEÑO)
    ],
    1);

razas_set.push(razaDaimah);

allRazas[RAZA_DAIMAH] = razaDaimah;

var RAZA_DUKZARIST = "Duk'zarist";

var DUK_PERFECCION = "Perfección física y anímica (Duk'zarist)";
var DUK_OJOS = "Ojos de fuego (Duk'zarist)";
var DUK_ACCIONES = "Acciones inhumanas (Duk'zarist)";
var DUK_PRESENTIR = "Presentir lo oscuro y lo luminoso (Duk'zarist)";
var DUK_LAZO = "Lazo de oscuridad y fuego (Duk'zarist)";
var DUK_RESISTENCIAS = "Resistencias excepcionales (Duk'zarist)";
var DUK_AGUANTE = "Aguante extremo a la Muerte (Duk'zarist)";
var DUK_CURACION = "Curación Rápida (Duk'zarist)";
var DUK_NECESIDADES = "Necesidades Limitadas (Duk'zarist)";
var DUK_OBLIGACION = "Obligación sobrenatural (Duk'zarist)";
var DUK_ALERGIA = "Alergia al Metal (Duk'zarist)";


ventajas_set.push(new Ventaja(
    DUK_PERFECCION,
    "",
    "aplican un bonificador excepcional de +1 a todas sus características (FUE, DES, AGI, CON, INT, POD, VOL, PER). " +
        "Sin embargo, por la misma causa son incapaces de elegir ninguna de las siguientes desventajas: " +
        "Miembro atrofiado, Salud enfermiza, Vulnerabilidad a los venenos, Miopía, Debilidad física, Enfermedad grave, Mudo, Ciego o Sordo.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [
        new ElementoProhibido(VENTAJA,"Miembro atrofiado"),
        new ElementoProhibido(VENTAJA,"Salud enfermiza"),
        new ElementoProhibido(VENTAJA,"Vulnerabilidad a los venenos"),
        new ElementoProhibido(VENTAJA,"Miopía"),
        new ElementoProhibido(VENTAJA,"Debilidad física"),
        new ElementoProhibido(VENTAJA,"Enfermedad grave"),
        new ElementoProhibido(VENTAJA,"Mudo"),
        new ElementoProhibido(VENTAJA,"Ciego"),
        new ElementoProhibido(VENTAJA,"Sordo"),
        new ElementoProhibido(VENTAJA,"Inmunidad sobrenatural")
    ],    //incompatibles
    false,  //anulable
    [],
    [perfeccionDukZarist],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_OJOS,
    "",
    "Sus ojos son capaces de ver en la oscuridad, por lo que aplican a la mitad cualquier penalizador que sufran por su causa. También pueden detectar fuentes de calor.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_ACCIONES,
    "",
    "Por naturaleza, un Duk´zarist puede alcanzar la dificultad de Inhumano en los controles de dificultades.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_PRESENTIR,
    "",
    "De un modo sobrenatural, perciben la esencia oscura o luminosa que desprenden sus almas.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_LAZO,
    "",
    "Obtienen un bono especial de +10 a sus controles contra ellos. Un Duk´zarist no puede elegir la ventaja Desequilibrio mágico hacia la luz.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [new ElementoProhibido(VENTAJA,"Desequilibrio elemental","Luz")],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_RESISTENCIAS,
    "",
    "Los primeros aplican un bonificador de +15 a todas sus Resistencias (RM, RP, RV y RE) salvo a la Física (RF), donde poseen un +20, mientras que las jóvenes tienen un +15 a todas ellas (RF, RP, RV y RE) salvo a la Mágica (RM), donde llegan a +20.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [resistenciasDukZarist],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_AGUANTE,
    "",
    "No sólo pasan automáticamente los controles para superar el estado de entre la vida y la muerte, sino que además permanecen conscientes con un penalizador de -40 a toda acción mientras se encuentran con puntos de vida negativos.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_CURACION,
    "",
    "Suman cinco puntos a su nivel de Regeneración natural.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaRegeneracion,5,DUK_CURACION],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_NECESIDADES,
    "",
    "Disminuyen sus necesidades de sueño y comida hasta una séptima parte que la de cualquier otro ser humano, sin sufrir ningún tipo de negativo.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_OBLIGACION,
    "",
    "Necesariamente, un Duk´zarist debe emplear sus Puntos de Creación para tener acceso a una habilidad psíquica o al Don. Como mínimo, debe elegir una de ambas ventajas, aunque nada les impide tomarlas ambas. En el caso de que adquiera poderes psíquicos, su devoción al fuego le obliga a que la primera disciplina elegida sea siempre piroquinesis.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [obligacionDukZarist],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    DUK_ALERGIA,
    "",
    "Si ponen su piel en contacto con metal que contenga algo de hierro, deberán superar un control de Resistencia usando su presencia base contra una dificultad de 40. Si el metal es hierro puro, la dificultad es de 60. Cuando su presencia base es veinte puntos mayor que la cantidad necesaria, ya no es necesario hacer ningún control. Los Duk´zarist que lo fallen desaparecen completamente, dejando caer al suelo sus pertenencias y ropajes vacíos.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));


var razaDukZarist = new Raza(
    RAZA_DUKZARIST,
    [
        getVentaja(DUK_PERFECCION),
        getVentaja(DUK_OJOS),
        getVentaja(DUK_ACCIONES),
        getVentaja(DUK_PRESENTIR),
        getVentaja(DUK_LAZO),
        getVentaja(DUK_RESISTENCIAS),
        getVentaja(DUK_AGUANTE),
        getVentaja(DUK_CURACION),
        getVentaja(DUK_NECESIDADES)
    ],
    [
        getVentaja(DUK_OBLIGACION),
        getVentaja(DUK_ALERGIA)
    ],
    3);

razas_set.push(razaDukZarist);

allRazas[RAZA_DUKZARIST] = razaDukZarist;
var RAZA_NEPH_DAIMAH = "Nephilim Daimah";

var DAIM_NEPH_SENTIR = "Sentir el bosque (Nephilim Daimah)";
var DAIM_NEPH_MOVIMIENTO = "Movimiento por los bosques (Nephilim Daimah)";
var DAIM_NEPH_VER = "Ver la esencia (Nephilim Daimah)";
var DAIM_NEPH_PEQUEÑO = "Pequeño tamaño (Nephilim Daimah)";
var DAIM_NEPH_NATURALEZA = "Naturaleza curativa (Nephilim Daimah)";

var DAIM_NEPH_ALMA = "Alma inmortal (Nephilim Daimah)";

ventajas_set.push(new Ventaja(
    DAIM_NEPH_SENTIR,
    "",
    "Son capaces de notar las sensaciones de los animales y las plantas, detectando si tienen miedo, se sienten tranquilos o les ocurre algo extraño.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [
        new ElementoProhibido(VENTAJA,"Inmunidad sobrenatural")
    ],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_NEPH_MOVIMIENTO,
    "",
    "A pesar de lo espeso del follaje o de lo cerrado de la vegetación, un Daimah no tiene penalizadores al movimiento por moverse en este entorno.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_NEPH_VER,
    "",
    "Esta habilidad se considera un poder innato de detección, pero un individuo puede resistirse naturalmente si supera una RM contra 140.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_NEPH_PEQUEÑO,
    "",
    "Restan un punto de su característica de Tamaño",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaTamaño,-1],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DAIM_NEPH_NATURALEZA,
    "",
    "Mientras esté en una espesa zona boscosa o selvática, el Nephilim suma tres puntos a su nivel de Regeneración.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    DAIM_NEPH_ALMA,
    "",
    "Penalizador de -2 puntos a la experiencia que otorgue el Director de Juego al finalizar cada sesión.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

var razaNephilimDaimah = new Raza(RAZA_NEPH_DAIMAH, [
    getVentaja(DAIM_NEPH_SENTIR),
    getVentaja(DAIM_NEPH_MOVIMIENTO),
    getVentaja(DAIM_NEPH_VER),
    getVentaja(DAIM_NEPH_PEQUEÑO),
    getVentaja(DAIM_NEPH_NATURALEZA)
], [
    getVentaja(DAIM_NEPH_ALMA)
], 0);

razas_set.push(razaNephilimDaimah);

allRazas[RAZA_NEPH_DAIMAH] = razaNephilimDaimah;

var RAZA_NEPH_DANJAYNI = "Nephilim D'Anjayni";

var DANJ_NEPH_INDETECTABILIDAD = "Indetectabilidad (Nephilim D'Anjayni)";
var DANJ_NEPH_OLVIDO = "Olvido (Nephilim D'Anjayni)";
var DANJ_NEPH_SUSURROS = "Susurros silenciosos (Nephilim D'Anjayni)";
var DANJ_NEPH_PASAR = "Pasar sin dejar rastro (Nephilim D'Anjayni)";

var DANJ_NEPH_APARIENCIA = "Apariencia común (Nephilim D'Anjayni)";
var DANJ_NEPH_ALMA = "Alma inmortal (Nephilim D'Anjayni)";

ventajas_set.push(new Ventaja(
    DANJ_NEPH_INDETECTABILIDAD,
    "",
    "Todos los D´Anjayni aplican un bonificador de +30 a cualquiera de sus Resistencias contra efectos de detección. Además, aprenden de manera innata la habilidad de Ocultación del Ki, que desarrollan aplicando también un bono de +30.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [indetectabilidadNephilimDanjayni],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DANJ_NEPH_OLVIDO,
    "",
    "A términos de juego, cualquiera que vea o hable con el personaje deberá superar una Resistencia Mágica (RM) contra 100, u olvidará su apariencia y la conversación que han mantenido. Esta habilidad se considera equivalente a un efecto místico automático cuya condición consiste, simplemente, en encontrarse con el personaje y que este se marche sin haberle dicho su nombre. No es posible percatarse del funcionamiento de esta habilidad, ni siquiera para alguien con la capacidad de ver magia. Los afectados no se darán cuenta de que lo ocurrido es innatural, sino que pensarán simplemente que son incapaces de acordarse o que no se han fijado bien. Un hechicero deberá superar un control de Valoración mágica contra una dificultad de Imposible para percatarse del uso de esta habilidad. El olvido deja de tener efecto en cualquier momento en el que el D´Anjayni se presenta con su verdadero nombre durante la conversación, o se encuentra con individuos que saben exactamente quién es.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DANJ_NEPH_SUSURROS,
    "",
    "Todo aquel que intente escucharlas aplicará un -60 a sus controles si no es su receptor.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DANJ_NEPH_PASAR,
    "",
    "Su rastro se borra a medida que camina, por lo que si alguien intenta rastrearles, aplicará un -40 a su habilidad.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    DANJ_NEPH_APARIENCIA,
    "",
    "No podrán tener nunca una apariencia inferior a 3 o superior a 7.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aparienciaNephilimDanjayni],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    DANJ_NEPH_ALMA,
    "",
    "Penalizador de -3 puntos a la experiencia que otorgue el Director de Juego.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

var razaNephilimDanjayni = new Raza(RAZA_NEPH_DANJAYNI, [
    getVentaja(DANJ_NEPH_INDETECTABILIDAD),
    getVentaja(DANJ_NEPH_OLVIDO),
    getVentaja(DANJ_NEPH_SUSURROS),
    getVentaja(DANJ_NEPH_PASAR)
], [
    getVentaja(DANJ_NEPH_APARIENCIA),
    getVentaja(DANJ_NEPH_ALMA)
], 0);

razas_set.push(razaNephilimDanjayni);

allRazas[RAZA_NEPH_DANJAYNI] = razaNephilimDanjayni;

var RAZA_NEPH_DUKZARIST = "Nephilim Duk'zarist";

var DUK_NEPH_RESISTENCIAS = "Resistencias excepcionales (Nephilim Duk'zarist)";
var DUK_NEPH_DESEQUILIBRIO = "Desequilibrio hacia la Oscuridad (Nephilim Duk'zarist)";
var DUK_NEPH_AGUANTE = "Aguante a la Muerte (Nephilim Duk'zarist)";
var DUK_NEPH_CURACION = "Curación Rápida (Nephilim Duk'zarist)";
var DUK_NEPH_NECESIDADES = "Necesidades Limitadas (Nephilim Duk'zarist)";
var DUK_NEPH_PRESENTIR = "Presentir lo oscuro y lo luminoso (Nephilim Duk'zarist)";
var DUK_NEPH_VISION = "Visión nocturna (Nephilim Duk'zarist)";
var DUK_NEPH_FUEGO = "Devoción al Fuego (Nephilim Duk'zarist)";
var DUK_NEPH_CUERPOS = "Cuerpos perfectos (Nephilim Duk'zarist)";
var DUK_NEPH_ALERGIA = "Alergia al Metal (Nephilim Duk'zarist)";
var DUK_NEPH_ALMA = "Alma inmortal (Nephilim Duk'zarist)";

ventajas_set.push(new Ventaja(
    DUK_NEPH_RESISTENCIAS,
    "",
    "Las almas masculinas aplican un bonificador de +15 a todas sus Resistencias (RM, RP, RV y RE) salvo la Resistencia Física (RF), donde poseen un +20. Por el contrario, las femeninas tienen un +15 a todas sus Resistencias (RF, RP, RV y RE) salvo la Mágica, donde tienen un +20 (RM).",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [
        new ElementoProhibido(VENTAJA,"Inmunidad sobrenatural")
    ],    //incompatibles
    false,  //anulable
    [],
    [resistenciasNephilimDukZarist],
    GRUPO_RAZAS,
    []
));


ventajas_set.push(new Ventaja(
    DUK_NEPH_DESEQUILIBRIO,
    "",
    "Esta habilidad les otorga una Resistencia especial de +10 contra cualquier efecto basado en dicho elemento. Adicionalmente, esta afinidad les impide elegir la ventaja de Desequilibrio Mágico hacia la Luz.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [new ElementoProhibido(VENTAJA,"Desequilibrio elemental","Luz")],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_NEPH_AGUANTE,
    "",
    "Cuando entran en el estado de entre la vida y la muerte, no necesitan superar el control de Resistencia Física para sobrevivir, ya que su alma se afianza tanto al cuerpo que superan automáticamente estos controles.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_NEPH_CURACION,
    "",
    "Suman un punto a su nivel de Regeneración natural.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaRegeneracion,1,DUK_NEPH_CURACION],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_NEPH_NECESIDADES,
    "",
    "Disminuyen sus necesidades de sueño y comida hasta una tercera parte que la de cualquier otro ser humano, sin sufrir ningún tipo de negativo.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_NEPH_PRESENTIR,
    "",
    "De un modo sobrenatural, perciben la esencia oscura o luminosa que desprenden sus almas. Esta habilidad no les permite reconocer a un individuo que se halle oculto por un conjuro o mediante una habilidad del Ki.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_NEPH_VISION,
    "",
    "A efectos de juego, esta capacidad no está tan desarrollada como la que se adquiere mediante un Punto de Creación, pero permite disminuir a la mitad cualquier penalizador que el Nephilim sufra a su percepción por causa de la oscuridad natural.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_NEPH_FUEGO,
    "",
    "Si desarrolla sus habilidades mentales, tiene la obligación de adquirir como primera disciplina la Piroquinesis.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [fuegoNephilimDukZarist],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    DUK_NEPH_CUERPOS,
    "",
    "El Nephilim no puede elegir ninguna de las siguientes desventajas: Miembro atrofiado, Salud enfermiza, Vulnerabilidad a los venenos, Miopía, Debilidad física, Enfermedad grave, Mudo, Ciego o Sordo.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [
        new ElementoProhibido(VENTAJA,"Miembro atrofiado"),
        new ElementoProhibido(VENTAJA,"Salud enfermiza"),
        new ElementoProhibido(VENTAJA,"Vulnerabilidad a los venenos"),
        new ElementoProhibido(VENTAJA,"Miopía"),
        new ElementoProhibido(VENTAJA,"Debilidad física"),
        new ElementoProhibido(VENTAJA,"Enfermedad grave"),
        new ElementoProhibido(VENTAJA,"Mudo"),
        new ElementoProhibido(VENTAJA,"Ciego"),
        new ElementoProhibido(VENTAJA,"Sordo")
    ],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    DUK_NEPH_ALERGIA,
    "",
    "Si pone su piel en contacto con un metal que contenga una aleación de hierro, deberá superar un control usando su presencia base contra una dificultad de 60, o sufrirá una reacción adversa que le produce un negativo a la acción equivalente a la cantidad por la que falló la tirada. Si el metal es hierro puro, la tirada es contra 80. Estos negativos desaparecen a un ritmo de 10 puntos por minuto. Un Nephilim Duk´zarist puede utilizar ropas y guantes para evitar estos efectos.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    DUK_NEPH_ALMA,
    "",
    "Sufren un penalizador de -5 puntos a la experiencia que otorgue el Director de Juego al finalizar cada sesión.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

var razaNephilimDukZarist = new Raza(RAZA_NEPH_DUKZARIST, [
    getVentaja(DUK_NEPH_RESISTENCIAS),
    getVentaja(DUK_NEPH_DESEQUILIBRIO),
    getVentaja(DUK_NEPH_AGUANTE),
    getVentaja(DUK_NEPH_CURACION),
    getVentaja(DUK_NEPH_NECESIDADES),
    getVentaja(DUK_NEPH_PRESENTIR),
    getVentaja(DUK_NEPH_VISION),
    getVentaja(DUK_NEPH_FUEGO),
    getVentaja(DUK_NEPH_CUERPOS)
], [
    getVentaja(DUK_NEPH_ALERGIA),
    getVentaja(DUK_NEPH_ALMA)
], 0);

razas_set.push(razaNephilimDukZarist);

allRazas[RAZA_NEPH_DUKZARIST] = razaNephilimDukZarist;
var RAZA_NEPH_EBUDAN = "Nephilim Ebudan";

var EBUD_NEPH_ORINIE = "Or'inie (Nephilim Ebudan)";
var EBUD_NEPH_ALAS = "Alas de Serafín (Nephilim Ebudan)";
var EBUD_NEPH_ESENCIA = "Esencia Celestial (Nephilim Ebudan)";

var EBUD_NEPH_ALMA = "Alma inmortal (Nephilim Ebudan)";

ventajas_set.push(new Ventaja(
    EBUD_NEPH_ORINIE,
    "",
    "El Nephilim puede aplicar un bonificador de +30 a cualquier Resistencia contra efectos de dominio, control emocional u olvido que puedan impedirle realizar el Sue´ Aman. Una vez conseguido, esta habilidad desaparece completamente.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    EBUD_NEPH_ALAS,
    "",
    "El personaje puede exteriorizarlas u ocultarlas a voluntad, aunque hacerlo requiere un asalto completo. Las alas le otorgan la capacidad de surcar los cielos a un Tipo de Vuelo 12. Esta habilidad únicamente se manifiesta después de que el personaje haya logrado el Sue´ Aman.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    EBUD_NEPH_ESENCIA,
    "",
    "A efectos de juego, el Nephilim se vuelve invulnerable a cualquier ataque natural que no sea capaz de dañar energía.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    EBUD_NEPH_ALMA,
    "",
    "Penalizador de -3 puntos a la experiencia que otorgue el Director de Juego al finalizar cada sesión.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

var razaNephilimEbudan = new Raza(RAZA_NEPH_EBUDAN, [
    getVentaja(EBUD_NEPH_ORINIE),
    getVentaja(EBUD_NEPH_ALAS),
    getVentaja(EBUD_NEPH_ESENCIA)
], [
    getVentaja(EBUD_NEPH_ALMA)
], 0);

razas_set.push(razaNephilimEbudan);

allRazas[RAZA_NEPH_EBUDAN] = razaNephilimEbudan;

var RAZA_NEPH_JAYAN = "Nephilim Jayán";

var JAY_NEPH_GIGANTES = "Gigantes (Nephilim Jayán)";
var JAY_NEPH_CANSANCIO = "Aguante al cansancio (Nephilim Jayán)";
var JAY_NEPH_RESISTENCIA = "Resistencia al daño (Nephilim Jayán)";
var JAY_NEPH_FUERZA = "Fuerza descomunal (Nephilim Jayán)";
var JAY_NEPH_VISION = "Visión espiritual (Nephilim Jayán)";

var JAY_NEPH_DEBILIDAD = "Debilidad contra la magia (Nephilim Jayán)";
var JAY_NEPH_ALMA = "Alma inmortal (Nephilim Jayán)";

ventajas_set.push(new Ventaja(
    JAY_NEPH_GIGANTES,
    "",
    "Suman dos puntos a su característica de Tamaño y no pueden elegir la ventaja Tamaño desigual para disminuirlo.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [
        new ElementoProhibido(VENTAJA,"Tamaño no natural",-5),
        new ElementoProhibido(VENTAJA,"Tamaño no natural",-4),
        new ElementoProhibido(VENTAJA,"Tamaño no natural",-3),
        new ElementoProhibido(VENTAJA,"Tamaño no natural",-2),
        new ElementoProhibido(VENTAJA,"Tamaño no natural",-1)
    ],    //incompatibles
    false,  //anulable
    [],
    [giganteNephilimJayan],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    JAY_NEPH_CANSANCIO,
    "",
    "Aumentan un punto el valor máximo de su Cansancio.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaCansancio, 1],
    GRUPO_RAZAS,
    []
));

//noinspection MagicNumberJS
ventajas_set.push(new Ventaja(
    JAY_NEPH_RESISTENCIA,
    "",
    "Aplica un bonificador de +15 a su Resistencia Física (RF).",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaResistencia, RF, 15],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    JAY_NEPH_FUERZA,
    "",
    "Aument un punto el atributo de Fuerza del personaje. Adicionalmente, no es posible utilizar la desventaja de Reducir dos puntos una característica para rebajar la Fuerza del Nephilim.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [new ElementoProhibido(VENTAJA,"Reducir Dos Puntos Una Característica",FUE)],    //incompatibles
    false,  //anulable
    [],
    [aumentaCaracteristica, FUE, 1],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    JAY_NEPH_VISION,
    "",
    "Para hacerlo, el personaje debe cerrar los ojos y de un modo inconsciente podrá 'mirar' a los seres espirituales, aunque no será capaz de ver nada en el mundo material. Esta habilidad no permite al personaje ver conjuros, efectos místicos o matrices psíquicas, sino tan sólo almas invisibles al ojo humano.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    JAY_NEPH_DEBILIDAD,
    "",
    "Sufre un penalizador de -10 a su Resistencia Mágica (RM).",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaResistencia, RM, -10],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    JAY_NEPH_ALMA,
    "",
    "Sufren un penalizador de -3 puntos a la experiencia que otorgue el Director de Juego al finalizar cada sesión.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

var razaNephilimJayan = new Raza(RAZA_NEPH_JAYAN, [
    getVentaja(JAY_NEPH_GIGANTES),
    getVentaja(JAY_NEPH_CANSANCIO),
    getVentaja(JAY_NEPH_RESISTENCIA),
    getVentaja(JAY_NEPH_FUERZA),
    getVentaja(JAY_NEPH_VISION)
], [
    getVentaja(JAY_NEPH_DEBILIDAD),
    getVentaja(JAY_NEPH_ALMA)
], 0);

razas_set.push(razaNephilimJayan);

allRazas[RAZA_NEPH_JAYAN] = razaNephilimJayan;

var RAZA_NEPH_SYLVAIN = "Nephilim Sylvain";

var SYLV_NEPH_RESISTENCIAS = "Resistencias excepcionales (Nephilim Sylvain)";
var SYLV_NEPH_DESEQUILIBRIO = "Desequilibrio hacia la Luz (Nephilim Sylvain)";
var SYLV_NEPH_CURACION = "Curación Rápida (Nephilim Sylvain)";
var SYLV_NEPH_PRESENTIR = "Presentir lo oscuro y lo luminoso (Nephilim Sylvain)";
var SYLV_NEPH_NECESIDADES = "Necesidades Limitadas (Nephilim Sylvain)";

var SYLV_NEPH_ALMA = "Alma inmortal (Nephilim Sylvain)";

ventajas_set.push(new Ventaja(
    SYLV_NEPH_RESISTENCIAS,
    "",
    "Aplican un bonificador de +10 a su Resistencia Mágica (RM) y Psíquica (RP), un +20 a su Resistencia contra Enfermedades (RE) y un +5 a sus Resistencias Físicas y contra Venenos (RF y RV, respectivamente). Un Nephilim no puede elegir las desventajas de: Salud enfermiza, Enfermedad grave incurable y Vulnerabilidad a la magia.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [
        new ElementoProhibido(VENTAJA,"Salud enfermiza"),
        new ElementoProhibido(VENTAJA,"Enfermedad grave incurable"),
        new ElementoProhibido(VENTAJA,"Vulnerabilidad a la magia"),
        new ElementoProhibido(VENTAJA,"Inmunidad sobrenatural")
    ],    //incompatibles
    false,  //anulable
    [],
    [resistenciasExcepcionalesNephilimSylvain],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    SYLV_NEPH_DESEQUILIBRIO,
    "",
    "Esta habilidad les otorga una Resistencia especial de +10 contra cualquier efecto basado en dicho elemento. Adicionalmente, esta afinidad les impide elegir la ventaja de Desequilibrio Mágico hacia la Oscuridad.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [new ElementoProhibido(VENTAJA,"Desequilibrio elemental","Oscuridad")],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    SYLV_NEPH_CURACION,
    "",
    "Suman un punto a su nivel de Regeneración natural.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aumentaRegeneracion,1,SYLV_NEPH_CURACION],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    SYLV_NEPH_PRESENTIR,
    "",
    "De un modo sobrenatural, perciben la esencia oscura o luminosa que desprenden sus almas. Esta habilidad no les permite reconocer a un individuo que se halle oculto por un conjuro o mediante una habilidad del Ki.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

ventajas_set.push(new Ventaja(
    SYLV_NEPH_NECESIDADES,
    "",
    "Sus necesidades se reducen a la mitad de las de una persona normal. Eso no significa que no tengan hambre por comer de una manera escasa, sino que, en la práctica, no requieren tantos alimentos para sobrevivir.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

desventajas_set.push(new Ventaja(
    SYLV_NEPH_ALMA,
    "",
    "Sufren un penalizador de -4 puntos a la experiencia que otorgue el Director de Juego al finalizar cada sesión.",
    NO_COMPRABLE,   //getRepetible
    [0],      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [],
    GRUPO_RAZAS,
    []
));

var razaNephilimSylvain = new Raza(RAZA_NEPH_SYLVAIN, [
    getVentaja(SYLV_NEPH_RESISTENCIAS),
    getVentaja(SYLV_NEPH_DESEQUILIBRIO),
    getVentaja(SYLV_NEPH_CURACION),
    getVentaja(SYLV_NEPH_PRESENTIR),
    getVentaja(SYLV_NEPH_NECESIDADES)
], [
    getVentaja(SYLV_NEPH_ALMA)
], 0);

razas_set.push(razaNephilimSylvain);

allRazas[RAZA_NEPH_SYLVAIN] = razaNephilimSylvain;
/**
 *
 * @param {string} nombre
 * @param {string} descripcion
 * @param {string} descripcionVentajas
 * @param {Requisito[]} requisitos
 * @param {number} bonoCM
 * @param {Bono[]} bonos
 * @param {Array} dmgBaseElementos
 * @param {Array} tipoAtaque
 * @constructor
 * @class ArteMarcial
 */
function ArteMarcial(nombre,descripcion,descripcionVentajas,requisitos,bonoCM,bonos, dmgBaseElementos, tipoAtaque) {
    /** @type string */
    this.nombre = nombre;

    /** @type string */
    this.descripcion = descripcion;

    /** @type string */
    this.descripcionVentajas = descripcionVentajas;

    /** @type Requisito[] */
    this.requisitos = requisitos;

    /** @type number */
    this.bonoCM = bonoCM;

    /** @type Bono[] */
    this.bonos = bonos;

    /** @type Array */
    this.dañobaseElementos = dmgBaseElementos;

    /** @type Array */
    this.tipoAtaque = tipoAtaque;
}

ArteMarcial.prototype = {
    constructor: ArteMarcial,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
       return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcionVentajas : function() {
        return this.descripcionVentajas;
    },

    /**
     *
     * @returns {Requisito[]}
     */
    getRequisitos : function() {
        return this.requisitos;
    },

    /**
     *
     * @returns {number}
     */
    getBonoCM : function() {
        return this.bonoCM;
    },

    /**
     *
     * @returns {Bono[]}
     */
    getBonos : function() {
        return this.bonos;
    },

    /**
     *
     * @returns {Array}
     */
    getDañoBaseElementos : function() {
        return this.dañobaseElementos;
    },

    /**
     *
     * @returns {Array}
     */
    getTipoAtaque : function() {
        return this.tipoAtaque;
    },

    /**
     *
     * @returns {number}
     */
    dañoBase : function(personaje) {
        var dañoBase = 0;
        for (var i = 0; i < this.dañobaseElementos.length;i++) {
            if (isNaN(this.dañobaseElementos[i])) {
                switch (this.dañobaseElementos[i]) {
                    case BONO_FUE:
                        dañoBase += personaje.getBonoCaracteristica(FUE);
                        break;
                    case BONO_POD:
                        dañoBase += personaje.getBonoCaracteristica(POD);
                        break;
                    case BONO_FUE_RED:
                        var bonoFue = personaje.getBonoCaracteristica(FUE);
                        if (bonoFue % 10 != 0) {
                            bonoFue += 5;
                        }
                        dañoBase += bonoFue;
                        break;
                    case BONO_POD_RED :
                        var bonoPod = personaje.getBonoCaracteristica(POD);
                        if (bonoPod % 10 != 0) {
                            bonoPod += 5;
                        }
                        dañoBase += bonoPod;
                        break;
                    case BONO_NO:
                        break;
                    case ROTURA_PLUS_10:
                        break;
                    case TA_ENEMIGA_MENOS_2:
                        break;
                }
            } else {
                dañoBase += this.dañobaseElementos[i];
            }
        }
        return dañoBase;
    },

    /**
     *
     * @returns {boolean}
     */
    cumpleRequisitos : function(personaje) {
        for (var i = 0; i < this.requisitos.length;i++) {
            var requisito = this.requisitos[i];

            if (!requisito.cumple(personaje)) {
                return false;
            }
        }

        return true;
    },

    toJSON : function() {
        return this.nombre;
    }
};

function ArteMarcialComprada(arteMarcial) {
    /** @type ArteMarcial */
    this.arteMarcial = arteMarcial;

    /** @type boolean */
    this.anulable = true;
}

ArteMarcialComprada.prototype = {
    constructor: ArteMarcialComprada,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.arteMarcial.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.arteMarcial.descripcion;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcionVentajas : function() {
        return this.arteMarcial.descripcionVentajas;
    },

    /**
     *
     * @returns {Requisito[]}
     */
    getRequisitos : function() {
        return this.arteMarcial.requisitos;
    },

    /**
     *
     * @returns {number}
     */
    getBonoCM : function() {
        return this.arteMarcial.bonoCM;
    },

    /**
     *
     * @returns {Bono[]}
     */
    getBonos : function() {
        return this.arteMarcial.bonos;
    },

    /**
     *
     * @returns {Array}
     */
    getDañoBaseElementos : function() {
        return this.arteMarcial.dañobaseElementos;
    },

    /**
     *
     * @returns {Array}
     */
    getTipoAtaque : function() {
        return this.arteMarcial.tipoAtaque;
    },

    /**
     *
     * @returns {number}
     */
    dañoBase : function(personaje) {
        return this.arteMarcial.dañoBase(personaje);
    },

    /**
     *
     * @returns {boolean}
     */
    cumpleRequisitos : function(personaje) {
        return this.arteMarcial.cumpleRequisitos(personaje);
    },

    /**
     *
     * @returns {boolean}
     */
    isAnulable : function() {
        return this.anulable;
    },

    /**
     *
     * @param {boolean} valor
     * @returns {boolean}
     */
    setAnulable : function(valor) {
        this.anulable = valor;
    }
};

/**
 *
 * @type {ArteMarcial[]}
 */
var artesMarcialesBasicas_set = [];
/**
 *
 * @type {ArteMarcial[]}
 */
var artesMarcialesAvanzadas_set = [];
var allArtesMarciales = {};

var ERR_ARTE_MARCIAL_ERRONEA = "Error: Nombre de arte marcial erróneo";

/**
 * Coste de un arte marcial
 * @type {number}
 */
var COSTE_ARTE_MARCIAL = 50;

/**
 * Coste de un arte marcial para la categoría Tao
 * @type {number}
 */
var COSTE_TAO_ARTE_MARCIAL = 20;

/**
 * Devuelve el arte marcial con el nombre indicado.
 * @param nombreArteMarcial
 * @returns {ArteMarcial}
 * @throws ERR_ARTE_MARCIAL_ERRONEA
 */
function getArteMarcial(nombreArteMarcial) {
    if (allArtesMarciales[nombreArteMarcial]) {
        return allArtesMarciales[nombreArteMarcial];
    } else {
        throw ERR_ARTE_MARCIAL_ERRONEA + ": " + nombreArteMarcial;
    }
}

/**
 * Devuelve el coste en PD de un arte marcial para el personaje actual.
 * @param esPrimera Booleano Indica si es el primer arte marcial que aprende el personaje
 * @returns {number}
 */
function costeArteMarcial(esPrimera) {
    var coste;
    if ((esPrimera) && (personaje_actual.getArmaInicial() == ARMA_SIN_ARMAS)) {
        if (personaje_actual.getCategoria().getNombre() == CAT_TAO) {
            coste = COSTE_TAO_ARTE_MARCIAL/2;
        } else {
            coste = COSTE_ARTE_MARCIAL/2;
        }
    } else {
        if (personaje_actual.getCategoria().getNombre() == CAT_TAO) {
            coste = COSTE_TAO_ARTE_MARCIAL;
        } else {
            coste = COSTE_ARTE_MARCIAL;
        }
    }
    return coste;
}

/**
 * Inicialización de las artes marciales. Ordena las listas, prepara listeners.
 */
function initArtesMarciales() {
    var i;

    artesMarcialesAvanzadas_set.sort(SortPorAtributoNombre);
    artesMarcialesBasicas_set.sort(SortPorAtributoNombre);

    for ( i = 0; i < artesMarcialesBasicas_set.length; i++) {
        allArtesMarciales[artesMarcialesBasicas_set[i].getNombre()] = artesMarcialesBasicas_set[i];
    }
    for ( i = 0; i < artesMarcialesAvanzadas_set.length; i++) {
        allArtesMarciales[artesMarcialesAvanzadas_set[i].getNombre()] = artesMarcialesAvanzadas_set[i];
    }

    DISPATCHER.on(EVENT_CHARACTER_SECCION_COMBATE_GENERAL, comprobarNumeroArtesMarciales);
}

function comprobarNumeroArtesMarciales() {
    if (personaje_actual.numArtesMarciales() > personaje_actual.maxArtesMarciales()) {
        var artesMarciales = personaje_actual.getArtesMarciales();
        var indice = artesMarciales.length-1;
        var arteMarcial = artesMarciales[indice];
        var nombre = arteMarcial.getNombre();

        anularArteMarcial({data:{arteMarcial:arteMarcial,esPrimera:(indice==0)}});
        alert ("Arte marcial " + nombre + " eliminada por no tener suficietne ataque/defensa.");
    }
}

/**
 *
 * @param {boolean} activar
 */
function vigilaRequisitosArtesMarciales(activar) {
    if (activar) {
            DISPATCHER.on(EVENT_CHARACTER_SECCION_COMBATE_GENERAL, compruebaRequisitosArtesMarcialesCompradas);
            DISPATCHER.on(EVENT_CHARACTER_SECCION_KI, compruebaRequisitosArtesMarcialesCompradas);
            DISPATCHER.on(EVENT_CHARACTER_SECCION_SECUNDARIAS, compruebaRequisitosArtesMarcialesCompradas);
    } else {
            DISPATCHER.off(EVENT_CHARACTER_SECCION_COMBATE_GENERAL, compruebaRequisitosArtesMarcialesCompradas);
            DISPATCHER.off(EVENT_CHARACTER_SECCION_KI, compruebaRequisitosArtesMarcialesCompradas);
            DISPATCHER.off(EVENT_CHARACTER_SECCION_SECUNDARIAS, compruebaRequisitosArtesMarcialesCompradas);
    }
}

function compruebaRequisitosArtesMarcialesCompradas(event) {
    var artesMarciales = personaje_actual.getArtesMarciales();
    for (var i = 0; i < artesMarciales.length; i++) {
        var arteMarcial = artesMarciales[i];
        if (!arteMarcial.cumpleRequisitos(personaje_actual)) {
            anularArteMarcial({data:{arteMarcial:arteMarcial,esPrimera:(personaje_actual.getArtesMarciales().length == 1)}});
            alert("Arte marcial " + arteMarcial.getNombre() + " eliminada por no cumplirse ya sus requisitos");
        }
    }
}
var A_M_AIKIDO = "Aikido";
var A_M_SHOTOKAN = "Shotokan";
var A_M_GRAPPLING = "Grappling";
var A_M_CAPOEIRA = "Capoeira";
var A_M_KUNG_FU = "Kung Fu";
var A_M_KEMPO = "Kempo";
var A_M_MOAI_THAI  = "Moai Thai";
var A_M_SAMBO = "Sambo";
var A_M_TAE_KWON_DO = "Tae Kwon Do";
var A_M_TAI_CHI = "Tai Chi";

artesMarcialesBasicas_set.push(new ArteMarcial(
    A_M_AIKIDO,
    "Aikido",
    "El daño del Aikido es de 10 más el bono de Fuerza de su usuario, pero al realizar un contraataque, añade el doble " +
        "del bono de Fuerza de su contrincante (con un bono mínimo de +5). Ataca en Contundentes y permite sujetar a sus " +
        "adversarios fácilmente, por lo que no aplica penalizadores al realizar una maniobra de Presa durante un contraataque.",
    [
        new Requisito(REQUISITO_HABILIDAD, HB_TRUCOS_MANOS, 40)
    ],
    10,      //CM
    [
        new Bono(BONO_HABILIDAD,HB_ESQUIVA,10,"",false,BONO_INNATO,A_M_AIKIDO),
        new Bono(BONO_HABILIDAD,HB_PARADA,10,ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_AIKIDO)
    ],
    [10,BONO_FUE],
    [ATAQUE_CON3]
));
artesMarcialesBasicas_set.push(new ArteMarcial(
    A_M_SHOTOKAN,
    "Shotokan",
    "Tiene un daño base de 30 más el bono de Fuerza de su usuario. Ataca en Contundentes.",
    [],
    10,
    [new Bono(BONO_HABILIDAD, HB_ATAQUE,10, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_SHOTOKAN)],
    [30,BONO_FUE],
    [ATAQUE_CON3]
));
artesMarcialesBasicas_set.push(new ArteMarcial(
    A_M_GRAPPLING,
    "Grappling",
    "El Grappling permite ejecutar las maniobras de combate Presa y Derribo sin ningún tipo de penalizador. Da una base de daño de 20 más el bono de Fuerza, y ataca en Contundentes.",
    [new Requisito(REQUISITO_HABILIDAD, HB_PROEZAS_FUERZA, 40)],
    10,      //CM
    [],
    [20,BONO_FUE],
    [ATAQUE_CON3]
));
artesMarcialesBasicas_set.push(new ArteMarcial(
    A_M_CAPOEIRA,
    "Capoeira",
    "Los movimientos de Capoeira son tan desbocados que, cuando el personaje realice una maniobra de Ataque en área, se " +
        "considerará que está utilizando un arma grande y podrá afectar a cinco adversarios. Causa un daño de 20 más el bono de Fuerza, y ataca en Contundentes.",
    [new Requisito(REQUISITO_HABILIDAD, HB_BAILE, 40)],
    10,      //CM
    [new Bono(BONO_HABILIDAD,HB_ESQUIVA,10,"",false,BONO_INNATO,A_M_CAPOEIRA)],
    [20,BONO_FUE],
    [ATAQUE_CON3]
));
artesMarcialesBasicas_set.push(new ArteMarcial(
    A_M_KUNG_FU,
    "Kung Fu",
    "Un maestro de Kung Fu puede elegir aplicar un bono de +10 entre sus habilidades de ataque, parada, esquiva, daño o " +
        "turno, según le convenga cada asalto. Debe decidir dónde empleará el bono antes de que se inicie el cálculo de " +
        "la iniciativa. En el caso de que lo utilice para mejorar la habilidad de ataque, parada o esquiva, no se " +
        "considera como un bono innato por categoría, por lo que puede aumentarlas por encima de +50. " +
        "El Kung Fu da una base de daño de 20 más el bono de Fuerza, y ataca en Contundentes.",
    [new Requisito(REQUISITO_HABILIDAD, HB_ACROBACIAS, 40),new Requisito(REQUISITO_HABILIDAD, HB_TRUCOS_MANOS, 40),new Requisito(REQUISITO_HABILIDAD, HB_ESTILO, 20)],
    10,      //CM
    [],
    [20,BONO_FUE],
    [ATAQUE_CON3]
));
artesMarcialesBasicas_set.push(new ArteMarcial(
    A_M_KEMPO,
    "Kempo",
    "Los rápidos encadenamientos de golpes permiten al maestro de Kempo realizar los ataques adicionales con un penalizador " +
        "de –10 a su habilidad, en lugar del –25 habitual. Da una base de daño 20 más el bono de Fuerza, y ataca en Contundentes.",
    [],
    10,      //CM
    [],
    [20,BONO_FUE],
    [ATAQUE_CON3]
));
artesMarcialesBasicas_set.push(new ArteMarcial(
    A_M_MOAI_THAI,
    "Moai Thai",
    "Tiene un daño base de 20 más el triple del bono de Fuerza de su usuario. Ataca en Contundentes.",
    [new Requisito(REQUISITO_HABILIDAD, HB_PROEZAS_FUERZA, 40)],
    10,      //CM
    [],
    [20,BONO_FUE,BONO_FUE,BONO_FUE],
    [ATAQUE_CON3]
));
artesMarcialesBasicas_set.push(new ArteMarcial(
    A_M_SAMBO,
    "Sambo",
    "Los practicantes de Sambo pueden reducir a la mitad los penalizadores de las siguientes maniobras de combate: Presa, " +
        "Ataque en área, Derribo y Desarmar. Otorga una base de daño de 20 más el bono de Fuerza del personaje (redondeando en grupos de 10 hacía arriba), y ataca en Contundentes.",
    [],
    10,      //CM
    [new Bono(BONO_HABILIDAD,HB_PARADA,10,ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_SAMBO)],
    [20,BONO_FUE_RED],
    [ATAQUE_CON3]
));
artesMarcialesBasicas_set.push(new ArteMarcial(
    A_M_TAE_KWON_DO,
    "Tae Kwon Do",
    "Otorga una base de daño de 20 más el bono de Fuerza (redondeando en grupos de 10 hacía arriba). " +
        "Permite realizar un ataque adicional con las piernas una vez que el personaje haya agotado todos sus otros ataques. " +
        "Este ataque sufre tan sólo un penalizador de –20 a su habilidad, actuando de igual manera que lo hacen las armas " +
        "adicionales. Puede realizarse incluso tras haber utilizado algún arma. Ataca en Contundentes.",
    [],
    10,      //CM
    [],
    [20,BONO_FUE_RED],
    [ATAQUE_CON3]
));
artesMarcialesBasicas_set.push(new ArteMarcial(
    A_M_TAI_CHI,
    "Tai Chi",
    "El Tai Chi otorga una base de daño de 20 más el doble del bono de Poder (redondeando en grupos de 10 hacía arriba), " +
        "en representación del uso de la energía interna. Puesto que el Ki sólo lo utiliza como potenciador, ataca en Contundentes y no en energía.",
    [new Requisito(REQUISITO_HABILIDAD_KI,HAB_KI_USO_DEL_KI,0)],
    30,      //CM
    [],
    [20,BONO_POD_RED,BONO_POD_RED],
    [ATAQUE_CON3]
));




var A_M_SELENE = "Selene";
var A_M_MELKAIAH = "Melkaiah";
var A_M_DUMAH = "Dumah";
var A_M_EMP = "Emp";
var A_M_SHEPHON = "Shephon";
var A_M_SERAPHITE = "Seraphite";
var A_M_ASAKUSEN = "Asakusen";
var A_M_VELEZ = "Velez";
var A_M_ENUTH = "Enuth";
var A_M_HAKYOUKUKEN = "Hakyoukuken";

artesMarcialesAvanzadas_set.push(new ArteMarcial(
    A_M_SELENE,
    "Selene",
    "Dobla el bono del contraataque si utiliza su Acción Respuesta para atacar a su contrincante usando este arte marcial.",
    [
        new Requisito(REQUISITO_ARTE_MARCIAL, A_M_AIKIDO,0),
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_HABILIDAD,HB_ESQUIVA,200),
            new Requisito(REQUISITO_HABILIDAD, HB_PARADA,200)
            ],0)
    ],
    10,
    [
        new Bono(BONO_HABILIDAD,HB_ESQUIVA,20,"",false,BONO_INNATO,A_M_SELENE),
        new Bono(BONO_HABILIDAD,HB_PARADA,20,ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_SELENE)
    ],
    [],
    []
));
artesMarcialesAvanzadas_set.push(new ArteMarcial(
    A_M_MELKAIAH,
    "Melkaiah",
    "Bonificador de +3 a los controles de Fuerza o Destreza al ejecutar maniobras de Derribo y Presa.",
    [
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_GRAPPLING,0),
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_SAMBO,0)
        ],0),
        new Requisito(REQUISITO_HABILIDAD_KI,HAB_KI_INHUMANIDAD,0),
        new Requisito(REQUISITO_HABILIDAD,HB_ATAQUE,160),
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_HABILIDAD,HB_ESQUIVA,160),
            new Requisito(REQUISITO_HABILIDAD,HB_PARADA,160)
        ],0)
    ],
    10,
    [
        new Bono(BONO_HABILIDAD,HB_ATAQUE,10,ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_MELKAIAH)
    ],
    [],
    []
));
artesMarcialesAvanzadas_set.push(new ArteMarcial(
    A_M_DUMAH,
    "Dumah",
    "UBono de +10 al daño final del estilo empleado, y puede optar entre Filo o Penetrantes a la hora de atacar a su oponente. " +
        "La magnitud de sus cortes es tal que reduce dos puntos la TA de cualquier armadura defensora. Del mismo modo, también añade un +10 a la rotura de sus ataques.",
    [
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_KEMPO,0),
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_CAPOEIRA,0)
        ],0),
        new Requisito(REQUISITO_HABILIDAD_KI,HAB_KI_EXTRUSION_DE_PRESENCIA,0)
    ],
    10,
    [
        new Bono(BONO_HABILIDAD,HB_ATAQUE,20, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_DUMAH),
        new Bono(BONO_DAÑO,"",10, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_DUMAH),
        new Bono(BONO_ROTURA,"",10, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_DUMAH)
    ],
    [ROTURA_PLUS_10,TA_ENEMIGA_MENOS_2],
    [ATAQUE_PEN3,ATAQUE_FIL3]
));
artesMarcialesAvanzadas_set.push(new ArteMarcial(
    A_M_EMP,
    "Emp",
    "Permite a sus usuarios realizar la maniobra Desarmar sin aplicar ningún penalizador a su habilidad, añadiendo un bonificador de +3 al valor de su característica en los controles enfrentados.",
    [
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_KEMPO,0),
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_TAE_KWON_DO,0)
        ],0),
        new Requisito(REQUISITO_HABILIDAD,HB_ATAQUE,200)
    ],
    10,
    [
        new Bono(BONO_HABILIDAD,HB_ATAQUE,20, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_EMP),
        new Bono(BONO_TURNO,"",10, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_EMP)
    ],
    [],
    []
));
artesMarcialesAvanzadas_set.push(new ArteMarcial(
    A_M_SHEPHON,
    "Shephon",
    "Cuando el personaje declare entrar en modalidad de Defensa total, aumenta el bonificador de dicha maniobra hasta +60.",
    [
        new Requisito(REQUISITO_ARTE_MARCIAL,A_M_AIKIDO,0),
        new Requisito(REQUISITO_ARTE_MARCIAL,A_M_KUNG_FU,0),
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_HABILIDAD,HB_ESQUIVA,200),
            new Requisito(REQUISITO_HABILIDAD,HB_PARADA,200)
        ],0),
        new Requisito(REQUISITO_HABILIDAD_KI,HAB_KI_CONTROL_DEL_KI,0)
    ],
    10,
    [
        new Bono(BONO_HABILIDAD,HB_ESQUIVA,20,"",false,BONO_INNATO,A_M_SHEPHON),
        new Bono(BONO_HABILIDAD,HB_PARADA,20,ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_SHEPHON)
    ],
    [],
    []
));
artesMarcialesAvanzadas_set.push(new ArteMarcial(
    A_M_SERAPHITE,
    "Seraphite",
    "Bono de +10 al daño final del estilo básico empleado. " +
        "Si lo desea, puede además aumentar temporalmente su habilidad de ataque en +20, a cambio de sufrir un penalizador de -30 a su defensa. " +
        "Esta última capacidad debe declararse antes de calcular la iniciativa.",
    [
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_SHOTOKAN,0),
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_KEMPO,0)
        ],0),
        new Requisito(REQUISITO_HABILIDAD_KI,HAB_KI_EXTRUSION_DE_PRESENCIA,0),
        new Requisito(REQUISITO_HABILIDAD,HB_ATAQUE,180)
    ],
    10,
    [
        new Bono(BONO_HABILIDAD,HB_ATAQUE,20, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_SERAPHITE),
        new Bono(BONO_DAÑO,"",10, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_SERAPHITE)
    ],
    [],
    []
));
artesMarcialesAvanzadas_set.push(new ArteMarcial(
    A_M_ASAKUSEN,
    "Asakusen",
    "El Asakusen hace que el bono variable de +10 del Kung Fu se aplique a la vez en todos los campos, es decir, un +10 " +
        "a la habilidad de esquiva, ataque, parada, turno y daño cuando se utilicen artes marciales. Aun así, " +
        "el personaje puede seguir añadiendo un +10 especial a una de ellas, del modo que se explica en el Kung Fu.",
    [
        new Requisito(REQUISITO_ARTE_MARCIAL,A_M_KUNG_FU,0),
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_HABILIDAD,HB_ESQUIVA,160),
            new Requisito(REQUISITO_HABILIDAD,HB_PARADA,160)
        ],0),
        new Requisito(REQUISITO_HABILIDAD,HB_ATAQUE,160)
    ],
    10,
    [
        new Bono(BONO_HABILIDAD,HB_ATAQUE,10, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_ASAKUSEN),
        new Bono(BONO_HABILIDAD,HB_ESQUIVA,10,"",false,BONO_INNATO,A_M_ASAKUSEN),
        new Bono(BONO_HABILIDAD,HB_PARADA,10, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_ASAKUSEN),
        new Bono(BONO_TURNO,"",10, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_ASAKUSEN),
        new Bono(BONO_DAÑO,"",10, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_ASAKUSEN)
    ],
    [],
    []
));
artesMarcialesAvanzadas_set.push(new ArteMarcial(
    A_M_VELEZ,
    "Velez",
    "Permite a los personajes golpear en la TA de Energía. " +
        "Los ataques realizados con este arte marcial pueden seguir parándose con normalidad, dado que no son intangibles.",
    [
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_TAI_CHI,0),
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_KUNG_FU,0)
        ],0),
        new Requisito(REQUISITO_HABILIDAD_KI,HAB_KI_EXTRUSION_DE_PRESENCIA,0)
    ],
    20,
    [
        new Bono(BONO_HABILIDAD,HB_ESQUIVA,20,"",false,BONO_INNATO,A_M_VELEZ),
        new Bono(BONO_HABILIDAD,HB_PARADA,20,ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_VELEZ)
    ],
    [],
    [ATAQUE_ENE3]
));
artesMarcialesAvanzadas_set.push(new ArteMarcial(
    A_M_ENUTH,
    "Enuth",
    "Permite aplicar un bonificador de +20 a las tiradas para calcular el Nivel de Crítico, " +
        "cuando el personaje ejecute un golpe con el objetivo de dejar inconsciente. Puede, además, reducir libremente " +
        "el daño producido hasta la cantidad que el atacante decida, incluso después de que ambos luchadores hayan lanzado los dados.",
    [
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_SAMBO,0),
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_SHOTOKAN,0)
        ],0),
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_HABILIDAD,HB_ESQUIVA,160),
            new Requisito(REQUISITO_HABILIDAD,HB_PARADA,160)
        ],0),
        new Requisito(REQUISITO_HABILIDAD,HB_ATAQUE,160)
    ],
    10,
    [
        new Bono(BONO_HABILIDAD,HB_ESQUIVA,20,"",false,BONO_INNATO,A_M_ENUTH),
        new Bono(BONO_HABILIDAD,HB_PARADA,20,ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_ENUTH)
    ],
    [],
    []
));
artesMarcialesAvanzadas_set.push(new ArteMarcial(
    A_M_HAKYOUKUKEN,
    "Hakyoukuken",
    "Bono de +20 al daño final del arte marcial empleado. " +
        "La mayor parte de armaduras no ofrecen protección contra sus ataques, por lo que restan –2 a su TA si son blandas. " +
        "Al destrozar internamente a sus enemigos, se añade un +20 a las tiradas para calcular el nivel del crítico de un ataque " +
        "con este arte marcial. Esta última habilidad sólo sirve contra seres orgánicos.",
    [
        new Requisito(REQUISITO_UNO_DE_LOS_SIGUIENTES,[
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_MOAI_THAI,0),
            new Requisito(REQUISITO_ARTE_MARCIAL,A_M_SHOTOKAN,0)
        ],0),
        new Requisito(REQUISITO_HABILIDAD_KI,HAB_KI_USO_ENERGIA_NECESARIA,0),
        new Requisito(REQUISITO_HABILIDAD,HB_ATAQUE,200)
    ],
    10,
    [
        new Bono(BONO_TURNO,"",20,"",false,BONO_INNATO,A_M_HAKYOUKUKEN),
        new Bono(BONO_DAÑO,"",20, ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_HAKYOUKUKEN),
        new Bono(BONO_HABILIDAD,HB_ATAQUE,10,ARMA_SIN_ARMAS,false,BONO_INNATO,A_M_HAKYOUKUKEN)
    ],
    [],
    []
));


var BERYL = "Beryl";
var SHAJAD = "Shajad";

/**
 *
 * @class Elan
 * @param {string} nombre
 * @param {number} sincronizacion
 * @constructor
 */
function Elan(nombre, sincronizacion) {
    /** @type string */
    this.nombre = nombre;

    /** @type number */
    this.sincronizacion = sincronizacion;

    /** @type number */
    this.sincGastada = 0;

    /** @type DonElan[] */
    this.dones = [];
}

Elan.prototype = {

    constructor : Elan,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {number}
     */
    getSincronizacion : function() {
        return this.sincronizacion;
    },

    /**
     *
     * @param {number} valor
     */
    addSincronizacion : function(valor) {
        this.sincronizacion += valor;
    },

    /**
     *
     * @returns {number}
     */
    getSinGastada : function() {
        return this.sincGastada;
    },

    /**
     *
     * @param {number} value
     */
    setSincGastada : function(value) {
        this.sincGastada = value;
    },

    /**
     *
     * @param {number} valor
     */
    gastaSincronizacion : function(valor) {
        this.sincGastada += valor;
    },

    /**
     *
     * @returns {number}
     */
    sincLibre : function() {
        return this.sincronizacion-this.sincGastada;
    },

    /**
     *
     * @param {DonElan} don
     */
    addDon : function(don) {
        this.dones.push(don);
    },

    /**
     *
     * @param {string} nombreDon
     * @returns {boolean}
     */
    hasDon : function(nombreDon) {
        for (var i = 0; i < this.dones.length; i++) {
            if (this.dones[i].getNombre() == nombreDon) {
                return true;
            }
        }
        return false;
    },

    /**
     *
     * @returns {DonElan[]}
     */
    getDones : function() {
        return this.dones;
    }
};

/**
 *
 * @class BerylShajad
 * @param {string} nombre
 * @param {string} tipo
 * @constructor
 */
function BerylShajad(nombre, tipo) {
    /** @type string */
    this.nombre = nombre;

    /** @type string */
    this.tipo = tipo;

    /** @type DonElan[] */
    this.dones = [];
}

BerylShajad.prototype = {

    constructor : BerylShajad,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getTipo : function() {
        return this.tipo;
    },

    /**
     *
     * @returns {DonElan[]}
     */
    getDones : function() {
        return this.dones;
    },

    /**
     *
     * @param {DonElan} don
     */
    addDon : function(don) {
        this.dones.push(don);
    },

    /**
     *
     * @param {string} nombreDon
     * @returns {boolean}
     */
    hasDon : function(nombreDon) {
        for (var i = 0; i < this.dones.length; i++) {
            if (this.dones[i].getNombre() == nombreDon) {
                return true;
            }
        }
        return false;
    },

    toJSON : function() {
        return this.nombre;
    }
};

/**
 *
 * @class DonElan
 * @param {string} nombre
 * @param {string} descripcion
 * @param {number} coste
 * @param {number} elanMinimo
 * @param {string[]} ventajasConcedidas
 * @param {string[]} donesRequisito
 * @constructor
 */
function DonElan(nombre, descripcion, coste, elanMinimo, ventajasConcedidas, donesRequisito) {
    /** @type string */
    this.nombre = nombre;

    /** @type string */
    this.descripcion = descripcion;

    /** @type number */
    this.coste = coste;

    /** @type number */
    this.elanMinimo = elanMinimo;

    /** @type string[] */
    this.ventajasConcedidas = ventajasConcedidas;

    /** @type string[] */
    this.donesRequisito = donesRequisito;
}

DonElan.prototype = {

    constructor : DonElan,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {number}
     */
    getCoste : function() {
        return this.coste;
    },

    /**
     *
     * @returns {number}
     */
    getElanMinimo : function() {
        return this.elanMinimo;
    },

    /**
     *
     * @returns {string[]}
     */
    getVentajasConcedidas : function() {
        return this.ventajasConcedidas;
    },

    /**
     *
     * @returns {string[]}
     */
    getDonesRequisito : function() {
        return this.donesRequisito
    },

    /**
     *
     * @returns {boolean}
     */
    puedeComprarse : function() {
        var nombreElan = "";
        for (var i = 0; i < berylShajad_set.length; i++) {
            for (var j = 0; j < berylShajad_set[i].dones.length; j++) {
                if (berylShajad_set[i].dones[j].nombre == this.nombre) {
                    nombreElan = berylShajad_set[i].nombre;
                    break;
                }
            }
        }

        var elanPersonaje;
        for (i = 0; i < personaje_actual.elan.length; i++) {
            if (personaje_actual.elan[i].nombre == nombreElan) {
                elanPersonaje =personaje_actual.elan[i];
                break;
            }
        }
        if (i == personaje_actual.elan.length) {
            return false;
        }

        if (elanPersonaje.hasDon(this.nombre)) {
            return false;
        }

        if (elanPersonaje.getSincronizacion() < this.elanMinimo) {
            return false;
        }

        if (elanPersonaje.sincLibre() < this.coste) {
            return false;
        }

        for (i = 0; i < this.donesRequisito.length; i++) {
            if (!elanPersonaje.hasDon(this.donesRequisito[i])) {
                return false;
            }
        }

        return true;
    },

    toJSON : function() {
        return this.nombre;
    }
};
/**
 *
 * @type {BerylShajad[]}
 */
var berylShajad_set =  [];

var ERR_ELAN_ERRONEO = "Error: Elan no conocido";

/**
 * Devuelve el BerylShajad indicado por el nombre
 * @param {string} nombre El nombre del BerylShajad que se busca
 * @returns {BerylShajad}
 * @throws ERR_ELAN_ERRONEO
 */
function getElan(nombre) {
    for (var i = 0; i < berylShajad_set.length; i++) {
        if (berylShajad_set[i].getNombre() == nombre) {
            return berylShajad_set[i];
        }
    }
    throw ERR_ELAN_ERRONEO + ": " + nombre;
}

/**
 * Aplica un don de un elan concreto al personaje actual
 * @param {DonElan} don El don de elan a otorgar al personaje actual
 * @param {string} nombreElan El nombre del BerylShajad que otorga el Don
 */
function aplicarDonElan(don,nombreElan) {
    personaje_actual.addDonElan(nombreElan, don);
}

/**
 *
 * @param {Ventaja} ventaja
 */
function prepararEleccionVentajaElan(ventaja) {

    switch (ventaja.getElegir()) {
        case ELEGIR_POD_VOL :
            var arrayOpciones = [
                new OpcionMostrable(POD,""),
                new OpcionMostrable(VOL,"")
            ];
            muestraDialogoElegirOpciones(arrayOpciones, {ventaja: ventaja}, {principal: influjoSobrenaturalElanElegido, isDisabled: alwaysEnabled}, true);
            break;
        case ELEGIR_REPARTO_5_INT_POD_VOL :
            break;
    }
}

function influjoSobrenaturalElanElegido(parametros) {
    this.addVentaja(parametros.ventaja,0,parametros.opcion,ORIGEN_ELAN,true,new RepartoCostes(),false);
}
var BERYL_AZRAEL = "Azrael";

var berylAzrael = new BerylShajad(BERYL_AZRAEL, BERYL);

var ELAN_AZRAEL_LIDER = "Líder";
ventajas_set.push(new Ventaja(
    ELAN_AZRAEL_LIDER,
    "",
    "Este don otorga un bonificador especial a Liderazgo equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [liderElan],
    GRUPO_ELAN
));
berylAzrael.addDon(
    new DonElan(
        "Líder",
        "Bono especial a Liderazgo equivalente a su nivel de Elan.",
        5,
        10,
        [ELAN_AZRAEL_LIDER],
        []
    )
);
var ELAN_AZRAEL_VALOR_HEROES = "El valor de los héroes";
ventajas_set.push(new Ventaja(
    ELAN_AZRAEL_VALOR_HEROES,
    "",
    "Bonificador especial a su habilidad secundaria Frialdad equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [valorHeroesElan],
    GRUPO_ELAN
));
berylAzrael.addDon(
    new DonElan(
        "El valor de los héroes",
        "Bono especial a su habilidad secundaria Frialdad equivalente a su nivel de Elan.",
        5,
        20,
        [ELAN_AZRAEL_VALOR_HEROES],
        []
    )
);
berylAzrael.addDon(
    new DonElan(
        "Exaltación del espíritu",
        "",
        10,
        30,
        [],
        []
    )
);
berylAzrael.addDon(
    new DonElan(
        "Sentido de la justicia",
        "",
        10,
        40,
        [],
        []
    )
);
berylAzrael.addDon(
    new DonElan(
        "Espíritu sagrado",
        "",
        5,
        50,
        [],
        []
    )
);
berylAzrael.addDon(
    new DonElan(
        "Aura de poder",
        "",
        10,
        60,
        [],
        ["Espíritu sagrado"]
    )
);
berylAzrael.addDon(
    new DonElan(
        "Inmunidad",
        "",
        15,
        60,
        [],
        []
    )
);
berylAzrael.addDon(
    new DonElan(
        "Destructor del mal",
        "",
        15,
        70,
        [],
        []
    )
);
berylAzrael.addDon(
    new DonElan(
        "Bendecido",
        "",
        20,
        70,
        [],
        []
    )
);
var ELAN_AZRAEL_GUERRERO_AZRAEL = "Guerrero de Azrael";
ventajas_set.push(new Ventaja(
    ELAN_AZRAEL_GUERRERO_AZRAEL,
    "",
    "Este don otorga un punto adicional en sus características de Fuerza y Destreza.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [guerreroAzraelElan],
    GRUPO_ELAN
));
berylAzrael.addDon(
    new DonElan(
        "Guerrero de Azrael",
        "Un punto adicional en sus características de Fuerza y Destreza.",
        10,
        80,
        [ELAN_AZRAEL_GUERRERO_AZRAEL],
        []
    )
);
berylAzrael.addDon(
    new DonElan(
        "Consagrar",
        "",
        15,
        90,
        [],
        ["Aura de poder"]
    )
);
berylAzrael.addDon(
    new DonElan(
        "Yihad",
        "",
        10,
        100,
        [],
        []
    )
);

berylShajad_set.push(berylAzrael);
var BERYL_BARAKIEL = "Barakiel";

var berylBarakiel = new BerylShajad(BERYL_BARAKIEL, BERYL);

var ELAN_BARAKIEL_ESTETICA = "Estética";
ventajas_set.push(new Ventaja(
    ELAN_BARAKIEL_ESTETICA,
    "",
    "Este don otorga un bonificador especial a Estilo equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [esteticaElan],
    GRUPO_ELAN
));
berylBarakiel.addDon(
    new DonElan(
        "Estética",
        "Bonificador especial a la habilidad secundaria Estilo, equivalente al nivel de Elan que posee.",
        5,
        10,
        [ELAN_BARAKIEL_ESTETICA],
        []
    )
);
berylBarakiel.addDon(
    new DonElan(
        "Atrayente",
        "",
        10,
        20,
        [],
        []
    )
);
var ELAN_BARAKIEL_SABER_CIENCIA = "Saber de la ciencia";
ventajas_set.push(new Ventaja(
    ELAN_BARAKIEL_SABER_CIENCIA,
    "",
    "Este don otorga un bonificador especial a Ciencia equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [saberCienciaElan],
    GRUPO_ELAN
));
berylBarakiel.addDon(
    new DonElan(
        "Saber de la ciencia",
        "Bonificador especial a la habilidad secundaria Ciencia equivalente al nivel de Elan.",
        10,
        30,
        [ELAN_BARAKIEL_SABER_CIENCIA],
        []
    )
);
berylBarakiel.addDon(
    new DonElan(
        "Percibir imperfecciones",
        "",
        10,
        40,
        [],
        []
    )
);
berylBarakiel.addDon(
    new DonElan(
        "Sentir el orden",
        "",
        5,
        40,
        [],
        []
    )
);
berylBarakiel.addDon(
    new DonElan(
        "Cuerpo perfecto",
        "",
        15,
        50,
        [],
        ["Belleza perfecta"]
    )
);
var ELAN_BARAKIEL_BELLEZA_PERFECTA = "Belleza perfecta";
ventajas_set.push(new Ventaja(
    ELAN_BARAKIEL_BELLEZA_PERFECTA,
    "",
    "Este don sube la Apariencia a 10.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [bellezaPerfectaElan],
    GRUPO_ELAN
));
berylBarakiel.addDon(
    new DonElan(
        "Belleza perfecta",
        "Su Apariencia llega a 10.",
        5,
        50,
        [ELAN_BARAKIEL_BELLEZA_PERFECTA],
        []
    )
);
berylBarakiel.addDon(
    new DonElan(
        "Aura de orden",
        "",
        10,
        60,
        [],
        []
    )
);
var ELAN_BARAKIEL_ESENCIA_BARAKIEL = "La esencia de Barakiel";
ventajas_set.push(new Ventaja(
    ELAN_BARAKIEL_ESENCIA_BARAKIEL,
    "",
    "Este don permite ignorar desventajas y debilidades.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [esenciaBarakielElan],
    GRUPO_ELAN
));
berylBarakiel.addDon(
    new DonElan(
        "La esencia de Barakiel",
        "Este don permite ignorar desventajas y debilidades.",
        20,
        70,
        [ELAN_BARAKIEL_ESENCIA_BARAKIEL],
        []
    )
);
berylBarakiel.addDon(
    new DonElan(
        "Incapaz de errar",
        "",
        10,
        70,
        [],
        []
    )
);
var ELAN_BARAKIEL_DIVINIDAD_CUERPO_ALMA = "Divinidad en cuerpo y alma";
ventajas_set.push(new Ventaja(
    ELAN_BARAKIEL_DIVINIDAD_CUERPO_ALMA,
    "",
    "Sube características hasta 10 + bono por raza.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [divinidadCuerpoAlmaElan],
    GRUPO_ELAN
));
berylBarakiel.addDon(
    new DonElan(
        "Divinidad en cuerpo y alma",
        "Sube características hasta 10 + bono por raza.", //TODO el bono por raza llega de otro modo
        20,
        80,
        [ELAN_BARAKIEL_DIVINIDAD_CUERPO_ALMA],
        ["Cuerpo perfecto"]
    )
);
berylBarakiel.addDon(
    new DonElan(
        "Inmortalidad",
        "",
        10,
        90,
        [],
        ["Cuerpo perfecto"]
    )
);
berylBarakiel.addDon(
    new DonElan(
        "Perfección absoluta",
        "",
        10,
        100,
        [],
        []
    )
);

berylShajad_set.push(berylBarakiel);
var BERYL_EDAMIEL = "Edamiel";


var berylEdamiel = new BerylShajad(BERYL_EDAMIEL, BERYL);

berylEdamiel.addDon(
    new DonElan(
        "Deseable",
        "",
        5,
        10,
        [],
        []
    )
);
berylEdamiel.addDon(
    new DonElan(
        "Amplificador del placer",
        "",
        5,
        20,
        [],
        []
    )
);
berylEdamiel.addDon(
    new DonElan(
        "La voz del placer",
        "",
        5,
        30,
        [],
        []
    )
);
berylEdamiel.addDon(
    new DonElan(
        "Sentir el deseo",
        "",
        10,
        40,
        [],
        []
    )
);
berylEdamiel.addDon(
    new DonElan(
        "Inmunidad psicológica (Edamiel)",
        "",
        10,
        50,
        [],
        []
    )
);
berylEdamiel.addDon(
    new DonElan(
        "Arrancar los sentimientos",
        "",
        10,
        60,
        [],
        []
    )
);
berylEdamiel.addDon(
    new DonElan(
        "Pasividad",
        "",
        15,
        60,
        [],
        []
    )
);
berylEdamiel.addDon(
    new DonElan(
        "Anulación",
        "",
        15,
        70,
        [],
        ["Arrancar los sentimientos"]
    )
);
berylEdamiel.addDon(
    new DonElan(
        "Transición hacia el vacío",
        "",
        15,
        80,
        [],
        []
    )
);
berylEdamiel.addDon(
    new DonElan(
        "Vórtice",
        "",
        25,
        90,
        [],
        []
    )
);
berylEdamiel.addDon(
    new DonElan(
        "El paso de la nada",
        "",
        10,
        100,
        [],
        []
    )
);

berylShajad_set.push(berylEdamiel);
var BERYL_GABRIEL = "Gabriel";

var berylGabriel = new BerylShajad(BERYL_GABRIEL, BERYL);

var ELAN_GABRIEL_APTITUD_ARTISTICA = "Guerrero de Azrael";
ventajas_set.push(new Ventaja(
    ELAN_GABRIEL_APTITUD_ARTISTICA,
    "",
    "Este don otorga un bonificador especial a sus habilidades secundarias Arte y Música equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [aptitudArtisticaGabriel],
    GRUPO_ELAN
));
berylGabriel.addDon(
    new DonElan(
        "Aptitud artística",
        "Este don otorga un bonificador especial a sus habilidades secundarias Arte y Música equivalente a su nivel de Elan.",
        5,
        10,
        [ELAN_GABRIEL_APTITUD_ARTISTICA],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Gracia",
        "",
        5,
        20,
        [],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Empatía positiva",
        "",
        10,
        30,
        [],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Pacificador",
        "",
        10,
        40,
        [],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Inmunidad psicológica (Gabriel)",
        "",
        10,
        40,
        [],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Percepción de sentimientos",
        "",
        10,
        50,
        [],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Imbuir sentimientos",
        "",
        15,
        50,
        [],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Lazo",
        "",
        15,
        60,
        [],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Auxilio",
        "",
        10,
        70,
        [],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Canto de La Paz",
        "",
        15,
        80,
        [],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Protección",
        "",
        20,
        90,
        [],
        []
    )
);
berylGabriel.addDon(
    new DonElan(
        "Paraíso",
        "",
        10,
        100,
        [],
        []
    )
);

berylShajad_set.push(berylGabriel);
var BERYL_RAFAEL = "Rafael";

var berylRafael = new BerylShajad(BERYL_RAFAEL, BERYL);

var ELAN_RAFAEL_CONOCIMIENTO_NATURALEZA = "Conocimiento de la naturaleza";
ventajas_set.push(new Ventaja(
    ELAN_RAFAEL_CONOCIMIENTO_NATURALEZA,
    "",
    "Este don otorga un bonificador especial a Herbolaria equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [conocimientoNaturalezaElan],
    GRUPO_ELAN
));
berylRafael.addDon(
    new DonElan(
        "Conocimiento de la naturaleza",
        "Este don otorga un bonificador especial a Herbolaria equivalente a su nivel de Elan.",
        5,
        10,
        [ELAN_RAFAEL_CONOCIMIENTO_NATURALEZA],
        []
    )
);
var ELAN_RAFAEL_CONOCIMIENTO_ANIMAL = "Conocimiento animal";
ventajas_set.push(new Ventaja(
    ELAN_RAFAEL_CONOCIMIENTO_ANIMAL,
    "",
    "Este don otorga un bonificador especial a Animales equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [conocimientoAnimalElan],
    GRUPO_ELAN
));
berylRafael.addDon(
    new DonElan(
        "Conocimiento animal",
        "Este don otorga un bonificador especial a Animales equivalente a su nivel de Elan.",
        5,
        20,
        [ELAN_RAFAEL_CONOCIMIENTO_ANIMAL],
        []
    )
);
berylRafael.addDon(
    new DonElan(
        "Curación",
        "",
        10,
        20,
        [],
        []
    )
);
berylRafael.addDon(
    new DonElan(
        "Manto de fertilidad",
        "",
        5,
        30,
        [],
        []
    )
);
berylRafael.addDon(
    new DonElan(
        "Eliminar venenos naturales",
        "",
        10,
        40,
        [],
        []
    )
);
berylRafael.addDon(
    new DonElan(
        "Tótem",
        "",
        20,
        50,
        [],
        []
    )
);
berylRafael.addDon(
    new DonElan(
        "Curación expandida",
        "",
        15,
        50,
        [],
        ["Curación"]
    )
);
berylRafael.addDon(
    new DonElan(
        "Los ojos de la naturaleza",
        "",
        10,
        60,
        [],
        []
    )
);
berylRafael.addDon(
    new DonElan(
        "Invocar animales",
        "",
        10,
        60,
        [],
        []//TODO especificar animales a elegir
    )
);
berylRafael.addDon(
    new DonElan(
        "Transformación animal",
        "",
        10,
        70,
        [],
        []//TODO especificar animales a elegir
    )
);
berylRafael.addDon(
    new DonElan(
        "Invocación incrementada",
        "",
        10,
        80,
        [],
        ["Invocar animales"] //TODO especificar especie u opción
    )
);
berylRafael.addDon(
    new DonElan(
        "Curación ilimitada",
        "",
        20,
        90,
        [],
        ["Curación expandida"]
    )
);
berylRafael.addDon(
    new DonElan(
        "Conciencia de la naturaleza",
        "",
        10,
        100,
        [],
        []
    )
);

berylShajad_set.push(berylRafael);
var BERYL_MIKAEL = "Mikael";

var berylMikael = new BerylShajad(BERYL_MIKAEL, BERYL);

berylMikael.addDon(
    new DonElan(
        "Luz de esperanza",
        "",
        5,
        10,
        [],
        []
    )
);
berylMikael.addDon(
    new DonElan(
        "Extirpar enfermedades",
        "",
        10,
        20,
        [],
        []
    )
);
berylMikael.addDon(
    new DonElan(
        "Mantener en el mundo",
        "",
        5,
        30,
        [],
        []
    )
);
var ELAN_MIKAEL_RESISTENCIA_CELESTIAL = "Resistencia celestial";
ventajas_set.push(new Ventaja(
    ELAN_MIKAEL_RESISTENCIA_CELESTIAL,
    "",
    "Este don otorga un bonificador especial a todas las Resistencias del personaje, equivalente a la mitad de su Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [resistenciaCelestialElan],
    GRUPO_ELAN
));
berylMikael.addDon(
    new DonElan(
        "Resistencia celestial",
        "Este don otorga un bonificador especial a todas las Resistencias del personaje, equivalente a la mitad de su Elan.",
        20,
        40,
        [ELAN_MIKAEL_RESISTENCIA_CELESTIAL],
        []
    )
);
berylMikael.addDon(
    new DonElan(
        "Exorcizar el mal",
        "",
        15,
        50,
        [],
        []
    )
);
berylMikael.addDon(
    new DonElan(
        "Aura",
        "",
        10,
        50,
        [],
        ["Resistencia celestial"]
    )
);
berylMikael.addDon(
    new DonElan(
        "Milagro",
        "",
        10,
        60,
        [],
        []
    )
);
berylMikael.addDon(
    new DonElan(
        "Deshacer estados negativos",
        "",
        10,
        70,
        [],
        []
    )
);
berylMikael.addDon(
    new DonElan(
        "Salvador",
        "",
        10,
        70,
        [],
        []
    )
);
berylMikael.addDon(
    new DonElan(
        "Ayuda celestial",
        "",
        15,
        80,
        [],
        []
    )
);
berylMikael.addDon(
    new DonElan(
        "Levántate y anda",
        "",
        20,
        90,
        [],
        []
    )
);
berylMikael.addDon(
    new DonElan(
        "Y al tercer día resucitó",
        "",
        10,
        100,
        [],
        []
    )
);

berylShajad_set.push(berylMikael);
var BERYL_URIEL = "Uriel";

var berylUriel = new BerylShajad(BERYL_URIEL, BERYL);

berylUriel.addDon(
    new DonElan(
        "Instinto de libertad",
        "",
        5,
        10,
        [],
        []
    )
);
berylUriel.addDon(
    new DonElan(
        "Inadvertido",
        "",
        5,
        20,
        [],
        []
    )
);
berylUriel.addDon(
    new DonElan(
        "Espíritu indomable",
        "",
        10,
        20,
        [],
        []
    )
);
berylUriel.addDon(
    new DonElan(
        "Alma libre",
        "",
        5,
        30,
        [],
        []
    )
);
berylUriel.addDon(
    new DonElan(
        "Visionario",
        "",
        10,
        40,
        [],
        []
    )
);
berylUriel.addDon(
    new DonElan(
        "Medio de transporte",
        "",
        5,
        40,
        [],
        []
    )
);
berylUriel.addDon(
    new DonElan(
        "Romper las cadenas",
        "",
        10,
        50,
        [],
        []
    )
);
berylUriel.addDon(
    new DonElan(
        "Ojos del futuro",
        "",
        20,
        60,
        [],
        ["Visionario"]
    )
);
berylUriel.addDon(
    new DonElan(
        "Paso libre",
        "",
        15,
        60,
        [],
        []
    )
);
var ELAN_URIEL_COMUNION_URIEL = "Comunión con Uriel";
ventajas_set.push(new Ventaja(
    ELAN_URIEL_COMUNION_URIEL,
    "",
    "Este don otorga un punto adicional en sus características de Poder, Voluntad y Destreza.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [comunionUrielElan],
    GRUPO_ELAN
));
berylUriel.addDon(
    new DonElan(
        "Comunión con Uriel",
        "Este don otorga un punto adicional en sus características de Poder, Voluntad y Destreza.",
        10,
        70,
        [ELAN_URIEL_COMUNION_URIEL],
        []
    )
);
var ELAN_URIEL_ESENCIA_SOBRENATURAL = "Esencia sobrenatural";
ventajas_set.push(new Ventaja(
    ELAN_URIEL_ESENCIA_SOBRENATURAL,
    "",
    "Este don otorga Gnosis 30.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [esenciaSobrenaturalElan],
    GRUPO_ELAN
));
berylUriel.addDon(
    new DonElan(
        "Esencia sobrenatural",
        "Este don otorga Gnosis 30.",
        10,
        80,
        [ELAN_URIEL_ESENCIA_SOBRENATURAL],
        []
    )
);
berylUriel.addDon(
    new DonElan(
        "Una segunda oportunidad",
        "",
        20,
        90,
        [],
        []
    )
);
berylUriel.addDon(
    new DonElan(
        "El Viajero",
        "",
        10,
        100,
        [],
        []
    )
);

berylShajad_set.push(berylUriel);
var SHAJAD_ABBADON = "Abbadon";

var shajadAbbadon = new BerylShajad(SHAJAD_ABBADON, SHAJAD);

shajadAbbadon.addDon(
    new DonElan(
        "Empatía oscura",
        "",
        10,
        10,
        [],
        []
    )
);
shajadAbbadon.addDon(
    new DonElan(
        "Los ojos de la maldad",
        "",
        5,
        20,
        [],
        []
    )
);
shajadAbbadon.addDon(
    new DonElan(
        "Señor de los pecados",
        "",
        10,
        30,
        [],
        []
    )
);
shajadAbbadon.addDon(
    new DonElan(
        "Ser oscuro",
        "",
        5,
        40,
        [],
        []
    )
);
shajadAbbadon.addDon(
    new DonElan(
        "Corruptor de almas",
        "",
        15,
        50,
        [],
        []
    )
);
shajadAbbadon.addDon(
    new DonElan(
        "Encarnación demoníaca",
        "",
        10,
        60,
        [], //TODO poderes de monstruo
        ["Ser oscuro"]
    )
);
shajadAbbadon.addDon(
    new DonElan(
        "Destructor de lo sagrado",
        "",
        15,
        70,
        [],
        []
    )
);
shajadAbbadon.addDon(
    new DonElan(
        "Don de la malignidad",
        "",
        10,
        80,
        [],
        ["Ser oscuro"]
    )
);
shajadAbbadon.addDon(
    new DonElan(
        "Invocación demoníaca",
        "",
        15,
        80,
        [],
        []
    )
);
shajadAbbadon.addDon(
    new DonElan(
        "Devorador de almas",
        "",
        15,
        90,
        [],
        []
    )
);
shajadAbbadon.addDon(
    new DonElan(
        "La semilla del diablo",
        "",
        10,
        100,
        [],
        [] //TODO bautismo del mal: modo de convertirse en criatura entre mundos o espiritual
    )
);

berylShajad_set.push(shajadAbbadon);
var SHAJAD_EREBUS = "Erebus";

var shajadErebus = new BerylShajad(SHAJAD_EREBUS, SHAJAD);

var ELAN_EREBUS_CONOCIMIENTO_SOBRENATURAL = "Conocimiento sobrenatural";
ventajas_set.push(new Ventaja(
    ELAN_EREBUS_CONOCIMIENTO_SOBRENATURAL,
    "",
    "Este don otorga un bonificador especial a Ocultismo equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [conocimientoSobrenaturalElan],
    GRUPO_ELAN
));
shajadErebus.addDon(
    new DonElan(
        "Conocimiento sobrenatural",
        "Este don otorga un bonificador especial a Ocultismo equivalente a su nivel de Elan.",
        5,
        10,
        [ELAN_EREBUS_CONOCIMIENTO_SOBRENATURAL],
        []
    )
);
var ELAN_EREBUS_PRESENCIA_TENEBROSA = "Presencia tenebrosa";
ventajas_set.push(new Ventaja(
    ELAN_EREBUS_PRESENCIA_TENEBROSA,
    "",
    "Este don otorga un bonificador especial a Intimidar equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [presenciaTenebrosaElan],
    GRUPO_ELAN
));
shajadErebus.addDon(
    new DonElan(
        "Presencia tenebrosa",
        "Este don otorga un bonificador especial a Intimidar equivalente a su nivel de Elan.",
        5,
        20,
        [ELAN_EREBUS_PRESENCIA_TENEBROSA],
        []
    )
);
shajadErebus.addDon(
    new DonElan(
        "El camino de las pesadillas",
        "",
        5,
        30,
        [],
        []
    )
);
shajadErebus.addDon(
    new DonElan(
        "Susurros oníricos",
        "",
        10,
        40,
        [],
        []
    )
);
shajadErebus.addDon(
    new DonElan(
        "Místico nato",
        "",        15,
        50,
        [],
        []
    )
);
var ELAN_EREBUS_INFLUJO_SOBRENATURAL = "Influjo sobrenatural";
ventajas_set.push(new Ventaja(
    ELAN_EREBUS_INFLUJO_SOBRENATURAL,
    "",
    "Este don otorga dos puntos adicionales a su Voluntad o a su Poder, dependiendo de cuál sea la característica en la que basa principalmente sus habilidades.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [influjoSobrenaturalElan],
    GRUPO_ELAN
));
shajadErebus.addDon(
    new DonElan(
        "Influjo sobrenatural",
        "Este don otorga dos puntos adicionales a su Voluntad o a su Poder, dependiendo de cuál sea la característica en la que basa principalmente sus habilidades.",
        10,
        60,
        [ELAN_EREBUS_INFLUJO_SOBRENATURAL], //TODO elegir caracteristica
        []
    )
);
shajadErebus.addDon(
    new DonElan(
        "Caminante de los sueños",
        "",
        10,
        60,
        [],
        []
    )
);
shajadErebus.addDon(
    new DonElan(
        "Los miedos cardinales",
        "",
        20,
        70,
        [],
        []
    )
);
shajadErebus.addDon(
    new DonElan(
        "Potenciación sobrenatural",
        "",
        15,
        80,
        [],
        []
    )
);
shajadErebus.addDon(
    new DonElan(
        "Nux, el miedo absoluto",
        "",
        10,
        90,
        ["Los miedos cardinales"],
        []
    )
);
var ELAN_EREBUS_DEMIURGO = "Demiurgo";
ventajas_set.push(new Ventaja(
    ELAN_EREBUS_DEMIURGO,
    "",
    "Este don otorga cinco puntos de características que puede repartir como desee entre su Inteligencia, Poder y Voluntad, según le convenga a sus habilidades.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [ELEGIR_REPARTO_5_INT_POD_VOL],
    [demiurgoElan],
    GRUPO_ELAN
));
shajadErebus.addDon(
    new DonElan(
        "Demiurgo",
        "Este don otorga cinco puntos de características que puede repartir como desee entre su Inteligencia, Poder y Voluntad, según le convenga a sus habilidades.",
        10,
        100,
        [ELAN_EREBUS_DEMIURGO],
        []
    )
);

berylShajad_set.push(shajadErebus);
var SHAJAD_ERIOL = "Eriol";

var shajadEriol = new BerylShajad(SHAJAD_ERIOL, SHAJAD);

shajadEriol.addDon(
    new DonElan(
        "Otorgar fortuna y desgracia",
        "",
        10,
        10,
        [],
        []
    )
);
shajadEriol.addDon(
    new DonElan(
        "Alterar la Ley de la Casualidad",
        "",
        5,
        20,
        [],
        []
    )
);
shajadEriol.addDon(
    new DonElan(
        "Sentir el caos",
        "",
        5,
        30,
        [],
        []
    )
);
shajadEriol.addDon(
    new DonElan(
        "Robar la suerte",
        "",
        10,
        40,
        [],
        []
    )
);
shajadEriol.addDon(
    new DonElan(
        "Conjurar la providencia",
        "",
        10,
        50,
        [],
        []
    )
);
shajadEriol.addDon(
    new DonElan(
        "Estigma del caos",
        "",
        15,
        50,
        [],
        [] //TODO comprar poderes de monstruo
    )
);
shajadEriol.addDon(
    new DonElan(
        "Aura de caos",
        "",
        10,
        60,
        [],
        []
    )
);
shajadEriol.addDon(
    new DonElan(
        "Alterar el destino",
        "",
        15,
        70,
        [],
        ["Conjurar la providencia"]
    )
);
shajadEriol.addDon(
    new DonElan(
        "Forzar la suerte",
        "",
        15,
        80,
        [],
        []
    )
);
shajadEriol.addDon(
    new DonElan(
        "Truncar el sino",
        "",
        15,
        90,
        [],
        []
    )
);
shajadEriol.addDon(
    new DonElan(
        "Señor del Caos",
        "",
        10,
        100,
        [],
        ["Aura de caos"]
    )
);

berylShajad_set.push(shajadEriol);
var SHAJAD_MESEGUIS = "Meseguis";

var shajadMeseguis = new BerylShajad(SHAJAD_MESEGUIS, SHAJAD);

var ELAN_MESEGUIS_SERENIDAD_MELANCOLIA = "La serenidad de la melancolía";
ventajas_set.push(new Ventaja(
    ELAN_MESEGUIS_SERENIDAD_MELANCOLIA,
    "",
    "Este don otorga un bonificador especial a Frialdad y Resistir el dolor equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [serenidadMelancoliaElan],
    GRUPO_ELAN
));
shajadMeseguis.addDon(
    new DonElan(
        "La serenidad de la melancolía",
        "Este don otorga un bonificador especial a Frialdad y Resistir el dolor equivalente a su nivel de Elan.",
        5,
        10,
        [ELAN_MESEGUIS_SERENIDAD_MELANCOLIA],
        []
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "Camino de la venganza",
        "",
        5,
        20,
        [],
        []
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "Ojos de la pesadumbre",
        "",
        10,
        30,
        [],
        []
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "Lágrimas por los demás",
        "",
        5,
        30,
        [],
        []
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "Transmitir el dolor",
        "",
        10,
        40,
        [],
        []
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "Espíritu de la venganza",
        "",
        10,
        40,
        [],
        []
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "La voz de los muertos",
        "",
        10,
        50,
        [],
        []
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "Vengador oscuro",
        "",
        10,
        60,
        [],
        []
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "La voz del dolor",
        "",
        15,
        60,
        [],
        ["Transmitir el dolor"]
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "Más allá de la muerte",
        "",
        10,
        70,
        [],
        [] //TODO poderes de monstruo
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "Ejecutor oscuro",
        "",
        10,
        80,
        [],
        ["Vengador oscuro"]
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "Espejo oscuro",
        "",
        15,
        90,
        [],
        []
    )
);
shajadMeseguis.addDon(
    new DonElan(
        "Comunión con los caídos",
        "",
        10,
        100,
        [],
        ["La voz de los muertos"]
    )
);

berylShajad_set.push(shajadMeseguis);
var SHAJAD_JEDAH = "Jedah";

var shajadJedah = new BerylShajad(SHAJAD_JEDAH, SHAJAD);

var ELAN_JEDAH_DON_POLITICA = "Don de la política";
ventajas_set.push(new Ventaja(
    ELAN_JEDAH_DON_POLITICA,
    "",
    "Este don otorga un bonificador especial a sus habilidades secundarias Persuasión y Liderazgo equivalente a su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [donPoliticaElan],
    GRUPO_ELAN
));
shajadJedah.addDon(
    new DonElan(
        "Don de la política",
        "Este don otorga un bonificador especial a sus habilidades secundarias Persuasión y Liderazgo equivalente a su nivel de Elan.",
        5,
        10,
        [ELAN_JEDAH_DON_POLITICA],
        []
    )
);
shajadJedah.addDon(
    new DonElan(
        "Dominación incrementada",
        "",
        10,
        20,
        [],
        []
    )
);
shajadJedah.addDon(
    new DonElan(
        "Sombra",
        "",
        5,
        30,
        [],
        []
    )
);
shajadJedah.addDon(
    new DonElan(
        "Afinidad oscura",
        "",
        5,
        40,
        [],
        []
    )
);
var ELAN_JEDAH_PODER_CONOCIMIENTO = "El poder del conocimiento";
ventajas_set.push(new Ventaja(
    ELAN_JEDAH_PODER_CONOCIMIENTO,
    "",
    "Este don otorga un bonificador especial a todas las habilidades secundarias Intelectuales, equivalente a la mitad de su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [poderConocimientoElan],
    GRUPO_ELAN
));
shajadJedah.addDon(
    new DonElan(
        "El poder del conocimiento",
        "Este don otorga un bonificador especial a todas las habilidades secundarias Intelectuales, equivalente a la mitad de su nivel de Elan.",
        10,
        50,
        [ELAN_JEDAH_PODER_CONOCIMIENTO],
        []
    )
);
shajadJedah.addDon(
    new DonElan(
        "El Dominador (Habla)",
        "",
        10,
        50,
        [],
        []
    )
);
shajadJedah.addDon(
    new DonElan(
        "Cadena de mando",
        "",
        10,
        60,
        [],
        []
    )
);
shajadJedah.addDon(
    new DonElan(
        "Señor de las sombras",
        "",
        15,
        65,
        [],
        ["Afinidad oscura"]
    )
);
var ELAN_JEDAH_PODER_OSCURO = "Comunión con Uriel";
ventajas_set.push(new Ventaja(
    ELAN_JEDAH_PODER_OSCURO,
    "",
    "Este don otorga un punto adicional en sus características de Poder, Voluntad e Inteligencia.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [poderOscuroElan],
    GRUPO_ELAN
));
shajadJedah.addDon(
    new DonElan(
        "Poder oscuro",
        "Este don otorga un punto adicional en sus características de Poder, Voluntad e Inteligencia.",
        15,
        70,
        [ELAN_JEDAH_PODER_OSCURO],
        []
    )
);
shajadJedah.addDon(
    new DonElan(
        "El Dominador (Vista)",
        "",
        10,
        70,
        [],
        ["El Dominador (Habla)"]
    )
);
shajadJedah.addDon(
    new DonElan(
        "Esencia sobrenatural",
        "",
        15,
        80,
        [],
        []//TODO gnosis 30
    )
);
shajadJedah.addDon(
    new DonElan(
        "El Dominador (Aura)",
        "",
        10,
        90,
        [],
        ["El Dominador (Vista)"]
    )
);
shajadJedah.addDon(
    new DonElan(
        "Maestro de marionetas",
        "",
        10,
        100,
        [],
        []
    )
);

berylShajad_set.push(shajadJedah);
var SHAJAD_NOAH = "Noah";

var shajadNoah = new BerylShajad(SHAJAD_NOAH, SHAJAD);

shajadNoah.addDon(
    new DonElan(
        "En las manos apropiadas",
        "",
        5,
        10,
        [],
        []
    )
);
shajadNoah.addDon(
    new DonElan(
        "Espíritu de superación",
        "",
        10,
        20,
        [],
        []
    )
);
var ELAN_NOAH_RESISTENTE = "Resistente";
ventajas_set.push(new Ventaja(
    ELAN_NOAH_RESISTENTE,
    "",
    "Este don otorga un bonificador especial a su RF equivalente a la mitad del Elan que posee.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [],
    [resistenteElan],
    GRUPO_ELAN
));
shajadNoah.addDon(
    new DonElan(
        "Resistente",
        "Este don otorga un bonificador especial a su RF equivalente a la mitad del Elan que posee.",
        5,
        20,
        [ELAN_NOAH_RESISTENTE],
        []
    )
);
shajadNoah.addDon(
    new DonElan(
        "Inhumano",
        "",
        5,
        30,
        [],
        []
    )
);
shajadNoah.addDon(
    new DonElan(
        "Ignorar penalizadores",
        "",
        10,
        40,
        [],
        []
    )
);
shajadNoah.addDon(
    new DonElan(
        "Potencia oscura",
        "",
        15,
        50,
        [],
        []
    )
);
shajadNoah.addDon(
    new DonElan(
        "Dote",
        "",
        10,
        60,
        [],
        []
    )
);
shajadNoah.addDon(
    new DonElan(
        "Mejorar ante los retos",
        "",
        15,
        70,
        [],
        []
    )
);
shajadNoah.addDon(
    new DonElan(
        "Aura de guerra",
        "",
        10,
        70,
        [],
        []
    )
);
shajadNoah.addDon(
    new DonElan(
        "Avatar oscuro",
        "",
        20,
        80,
        [],
        ["Inhumano"]
    )
);
shajadNoah.addDon(
    new DonElan(
        "La sombra de la guerra",
        "",
        15,
        90,
        [],
        []
    )
);
shajadNoah.addDon(
    new DonElan(
        "El Vencedor",
        "",
        10,
        100,
        [],
        []
    )
);

berylShajad_set.push(shajadNoah);
var SHAJAD_ZEMIAL = "Zemial";

var shajadZemial = new BerylShajad(SHAJAD_ZEMIAL, SHAJAD);

shajadZemial.addDon(
    new DonElan(
        "Asalto espiritual",
        "",
        5,
        10,
        [],
        []
    )
);
shajadZemial.addDon(
    new DonElan(
        "Ansia demencial",
        "",
        5,
        20,
        [],
        []
    )
);
var ELAN_ZEMIAL_DAÑO_INCREMENTADO = "Daño incrementado";
ventajas_set.push(new Ventaja(
    ELAN_ZEMIAL_DAÑO_INCREMENTADO,
    "",
    "Este don otorga un bonificador especial a daño base de cualquiera de sus ataques en una cantidad equivalente a la mitad de su nivel de Elan.",
    NO_COMPRABLE,   //getRepetible
    new Array(0),      //coste
    [],    //incompatibles
    false,  //anulable
    [ELEGIR_POD_VOL],
    [dañoIncrementadoElan],
    GRUPO_ELAN
));
shajadZemial.addDon(
    new DonElan(
        "Daño incrementado",
        "Este don otorga un bonificador especial a daño base de cualquiera de sus ataques en una cantidad equivalente a la mitad de su nivel de Elan.",
        10,
        30,
        [ELAN_ZEMIAL_DAÑO_INCREMENTADO],
        []
    )
);
shajadZemial.addDon(
    new DonElan(
        "Daño anímico",
        "",
        10,
        40,
        [],
        ["Asalto espiritual"]
    )
);
shajadZemial.addDon(
    new DonElan(
        "Destructor",
        "",
        15,
        50,
        [],
        []
    )
);
shajadZemial.addDon(
    new DonElan(
        "Señor de la destrucción (Tacto)",
        "",
        10,
        50,
        [],
        []
    )
);
shajadZemial.addDon(
    new DonElan(
        "Presencia exterminadora",
        "",
        10,
        60,
        [],
        []
    )
);
shajadZemial.addDon(
    new DonElan(
        "Señor de la destrucción (Vista)",
        "",
        10,
        60,
        [],
        ["Señor de la destrucción (Tacto)"]
    )
);
shajadZemial.addDon(
    new DonElan(
        "Señor de la destrucción (Aura)",
        "",
        10,
        70,
        [],
        ["Señor de la destrucción (Vista)"]
    )
);
shajadZemial.addDon(
    new DonElan(
        "Asalto destructor",
        "",
        15,
        80,
        [],
        []
    )
);
shajadZemial.addDon(
    new DonElan(
        "La sangre de la locura",
        "",
        20,
        90,
        [],
        []
    )
);
shajadZemial.addDon(
    new DonElan(
        "Portador de catástrofes",
        "",
        10,
        100,
        [],
        []
    )
);

berylShajad_set.push(shajadZemial);


//noinspection FunctionTooLongJS
/**
 *
 * @param {string} nombre
 * @constructor
 * @class Categoria
 */
function Categoria(nombre) {
    /** @type string */
    this.nombre = nombre;

    /** @type string */
    this.descripcion = "";

    /** @type Arquetipo */
    this.arquetipo = ARQ_SIN_CATEGORIA;

    /** @type number */
    this.multiploDeVida = 20;

    /** @type number */
    this.pvPorNivel = 5;

    /** @type number */
    this.turnoPorNivel = 5;

    /** @type number */
    this.CMPorNivel = 20;

    /** @type number */
    this.nivelesParaCV = 2;

//HABILIDADES PRIMARIAS
    /** @type number */
    this.limiteCombate = 0.6;

    /** @type number */
    this.habAtaque = 2;

    /** @type number */
    this.habParada = 2;

    /** @type number */
    this.habEsquiva = 2;

    /** @type number */
    this.habArmadura = 2;

    /** @type number */
    this.ki = 2;

    /** @type number */
    this.acumulacionKi = 20;

    /** @type number */
    this.limiteSobrenatural = 0.6;

    /** @type number */
    this.zeon = 2;

    /** @type number */
    this.costeACT = 60;

    /** @type number */
    this.proyeccionMagica = 2;

    /** @type number */
    this.convocar = 2;

    /** @type number */
    this.dominar = 2;

    /** @type number */
    this.atar = 2;

    /** @type number */
    this.desconvocar = 2;

    /** @type number */
    this.limitePsiquica = 0.6;

    /** @type number */
    this.costeCV = 20;

    /** @type number */
    this.proyeccionPsiquica = 2;

//HABILIDADES SECUNDARIAS
    /** @type number */
    this.atleticas = 2;

    /** @type number */
    this.sociales = 2;

    /** @type number */
    this.perceptivas = 2;

    /** @type number */
    this.intelectuales = 2;

    /** @type number */
    this.vigor = 2;

    /** @type number */
    this.subterfugio = 2;

    /** @type number */
    this.creativas = 2;
//costes unidos
    /** @type Coste[] */
    this.costes = [];
    
//Costes reducidos
    /** @type Coste[] */
    this.costesReducidos = [];

//BONIFICADORES INNATOS
    /** @type Bono[] */
    this.bonosInnatos = [];

}

Categoria.prototype =  {
    constructor: Categoria,

    toString : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {string}
     */
    getDescripcion : function() {
        return this.descripcion;
    },

    /**
     *
     * @returns {Arquetipo}
     */
    getArquetipo : function() {
        return this.arquetipo;
    },

    /**
     *
     */
    initCostes : function() {
        this.costes.push(new Coste(UI_MULTIPLO_VIDA, this.multiploDeVida, true, UDS_PD));
        this.costes.push(new Coste(UI_PV_POR_NIVEL, this.pvPorNivel, true, UDS_PD));
        this.costes.push(new Coste(UI_TURNO_POR_NIVEL, this.turnoPorNivel, true, UDS_PD));
        this.costes.push(new Coste(UI_CM_POR_NIVEL, this.CMPorNivel, true, UDS_PD));
        this.costes.push(new Coste(UI_NIVELES_PARA_CV, this.nivelesParaCV, true, UDS_PD));

        this.costes.push(new Coste(UI_LIMITE_COMBATE, (this.limiteCombate * 100), true, UDS_PORCENT));
        this.costes.push(new Coste(UI_ATAQUE, this.habAtaque, true, UDS_PD));
        this.costes.push(new Coste(UI_PARADA, this.habParada, true, UDS_PD));
        this.costes.push(new Coste(UI_ESQUIVA, this.habEsquiva, true, UDS_PD));
        this.costes.push(new Coste(UI_LLEVAR_ARMADURA, this.habArmadura, true, UDS_PD));
        this.costes.push(new Coste(UI_KI, this.ki, true, UDS_PD));
        this.costes.push(new Coste(UI_ACUMULACION_KI, this.acumulacionKi, true, UDS_PD));

        this.costes.push(new Coste(UI_LIMITE_SOBRENATURAL, (this.limiteSobrenatural * 100), true, UDS_PORCENT));
        this.costes.push(new Coste(UI_ZEON, this.zeon, true, UDS_PD));
        this.costes.push(new Coste(UI_ACT, this.costeACT, true, UDS_PD));
        this.costes.push(new Coste(UI_PROYECCION_MAGICA, this.proyeccionMagica, true, UDS_PD));
        this.costes.push(new Coste(UI_CONVOCAR, this.convocar, true, UDS_PD));
        this.costes.push(new Coste(UI_DOMINAR, this.dominar, true, UDS_PD));
        this.costes.push(new Coste(UI_ATAR, this.atar, true, UDS_PD));
        this.costes.push(new Coste(UI_DESCONVOCAR, this.desconvocar, true, UDS_PD));

        this.costes.push(new Coste(UI_LIMITE_PSIQUICA, (this.limitePsiquica * 100), true, UDS_PORCENT));
        this.costes.push(new Coste(UI_CV, this.costeCV, true, UDS_PD));
        this.costes.push(new Coste(UI_PROYECCION_PSIQUICA, this.proyeccionPsiquica, true, UDS_PD));

        this.costes.push(new Coste(UI_ATLETICAS, this.atleticas, true, UDS_PD));
        this.costes.push(new Coste(UI_SOCIALES, this.sociales, true, UDS_PD));
        this.costes.push(new Coste(UI_PERCEPTIVAS, this.perceptivas, true, UDS_PD));
        this.costes.push(new Coste(UI_INTELECTUALES, this.intelectuales, true, UDS_PD));
        this.costes.push(new Coste(UI_VIGOR, this.vigor, true, UDS_PD));
        this.costes.push(new Coste(UI_SUBTERFUGIO, this.subterfugio, true, UDS_PD));
        this.costes.push(new Coste(UI_CREATIVAS, this.creativas, true, UDS_PD));    
    },

    /**
     *
     * @returns {Coste[]}
     */
    getCostes : function() {
        return this.costes;
    },

    /**
     *
     * @returns {Coste[]}
     */
    getCostesReducidos : function() {
        return this.costesReducidos;
    },

    /**
     *
     * @returns {Bono[]}
     */
    getBonosInnatos : function() {
        return this.bonosInnatos;
    },

    /**
     *
     * @param {string} nombreHabilidad
     * @returns {number}
     */
    getCosteHabilidadPrimaria : function(nombreHabilidad) {
        switch (nombreHabilidad) {
            case HB_ATAQUE :
                return this.habAtaque;
                break;
            case HB_PARADA :
                return this.habParada;
                break;
            case HB_ESQUIVA :
                return this.habEsquiva;
                break;
            case HB_ARMADURA :
                return this.habArmadura;
                break;
            case HB_KI :
            case HB_KI_DES :
            case HB_KI_AGI :
            case HB_KI_CON :
            case HB_KI_FUE :
            case HB_KI_VOL :
            case HB_KI_POD :
                return this.ki;
                break;
            case HB_ACUM_KI :
            case HB_ACUM_KI_DES :
            case HB_ACUM_KI_AGI :
            case HB_ACUM_KI_CON :
            case HB_ACUM_KI_VOL :
            case HB_ACUM_KI_POD :
            case HB_ACUM_KI_FUE :
                return this.acumulacionKi;
                break;
            case HB_ZEON :
                return this.zeon;
                break;
            case HB_ACT :
                return this.costeACT;
                break;
            case HB_PROYECCION_MAGICA :
                return this.proyeccionMagica;
                break;
            case HB_CONVOCAR :
                return this.convocar;
                break;
            case HB_DOMINAR :
                return this.dominar;
                break;
            case HB_ATAR :
                return this.atar;
                break;
            case HB_DESCONVOCAR :
                return this.desconvocar;
                break;
            case HB_CV :
                return this.costeCV;
                break;
            case HB_PROYECCION_PSIQUICA :
                return this.proyeccionPsiquica;
                break;
            default:
                return 0;
        }
    },

    /**
     *
     * @param {string} nombreHabilidad
     * @returns {number}
     */
    getCosteHabilidadSecundaria : function(nombreHabilidad) {
        for (var i = 0; i < this.costesReducidos.length; i++) {
            var costeReducido = this.costesReducidos[i];

            if (costeReducido.getNombre() == nombreHabilidad) {
                return costeReducido.getCoste();
            }
        }

        var tipoHabilidadSecundaria = getGrupoDeHabilidadSecundaria(nombreHabilidad);

        switch (tipoHabilidadSecundaria) {
            case TIPO_HB_ATLETICAS:
                return this.atleticas;
                break;
            case TIPO_HB_CREATIVAS:
                return this.creativas;
                break;
            case TIPO_HB_INTELECTUALES:
                return this.intelectuales;
                break;
            case TIPO_HB_PERCEPTIVAS:
                return this.perceptivas;
                break;
            case TIPO_HB_SOCIALES:
                return this.sociales;
                break;
            case TIPO_HB_SUBTERFUGIO:
                return this.subterfugio;
                break;
            case TIPO_HB_VIGOR:
                return this.vigor;
                break;
            default:
                throw ERR_HABILIDAD_ERRONEA;
        }

    },

    /**
     *
     * @returns {string}
     */
    toJSON : function() {
        return this.nombre;
    }
};


/**
 * Clase para indicar el coste de un elemento (habilidad normalmente)
 * @param {string} nombre
 * @param {number} coste
 * @constructor
 * @param {boolean} absoluto Indica si es u nuevo coste absoluto para el elemento, o si es una cantidad a sustraer del coste actual.
 * @param {string} unidades Las unidades en que se mide el coste
 * @class Coste
 */
function Coste(nombre, coste, absoluto, unidades) {
    /** @type string */
    this.nombre = nombre;

    /** @type number */
    this.coste = coste;

    /** @type boolean */
    this.absoluto = absoluto;

    /** @type string */
    this.unidades = unidades;
}

Coste.prototype = {
    constructor: Coste,

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @returns {number}
     */
    getCoste : function() {
        return this.coste;
    },

    /**
     *
     * @returns {boolean}
     */
    isAbsoluto : function() {
        return this.absoluto;
    },

    /**
     *
     * @returns {string}
     */
    toString : function() {
        var cadena;
        if (this.absoluto) {
            cadena = this.nombre + ": " + this.coste + this.unidades;
        } else {
            cadena = this.nombre + ": -" + this.coste + this.unidades;
        }
        return cadena;
    }
};


/**
 *
 * @type {Categoria[]}
 */
var categorias_set = [];

var ERR_CATEGORIA_ERRONEA = "Error: Nombre de categoría erróneo";

/**
 * Devuelve la Categoria que tiene el nombre indicado
 * @param {string} nombre El nombre de la categoría.
 * @returns {Categoria}
 * @throws ERR_CATEGORIA_ERRONEA
 */
function getCategoria(nombre) {
    for (var i=0;i<categorias_set.length;i++) {
        if (categorias_set[i].getNombre() == nombre) {
            return categorias_set[i];
        }
    }
    throw ERR_CATEGORIA_ERRONEA + ": " + nombre;
}

/**
 * Indica si se puede elegir la categoría indicada para el personaje actual
 * @param {string} nombreCategoria
 * @returns {boolean}
 */
function puedeElegirCategoria(nombreCategoria) {
    return (nombreCategoria != personaje_actual.getCategoria().getNombre());
}

/**
 * Inicializa las categorías.
 */
function initCategorias() {
    categorias_set.sort(SortPorAtributoNombre);
    for (var i = 0; i < categorias_set.length; i++) {
        categorias_set[i].initCostes();
    }
}

/**
 *
 * @param {Categoria} catActual
 * @param {Categoria} catNueva
 * @returns {number}
 */
function costeCambioCategoria(catActual, catNueva) {
    var coste = 60;

    var arqActual = catActual.getArquetipo();
    var arqNuevo = catNueva.getArquetipo();

    if ((arqActual == ARQ_SIN_CATEGORIA) || (arqNuevo == ARQ_SIN_CATEGORIA)) {
        coste = 20;
    } else {
        if (!arqActual.isMixto()) {
            if (arqActual == arqNuevo) {
                coste = 20;
            }
        } else {
            if (arqActual.comparteArquetipoMixto(arqNuevo)) {
                coste = 40;
            }
        }
    }

    return coste;
}
var CAT_ASESINO = "Asesino";
var CATEGORIA_ASESINO = new Categoria(CAT_ASESINO);

CATEGORIA_ASESINO.descripcion = "";
CATEGORIA_ASESINO.arquetipo = ARQ_ACECHADOR;
CATEGORIA_ASESINO.multiploDeVida = 20;
CATEGORIA_ASESINO.pvPorNivel = 5;
CATEGORIA_ASESINO.turnoPorNivel = 10;
CATEGORIA_ASESINO.CMPorNivel = 20;
CATEGORIA_ASESINO.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_ASESINO.limiteCombate = 0.5;
CATEGORIA_ASESINO.habAtaque = 2;
CATEGORIA_ASESINO.habParada = 3;
CATEGORIA_ASESINO.habEsquiva = 2;
CATEGORIA_ASESINO.habArmadura = 3;
CATEGORIA_ASESINO.ki = 2;
CATEGORIA_ASESINO.acumulacionKi = 25;
CATEGORIA_ASESINO.limiteSobrenatural = 0.5;
CATEGORIA_ASESINO.zeon = 3;
CATEGORIA_ASESINO.costeACT = 70;
CATEGORIA_ASESINO.proyeccionMagica = 3;
CATEGORIA_ASESINO.convocar = 3;
CATEGORIA_ASESINO.dominar = 3;
CATEGORIA_ASESINO.atar = 3;
CATEGORIA_ASESINO.desconvocar = 3;
CATEGORIA_ASESINO.limitePsiquica = 0.5;
CATEGORIA_ASESINO.costeCV = 20;
CATEGORIA_ASESINO.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_ASESINO.atleticas = 2;
CATEGORIA_ASESINO.sociales = 2;
CATEGORIA_ASESINO.perceptivas = 1;
CATEGORIA_ASESINO.intelectuales = 3;
CATEGORIA_ASESINO.vigor = 3;
CATEGORIA_ASESINO.subterfugio = 2;
CATEGORIA_ASESINO.creativas = 2;

//Costes reducidos
CATEGORIA_ASESINO.costesReducidos = [
    new Coste(HB_SIGILO, 1, true, UDS_PD),
    new Coste(HB_FRIALDAD, 2, true, UDS_PD),
    new Coste(HB_MEMORIZAR, 2, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_ASESINO.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ASESINO}),
    new Bono(BONO_HABILIDAD,HB_ADVERTIR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ASESINO}),
    new Bono(BONO_HABILIDAD,HB_BUSCAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ASESINO}),
    new Bono(BONO_HABILIDAD,HB_OCULTARSE,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ASESINO}),
    new Bono(BONO_HABILIDAD,HB_SIGILO,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ASESINO}),
    new Bono(BONO_HABILIDAD,HB_VENENOS,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ASESINO}),
    new Bono(BONO_HABILIDAD,HB_FRIALDAD,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ASESINO}),
    new Bono(BONO_HABILIDAD,HB_TRAMPERIA,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ASESINO})
];

categorias_set.push(CATEGORIA_ASESINO);


var CAT_CONJURADOR = "Conjurador";
var CATEGORIA_CONJURADOR = new Categoria(CAT_CONJURADOR);

CATEGORIA_CONJURADOR.descripcion = "";
CATEGORIA_CONJURADOR.arquetipo = ARQ_MISTICO;
CATEGORIA_CONJURADOR.multiploDeVida = 20;
CATEGORIA_CONJURADOR.pvPorNivel = 5;
CATEGORIA_CONJURADOR.turnoPorNivel = 5;
CATEGORIA_CONJURADOR.CMPorNivel = 10;
CATEGORIA_CONJURADOR.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_CONJURADOR.limiteCombate = 0.5;
CATEGORIA_CONJURADOR.habAtaque = 3;
CATEGORIA_CONJURADOR.habParada = 3;
CATEGORIA_CONJURADOR.habEsquiva = 2;
CATEGORIA_CONJURADOR.habArmadura = 3;
CATEGORIA_CONJURADOR.ki = 3;
CATEGORIA_CONJURADOR.acumulacionKi = 30;
CATEGORIA_CONJURADOR.limiteSobrenatural = 0.6;
CATEGORIA_CONJURADOR.zeon = 1;
CATEGORIA_CONJURADOR.costeACT = 60;
CATEGORIA_CONJURADOR.proyeccionMagica = 3;
CATEGORIA_CONJURADOR.convocar = 1;
CATEGORIA_CONJURADOR.dominar = 1;
CATEGORIA_CONJURADOR.atar = 1;
CATEGORIA_CONJURADOR.desconvocar = 1;
CATEGORIA_CONJURADOR.limitePsiquica = 0.5;
CATEGORIA_CONJURADOR.costeCV = 20;
CATEGORIA_CONJURADOR.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_CONJURADOR.atleticas = 2;
CATEGORIA_CONJURADOR.sociales = 2;
CATEGORIA_CONJURADOR.perceptivas = 2;
CATEGORIA_CONJURADOR.intelectuales = 2;
CATEGORIA_CONJURADOR.vigor = 3;
CATEGORIA_CONJURADOR.subterfugio = 2;
CATEGORIA_CONJURADOR.creativas = 2;

//Costes reducidos
CATEGORIA_CONJURADOR.costesReducidos = [
    new Coste(HB_OCULTISMO, 1, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_CONJURADOR.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ZEON,50,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_CONVOCAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_DOMINAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_ATAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_DESCONVOCAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_CONJURADOR})
];
categorias_set.push(CATEGORIA_CONJURADOR);
var CAT_EXPLORADOR = "Explorador";
var CATEGORIA_EXPLORADOR = new Categoria(CAT_EXPLORADOR);

CATEGORIA_EXPLORADOR.descripcion = "";
CATEGORIA_EXPLORADOR.arquetipo = ARQ_LUCHADOR_ACECHADOR;
CATEGORIA_EXPLORADOR.multiploDeVida = 20;
CATEGORIA_EXPLORADOR.pvPorNivel = 10;
CATEGORIA_EXPLORADOR.turnoPorNivel = 5;
CATEGORIA_EXPLORADOR.CMPorNivel = 20;
CATEGORIA_EXPLORADOR.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_EXPLORADOR.limiteCombate = 0.6;
CATEGORIA_EXPLORADOR.habAtaque = 2;
CATEGORIA_EXPLORADOR.habParada = 2;
CATEGORIA_EXPLORADOR.habEsquiva = 2;
CATEGORIA_EXPLORADOR.habArmadura = 2;
CATEGORIA_EXPLORADOR.ki = 2;
CATEGORIA_EXPLORADOR.acumulacionKi = 25;
CATEGORIA_EXPLORADOR.limiteSobrenatural = 0.5;
CATEGORIA_EXPLORADOR.zeon = 3;
CATEGORIA_EXPLORADOR.costeACT = 70;
CATEGORIA_EXPLORADOR.proyeccionMagica = 3;
CATEGORIA_EXPLORADOR.convocar = 3;
CATEGORIA_EXPLORADOR.dominar = 3;
CATEGORIA_EXPLORADOR.atar = 3;
CATEGORIA_EXPLORADOR.desconvocar = 3;
CATEGORIA_EXPLORADOR.limitePsiquica = 0.5;
CATEGORIA_EXPLORADOR.costeCV = 20;
CATEGORIA_EXPLORADOR.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_EXPLORADOR.atleticas = 2;
CATEGORIA_EXPLORADOR.sociales = 2;
CATEGORIA_EXPLORADOR.perceptivas = 1;
CATEGORIA_EXPLORADOR.intelectuales = 3;
CATEGORIA_EXPLORADOR.vigor = 3;
CATEGORIA_EXPLORADOR.subterfugio = 2;
CATEGORIA_EXPLORADOR.creativas = 2;

//Costes reducidos
CATEGORIA_EXPLORADOR.costesReducidos = [
    new Coste(HB_TRAMPERIA, 1, true, UDS_PD),
    new Coste(HB_HERBOLARIA, 2, true, UDS_PD),
    new Coste(HB_ANIMALES, 1, true, UDS_PD),
    new Coste(HB_MEDICINA, 2, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_EXPLORADOR.bonosInnatos =[
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_EXPLORADOR}),
    new Bono(BONO_HABILIDAD,HB_ADVERTIR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_EXPLORADOR}),
    new Bono(BONO_HABILIDAD,HB_BUSCAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_EXPLORADOR}),
    new Bono(BONO_HABILIDAD,HB_RASTREAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_EXPLORADOR}),
    new Bono(BONO_HABILIDAD,HB_TRAMPERIA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_EXPLORADOR}),
    new Bono(BONO_HABILIDAD,HB_ANIMALES,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_EXPLORADOR}),
    new Bono(BONO_HABILIDAD,HB_HERBOLARIA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_EXPLORADOR}),
    new Bono(BONO_KI,HAB_KI_DETECCION_KI,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_EXPLORADOR})
];


categorias_set.push(CATEGORIA_EXPLORADOR);
var CAT_GUERRERO = "Guerrero";
var CATEGORIA_GUERRERO = new Categoria(CAT_GUERRERO);


CATEGORIA_GUERRERO.descripcion = "";
CATEGORIA_GUERRERO.arquetipo = ARQ_LUCHADOR;
CATEGORIA_GUERRERO.multiploDeVida = 15;
CATEGORIA_GUERRERO.pvPorNivel = 15;
CATEGORIA_GUERRERO.turnoPorNivel = 5;
CATEGORIA_GUERRERO.CMPorNivel = 25;
CATEGORIA_GUERRERO.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_GUERRERO.limiteCombate = 0.6;
CATEGORIA_GUERRERO.habAtaque = 2;
CATEGORIA_GUERRERO.habParada = 2;
CATEGORIA_GUERRERO.habEsquiva = 2;
CATEGORIA_GUERRERO.habArmadura = 2;
CATEGORIA_GUERRERO.ki = 2;
CATEGORIA_GUERRERO.acumulacionKi = 20;
CATEGORIA_GUERRERO.limiteSobrenatural = 0.5;
CATEGORIA_GUERRERO.zeon = 3;
CATEGORIA_GUERRERO.costeACT = 70;
CATEGORIA_GUERRERO.proyeccionMagica = 3;
CATEGORIA_GUERRERO.convocar = 3;
CATEGORIA_GUERRERO.dominar = 3;
CATEGORIA_GUERRERO.atar = 3;
CATEGORIA_GUERRERO.desconvocar = 3;
CATEGORIA_GUERRERO.limitePsiquica = 0.5;
CATEGORIA_GUERRERO.costeCV = 20;
CATEGORIA_GUERRERO.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_GUERRERO.atleticas = 2;
CATEGORIA_GUERRERO.sociales = 2;
CATEGORIA_GUERRERO.perceptivas = 2;
CATEGORIA_GUERRERO.intelectuales = 3;
CATEGORIA_GUERRERO.vigor = 2;
CATEGORIA_GUERRERO.subterfugio = 2;
CATEGORIA_GUERRERO.creativas = 2;

//Costes reducidos
CATEGORIA_GUERRERO.costesReducidos = [
    new Coste(HB_PROEZAS_FUERZA, 1, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_GUERRERO.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO}),
    new Bono(BONO_HABILIDAD,HB_PARADA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO}),
    new Bono(BONO_HABILIDAD,HB_ARMADURA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO}),
    new Bono(BONO_HABILIDAD,HB_PROEZAS_FUERZA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO})
];

categorias_set.push(CATEGORIA_GUERRERO);
var CAT_GUERRERO_ACROBATA = "Guerrero Acróbata";
var CATEGORIA_GUERRERO_ACROBATA = new Categoria(CAT_GUERRERO_ACROBATA);


CATEGORIA_GUERRERO_ACROBATA.descripcion = "";
CATEGORIA_GUERRERO_ACROBATA.arquetipo = ARQ_LUCHADOR;
CATEGORIA_GUERRERO_ACROBATA.multiploDeVida = 20;
CATEGORIA_GUERRERO_ACROBATA.pvPorNivel = 10;
CATEGORIA_GUERRERO_ACROBATA.turnoPorNivel = 10;
CATEGORIA_GUERRERO_ACROBATA.CMPorNivel = 25;
CATEGORIA_GUERRERO_ACROBATA.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_GUERRERO_ACROBATA.limiteCombate = 0.6;
CATEGORIA_GUERRERO_ACROBATA.habAtaque = 2;
CATEGORIA_GUERRERO_ACROBATA.habParada = 3;
CATEGORIA_GUERRERO_ACROBATA.habEsquiva = 2;
CATEGORIA_GUERRERO_ACROBATA.habArmadura = 2;
CATEGORIA_GUERRERO_ACROBATA.ki = 2;
CATEGORIA_GUERRERO_ACROBATA.acumulacionKi = 20;
CATEGORIA_GUERRERO_ACROBATA.limiteSobrenatural = 0.5;
CATEGORIA_GUERRERO_ACROBATA.zeon = 3;
CATEGORIA_GUERRERO_ACROBATA.costeACT = 70;
CATEGORIA_GUERRERO_ACROBATA.proyeccionMagica = 3;
CATEGORIA_GUERRERO_ACROBATA.convocar = 3;
CATEGORIA_GUERRERO_ACROBATA.dominar = 3;
CATEGORIA_GUERRERO_ACROBATA.atar = 3;
CATEGORIA_GUERRERO_ACROBATA.desconvocar = 3;
CATEGORIA_GUERRERO_ACROBATA.limitePsiquica = 0.5;
CATEGORIA_GUERRERO_ACROBATA.costeCV = 20;
CATEGORIA_GUERRERO_ACROBATA.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_GUERRERO_ACROBATA.atleticas = 2;
CATEGORIA_GUERRERO_ACROBATA.sociales = 2;
CATEGORIA_GUERRERO_ACROBATA.perceptivas = 2;
CATEGORIA_GUERRERO_ACROBATA.intelectuales = 3;
CATEGORIA_GUERRERO_ACROBATA.vigor = 2;
CATEGORIA_GUERRERO_ACROBATA.subterfugio = 2;
CATEGORIA_GUERRERO_ACROBATA.creativas = 2;

//Costes reducidos
CATEGORIA_GUERRERO_ACROBATA.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_GUERRERO_ACROBATA.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_ACROBATA}),
    new Bono(BONO_HABILIDAD,HB_ESQUIVA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_ACROBATA}),
    new Bono(BONO_HABILIDAD,HB_ACROBACIAS,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_ACROBATA}),
    new Bono(BONO_HABILIDAD,HB_SALTAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_ACROBATA}),
    new Bono(BONO_HABILIDAD,HB_ATLETISMO,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_ACROBATA}),
    new Bono(BONO_HABILIDAD,HB_TRUCOS_MANOS,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_ACROBATA}),
    new Bono(BONO_HABILIDAD,HB_ESTILO,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_ACROBATA})
];

categorias_set.push(CATEGORIA_GUERRERO_ACROBATA);
var CAT_GUERRERO_CONJURADOR = "Guerrero Conjurador";
var CATEGORIA_GUERRERO_CONJURADOR = new Categoria(CAT_GUERRERO_CONJURADOR);

CATEGORIA_GUERRERO_CONJURADOR.descripcion = "";
CATEGORIA_GUERRERO_CONJURADOR.arquetipo = ARQ_LUCHADOR_MISTICO;
CATEGORIA_GUERRERO_CONJURADOR.multiploDeVida = 20;
CATEGORIA_GUERRERO_CONJURADOR.pvPorNivel = 10;
CATEGORIA_GUERRERO_CONJURADOR.turnoPorNivel = 5;
CATEGORIA_GUERRERO_CONJURADOR.CMPorNivel = 20;
CATEGORIA_GUERRERO_CONJURADOR.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_GUERRERO_CONJURADOR.limiteCombate = 0.5;
CATEGORIA_GUERRERO_CONJURADOR.habAtaque = 2;
CATEGORIA_GUERRERO_CONJURADOR.habParada = 2;
CATEGORIA_GUERRERO_CONJURADOR.habEsquiva = 2;
CATEGORIA_GUERRERO_CONJURADOR.habArmadura = 2;
CATEGORIA_GUERRERO_CONJURADOR.ki = 2;
CATEGORIA_GUERRERO_CONJURADOR.acumulacionKi = 20;
CATEGORIA_GUERRERO_CONJURADOR.limiteSobrenatural = 0.5;
CATEGORIA_GUERRERO_CONJURADOR.zeon = 1;
CATEGORIA_GUERRERO_CONJURADOR.costeACT = 60;
CATEGORIA_GUERRERO_CONJURADOR.proyeccionMagica = 3;
CATEGORIA_GUERRERO_CONJURADOR.convocar = 1;
CATEGORIA_GUERRERO_CONJURADOR.dominar = 1;
CATEGORIA_GUERRERO_CONJURADOR.atar = 1;
CATEGORIA_GUERRERO_CONJURADOR.desconvocar = 1;
CATEGORIA_GUERRERO_CONJURADOR.limitePsiquica = 0.5;
CATEGORIA_GUERRERO_CONJURADOR.costeCV = 20;
CATEGORIA_GUERRERO_CONJURADOR.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_GUERRERO_CONJURADOR.atleticas = 2;
CATEGORIA_GUERRERO_CONJURADOR.sociales = 2;
CATEGORIA_GUERRERO_CONJURADOR.perceptivas = 2;
CATEGORIA_GUERRERO_CONJURADOR.intelectuales = 2;
CATEGORIA_GUERRERO_CONJURADOR.vigor = 2;
CATEGORIA_GUERRERO_CONJURADOR.subterfugio = 2;
CATEGORIA_GUERRERO_CONJURADOR.creativas = 2;

//Costes reducidos
CATEGORIA_GUERRERO_CONJURADOR.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_GUERRERO_CONJURADOR.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ZEON,20,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_PARADA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_ESQUIVA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_CONVOCAR,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_DOMINAR,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_ATAR,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_DESCONVOCAR,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_CONJURADOR}),
    new Bono(BONO_HABILIDAD,HB_OCULTISMO,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_CONJURADOR})
];
categorias_set.push(CATEGORIA_GUERRERO_CONJURADOR);
var CAT_GUERRERO_MENTALISTA = "Guerrero Mentalista";
var CATEGORIA_GUERRERO_MENTALISTA = new Categoria(CAT_GUERRERO_MENTALISTA);

CATEGORIA_GUERRERO_MENTALISTA.descripcion = "";
CATEGORIA_GUERRERO_MENTALISTA.arquetipo = ARQ_LUCHADOR_PSIQUICO;
CATEGORIA_GUERRERO_MENTALISTA.multiploDeVida = 20;
CATEGORIA_GUERRERO_MENTALISTA.pvPorNivel = 10;
CATEGORIA_GUERRERO_MENTALISTA.turnoPorNivel = 5;
CATEGORIA_GUERRERO_MENTALISTA.CMPorNivel = 20;
CATEGORIA_GUERRERO_MENTALISTA.nivelesParaCV = 1;

//HABILIDADES PRIMARIAS
CATEGORIA_GUERRERO_MENTALISTA.limiteCombate = 0.5;
CATEGORIA_GUERRERO_MENTALISTA.habAtaque = 2;
CATEGORIA_GUERRERO_MENTALISTA.habParada = 2;
CATEGORIA_GUERRERO_MENTALISTA.habEsquiva = 2;
CATEGORIA_GUERRERO_MENTALISTA.habArmadura = 2;
CATEGORIA_GUERRERO_MENTALISTA.ki = 2;
CATEGORIA_GUERRERO_MENTALISTA.acumulacionKi = 25;
CATEGORIA_GUERRERO_MENTALISTA.limiteSobrenatural = 0.5;
CATEGORIA_GUERRERO_MENTALISTA.zeon = 3;
CATEGORIA_GUERRERO_MENTALISTA.costeACT = 70;
CATEGORIA_GUERRERO_MENTALISTA.proyeccionMagica = 3;
CATEGORIA_GUERRERO_MENTALISTA.convocar = 3;
CATEGORIA_GUERRERO_MENTALISTA.dominar = 3;
CATEGORIA_GUERRERO_MENTALISTA.atar = 3;
CATEGORIA_GUERRERO_MENTALISTA.desconvocar = 3;
CATEGORIA_GUERRERO_MENTALISTA.limitePsiquica = 0.5;
CATEGORIA_GUERRERO_MENTALISTA.costeCV = 15;
CATEGORIA_GUERRERO_MENTALISTA.proyeccionPsiquica = 2;

//HABILIDADES SECUNDARIAS
CATEGORIA_GUERRERO_MENTALISTA.atleticas = 2;
CATEGORIA_GUERRERO_MENTALISTA.sociales = 2;
CATEGORIA_GUERRERO_MENTALISTA.perceptivas = 2;
CATEGORIA_GUERRERO_MENTALISTA.intelectuales = 3;
CATEGORIA_GUERRERO_MENTALISTA.vigor = 2;
CATEGORIA_GUERRERO_MENTALISTA.subterfugio = 2;
CATEGORIA_GUERRERO_MENTALISTA.creativas = 2;

//Costes reducidos
CATEGORIA_GUERRERO_MENTALISTA.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_GUERRERO_MENTALISTA.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_MENTALISTA}),
    new Bono(BONO_HABILIDAD,HB_PARADA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_MENTALISTA}),
    new Bono(BONO_HABILIDAD,HB_ESQUIVA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_GUERRERO_MENTALISTA})
];
categorias_set.push(CATEGORIA_GUERRERO_MENTALISTA);
var CAT_HECHICERO = "Hechicero";
var CATEGORIA_HECHICERO = new Categoria(CAT_HECHICERO);

CATEGORIA_HECHICERO.descripcion = "";
CATEGORIA_HECHICERO.arquetipo = ARQ_MISTICO;
CATEGORIA_HECHICERO.multiploDeVida = 20;
CATEGORIA_HECHICERO.pvPorNivel = 5;
CATEGORIA_HECHICERO.turnoPorNivel = 5;
CATEGORIA_HECHICERO.CMPorNivel = 10;
CATEGORIA_HECHICERO.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_HECHICERO.limiteCombate = 0.5;
CATEGORIA_HECHICERO.habAtaque = 3;
CATEGORIA_HECHICERO.habParada = 3;
CATEGORIA_HECHICERO.habEsquiva = 2;
CATEGORIA_HECHICERO.habArmadura = 3;
CATEGORIA_HECHICERO.ki = 3;
CATEGORIA_HECHICERO.acumulacionKi = 30;
CATEGORIA_HECHICERO.limiteSobrenatural = 0.6;
CATEGORIA_HECHICERO.zeon = 1;
CATEGORIA_HECHICERO.costeACT = 50;
CATEGORIA_HECHICERO.proyeccionMagica = 2;
CATEGORIA_HECHICERO.convocar = 2;
CATEGORIA_HECHICERO.dominar = 2;
CATEGORIA_HECHICERO.atar = 2;
CATEGORIA_HECHICERO.desconvocar = 2;
CATEGORIA_HECHICERO.limitePsiquica = 0.5;
CATEGORIA_HECHICERO.costeCV = 20;
CATEGORIA_HECHICERO.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_HECHICERO.atleticas = 2;
CATEGORIA_HECHICERO.sociales = 2;
CATEGORIA_HECHICERO.perceptivas = 2;
CATEGORIA_HECHICERO.intelectuales = 2;
CATEGORIA_HECHICERO.vigor = 3;
CATEGORIA_HECHICERO.subterfugio = 2;
CATEGORIA_HECHICERO.creativas = 2;

//Costes reducidos
CATEGORIA_HECHICERO.costesReducidos = [
    new Coste(HB_VALORACION_MAGICA, 1, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_HECHICERO.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ZEON,100,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_HECHICERO}),
    new Bono(BONO_HABILIDAD,HB_VALORACION_MAGICA,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_HECHICERO}),
    new Bono(BONO_HABILIDAD,HB_OCULTISMO,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_HECHICERO})
];
categorias_set.push(CATEGORIA_HECHICERO);
var CAT_HECHICERO_MENTALISTA = "Hechicero Mentalista";
var CATEGORIA_HECHICERO_MENTALISTA = new Categoria(CAT_HECHICERO_MENTALISTA);

CATEGORIA_HECHICERO_MENTALISTA.descripcion = "";
CATEGORIA_HECHICERO_MENTALISTA.arquetipo = ARQ_MISTICO_PSIQUICO;
CATEGORIA_HECHICERO_MENTALISTA.multiploDeVida = 20;
CATEGORIA_HECHICERO_MENTALISTA.pvPorNivel = 5;
CATEGORIA_HECHICERO_MENTALISTA.turnoPorNivel = 5;
CATEGORIA_HECHICERO_MENTALISTA.CMPorNivel = 10;
CATEGORIA_HECHICERO_MENTALISTA.nivelesParaCV = 1;

//HABILIDADES PRIMARIAS
CATEGORIA_HECHICERO_MENTALISTA.limiteCombate = 0.5;
CATEGORIA_HECHICERO_MENTALISTA.habAtaque = 3;
CATEGORIA_HECHICERO_MENTALISTA.habParada = 3;
CATEGORIA_HECHICERO_MENTALISTA.habEsquiva = 2;
CATEGORIA_HECHICERO_MENTALISTA.habArmadura = 3;
CATEGORIA_HECHICERO_MENTALISTA.ki = 3;
CATEGORIA_HECHICERO_MENTALISTA.acumulacionKi = 30;
CATEGORIA_HECHICERO_MENTALISTA.limiteSobrenatural = 0.5;
CATEGORIA_HECHICERO_MENTALISTA.zeon = 1;
CATEGORIA_HECHICERO_MENTALISTA.costeACT = 50;
CATEGORIA_HECHICERO_MENTALISTA.proyeccionMagica = 2;
CATEGORIA_HECHICERO_MENTALISTA.convocar = 2;
CATEGORIA_HECHICERO_MENTALISTA.dominar = 2;
CATEGORIA_HECHICERO_MENTALISTA.atar = 2;
CATEGORIA_HECHICERO_MENTALISTA.desconvocar = 2;
CATEGORIA_HECHICERO_MENTALISTA.limitePsiquica = 0.5;
CATEGORIA_HECHICERO_MENTALISTA.costeCV = 10;
CATEGORIA_HECHICERO_MENTALISTA.proyeccionPsiquica = 2;

//HABILIDADES SECUNDARIAS
CATEGORIA_HECHICERO_MENTALISTA.atleticas = 2;
CATEGORIA_HECHICERO_MENTALISTA.sociales = 2;
CATEGORIA_HECHICERO_MENTALISTA.perceptivas = 2;
CATEGORIA_HECHICERO_MENTALISTA.intelectuales = 2;
CATEGORIA_HECHICERO_MENTALISTA.vigor = 3;
CATEGORIA_HECHICERO_MENTALISTA.subterfugio = 2;
CATEGORIA_HECHICERO_MENTALISTA.creativas = 2;

//Costes reducidos
CATEGORIA_HECHICERO_MENTALISTA.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_HECHICERO_MENTALISTA.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ZEON,100,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_HECHICERO_MENTALISTA}),
    new Bono(BONO_HABILIDAD,HB_VALORACION_MAGICA,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_HECHICERO_MENTALISTA}),
    new Bono(BONO_HABILIDAD,HB_OCULTISMO,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_HECHICERO_MENTALISTA})
];

categorias_set.push(CATEGORIA_HECHICERO_MENTALISTA);
var CAT_ILUSIONISTA = "Ilusionista";
var CATEGORIA_ILUSIONISTA = new Categoria(CAT_ILUSIONISTA);

CATEGORIA_ILUSIONISTA.descripcion = "";
CATEGORIA_ILUSIONISTA.arquetipo = ARQ_MISTICO_ACECHADOR;
CATEGORIA_ILUSIONISTA.multiploDeVida = 20;
CATEGORIA_ILUSIONISTA.pvPorNivel = 5;
CATEGORIA_ILUSIONISTA.turnoPorNivel = 5;
CATEGORIA_ILUSIONISTA.CMPorNivel = 20;
CATEGORIA_ILUSIONISTA.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_ILUSIONISTA.limiteCombate = 0.5;
CATEGORIA_ILUSIONISTA.habAtaque = 3;
CATEGORIA_ILUSIONISTA.habParada = 3;
CATEGORIA_ILUSIONISTA.habEsquiva = 2;
CATEGORIA_ILUSIONISTA.habArmadura = 3;
CATEGORIA_ILUSIONISTA.ki = 2;
CATEGORIA_ILUSIONISTA.acumulacionKi = 25;
CATEGORIA_ILUSIONISTA.limiteSobrenatural = 0.6;
CATEGORIA_ILUSIONISTA.zeon = 1;
CATEGORIA_ILUSIONISTA.costeACT = 60;
CATEGORIA_ILUSIONISTA.proyeccionMagica = 2;
CATEGORIA_ILUSIONISTA.convocar = 3;
CATEGORIA_ILUSIONISTA.dominar = 3;
CATEGORIA_ILUSIONISTA.atar = 3;
CATEGORIA_ILUSIONISTA.desconvocar = 3;
CATEGORIA_ILUSIONISTA.limitePsiquica = 0.5;
CATEGORIA_ILUSIONISTA.costeCV = 20;
CATEGORIA_ILUSIONISTA.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_ILUSIONISTA.atleticas = 2;
CATEGORIA_ILUSIONISTA.sociales = 2;
CATEGORIA_ILUSIONISTA.perceptivas = 2;
CATEGORIA_ILUSIONISTA.intelectuales = 2;
CATEGORIA_ILUSIONISTA.vigor = 3;
CATEGORIA_ILUSIONISTA.subterfugio = 2;
CATEGORIA_ILUSIONISTA.creativas = 2;

//Costes reducidos
CATEGORIA_ILUSIONISTA.costesReducidos = [
    new Coste(HB_TRUCOS_MANOS, 1, true, UDS_PD),
    new Coste(HB_PERSUASION, 1, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_ILUSIONISTA.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ZEON,75,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ILUSIONISTA}),
    new Bono(BONO_HABILIDAD,HB_VALORACION_MAGICA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ILUSIONISTA}),
    new Bono(BONO_HABILIDAD,HB_SIGILO,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ILUSIONISTA}),
    new Bono(BONO_HABILIDAD,HB_OCULTARSE,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ILUSIONISTA}),
    new Bono(BONO_HABILIDAD,HB_TRUCOS_MANOS,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ILUSIONISTA}),
    new Bono(BONO_HABILIDAD,HB_DISFRAZ,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ILUSIONISTA}),
    new Bono(BONO_HABILIDAD,HB_ROBO,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ILUSIONISTA}),
    new Bono(BONO_HABILIDAD,HB_PERSUASION,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_ILUSIONISTA})
];
categorias_set.push(CATEGORIA_ILUSIONISTA);
var CAT_LADRON = "Ladrón";
var CATEGORIA_LADRON = new Categoria(CAT_LADRON);

CATEGORIA_LADRON.descripcion = "";
CATEGORIA_LADRON.arquetipo = ARQ_ACECHADOR;
CATEGORIA_LADRON.multiploDeVida = 20;
CATEGORIA_LADRON.pvPorNivel = 5;
CATEGORIA_LADRON.turnoPorNivel = 10;
CATEGORIA_LADRON.CMPorNivel = 20;
CATEGORIA_LADRON.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_LADRON.limiteCombate = 0.5;
CATEGORIA_LADRON.habAtaque = 2;
CATEGORIA_LADRON.habParada = 3;
CATEGORIA_LADRON.habEsquiva = 2;
CATEGORIA_LADRON.habArmadura = 3;
CATEGORIA_LADRON.ki = 2;
CATEGORIA_LADRON.acumulacionKi = 25;
CATEGORIA_LADRON.limiteSobrenatural = 0.5;
CATEGORIA_LADRON.zeon = 3;
CATEGORIA_LADRON.costeACT = 70;
CATEGORIA_LADRON.proyeccionMagica = 3;
CATEGORIA_LADRON.convocar = 3;
CATEGORIA_LADRON.dominar = 3;
CATEGORIA_LADRON.atar = 3;
CATEGORIA_LADRON.desconvocar = 3;
CATEGORIA_LADRON.limitePsiquica = 0.5;
CATEGORIA_LADRON.costeCV = 20;
CATEGORIA_LADRON.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_LADRON.atleticas = 1;
CATEGORIA_LADRON.sociales = 2;
CATEGORIA_LADRON.perceptivas = 2;
CATEGORIA_LADRON.intelectuales = 3;
CATEGORIA_LADRON.vigor = 3;
CATEGORIA_LADRON.subterfugio = 1;
CATEGORIA_LADRON.creativas = 2;

//Costes reducidos
CATEGORIA_LADRON.costesReducidos = [
    new Coste(HB_TASACION, 1, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_LADRON.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ESQUIVA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_LADRON}),
    new Bono(BONO_HABILIDAD,HB_ADVERTIR,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_LADRON}),
    new Bono(BONO_HABILIDAD,HB_BUSCAR,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_LADRON}),
    new Bono(BONO_HABILIDAD,HB_OCULTARSE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_LADRON}),
    new Bono(BONO_HABILIDAD,HB_SIGILO,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_LADRON}),
    new Bono(BONO_HABILIDAD,HB_TRAMPERIA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_LADRON}),
    new Bono(BONO_HABILIDAD,HB_TRUCOS_MANOS,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_LADRON}),
    new Bono(BONO_HABILIDAD,HB_ROBO,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_LADRON}),
    new Bono(BONO_KI,HAB_KI_OCULTACION_KI,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_LADRON})
];


categorias_set.push(CATEGORIA_LADRON);
var CAT_MAESTRO_ARMAS = "Maestro en Armas";
var CATEGORIA_MAESTRO_ARMAS = new Categoria(CAT_MAESTRO_ARMAS);

var BONO_MAESTRO_ARMAS = "tablas de armas y maniobras a medio coste";


CATEGORIA_MAESTRO_ARMAS.descripcion = "";
CATEGORIA_MAESTRO_ARMAS.arquetipo = ARQ_LUCHADOR;
CATEGORIA_MAESTRO_ARMAS.multiploDeVida = 10;
CATEGORIA_MAESTRO_ARMAS.pvPorNivel = 20;
CATEGORIA_MAESTRO_ARMAS.turnoPorNivel = 5;
CATEGORIA_MAESTRO_ARMAS.CMPorNivel = 10;
CATEGORIA_MAESTRO_ARMAS.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_MAESTRO_ARMAS.limiteCombate = 0.6;
CATEGORIA_MAESTRO_ARMAS.habAtaque = 2;
CATEGORIA_MAESTRO_ARMAS.habParada = 2;
CATEGORIA_MAESTRO_ARMAS.habEsquiva = 2;
CATEGORIA_MAESTRO_ARMAS.habArmadura = 1;
CATEGORIA_MAESTRO_ARMAS.ki = 3;
CATEGORIA_MAESTRO_ARMAS.acumulacionKi = 30;
CATEGORIA_MAESTRO_ARMAS.limiteSobrenatural = 0.5;
CATEGORIA_MAESTRO_ARMAS.zeon = 3;
CATEGORIA_MAESTRO_ARMAS.costeACT = 70;
CATEGORIA_MAESTRO_ARMAS.proyeccionMagica = 3;
CATEGORIA_MAESTRO_ARMAS.convocar = 3;
CATEGORIA_MAESTRO_ARMAS.dominar = 3;
CATEGORIA_MAESTRO_ARMAS.atar = 3;
CATEGORIA_MAESTRO_ARMAS.desconvocar = 3;
CATEGORIA_MAESTRO_ARMAS.limitePsiquica = 0.5;
CATEGORIA_MAESTRO_ARMAS.costeCV = 20;
CATEGORIA_MAESTRO_ARMAS.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_MAESTRO_ARMAS.atleticas = 2;
CATEGORIA_MAESTRO_ARMAS.sociales = 2;
CATEGORIA_MAESTRO_ARMAS.perceptivas = 2;
CATEGORIA_MAESTRO_ARMAS.intelectuales = 3;
CATEGORIA_MAESTRO_ARMAS.vigor = 1;
CATEGORIA_MAESTRO_ARMAS.subterfugio = 3;
CATEGORIA_MAESTRO_ARMAS.creativas = 2;

//Costes reducidos
CATEGORIA_MAESTRO_ARMAS.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_MAESTRO_ARMAS.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_MAESTRO_ARMAS}),
    new Bono(BONO_HABILIDAD,HB_PARADA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_MAESTRO_ARMAS}),
    new Bono(BONO_HABILIDAD,HB_ARMADURA,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_MAESTRO_ARMAS}),
    new Bono(BONO_HABILIDAD,HB_PROEZAS_FUERZA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_MAESTRO_ARMAS}),
    new Bono(BONO_MAESTRO_ARMAS,BONO_MAESTRO_ARMAS,0,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_MAESTRO_ARMAS})
];
categorias_set.push(CATEGORIA_MAESTRO_ARMAS);
var CAT_MENTALISTA = "Mentalista";
var CATEGORIA_MENTALISTA = new Categoria(CAT_MENTALISTA);

CATEGORIA_MENTALISTA.descripcion = "";
CATEGORIA_MENTALISTA.arquetipo = ARQ_PSIQUICO;
CATEGORIA_MENTALISTA.multiploDeVida = 20;
CATEGORIA_MENTALISTA.pvPorNivel = 5;
CATEGORIA_MENTALISTA.turnoPorNivel = 5;
CATEGORIA_MENTALISTA.CMPorNivel = 10;
CATEGORIA_MENTALISTA.nivelesParaCV = 1;

//HABILIDADES PRIMARIAS
CATEGORIA_MENTALISTA.limiteCombate = 0.5;
CATEGORIA_MENTALISTA.habAtaque = 3;
CATEGORIA_MENTALISTA.habParada = 3;
CATEGORIA_MENTALISTA.habEsquiva = 2;
CATEGORIA_MENTALISTA.habArmadura = 3;
CATEGORIA_MENTALISTA.ki = 3;
CATEGORIA_MENTALISTA.acumulacionKi = 30;
CATEGORIA_MENTALISTA.limiteSobrenatural = 0.5;
CATEGORIA_MENTALISTA.zeon = 3;
CATEGORIA_MENTALISTA.costeACT = 70;
CATEGORIA_MENTALISTA.proyeccionMagica = 3;
CATEGORIA_MENTALISTA.convocar = 3;
CATEGORIA_MENTALISTA.dominar = 3;
CATEGORIA_MENTALISTA.atar = 3;
CATEGORIA_MENTALISTA.desconvocar = 3;
CATEGORIA_MENTALISTA.limitePsiquica = 0.6;
CATEGORIA_MENTALISTA.costeCV = 10;
CATEGORIA_MENTALISTA.proyeccionPsiquica = 2;

//HABILIDADES SECUNDARIAS
CATEGORIA_MENTALISTA.atleticas = 2;
CATEGORIA_MENTALISTA.sociales = 2;
CATEGORIA_MENTALISTA.perceptivas = 2;
CATEGORIA_MENTALISTA.intelectuales = 2;
CATEGORIA_MENTALISTA.vigor = 3;
CATEGORIA_MENTALISTA.subterfugio = 2;
CATEGORIA_MENTALISTA.creativas = 2;

//Costes reducidos
CATEGORIA_MENTALISTA.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_MENTALISTA.bonosInnatos = [];

categorias_set.push(CATEGORIA_MENTALISTA);
var CAT_NOVEL = "Novel";
var CATEGORIA_NOVEL = new Categoria(CAT_NOVEL);

var BONO_NOVEL_CINCO_ELECCIONES = "bono innato novel 5 +10";
var BONO_NOVEL_CAMBIO_REDUCIDO = "bono innato novel cambio clase"; //TODO

CATEGORIA_NOVEL.descripcion = "";
CATEGORIA_NOVEL.arquetipo = ARQ_SIN_CATEGORIA;
CATEGORIA_NOVEL.multiploDeVida = 20;
CATEGORIA_NOVEL.pvPorNivel = 5;
CATEGORIA_NOVEL.turnoPorNivel = 5;
CATEGORIA_NOVEL.CMPorNivel = 20;
CATEGORIA_NOVEL.nivelesParaCV = 2;

//HABILIDADES PRIMARIAS
CATEGORIA_NOVEL.limiteCombate = 0.6;
CATEGORIA_NOVEL.habAtaque = 2;
CATEGORIA_NOVEL.habParada = 2;
CATEGORIA_NOVEL.habEsquiva = 2;
CATEGORIA_NOVEL.habArmadura = 2;
CATEGORIA_NOVEL.ki = 2;
CATEGORIA_NOVEL.acumulacionKi = 20;
CATEGORIA_NOVEL.limiteSobrenatural = 0.6;
CATEGORIA_NOVEL.zeon = 2;
CATEGORIA_NOVEL.costeACT = 60;
CATEGORIA_NOVEL.proyeccionMagica = 2;
CATEGORIA_NOVEL.convocar = 2;
CATEGORIA_NOVEL.dominar = 2;
CATEGORIA_NOVEL.atar = 2;
CATEGORIA_NOVEL.desconvocar = 2;
CATEGORIA_NOVEL.limitePsiquica = 0.6;
CATEGORIA_NOVEL.costeCV = 20;
CATEGORIA_NOVEL.proyeccionPsiquica = 2;

//HABILIDADES SECUNDARIAS
CATEGORIA_NOVEL.atleticas = 2;
CATEGORIA_NOVEL.sociales = 2;
CATEGORIA_NOVEL.perceptivas = 2;
CATEGORIA_NOVEL.intelectuales = 2;
CATEGORIA_NOVEL.vigor = 2;
CATEGORIA_NOVEL.subterfugio = 2;
CATEGORIA_NOVEL.creativas = 2;

//Costes reducidos
CATEGORIA_NOVEL.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_NOVEL.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ZEON,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_NOVEL}),
    new Bono(BONO_HABILIDAD,BONO_NOVEL_CINCO_ELECCIONES,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_NOVEL}),
    new Bono(BONO_HABILIDAD,BONO_NOVEL_CAMBIO_REDUCIDO,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_NOVEL})
];

//Al novel sólo le cuesta 20 PD cambiar de categoría
//a otra de cualquier arquetipo o viceversa (es
//decir, un luchador solo gasta 20 PD puntos para
//convertirse en novel).

categorias_set.push(CATEGORIA_NOVEL);
var CAT_PALADIN_DESC = "Paladín (Desconvocar)";
var CATEGORIA_PALADIN_DESC = new Categoria(CAT_PALADIN_DESC);


CATEGORIA_PALADIN_DESC.descripcion = "";
CATEGORIA_PALADIN_DESC.arquetipo = ARQ_LUCHADOR;
CATEGORIA_PALADIN_DESC.multiploDeVida = 15;
CATEGORIA_PALADIN_DESC.pvPorNivel = 15;
CATEGORIA_PALADIN_DESC.turnoPorNivel = 5;
CATEGORIA_PALADIN_DESC.CMPorNivel = 20;
CATEGORIA_PALADIN_DESC.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_PALADIN_DESC.limiteCombate = 0.6;
CATEGORIA_PALADIN_DESC.habAtaque = 2;
CATEGORIA_PALADIN_DESC.habParada = 2;
CATEGORIA_PALADIN_DESC.habEsquiva = 2;
CATEGORIA_PALADIN_DESC.habArmadura = 2;
CATEGORIA_PALADIN_DESC.ki = 2;
CATEGORIA_PALADIN_DESC.acumulacionKi = 20;
CATEGORIA_PALADIN_DESC.limiteSobrenatural = 0.5;
CATEGORIA_PALADIN_DESC.zeon = 2;
CATEGORIA_PALADIN_DESC.costeACT = 60;
CATEGORIA_PALADIN_DESC.proyeccionMagica = 3;
CATEGORIA_PALADIN_DESC.convocar = 3;
CATEGORIA_PALADIN_DESC.dominar = 3;
CATEGORIA_PALADIN_DESC.atar = 3;
CATEGORIA_PALADIN_DESC.desconvocar = 1;
CATEGORIA_PALADIN_DESC.limitePsiquica = 0.5;
CATEGORIA_PALADIN_DESC.costeCV = 20;
CATEGORIA_PALADIN_DESC.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_PALADIN_DESC.atleticas = 2;
CATEGORIA_PALADIN_DESC.sociales = 1;
CATEGORIA_PALADIN_DESC.perceptivas = 2;
CATEGORIA_PALADIN_DESC.intelectuales = 2;
CATEGORIA_PALADIN_DESC.vigor = 2;
CATEGORIA_PALADIN_DESC.subterfugio = 3;
CATEGORIA_PALADIN_DESC.creativas = 2;

//Costes reducidos
CATEGORIA_PALADIN_DESC.costesReducidos = [
    new Coste(HB_RESISTENCIA_DOLOR, 1, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_PALADIN_DESC.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_PARADA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_DESC}),
    new Bono(BONO_HABILIDAD,HB_ARMADURA,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_DESC}),
    new Bono(BONO_HABILIDAD,HB_DESCONVOCAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_DESC}),
    new Bono(BONO_HABILIDAD,HB_ZEON,20,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_DESC}),
    new Bono(BONO_HABILIDAD,HB_LIDERAZGO,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_DESC}),
    new Bono(BONO_HABILIDAD,HB_RESISTENCIA_DOLOR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_DESC}),
    new Bono(BONO_HABILIDAD,HB_ESTILO,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_DESC})
];

categorias_set.push(CATEGORIA_PALADIN_DESC);
var CAT_PALADIN_FRIAL = "Paladín (Frialdad)";
var CATEGORIA_PALADIN_FRIAL = new Categoria(CAT_PALADIN_FRIAL);


CATEGORIA_PALADIN_FRIAL.descripcion = "";
CATEGORIA_PALADIN_FRIAL.arquetipo = ARQ_LUCHADOR;
CATEGORIA_PALADIN_FRIAL.multiploDeVida = 15;
CATEGORIA_PALADIN_FRIAL.pvPorNivel = 15;
CATEGORIA_PALADIN_FRIAL.turnoPorNivel = 5;
CATEGORIA_PALADIN_FRIAL.CMPorNivel = 20;
CATEGORIA_PALADIN_FRIAL.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_PALADIN_FRIAL.limiteCombate = 0.6;
CATEGORIA_PALADIN_FRIAL.habAtaque = 2;
CATEGORIA_PALADIN_FRIAL.habParada = 2;
CATEGORIA_PALADIN_FRIAL.habEsquiva = 2;
CATEGORIA_PALADIN_FRIAL.habArmadura = 2;
CATEGORIA_PALADIN_FRIAL.ki = 2;
CATEGORIA_PALADIN_FRIAL.acumulacionKi = 20;
CATEGORIA_PALADIN_FRIAL.limiteSobrenatural = 0.5;
CATEGORIA_PALADIN_FRIAL.zeon = 2;
CATEGORIA_PALADIN_FRIAL.costeACT = 60;
CATEGORIA_PALADIN_FRIAL.proyeccionMagica = 3;
CATEGORIA_PALADIN_FRIAL.convocar = 3;
CATEGORIA_PALADIN_FRIAL.dominar = 3;
CATEGORIA_PALADIN_FRIAL.atar = 3;
CATEGORIA_PALADIN_FRIAL.desconvocar = 1;
CATEGORIA_PALADIN_FRIAL.limitePsiquica = 0.5;
CATEGORIA_PALADIN_FRIAL.costeCV = 20;
CATEGORIA_PALADIN_FRIAL.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_PALADIN_FRIAL.atleticas = 2;
CATEGORIA_PALADIN_FRIAL.sociales = 1;
CATEGORIA_PALADIN_FRIAL.perceptivas = 2;
CATEGORIA_PALADIN_FRIAL.intelectuales = 2;
CATEGORIA_PALADIN_FRIAL.vigor = 2;
CATEGORIA_PALADIN_FRIAL.subterfugio = 3;
CATEGORIA_PALADIN_FRIAL.creativas = 2;

//Costes reducidos
CATEGORIA_PALADIN_FRIAL.costesReducidos = [
    new Coste(HB_RESISTENCIA_DOLOR, 1, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_PALADIN_FRIAL.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_PARADA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_FRIAL}),
    new Bono(BONO_HABILIDAD,HB_ARMADURA,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_FRIAL}),
    new Bono(BONO_HABILIDAD,HB_LIDERAZGO,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_FRIAL}),
    new Bono(BONO_HABILIDAD,HB_RESISTENCIA_DOLOR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_FRIAL}),
    new Bono(BONO_HABILIDAD,HB_ESTILO,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_FRIAL}),
    new Bono(BONO_HABILIDAD,HB_FRIALDAD,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_FRIAL})
];

categorias_set.push(CATEGORIA_PALADIN_FRIAL);
var CAT_PALADIN_OSCURO_CONT = "Paladín Oscuro (Controlar)";
var CATEGORIA_PALADIN_OSCURO_CONT = new Categoria(CAT_PALADIN_OSCURO_CONT);


CATEGORIA_PALADIN_OSCURO_CONT.descripcion = "";
CATEGORIA_PALADIN_OSCURO_CONT.arquetipo = ARQ_LUCHADOR;
CATEGORIA_PALADIN_OSCURO_CONT.multiploDeVida = 15;
CATEGORIA_PALADIN_OSCURO_CONT.pvPorNivel = 15;
CATEGORIA_PALADIN_OSCURO_CONT.turnoPorNivel = 5;
CATEGORIA_PALADIN_OSCURO_CONT.CMPorNivel = 20;
CATEGORIA_PALADIN_OSCURO_CONT.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_PALADIN_OSCURO_CONT.limiteCombate = 0.6;
CATEGORIA_PALADIN_OSCURO_CONT.habAtaque = 2;
CATEGORIA_PALADIN_OSCURO_CONT.habParada = 2;
CATEGORIA_PALADIN_OSCURO_CONT.habEsquiva = 2;
CATEGORIA_PALADIN_OSCURO_CONT.habArmadura = 2;
CATEGORIA_PALADIN_OSCURO_CONT.ki = 2;
CATEGORIA_PALADIN_OSCURO_CONT.acumulacionKi = 20;
CATEGORIA_PALADIN_OSCURO_CONT.limiteSobrenatural = 0.5;
CATEGORIA_PALADIN_OSCURO_CONT.zeon = 2;
CATEGORIA_PALADIN_OSCURO_CONT.costeACT = 60;
CATEGORIA_PALADIN_OSCURO_CONT.proyeccionMagica = 3;
CATEGORIA_PALADIN_OSCURO_CONT.convocar = 3;
CATEGORIA_PALADIN_OSCURO_CONT.dominar = 1;
CATEGORIA_PALADIN_OSCURO_CONT.atar = 3;
CATEGORIA_PALADIN_OSCURO_CONT.desconvocar = 3;
CATEGORIA_PALADIN_OSCURO_CONT.limitePsiquica = 0.5;
CATEGORIA_PALADIN_OSCURO_CONT.costeCV = 20;
CATEGORIA_PALADIN_OSCURO_CONT.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_PALADIN_OSCURO_CONT.atleticas = 2;
CATEGORIA_PALADIN_OSCURO_CONT.sociales = 1;
CATEGORIA_PALADIN_OSCURO_CONT.perceptivas = 2;
CATEGORIA_PALADIN_OSCURO_CONT.intelectuales = 2;
CATEGORIA_PALADIN_OSCURO_CONT.vigor = 2;
CATEGORIA_PALADIN_OSCURO_CONT.subterfugio = 2;
CATEGORIA_PALADIN_OSCURO_CONT.creativas = 2;

//Costes reducidos
CATEGORIA_PALADIN_OSCURO_CONT.costesReducidos = [
    new Coste(HB_FRIALDAD, 1, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_PALADIN_OSCURO_CONT.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_CONT}),
    new Bono(BONO_HABILIDAD,HB_ARMADURA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_CONT}),
    new Bono(BONO_HABILIDAD,HB_DOMINAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_CONT}),
    new Bono(BONO_HABILIDAD,HB_ZEON,20,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_CONT}),
    new Bono(BONO_HABILIDAD,HB_INTIMIDAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_CONT}),
    new Bono(BONO_HABILIDAD,HB_FRIALDAD,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_CONT}),
    new Bono(BONO_HABILIDAD,HB_ESTILO,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_CONT}),
    new Bono(BONO_HABILIDAD,HB_PERSUASION,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_CONT})
];

categorias_set.push(CATEGORIA_PALADIN_OSCURO_CONT);
var CAT_PALADIN_OSCURO_RES = "Paladín Oscuro (Resistir Dolor)";
var CATEGORIA_PALADIN_OSCURO_RES = new Categoria(CAT_PALADIN_OSCURO_RES);


CATEGORIA_PALADIN_OSCURO_RES.descripcion = "";
CATEGORIA_PALADIN_OSCURO_RES.arquetipo = ARQ_LUCHADOR;
CATEGORIA_PALADIN_OSCURO_RES.multiploDeVida = 15;
CATEGORIA_PALADIN_OSCURO_RES.pvPorNivel = 15;
CATEGORIA_PALADIN_OSCURO_RES.turnoPorNivel = 5;
CATEGORIA_PALADIN_OSCURO_RES.CMPorNivel = 20;
CATEGORIA_PALADIN_OSCURO_RES.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_PALADIN_OSCURO_RES.limiteCombate = 0.6;
CATEGORIA_PALADIN_OSCURO_RES.habAtaque = 2;
CATEGORIA_PALADIN_OSCURO_RES.habParada = 2;
CATEGORIA_PALADIN_OSCURO_RES.habEsquiva = 2;
CATEGORIA_PALADIN_OSCURO_RES.habArmadura = 2;
CATEGORIA_PALADIN_OSCURO_RES.ki = 2;
CATEGORIA_PALADIN_OSCURO_RES.acumulacionKi = 20;
CATEGORIA_PALADIN_OSCURO_RES.limiteSobrenatural = 0.5;
CATEGORIA_PALADIN_OSCURO_RES.zeon = 2;
CATEGORIA_PALADIN_OSCURO_RES.costeACT = 60;
CATEGORIA_PALADIN_OSCURO_RES.proyeccionMagica = 3;
CATEGORIA_PALADIN_OSCURO_RES.convocar = 3;
CATEGORIA_PALADIN_OSCURO_RES.dominar = 1;
CATEGORIA_PALADIN_OSCURO_RES.atar = 3;
CATEGORIA_PALADIN_OSCURO_RES.desconvocar = 3;
CATEGORIA_PALADIN_OSCURO_RES.limitePsiquica = 0.5;
CATEGORIA_PALADIN_OSCURO_RES.costeCV = 20;
CATEGORIA_PALADIN_OSCURO_RES.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_PALADIN_OSCURO_RES.atleticas = 2;
CATEGORIA_PALADIN_OSCURO_RES.sociales = 1;
CATEGORIA_PALADIN_OSCURO_RES.perceptivas = 2;
CATEGORIA_PALADIN_OSCURO_RES.intelectuales = 2;
CATEGORIA_PALADIN_OSCURO_RES.vigor = 2;
CATEGORIA_PALADIN_OSCURO_RES.subterfugio = 2;
CATEGORIA_PALADIN_OSCURO_RES.creativas = 2;

//Costes reducidos
CATEGORIA_PALADIN_OSCURO_RES.costesReducidos = [
    new Coste(HB_FRIALDAD, 1, true, UDS_PD)
];

//BONIFICADORES INNATOS
CATEGORIA_PALADIN_OSCURO_RES.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_RES}),
    new Bono(BONO_HABILIDAD,HB_ARMADURA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_RES}),
    new Bono(BONO_HABILIDAD,HB_INTIMIDAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_RES}),
    new Bono(BONO_HABILIDAD,HB_FRIALDAD,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_RES}),
    new Bono(BONO_HABILIDAD,HB_RESISTENCIA_DOLOR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_RES}),
    new Bono(BONO_HABILIDAD,HB_ESTILO,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_RES}),
    new Bono(BONO_HABILIDAD,HB_PERSUASION,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_PALADIN_OSCURO_RES})
];
categorias_set.push(CATEGORIA_PALADIN_OSCURO_RES);
var CAT_SOMBRA = "Sombra";
var CATEGORIA_SOMBRA = new Categoria(CAT_SOMBRA);

CATEGORIA_SOMBRA.descripcion = "";
CATEGORIA_SOMBRA.arquetipo = ARQ_LUCHADOR_ACECHADOR;
CATEGORIA_SOMBRA.multiploDeVida = 20;
CATEGORIA_SOMBRA.pvPorNivel = 5;
CATEGORIA_SOMBRA.turnoPorNivel = 10;
CATEGORIA_SOMBRA.CMPorNivel = 25;
CATEGORIA_SOMBRA.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_SOMBRA.limiteCombate = 0.6;
CATEGORIA_SOMBRA.habAtaque = 2;
CATEGORIA_SOMBRA.habParada = 3;
CATEGORIA_SOMBRA.habEsquiva = 2;
CATEGORIA_SOMBRA.habArmadura = 2;
CATEGORIA_SOMBRA.ki = 2;
CATEGORIA_SOMBRA.acumulacionKi = 20;
CATEGORIA_SOMBRA.limiteSobrenatural = 0.5;
CATEGORIA_SOMBRA.zeon = 3;
CATEGORIA_SOMBRA.costeACT = 70;
CATEGORIA_SOMBRA.proyeccionMagica = 3;
CATEGORIA_SOMBRA.convocar = 3;
CATEGORIA_SOMBRA.dominar = 3;
CATEGORIA_SOMBRA.atar = 3;
CATEGORIA_SOMBRA.desconvocar = 3;
CATEGORIA_SOMBRA.limitePsiquica = 0.5;
CATEGORIA_SOMBRA.costeCV = 20;
CATEGORIA_SOMBRA.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_SOMBRA.atleticas = 2;
CATEGORIA_SOMBRA.sociales = 2;
CATEGORIA_SOMBRA.perceptivas = 2;
CATEGORIA_SOMBRA.intelectuales = 3;
CATEGORIA_SOMBRA.vigor = 2;
CATEGORIA_SOMBRA.subterfugio = 2;
CATEGORIA_SOMBRA.creativas = 2;

//Costes reducidos
CATEGORIA_SOMBRA.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_SOMBRA.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_SOMBRA}),
    new Bono(BONO_HABILIDAD,HB_ESQUIVA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_SOMBRA}),
    new Bono(BONO_HABILIDAD,HB_ADVERTIR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_SOMBRA}),
    new Bono(BONO_HABILIDAD,HB_BUSCAR,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_SOMBRA}),
    new Bono(BONO_HABILIDAD,HB_OCULTARSE,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_SOMBRA}),
    new Bono(BONO_HABILIDAD,HB_SIGILO,10,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_SOMBRA}),
    new Bono(BONO_KI,HAB_KI_OCULTACION_KI,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_SOMBRA})
];

categorias_set.push(CATEGORIA_SOMBRA);
var CAT_TAO = "Tao";
var CATEGORIA_TAO = new Categoria(CAT_TAO);

var BONO_TAO = "artes marciales a medio coste";


CATEGORIA_TAO.descripcion = "";
CATEGORIA_TAO.arquetipo = ARQ_LUCHADOR_DOMINE;
CATEGORIA_TAO.multiploDeVida = 20;
CATEGORIA_TAO.pvPorNivel = 10;
CATEGORIA_TAO.turnoPorNivel = 5;
CATEGORIA_TAO.CMPorNivel = 30;
CATEGORIA_TAO.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_TAO.limiteCombate = 0.6;
CATEGORIA_TAO.habAtaque = 2;
CATEGORIA_TAO.habParada = 2;
CATEGORIA_TAO.habEsquiva = 2;
CATEGORIA_TAO.habArmadura = 2;
CATEGORIA_TAO.ki = 2;
CATEGORIA_TAO.acumulacionKi = 15;
CATEGORIA_TAO.limiteSobrenatural = 0.5;
CATEGORIA_TAO.zeon = 3;
CATEGORIA_TAO.costeACT = 70;
CATEGORIA_TAO.proyeccionMagica = 3;
CATEGORIA_TAO.convocar = 3;
CATEGORIA_TAO.dominar = 3;
CATEGORIA_TAO.atar = 3;
CATEGORIA_TAO.desconvocar = 3;
CATEGORIA_TAO.limitePsiquica = 0.5;
CATEGORIA_TAO.costeCV = 20;
CATEGORIA_TAO.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_TAO.atleticas = 2;
CATEGORIA_TAO.sociales = 2;
CATEGORIA_TAO.perceptivas = 2;
CATEGORIA_TAO.intelectuales = 3;
CATEGORIA_TAO.vigor = 2;
CATEGORIA_TAO.subterfugio = 2;
CATEGORIA_TAO.creativas = 2;

//Costes reducidos
CATEGORIA_TAO.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_TAO.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ESTILO,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_TAO}),
    new Bono(BONO_TAO,BONO_TAO,0,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_TAO})
];

categorias_set.push(CATEGORIA_TAO);
var CAT_TECNICISTA = "Tecnicista";
var CATEGORIA_TECNICISTA = new Categoria(CAT_TECNICISTA);


CATEGORIA_TECNICISTA.descripcion = "";
CATEGORIA_TECNICISTA.arquetipo = ARQ_DOMINE;
CATEGORIA_TECNICISTA.multiploDeVida = 20;
CATEGORIA_TECNICISTA.pvPorNivel = 5;
CATEGORIA_TECNICISTA.turnoPorNivel = 5;
CATEGORIA_TECNICISTA.CMPorNivel = 50;
CATEGORIA_TECNICISTA.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_TECNICISTA.limiteCombate = 0.6;
CATEGORIA_TECNICISTA.habAtaque = 2;
CATEGORIA_TECNICISTA.habParada = 2;
CATEGORIA_TECNICISTA.habEsquiva = 2;
CATEGORIA_TECNICISTA.habArmadura = 2;
CATEGORIA_TECNICISTA.ki = 1;
CATEGORIA_TECNICISTA.acumulacionKi = 10;
CATEGORIA_TECNICISTA.limiteSobrenatural = 0.5;
CATEGORIA_TECNICISTA.zeon = 3;
CATEGORIA_TECNICISTA.costeACT = 70;
CATEGORIA_TECNICISTA.proyeccionMagica = 3;
CATEGORIA_TECNICISTA.convocar = 3;
CATEGORIA_TECNICISTA.dominar = 3;
CATEGORIA_TECNICISTA.atar = 3;
CATEGORIA_TECNICISTA.desconvocar = 3;
CATEGORIA_TECNICISTA.limitePsiquica = 0.5;
CATEGORIA_TECNICISTA.costeCV = 20;
CATEGORIA_TECNICISTA.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_TECNICISTA.atleticas = 2;
CATEGORIA_TECNICISTA.sociales = 2;
CATEGORIA_TECNICISTA.perceptivas = 2;
CATEGORIA_TECNICISTA.intelectuales = 3;
CATEGORIA_TECNICISTA.vigor = 2;
CATEGORIA_TECNICISTA.subterfugio = 2;
CATEGORIA_TECNICISTA.creativas = 2;

//Costes reducidos
CATEGORIA_TECNICISTA.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_TECNICISTA.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_TECNICISTA})
];


categorias_set.push(CATEGORIA_TECNICISTA);
var CAT_WARLOCK = "Warlock";
var CATEGORIA_WARLOCK = new Categoria(CAT_WARLOCK);

CATEGORIA_WARLOCK.descripcion = "";
CATEGORIA_WARLOCK.arquetipo = ARQ_LUCHADOR_MISTICO;
CATEGORIA_WARLOCK.multiploDeVida = 20;
CATEGORIA_WARLOCK.pvPorNivel = 10;
CATEGORIA_WARLOCK.turnoPorNivel = 5;
CATEGORIA_WARLOCK.CMPorNivel = 20;
CATEGORIA_WARLOCK.nivelesParaCV = 3;

//HABILIDADES PRIMARIAS
CATEGORIA_WARLOCK.limiteCombate = 0.5;
CATEGORIA_WARLOCK.habAtaque = 2;
CATEGORIA_WARLOCK.habParada = 2;
CATEGORIA_WARLOCK.habEsquiva = 2;
CATEGORIA_WARLOCK.habArmadura = 2;
CATEGORIA_WARLOCK.ki = 2;
CATEGORIA_WARLOCK.acumulacionKi = 25;
CATEGORIA_WARLOCK.limiteSobrenatural = 0.5;
CATEGORIA_WARLOCK.zeon = 1;
CATEGORIA_WARLOCK.costeACT = 50;
CATEGORIA_WARLOCK.proyeccionMagica = 2;
CATEGORIA_WARLOCK.convocar = 2;
CATEGORIA_WARLOCK.dominar = 2;
CATEGORIA_WARLOCK.atar = 2;
CATEGORIA_WARLOCK.desconvocar = 2;
CATEGORIA_WARLOCK.limitePsiquica = 0.5;
CATEGORIA_WARLOCK.costeCV = 20;
CATEGORIA_WARLOCK.proyeccionPsiquica = 3;

//HABILIDADES SECUNDARIAS
CATEGORIA_WARLOCK.atleticas = 2;
CATEGORIA_WARLOCK.sociales = 2;
CATEGORIA_WARLOCK.perceptivas = 2;
CATEGORIA_WARLOCK.intelectuales = 2;
CATEGORIA_WARLOCK.vigor = 2;
CATEGORIA_WARLOCK.subterfugio = 2;
CATEGORIA_WARLOCK.creativas = 2;

//Costes reducidos
CATEGORIA_WARLOCK.costesReducidos = [];

//BONIFICADORES INNATOS
CATEGORIA_WARLOCK.bonosInnatos = [
    new Bono(BONO_HABILIDAD,HB_ZEON,20,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_WARLOCK}),
    new Bono(BONO_HABILIDAD,HB_ATAQUE,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_WARLOCK}),
    new Bono(BONO_HABILIDAD,HB_PARADA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_WARLOCK}),
    new Bono(BONO_HABILIDAD,HB_ESQUIVA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_WARLOCK}),
    new Bono(BONO_HABILIDAD,HB_VALORACION_MAGICA,5,"",true,BONO_INNATO,ORIGEN_CATEGORIA,{categoriaPersonaje:CAT_WARLOCK}),
];
categorias_set.push(CATEGORIA_WARLOCK);
//noinspection FunctionTooLongJS
/**
 * @param {number} [nivelInicial=1] El nivel al que se crea el personaje. Mínimo 0.
 * @class Personaje
 * @constructor
 */
function Personaje(nivelInicial) {

    if (!nivelInicial) {
        nivelInicial = 1;
    }

    //region Datos Personales
    /** @type string */
    this.nombre = "Donoban";

    /** @type string */
    this.sexo = SEXO_HOMBRE;

    /** @type string  */
    this.altura = "0.5 m";

    /** @type string  */
    this.peso = "10 kg";
    //endregion Datos Personales

    //region Caracteristicas
    /** @type number[] */
    this.caracteristicas = [1,1,1,1,1,1,1,1];

    /** @type number[] */
    this.caracteristicasPrevias = [1,1,1,1,1,1,1,1];

    //endregion Caracteristicas

    //region Capacidades Físicas
    /** @type number */
    this.puntosCansancio = 1;

    /** @type number */
    this.tipoMovimiento = 1;

    /** @type number */
    this.regeneracion = 1;

    /** @type number */
    this.turnoBase = TURNO_BASE;

    /** @type number */
    this.apariencia = 1;

    /** @type number */
    this.tamaño = 2;
    //endregion Capacidades Físicas

    //region Resistencias
    //endregion Resistencias

    //region Puntos de Vida
    /** @type number */
    this.pv = 10;

    /** @type HabilidadDePersonaje */
    this[HB_MULTIPLO_VIDA] = new HabilidadDePersonaje(getHabilidad(HB_MULTIPLO_VIDA));
    //endregion Puntos de Vida

    //region Raza
    /** @type Raza */
    this.raza = getRaza(RAZA_HUMANO);
    //endregion Raza

    //region Categoría
    /** @type string */
    this.arquetipo = ARQ_SIN_CATEGORIA;

    /** @type Categoria */
    this.categoria = getCategoria(CAT_NOVEL);

    /** @type Categoria[] */
    this.categoriasPorNiveles = [];

    for (i = 0; i <= nivelInicial; i++) {
        this.categoriasPorNiveles[i] = this.categoria;
    }

    /** @type boolean|number Vale false si no se está cambiando. Si se ha pagado el cambio, indica en qué nivel se cambia de categoría.*/
    this.cambioCategoria = false;

    /**
     *
     * @type {Categoria} Si se ha pagado para cambiar, indica a cuál se pasa
     */
    this.proximaCategoria = this.categoria;
    //endregion Categoría

    //region Armadura
    /** @type TipoArmadura */
    this.armaduraNatural = new TipoArmadura(ARMADURA_NATURAL,[0,0,0,0,0,0,0],true);

    /** @type TipoArmadura */
    this.capaArmaduraDura = new TipoArmadura(ARMADURA_NINGUNA,[0,0,0,0,0,0,0],false);

    /** @type TipoArmadura */
    this.capaArmaduraBlanda1 = new TipoArmadura(ARMADURA_NINGUNA,[0,0,0,0,0,0,0],true);

    /** @type TipoArmadura */
    this.capaArmaduraBlanda2 = new TipoArmadura(ARMADURA_NINGUNA,[0,0,0,0,0,0,0],true);

    //endregion Armadura

    //region Elan
    /** @type Elan[] */
    this.elan = [];
    //endregion Elan

    //region Magia
    /** @type NivelEnVia[] */
    this.viasMagia = [];

    /** @type Conjuro[] */
    this.conjurosSueltos = [];

    /** @type number */
    this.nivelMagiaGastado = 0;

    /** @type number */
    this.nivelMagiaGastadoPrevio = 0;
    //endregion Magia

    //region Bonos y Costes Reducidos
    /** @type Bono[] */
    this.bonos = [];

    /** @type Coste[] */
    this.costesReducidos = [];
    //endregion Bonos y Costes Reducidos

    //region Bonificadores Naturales
    /** @type BonificadorNatural[] */
    this.bonificadoresNaturales = [];
    this.bonificadoresNaturales[1] = new BonificadorNatural();
    //endregion Bonificadores Naturales

    //region Puntos de Desarrollo
    /** @type number */
    this.PD_totales = getPDsPorNivel(nivelInicial);

    /** @type number */
    this.PD_libres = this.PD_totales;
    this.PD_libresPrevios = this.PD_totales;
    //endregion Puntos de Desarrollo

    //region Puntos de Construcción
    /** @type number */
    this.PC_generales = 3;

    /** @type number */
    this.PC_don = 0;

    /** @type number */
    this.PC_psiquicas = 0;

    /** @type number */
    this.PC_libres_generales = 3;

    /** @type number */
    this.PC_libres_don = 0;

    /** @type number */
    this.PC_libres_psiquicas = 0;

    /** @type {number}*/
    this.aumentosCaracteristicasLibres = getAumentosCaracteristicasPorNivel(nivelInicial);

    /** @type {AumentoCaracteristicas[]} */
    this.aumentosCaracteristicas = [];
    var numAumentos = getAumentosCaracteristicasPorNivel(nivelInicial);
    for (i=0; i< numAumentos;i++) {
        this.aumentosCaracteristicas.push(new AumentoCaracteristicas());
    }

    /** @type {number}*/
    this.aumentosCaracteristicasLibresPrevios = 0;
    //endregion Puntos de Construcción

    //region PX y nivel
    /** @type number */
    this.px = 0;

    /** @type number */
    this.nivel = nivelInicial;

    /**
     *
     * @type {number}
     */
    this.nivelGeneracionTerminada = -1;

    /**
     *
     * @type {ESTADO_GENERACION_NINGUNO|*}
     */
    this.GENERACION_INICIADA = ESTADO_GENERACION_NINGUNO;

    //endregion PX y nivel

    //region Ventajas y Desventajas
    /** @type ElementoPCComprado[] */
    this.ventajas = [];

    /** @type ElementoPCComprado[] */
    this.desventajas = [];

    /** @type ElementoProhibido[] */
    this.prohibidos = [];
    //endregion Ventajas y Desventajas

    //region Habilidades Primarias y Secundarias
    /**
     *
     * @type {HabilidadDePersonaje[]}
     */
    this.allHabilidades = [];

    for (var i = 0; i < habilidades_set.length;i++){
        /** @type HabilidadDePersonaje */
        this[habilidades_set[i].nombre] = new HabilidadDePersonaje(habilidades_set[i]);

        this.allHabilidades.push(this[habilidades_set[i].nombre]);
    }

    //region Ajustes Habilidades Primarias: Combate
    /** @type Arma[] */
    this.manejoArmas = [getArma(ARMA_SIN_ARMAS)];

    /** @type string[] */
    this.manejoTiposArmas = [];

    /** @type string */
    this.armaInicial = ARMA_SIN_ARMAS;

    /** @type TablaArmasComprada[] */
    this.tablasArmas = [];

    /** @type ArteMarcialComprada[] */
    this.artesMarciales = [];

    /**
     *
     * @type {number}
     */
    this.CMGastado = 0;

    /**
     *
     * @type {number}
     */
    this.CMGastadoPrevio = 0;

    /**
     *
     * @type {HabilidadKiComprada[]}
     */
    this.habilidadesKi = [];

    /**
     *
     * @type {TecnicaKiComprada[]}
     */
    this.tecnicasKi = [];

    /**
     *
     * @type {{nivel1: number, nivel2: number, nivel3: number}}
     */
    this.numTecnicas = {nivel1:0,nivel2:0,nivel3:0};

    //endregion Ajustes Habilidades Primarias: Combate

    //region Ajustes Habilidades Primarias: Magia
    //endregion Ajustes Habilidades Primarias: Magia

    //region Ajustes Habilidades Primarias: Psíquica
    this[HB_POTENCIAL_PSIQUICO].CVsGastados = 0;
    this[HB_POTENCIAL_PSIQUICO].CVsGastadosPrevios = 0;
    this[HB_POTENCIAL_PSIQUICO].bono = 0;

    /** @type number */
    this.cv_gastados = 0;

    /** @type number */
    this.cv_gastadosPrevios = 0;

    /** @type string[] */
    this.acceso_disciplinas = [];

    /** @type DisciplinaPsiquicaAccedida[] */
    this.disciplinasPsiquicas = [];

    /** @type PoderPsiquicoDominado[] */
    this.poderesPsiquicosDominados = [];

    /** @type number */
    this.innatosPsiquicos = 0;

    /** @type number */
    this.innatosPsiquicosPrevios = 0;
    //endregion Ajustes Habilidades Primarias: Psíquica

    //endregion Habilidades Primarias y Secundarias

    //region Equipo y dinero
    /** @type Dinero */
    this.dinero = new Dinero(0,0,0);
    //endregion

    //region Flags
    /** @type string[] */
    this.flags = [];
    //endregion Flags

    //region Presencia, gnosis, natura

    /**
     *
     * @type {number}
     */
    this.gnosis = 10;

    //endregion Presencia, gnosis, natura

}

Personaje.prototype = {
    constructor : Personaje,

    toString : function() {
        return this.nombre + " (" + this.getStringCategoria() + ", " + this.raza + ")";
    },

    getStringCategoria : function() {
        var cadena = "";
        var catActual = "";
        var nivelActual = 0;
        var numCategorias = 0;
        for (var i = 1; i <= this.nivel; i++) {
            if ((this.categoriasPorNiveles[i].toString() != catActual) || (numCategorias == 0)) {
                if (numCategorias == 1) {
                    cadena += catActual + " " + nivelActual;
                } else if (numCategorias > 1) {
                    cadena += "/" + catActual + " " + nivelActual;
                }
                catActual = this.categoriasPorNiveles[i].toString();
                numCategorias++;
                nivelActual = 0;
            }
            nivelActual++;
        }
        if (numCategorias == 1) {
            cadena += catActual + " " + nivelActual;
        } else if (numCategorias > 1) {
            cadena += "/" + catActual + " " + nivelActual;
        }

        return cadena;
    },

//region Datos Personales

    /**
     *
     * @returns {string}
     */
    getNombre : function() {
        return this.nombre;
    },

    /**
     *
     * @param {string} nombre
     */
    setNombre : function(nombre) {
        this.nombre = nombre;
        lanzarEvento(EVENT_CHARACTER_SECCION_PERSONALES);
    },

    /**
     *
     * @returns {string}
     */
    getSexo : function() {
        return this.sexo;
    },

    /**
     *
     * @param {string} sexo
     */
    setSexo : function(sexo) {
        this.sexo = sexo;
        lanzarEvento(EVENT_CHARACTER_SECCION_PERSONALES);
    },

    /**
     *
     * @returns {string}
     */
    getPeso : function() {
        return ""+this.peso;
    },

    /**
     *
     * @param {string} valor
     */
    setPeso : function(valor) {
        this.peso = valor;
        lanzarEvento(EVENT_CHARACTER_SECCION_PERSONALES);
    },

    /**
     *
     * @returns {string}
     */
    getAltura : function() {
        return ""+this.altura;
    },

    /**
     *
     * @param {string} valor
     */
    setAltura : function(valor) {
        this.altura = valor;
        lanzarEvento(EVENT_CHARACTER_SECCION_PERSONALES);
    },

//endregion Datos Personales

//region Caracteristicas

    /**
     *
     * @param {string} caracteristica
     * @returns {number}
     */
    getCaracteristica : function(caracteristica) {
        return this.caracteristicas[getIndiceCaracteristica(caracteristica)];
    },

    /**
     *
     * @param {string} caracteristica
     * @param {number} valor
     * @throws ERR_VALOR_CARACTERISTICA_ERRONEO
     */
    setCaracteristica : function(caracteristica, valor) {
        var valorEntero = parseInt(valor);
        if ((valorEntero > 0) && (valorEntero <= MAX_CARACTERISTICA)) {
            this.caracteristicas[getIndiceCaracteristica(caracteristica)] = valorEntero;
            lanzarEvento(EVENT_CHARACTER_SECCION_CARACTERISTICAS);
            this.updateBonoyBases();
        } else{
            throw ERR_VALOR_CARACTERISTICA_ERRONEO;
        }
    },

    /**
     *
     * @param {string} caracteristica
     * @returns {number}
     */
    getBonoCaracteristica : function(caracteristica) {
        var valor = this.getCaracteristica(caracteristica);
        return getBonoPorValor(valor);
    },

//endregion Caracteristicas

//region Capacidades Físicas

    /**
     *
     * @returns {number}
     */
    getPuntosCansancio : function() {
        return this.puntosCansancio;
    },

    /**
     *
     * @param {number} valor
     */
    setPuntosCansancio : function(valor) {
        this.puntosCansancio = valor;
        lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES);
    },

    /**
     *
     * @param {number} valor
     */
    addPuntosCansancio : function(valor) {
        this.setPuntosCansancio(this.getPuntosCansancio()+valor);
    },

    /**
     *
     * @returns {number}
     */
    getTipoMovimiento : function() {
        return this.tipoMovimiento;
    },

    /**
     *
     * @returns {number}
     */
    getRegeneracionBase : function() {
        return this.regeneracionBase();
    },

    /**
     *
     * @returns {number}
     */
    getApariencia : function() {
        return this.apariencia;
    },

    /**
     *
     * @param {number} apariencia
     */
    setApariencia : function(apariencia) {
        this.apariencia = apariencia;
        if (apariencia >= 7) {
            this.setFlag(FLAG_APARIENCIA_MINIMA_7);
        } else {
            this.removeFlag(FLAG_APARIENCIA_MINIMA_7);
        }
        lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES);
    },

    /**
     *
     * @returns {number}
     */
    getTamaño : function() {
        return this.tamaño;
    },

    /**
     *
     * @param {number} valor
     */
    setTamaño : function(valor) {
        this.tamaño = valor;
        lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES);
    },

    /**
     *
     * @param {number} valor
     */
    addTamaño : function(valor) {
        this.setTamaño(this.getTamaño()+valor);
    },

    /**
     *
      * @param {boolean} notificar
     */
    updateCapacidadesFisicas : function (notificar) {
        this.tipoMovimiento = this.getCaracteristica(AGI);
        this.puntosCansancio = this.getCaracteristica(CON);
        this.regeneracion = this.regeneracionBase();
        if (notificar)
            lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES);
    },

    /**
     *
     * @returns {number}
     */
    regeneracionBase : function() {
        var regeneracionBase;
        switch (parseInt(this.getCaracteristica(CON))) {
            case 1 :
            case 2 :
                regeneracionBase =  0;
                break;
            case 3 :
            case 4  :
            case 5  :
            case 6  :
            case 7  :
                regeneracionBase =  1;
                break;
            case 8  :
            case 9  :
                regeneracionBase =  2;
                break;
            case 10  :
                regeneracionBase =  3;
                break;
            case 11  :
                regeneracionBase =  4;
                break;
            case 12  :
                regeneracionBase =  5;
                break;
            case 13  :
                regeneracionBase =  6;
                break;
            case 14  :
                regeneracionBase =  7;
                break;
            case 15  :
                regeneracionBase =  8;
                break;
            case 16  :
                regeneracionBase =  9;
                break;
            case 17  :
                regeneracionBase =  10;
                break;
            case 18  :
                regeneracionBase =  11;
                break;
            case 19  :
            case 20  :
                regeneracionBase =  12;
                break;
        }
        return regeneracionBase;
    },

    /**
     *
      * @param {boolean} notificar
     */
    updateBonosTurnoCarac : function (notificar) {
        var bonoDES = new Bono(BONO_TURNO,BONO_TURNO,this.getBonoCaracteristica(DES),"",false,BONO_CARACTERISTICA,DES3);
        this.addBono(bonoDES, true, false);

        var bonoAGI = new Bono(BONO_TURNO,BONO_TURNO,this.getBonoCaracteristica(AGI),"",false,BONO_CARACTERISTICA,AGI3);
        this.addBono(bonoAGI, true, false);
        if (notificar)
            lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES);
    },

//endregion Capacidades Físicas

//region Resistencias
    /**
     *
     * @param {boolean} notificar
     */
    updateBonosResistenciasCarac : function (notificar) {
        var bonoRF = new Bono(BONO_RESISTENCIA,RF,this.getBonoCaracteristica(CON),"",false,BONO_CARACTERISTICA,CON3);
        this.addBono(bonoRF, true, false);

        var bonoRE = new Bono(BONO_RESISTENCIA,RE,this.getBonoCaracteristica(CON),"",false,BONO_CARACTERISTICA,CON3);
        this.addBono(bonoRE, true, false);

        var bonoRV = new Bono(BONO_RESISTENCIA,RV,this.getBonoCaracteristica(CON),"",false,BONO_CARACTERISTICA,CON3);
        this.addBono(bonoRV, true, false);

        var bonoRM = new Bono(BONO_RESISTENCIA,RM,this.getBonoCaracteristica(POD),"",false,BONO_CARACTERISTICA,POD3);
        this.addBono(bonoRM, true, false);

        var bonoRP = new Bono(BONO_RESISTENCIA,RP,this.getBonoCaracteristica(VOL),"",false,BONO_CARACTERISTICA,VOL3);
        this.addBono(bonoRP, true, false);
        if (notificar)
            lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
    },
//endregion Resistencias

//region Puntos de Vida
    /**
     *
     * @returns {number}
     */
    getPv : function() {
        return this.pv;
    },

    /**
     *
     * @param {boolean} notificar
     */
    updateMultiplosVida : function (notificar) {
        var valorBono = (this[HB_MULTIPLO_VIDA].valorBase(this.getCostePV())) * this.getCaracteristica(CON);

        var bono = new Bono(BONO_PV,BONO_PV,valorBono,"",false,BONO_ESPECIAL,ORIGEN_MULTIPLO_VIDA);
        this.addBono(bono, true, false);
        if (notificar)
            lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES);
    },

    /**
     *
     * @returns {number}
     */
    pvBase : function() {
        var pvbase;
        switch (parseInt(this.getCaracteristica(CON))) {
            case 1 :
                pvbase =  5;
                break;
            case 2 :
                pvbase =  20;
                break;
            case 3 :
                pvbase =  40;
                break;
            case 4  :
                pvbase =  55;
                break;
            case 5  :
                pvbase =  70;
                break;
            case 6  :
                pvbase =  85;
                break;
            case 7  :
                pvbase =  95;
                break;
            case 8  :
                pvbase =  110;
                break;
            case 9  :
                pvbase =  120;
                break;
            case 10  :
                pvbase =  135;
                break;
            case 11  :
                pvbase =  150;
                break;
            case 12  :
                pvbase =  160;
                break;
            case 13  :
                pvbase =  175;
                break;
            case 14  :
                pvbase =   185;
                break;
            case 15  :
                pvbase =  200;
                break;
            case 16  :
                pvbase =  215;
                break;
            case 17  :
                pvbase =  225;
                break;
            case 18  :
                pvbase =  240;
                break;
            case 19  :
                pvbase =  250;
                break;
            case 20  :
                pvbase =  265;
                break;
        }
        return pvbase;
    },

    /**
     *
     * @returns {number}
     */
    getCostePV : function() {
        return this.categoria.multiploDeVida;
    },
//endregion Puntos de Vida

//region Raza
    /**
     * Devuelve la raza del personaje
     * @returns {Raza}
     */
    getRaza : function() {
        return this.raza;
    },

    /**
     * Aplica la raza indicada al personaje y asigna sus ventajas. Antes elimina la raza actual del mismo y elimina sus ventajas.
     * @param {Raza} raza
     */
    setRaza : function(raza) {
        var i;

        /*Elimina todas las ventajas de origen racial*/
        this.eliminarElementosPCPorCampo("origen",ORIGEN_RAZA);

        this.raza = raza;

        for (i = 0; i < raza.ventajas.length; i++) {
            this.addVentaja(raza.ventajas[i],0,"",ORIGEN_RAZA,true,new RepartoCostes(),false);
        }

        for (i = 0; i < raza.desventajas.length; i++) {
            this.addVentaja(raza.desventajas[i],0,"",ORIGEN_RAZA,false,new RepartoCostes(),false);
        }

        this.ordenarElementosPC();
        lanzarEvento(EVENT_CHARACTER_SECCION_PERSONALES);
    },
//endregion Raza

//region Categoría

    /**
     * Devuelve la categoría actual del personaje
     * @returns {Categoria}
     */
    getCategoria : function() {
        return this.categoria;
    },

    /**
     * Devuelve la categoría del personaje en el nivel indicado.
     * @param {number} nivel Igual o inferior al nivel actual.
     * @returns {Categoria}
     * @throws ERR_NIVEL_ERRONEO
     */
    getCategoriaPorNivel : function(nivel) {
        if (nivel <= this.nivel)
            return this.categoriasPorNiveles[nivel];
        else
            throw ERR_NIVEL_ERRONEO;
    },

    /**
     * Devuelve la cantidad de niveles con la categoría indicada que tiene el personaje, hasta el tope del nivel indicado
     * @param {string} nombreCategoria
     * @param {number} nivel
     * @returns {number}
     */
    getNivelesDeCategoriaHastaNivel : function(nombreCategoria,nivel) {
        var niveles = 0;
        for (var i = 1; i <= nivel; i++) {
            if (this.categoriasPorNiveles[i].getNombre() == nombreCategoria) {
                niveles++;
            }
        }
        return niveles;
    },

    /**
     * Indica si la categoria indicada es ya una elegida en niveles confirmados previos por el personaje
     * @param {string} nombreCategoria
     * @returns {boolean}
     */
    esCategoriaPrevia : function(nombreCategoria) {
        var categoriaPrevia = false;
        for (var i = 0; i <= this.nivelGeneracionTerminada;i++) {
            if (this.categoriasPorNiveles[i].getNombre() == nombreCategoria) {
                categoriaPrevia = true;
                break;
            }
        }
        return categoriaPrevia;
    },

    /**
     * Asigna la categoría al personaje. Se asigna la categoría a cada nivel desde el último nivel confirmado (nivelGeneracionTerminada).
     * @param {Categoria} categoria
     */
    setCategoria : function(categoria) {
        //Si la categoria actual no es una confirmada previamente, se eliminan sus bonos
        if (!this.esCategoriaPrevia(this.categoria.getNombre())) {
            this.bonos = limpiarArrayObjetosPorCampo(this.bonos,"origen",ORIGEN_CATEGORIA);
        }
        //Si es la primera vez que se asigna esta categoria, se crean los bonos
        if (!this.esCategoriaPrevia(categoria.getNombre())) {
            var bonoPv = new Bono(BONO_PV,BONO_PV,categoria.pvPorNivel,"", true,BONO_CATEGORIA,ORIGEN_CATEGORIA,{categoriaPersonaje:categoria.getNombre()});
            this.addBono(bonoPv,false,false);
            var bonoTurno = new Bono(BONO_TURNO,BONO_TURNO,categoria.turnoPorNivel,"", true,BONO_CATEGORIA,ORIGEN_CATEGORIA,{categoriaPersonaje:categoria.getNombre()});
            this.addBono(bonoTurno,false,false);
            var bonoCM = new Bono(BONO_CM,BONO_CM,categoria.CMPorNivel,"", true,BONO_CATEGORIA,ORIGEN_CATEGORIA,{categoriaPersonaje:categoria.getNombre()});
            this.addBono(bonoCM,false,false);

            var bonosInnatos = categoria.getBonosInnatos();
            for (var i = 0; i < bonosInnatos.length; i++) {
                this.addBono(bonosInnatos[i],false,false);
            }
        }

        this.ajustarCambiosPDPorCambiosCategoria(categoria);

        for (i = this.nivelGeneracionTerminada+1; i <= this.nivel; i++) {
            this.categoriasPorNiveles[i] = categoria;
        }

        this.categoria = categoria;

        if (this.categoria.getNombre() == CAT_NOVEL) {
            /**
             *
             * @type {string[][]}
             */
            if (!this.esCategoriaPrevia(CAT_NOVEL)) {
                this.bonoNovel = [];
            }
            this.bonoNovel[this.nivel] = ["","","","",""];
        } else {
            if (!this.esCategoriaPrevia(CAT_NOVEL)) {
                delete this.bonoNovel;
            }
        }

        this.updateNivelesPDHabilidades();

        lanzarEvento(EVENT_CHARACTER_SECCION_ARTES_MARCIALES);
        lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES);
        lanzarEvento(EVENT_CHARACTER_SECCION_CARACTERISTICAS);
        lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
        lanzarEvento(EVENT_CHARACTER_SECCION_DESVENTAJAS);
        lanzarEvento(EVENT_CHARACTER_SECCION_ELAN);
        lanzarEvento(EVENT_CHARACTER_SECCION_KI);
        lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
        lanzarEvento(EVENT_CHARACTER_SECCION_PERSONALES);
        lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
        lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
        lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
        lanzarEvento(EVENT_CHARACTER_SECCION_VENTAJAS);
    },
//endregion Categoría

//region Armadura
    /**
     *
     * @param {string} taArmadura
     * @returns {number}
     */
    getArmadura : function(taArmadura) {

        //TODO completar calculo de armadura combinada

        return this.armaduraNatural.getTA(taArmadura);
    },

    /**
     *
     * @returns {TipoArmadura}
     */
    getArmaduraNatural : function() {
        return this.armaduraNatural;
    },

    /**
     *
     * @param {number[]} taArmadura
     */
    setArmaduraNatural : function(taArmadura) {
        this.armaduraNatural = new TipoArmadura(ARMADURA_NATURAL,taArmadura,true);
        lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
    },

    /**
     *
     * @param {number[]} armadura
     */
    addCapaArmadura : function(armadura) {
        this.capasArmadura.push(armadura);
        lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
    },

//endregion Armadura

//region Elan

    /**
     *
     * @param {Elan} elan
     */
    addElan : function(elan) {
        this.elan.push(elan);
        lanzarEvento(EVENT_CHARACTER_SECCION_ELAN);
    },

    /**
     *
     * @param {string} nombreElan
     */
    removeElan : function(nombreElan) {
        var elanLimpio = [];
        var i;
        var j;
        var k;
        for (i = 0; i < this.elan.length; i++) {
            if (this.elan[i].getNombre() != nombreElan) {
                elanLimpio.push(this.elan[i]);
            } else {
                var donesElan = this.elan[i].getDones();
                for (k = 0; k < donesElan.length; k++) {
                    var ventajasDon = donesElan[k].getVentajasConcedidas();
                    for (j = 0; j < ventajasDon.length; j++) {
                        var ventaja = getVentaja(ventajasDon[j]);
                        this.removeVentaja(new ElementoPCComprado(ventaja,0,"",ORIGEN_ELAN));
                    }
                }
            }
        }
        this.elan = elanLimpio;
        lanzarEvento(EVENT_CHARACTER_SECCION_ELAN);
    },

    /**
     *
     * @param {string} nombreElan
     * @param {DonElan} don
     */
    addDonElan : function(nombreElan, don) {
        var i;
        for (i = 0; i < this.elan.length; i++) {
            if (this.elan[i].nombre == nombreElan) {
                this.elan[i].addDon(don);
                this.elan[i].sincGastada += don.coste;
            }
        }
        for (i = 0; i < don.ventajasConcedidas.length; i++) {
            var ventaja = getVentaja(don.ventajasConcedidas[i]);
            if (ventaja.getElegir().length > 0) {
                prepararEleccionVentajaElan(ventaja);
            } else {
                this.addVentaja(ventaja,0,"",ORIGEN_ELAN,true,new RepartoCostes(),false);
            }
        }
        this.ordenarElementosPC();
        lanzarEvento(EVENT_CHARACTER_SECCION_ELAN);
    },

    /**
     *
     * @param {string} nombreElan
     * @returns {number}
     */
    getSincronizacionElan : function(nombreElan) {
        for (var i = 0; i < this.elan.length; i++) {
            if (this.elan[i].getNombre() == nombreElan) {
                return this.elan[i].getSincronizacion();
            }
        }
        return 0;
    },

    /**
     *
     * @param {string} nombreElan
     * @param {number} valor
     */
    addSincronizacionElan : function(nombreElan, valor) {
        for (var i = 0; i < this.elan.length; i++) {
            if (this.elan[i].getNombre() == nombreElan) {
                this.elan[i].addSincronizacion(valor);
                lanzarEvento(EVENT_CHARACTER_SECCION_ELAN);
                break;
            }
        }
    },

    /**
     *
     * @returns {Elan[]}
     */
    getElan : function() {
        return this.elan;
    },
//endregion Elan

//region Magia
    /**
     *
     * @returns {number}
     */
    nivelMagiaMaximo : function() {
        if (this.hasFlag(FLAG_DON)) {
            return nivelMagiaMaximoPorInteligencia(this.getCaracteristica(INT));
        } else {
            return 0;
        }
    },

    /**
     * returns {number}
     */
    getNivelMaximoViaMagia : function() {
        if (this.gnosis > 40) {
            return 100;
        } else if (this.gnosis >= 25) {
            return 90;
        } else {
            return 80;
        }
    },

    /**
     *
     * @returns {number}
     */
    getNivelMagiaGastado : function() {
        return this.nivelMagiaGastado;
    },

    /**
     *
     * @returns {number}
     */
    getNivelMagiaGastadoPrevio : function() {
        return this.nivelMagiaGastadoPrevio;
    },

    /**
     *
     * @param {number} valor
     * @throws ERR_OVERFLOW_NIVEL Si se pretende llevar los niveles gastados a menos de lo confirmado en niveles previos
     */
    addNivelMagiaGastado : function(valor) {
        if (this.nivelMagiaGastado + valor >= this.nivelMagiaGastadoPrevio) {
            this.nivelMagiaGastado += valor;
            lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
        } else {
            throw ERR_OVERFLOW_NIVEL;
        }
    },

    /**
     *
     * @returns {NivelEnVia[]}
     */
    getViasMagia : function() {
        return this.viasMagia;
    },

    /**
     *
     * @param {string} nombreVia
     */
    removeViaMagia : function(nombreVia) {
        var viasLimpias = [];

        var yaEliminada = false;

        var opuestaDeLaEliminada = "";

        for (var i = 0; i < this.viasMagia.length;i++) {
            if (this.viasMagia[i].getVia().getNombre() != nombreVia) {
                viasLimpias.push(this.viasMagia[i]);
                viasLimpias[this.viasMagia[i].getVia().getNombre()] = this.viasMagia[i];
                if (yaEliminada) {
                    if ((opuestaDeLaEliminada == TODAS_VIAS) || (opuestaDeLaEliminada == this.viasMagia[i].getVia().getNombre())) {
                        this.addNivelMagiaGastado(-1 * this.viasMagia[i].getNivel());
                    } else {
                        if ((this.viasMagia[i].getVia().getOpuestas() == TODAS_VIAS) && (i == 1)) {
                            this.addNivelMagiaGastado(-1 * this.viasMagia[i].getNivel());
                        }
                    }
                }
            } else {
                if (this.viasMagia[i].isAnulable()) {
                    opuestaDeLaEliminada = this.viasMagia[i].getVia().getOpuestas();
                    yaEliminada = true;
                    delete this.viasMagia[nombreVia];
                } else {
                    return;
                }
            }
        }

        this.viasMagia = viasLimpias;
        lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
    },

    /**
     *
     * @param {string} nombreVia
     * @param {number} nivel
     */
    addNivelVia : function(nombreVia, nivel) {
        if (this.hasVia(nombreVia)) {
            this.viasMagia[nombreVia].addNivel(nivel);
            if (this.viasMagia[nombreVia].getNivel() == 0) {
                this.removeViaMagia(nombreVia);
            }
        } else {
            var via = getVia(nombreVia);
            var nivelEnVia = new NivelEnVia(via,nivel);
            this.viasMagia.push(nivelEnVia);
            this.viasMagia[nombreVia] = nivelEnVia;
        }
        lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
    },

    /**
     *
     * @param {string} nombreVia
     * @returns {number}
     */
    getNivelMinimoVia : function(nombreVia) {
        var nivelMinimo = 0;

        if (this.hasVia(nombreVia)) {
            nivelMinimo = this[nombreVia].getNivelMinimoVia();
        }

        return nivelMinimo;
    },

    /**
     *
     * @param {string} nombreVia
     * @param {number} nivelMinimo
     */
    setNivelMinimoVia : function(nombreVia, nivelMinimo) {
        if (this.hasVia(nombreVia)) {
            this.viasMagia[nombreVia].setNivelMinimo(nivelMinimo);
        }
    },

    /**
     *
     * @param {string} nombreVia
     * @returns {boolean}
     */
    hasVia : function(nombreVia) {
        return (this.viasMagia[nombreVia] != undefined);
    },

    /**
     *
     * @param {string} nombreVia
     * @returns {number}
     */
    getCosteVia : function(nombreVia) {
        if (this.hasFlag(FLAG_MAGIA_OPUESTA)) {
            return 1;
        }

        if (this.viasMagia.length == 0) {
            return 1;
        }

        if ((nombreVia == VIA_NIGROMANCIA) && (this.viasMagia[0].getVia().getNombre() != nombreVia)) {
            return 2;
        }

        for (var i = 0; i < this.viasMagia.length;i++) {
            if (this.viasMagia[i].getVia().getNombre() == nombreVia) {
                return 1;
            } else if ((this.viasMagia[i].getVia().getOpuestas() == nombreVia) ||(this.viasMagia[i].getVia().getOpuestas() == TODAS_VIAS)) {
                return 2;
            }
        }
        return 1;
    },

    /**
     *
     * @returns {number}
     */
    getIntAprenderConjuros : function() {
        var valor = this.getCaracteristica(INT);

        var bonos = this.getBonos(BONO_INT_APRENDER_CONJURO,"",CATEGORIA_BONO_CUALQUIERA);

        for (var i = 0; i < bonos.length; i++) {
            valor += bonos[i].getBonoParaNivel(this.nivel,personaje_actual);
        }

        return valor;
    },

    /**
     *
     * @returns {number}
     */
    getZeonMagiaInnata : function() {
        var zeon = calculaZeonMagiaInnata(this[HB_ACT].valorFinalActual());

        var bonos = this.getBonos(BONO_MAGIA_INNATA,"",CATEGORIA_BONO_CUALQUIERA);

        for (var i = 0; i < bonos.length; i++) {
            zeon += bonos[i].getBonoParaNivel(this.nivel,personaje_actual);
        }

        return zeon;
    },

    /**
     *
     * @param {string} nombreVia
     * @param {number} nivel
     * @param {Conjuro} conjuro
     * @throws ERROR
     */
    addLibreAcceso : function(nombreVia, nivel, conjuro) {
        if (!this.hasFlag(FLAG_LAZO_EXISTENCIAL)) {
            var conjuroLibre = getConjuroLibreAprendido(conjuro,nivel);
            if (this.hasVia(nombreVia)) {
                if (this.viasMagia[nombreVia].getNivel() >= nivel) {
                    this.viasMagia[nombreVia].addConjuroLibre(conjuroLibre,nivel);
                    lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
                } else {
                    throw "Nivel en vía insuficiente";
                }
            } else {
                throw "Via desconocida";
            }
        } else {
            throw "No puede aprender libre acceso por Lazo Existencial";
        }
    },

    /**
     *
     * @param {Conjuro} conjuro
     * @throws ERROR
     */
    addConjuroSuelto : function(conjuro) {
        if (!this.hasFlag(FLAG_LAZO_EXISTENCIAL)) {
            var coste = costeConjuroSuelto(conjuro.getNivel());
            if (this.nivelMagiaMaximo() - this.getNivelMagiaGastado() >= coste) {
                this.conjurosSueltos.push(conjuro);
                this.addNivelMagiaGastado(coste);
                lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
            } else {
                throw  "Niveles de via insuficientes";
            }
        } else {
            throw "No puede aprender conjuro suelto por Lazo Existencial";
        }
    },

    /**
     *
     * @returns {Conjuro[]}
     */
    getConjurosSueltos : function() {
        return this.conjurosSueltos;
    },
//endregion Magia

//region Bonos y Costes Reducidos
    /**
     *
     * @param {Bono} bono
     */
    dispatchAvisoPorBono : function(bono) {
        switch (bono.getTipo()) {
            case BONO_HABILIDAD :
                lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
                lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
                lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
                lanzarEvento(EVENT_CHARACTER_SECCION_KI);
                lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
                break;
            case BONO_CM :
            case BONO_KI :
                lanzarEvento(EVENT_CHARACTER_SECCION_KI);
                break;
            case BONO_DAÑO :
            case BONO_ROTURA :
            case BONO_ENTEREZA:
                lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
                break;
            case BONO_TURNO :
            case BONO_PV :
            case BONO_TAMAÑO :
            case BONO_REGENERACION:
                lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES);
                break;
            case BONO_RESISTENCIA :
                lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
                break;
            case BONO_MAGIA_INNATA :
            case BONO_INT_APRENDER_CONJURO :
                lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
                break;
        }
    },

    /**
     *
     * @param {Bono} bono
     * @param {boolean} [reemplaza=false] Por defecto es false
     * @param {boolean} [notifica=true] Por defecto es true
     */
    addBono : function (bono, reemplaza, notifica) {
        reemplaza = reemplaza || false; //¡¡linea estúpida!!
        if (notifica == undefined)
            notifica = true;

        var yaExiste = false;
        for (var i = 0; i < this.bonos.length; i++) {
            if ((bono.getTipo() == this.bonos[i].getTipo()) &&
                (bono.getItem() == this.bonos[i].getItem()) &&
                (bono.getOpcion() == this.bonos[i].getOpcion()) &&
                (bono.getOrigen() == this.bonos[i].getOrigen()) &&
                (bono.getCategoria() == this.bonos[i].getCategoria())) {
                if (reemplaza) {
                    this.bonos[i] = bono;
                    if (notifica)
                        this.dispatchAvisoPorBono(bono);
                }
                yaExiste = true;
                break;
            }
        }

        if (!yaExiste) {
            this.bonos.push(bono);
            if (notifica)
                this.dispatchAvisoPorBono(bono);
        }
    },

    /**
     *
     * @param {Bono} bono
     * @param {boolean} notifica
     */
    removeBono : function (bono, notifica) {
        var bonosLimpios = [];
        for (var i = 0; i < this.bonos.length; i++) {
            if ((bono.getTipo() == this.bonos[i].getTipo()) &&
                (bono.getItem() == this.bonos[i].getItem()) &&
                (bono.getOpcion() == this.bonos[i].getOpcion()) &&
                (bono.getOrigen() == this.bonos[i].getOrigen()) &&
                (bono.getCategoria() == this.bonos[i].getCategoria()) &&
                (bono.isPorNivel() == this.bonos[i].isPorNivel())) {
                if (notifica)
                    this.dispatchAvisoPorBono(this.bonos[i]);
            } else {
                bonosLimpios.push(this.bonos[i]);
            }
        }

        this.bonos = bonosLimpios;
    },

    /**
     *
     * @param {string} tipo
     * @param {string} opcion
     * @param {string} categoria
     * @returns {Bono[]}
     */
    getBonos : function(tipo, opcion, categoria) {
        var bonosElegidos = [];
        var esHabilidad = (tipo == BONO_HABILIDAD);
        var habi;
        var tipoHabilidad;

        if (esHabilidad) {
            habi = this.getHabilidadDePersonaje(opcion);
            tipoHabilidad = habi.getTipo();
        }


        for (var i = 0; i < this.bonos.length ; i++) {
            /** @type {Bono} */
            var esteBono = this.bonos[i];

            if (((esteBono.tipo == tipo) && (esteBono.item == opcion)) || ((esHabilidad) && (esteBono.tipo == tipo) && (esteBono.item == tipoHabilidad))) {
                if ((categoria == CATEGORIA_BONO_CUALQUIERA) || (esteBono.getCategoria() == categoria)) {
                    bonosElegidos.push(esteBono);
                }
            }
        }

        if (esHabilidad) {

            if (!this.hasFlag(FLAG_SIN_BONIFICADOR_NATURAL)) {
                if (habi.getMultiploBonificadorNatural() > 0) {
                    var bonoNatural = new Bono(BONO_HABILIDAD,habi.nombre,habi.multiploBonificadorNatural*personaje_actual.getBonoCaracteristica(habi.getCaracteristica()),"",false,BONO_NATURAL,ORIGEN_BONIFICADOR_NATURAL);
                    bonosElegidos.push(bonoNatural);
                }
            }
        }

        return bonosElegidos;
    },

    /**
     *
     * @param {string} opcion
     * @param {number} coste
     */
    removeCosteReducido : function(opcion,coste) {
        var costesLimpios = [];
        for (var i = 0; i < this.costesReducidos.length;i++) {
            var costeReducido = this.costesReducidos[i];

            if ((costeReducido.getNombre() != opcion) ||
                (costeReducido.getCoste() != coste)) {
                costesLimpios.push(costeReducido);
            }
        }
        this.costesReducidos = costesLimpios;
        lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
    },

    /**
     *
     * @returns {Coste[]}
     */
    getCostesReducidos : function() {
        return this.costesReducidos;
    },

    /**
     *
     * @param {Coste} costeReducido
     */
    addCosteReducido : function(costeReducido) {
        this.costesReducidos.push(costeReducido);
        var yaAnulado = false;
        if (notificacionesActivas) {
            desactivarNotificaciones();
        } else {
            yaAnulado = true;
        }
        this.updateNivelesPDHabilidades();
        if (!yaAnulado) {
            activarNotificaciones();
        }
        lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
    },
//endregion Bonos y Costes Reducidos

//region Bonificadores Naturales
    /**
     *
     * @param {string} nombreHabilidad
     * @param {string} tipoBonificadorNatural
     * @param {number} nivel
     */
    addBonificadorNatural : function(nombreHabilidad,tipoBonificadorNatural,nivel) {
        var bonificadorNatural = this.bonificadoresNaturales[nivel];

        var habilidadPrevia = bonificadorNatural[tipoBonificadorNatural];

        if (habilidadPrevia != "") {
            this.getHabilidadDePersonaje(habilidadPrevia).addMultiploBonificadorNatural(-1);
        }

        this.getHabilidadDePersonaje(nombreHabilidad).addMultiploBonificadorNatural(1);
        if (tipoBonificadorNatural == TIPO_BONIFICADOR_NATURAL_FISICO) {
            this.bonificadoresNaturales[nivel].setFisico(nombreHabilidad);
        } else if (tipoBonificadorNatural == TIPO_BONIFICADOR_NATURAL_MENTAL) {
            this.bonificadoresNaturales[nivel].setMental(nombreHabilidad);
        } else {
            this.bonificadoresNaturales[nivel].setExtra(nombreHabilidad);
        }

        lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
    },

    /**
     *
     * @param {string} tipoBonificadorNatural
     * @param {number} nivel
     * @returns {string}
     */
    getBonificadorNatural : function(tipoBonificadorNatural,nivel) {
        if (tipoBonificadorNatural == TIPO_BONIFICADOR_NATURAL_FISICO) {
            return this.bonificadoresNaturales[nivel].getFisico();
        } else if (tipoBonificadorNatural == TIPO_BONIFICADOR_NATURAL_MENTAL) {
            return this.bonificadoresNaturales[nivel].getMental();
        } else {
            return this.bonificadoresNaturales[nivel].getExtra();
        }
    },

    /**
     *
     * @param {Bono} bono
     * @param {number} indice
     */
    addBonoHabilidadNatural : function(bono, indice) {
        var yaExiste = false;
        for (var i = 0; i < this.bonos.length; i++) {
            if ((bono.getTipo() == this.bonos[i].getTipo()) && (bono.getOrigen() == this.bonos[i].getOrigen()) &&
                (bono.getCategoria() == this.bonos[i].getCategoria()) && (indice == this.bonos[i].indice) && (this.nivel == this.bonos[i].nivel)) {

                this.bonos[i] = bono;
                lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
                yaExiste = true;
                break;
            }
        }

        if (!yaExiste) {
            this.bonos.push(bono);
            lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
        }
    },

    /**
     * Devuelve -1 si no existe
     * @param {number} indice
     * @param {number} nivel
     * @returns {Bono|number}
     */
    getBonoHabilidadNatural : function(indice,nivel) {
        for (var i = 0; i < this.bonos.length; i++) {
            if ((this.bonos[i].getCategoria() == BONO_NATURAL) && (this.bonos[i].indice == indice) && (nivel == this.bonos[i].nivel)) {
                return this.bonos[i];
            }
        }
        return -1;
    },

    /**
     *
     * @param {number} indice
     * @param {number} nivel
     * @returns {string}
     */
    getBonoNovel : function(indice, nivel) {
        return this.bonoNovel[nivel][indice];
    },
//endregion Bonificadores Naturales

//region Puntos de Desarrollo

    /**
     *
     * @returns {number}
     */
    getPDLibres : function() {
        return this.PD_libres;
    },

    /**
     *
     * @returns {number}
     */
    getPDTotales : function() {
        return this.PD_totales;
    },

    /**
     *
     * @param {number} valor
     */
    addPDLibres : function(valor) {
        this.setPDLibres(this.getPDLibres()+valor);
    },

    /**
     *
     * @param {number} valor
     */
    setPDLibres : function(valor) {
        this.PD_libres = valor;
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
    },
//endregion Puntos de Desarrollo

//region Puntos de Construcción
    /**
     * Devuelve todos los PC + aumentos de caracteristica libres que se pueden gastar en cualquier ventaja
     * @returns {number}
     */
    getPCLibres : function() {
        return this.PC_libres_generales + this.getAumentosCaracteristicasLibres();
    },

    /**
     * Devuelve el conjunto de todos los PC
     * @returns {number}
     */
    getPCTotales : function() {
        return this.PC_generales+this.PC_don+this.PC_psiquicas;
    },

    /**
     * repasa todas las desventajas y luego las ventajas, gastando los pc en orden
     */
    updatePC : function() {
        var i,j;
        this.PC_don = 0;
        this.PC_psiquicas = 0;
        this.PC_generales = 3;


        var desactivado = false;
        if (notificacionesActivas) {
            desactivado = true;
            desactivarNotificaciones();
        }

        this.liberaAumentos("PC");

        for (i = 0; i < this.desventajas.length;i++) {
            if (this.desventajas[i].getVentaja().getGrupo() == GRUPO_DON) {
                this.PC_don -= this.desventajas[i].getPc();
            } else if (this.desventajas[i].getVentaja().getGrupo() == GRUPO_PSIQUICAS) {
                this.PC_psiquicas -= this.desventajas[i].getPc();
            } else if (this.desventajas[i].getVentaja().getGrupo() != GRUPO_RAZAS) {
                this.PC_generales -= this.desventajas[i].getPc();
            }
        }

        this.PC_libres_don = this.PC_don;
        this.PC_libres_psiquicas = this.PC_psiquicas;
        this.PC_libres_generales = this.PC_generales;

        for (i = 0; i < this.ventajas.length;i++) {
            if (((this.ventajas[i].getVentaja().getGrupo() == GRUPO_DON)) && !(this.ventajas[i].getVentaja().isBasica)) {
                this.PC_libres_don -= this.ventajas[i].getPc();
            } else if ((this.ventajas[i].getVentaja().getGrupo() == GRUPO_PSIQUICAS) && !(this.ventajas[i].getVentaja().isBasica)) {
                this.PC_libres_psiquicas -= this.ventajas[i].getPc();
            } else if (this.ventajas[i].getVentaja().getGrupo() != GRUPO_RAZAS){
                this.PC_libres_generales -= this.ventajas[i].getPc();
            }
        }

        if (this.PC_libres_don < 0) {
            this.PC_libres_generales += this.PC_libres_don;
            this.PC_libres_don = 0;
        }
        if (this.PC_libres_psiquicas < 0) {
            this.PC_libres_generales += this.PC_libres_psiquicas;
            this.PC_libres_psiquicas = 0;
        }
        if (this.PC_libres_generales < 0) {
            var aumentosAGastar = 0 - this.PC_libres_generales;
            this.PC_libres_generales = 0;
        }

        if (aumentosAGastar > 0) {
            for (i = 0; i < aumentosAGastar; i++) {
                this.gastaAumentoDeCaracteristicas("PC");
            }
        }
        if (desactivado) {
            activarNotificaciones();
        }
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
    },

    /**
     *
     * @returns {number}
     */
    getAumentosCaracteristicasLibres : function() {
        var libres = 0;

        for (var i = 0; i < this.aumentosCaracteristicas.length; i++) {
            if (this.aumentosCaracteristicas[i].isLibre()) {
                libres++;
            }
        }

        return libres;
    },

    /**
     *
     * @param {string} carac
     * @returns {boolean}
     */
    aumentoGastadoEn : function(carac) {
        var tiene = false;

        for (var i = 0; i < this.aumentosCaracteristicas.length; i++) {
            if (this.aumentosCaracteristicas[i].gastadoEnCaracteristica(carac)) {
                tiene = true;
                break;
            }
        }

        return tiene;
    },

    /**
     * Marca como gastado un aumento de caracteristicas para el uso indicado
     * @param {string} uso
     */
    gastaAumentoDeCaracteristicas : function(uso) {
        if (this.getAumentosCaracteristicasLibres() > 0) {
            for (var i = 0; i < this.aumentosCaracteristicas.length; i++) {
                if (this.aumentosCaracteristicas[i].isLibre()) {
                    this.aumentosCaracteristicas[i].gasta(uso);
                    break;
                }
            }
        }
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
    },

    liberaAumentos : function(uso) {
        for (var i = 0; i < this.aumentosCaracteristicas.length; i++) {
            if ((this.aumentosCaracteristicas[i].getUso() == uso) && (this.aumentosCaracteristicas[i].isAnulable())){
                this.aumentosCaracteristicas[i].libera();
            }
        }
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
    },

    recuperaAumentoDeCaracteristicas : function(uso) {
        var recuperado = false;
        for (var i = 0; i < this.aumentosCaracteristicas.length; i++) {
            if ((this.aumentosCaracteristicas[i].getUso() == uso) && (this.aumentosCaracteristicas[i].isAnulable())){
                this.aumentosCaracteristicas[i].libera();
                recuperado = true;
                break;
            }
        }
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
        return recuperado;
    },

    /**
     *
     * @returns {boolean}
     */
    hasAumentoDeCaracteristicasLibre : function() {
        return (this.getAumentosCaracteristicasLibres() > 0);
    },

    /**
     *
     * @param {number} coste
     * @param {string} [grupoPC="PC_libres"]
     */
/*    gastaPC : function(coste, grupoPC) {
        grupoPC = grupoPC || "PC_libres_generales";

        if (coste > this.getPC(grupoPC)) {
            if (coste <= this.getPC(grupoPC)+this.aumentosCaracteristicasLibres) {
                this.aumentosCaracteristicasLibres -= coste -  this.getPC(grupoPC);
                this.setPC(0,grupoPC);
            }
        } else {
            this.setPC(this.getPC(grupoPC)-coste,grupoPC);
        }
    },*/

    /**
     *
     * @param {string} [grupoPC="PC_libres_generales"]
     * @returns {number}
     */
    getPC : function(grupoPC) {
        grupoPC = grupoPC || "PC_libres_generales";
        return this[grupoPC];
    },

    /**
     *
     * @param {number} valor
     * @param {string} [grupoPC="PC_libres"]
     */
    setPC : function(valor, grupoPC) {
        grupoPC = grupoPC || "PC_libres_generales";
        this[grupoPC] = valor;
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
    },
//endregion Puntos de Construcción

//region PX y nivel
    /**
     *
     * @returns {number}
     */
    getPX : function() {
        return this.px;
    },

    /**
     *
     * @param {number} valor
     */
    setPX : function(valor) {
        this.px = valor;
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
    },

    /**
     *
     * @param {number} valor
     */
    addPX : function(valor) {
        this.setPX(this.getPX()+valor);
    },

    /**
     *
     * @returns {number}
     */
    getNivelGeneracionTerminada : function() {
        return this.nivelGeneracionTerminada;
    },

    /**
     *
     * @param numNiveles
     */
    subeNivel : function(numNiveles) {
        if (numNiveles > 0) {
            var i;

            if (this.cambioCategoria) {
                if (this.nivel+numNiveles >= this.cambioCategoria) {
                    numNiveles = this.cambioCategoria-this.nivel;
                    this.setCategoria(this.proximaCategoria);
                    this.cambioCategoria = false;
                }
            }

            this.PD_libresPrevios = this.PD_libres;
            this.PD_libres += 100*numNiveles;
            this.PD_totales += 100*numNiveles;

            for (i = this.nivel+1;i <= this.nivel+numNiveles;i++) {
                if (i % 2 == 0) {
                    this.aumentosCaracteristicas.push(new AumentoCaracteristicas());
                }
                this.bonificadoresNaturales[i] = new BonificadorNatural();
                if (this.bonoNovel) {
                    if (this.categoria.getNombre() == CAT_NOVEL) {
                        this.bonoNovel[i] = ["","","","",""];
                    }
                }
                this.categoriasPorNiveles[i] = this.categoria;
            }

            for (i = 0; i < this.caracteristicas.length;i++) {
                this.caracteristicasPrevias[i] = this.caracteristicas[i];
            }

            for (i = 0; i < this.aumentosCaracteristicas.length;i++) {
                if (this.aumentosCaracteristicas[i].isAnulable()) {
                    this.caracteristicasPrevias[i].fija();
                }
            }

            for (i = 0; i < this.viasMagia.length;i++) {
                this.viasMagia[i].setNivelMinimo(this.viasMagia[i].getNivel());
                this.viasMagia[i].setAnulable(false);
            }
            this.nivelMagiaGastadoPrevio = this.nivelMagiaGastado;

            for (i=0; i < this.allHabilidades.length; i++)  {
                this.allHabilidades[i].subirNivel();
            }

            for (i=0; i < this.ventajas.length; i++) {
                this.ventajas[i].setAnulable(false);
            }

            for (i=0; i < this.desventajas.length; i++) {
                this.desventajas[i].setAnulable(false);
            }

            for (i=0; i < this.tablasArmas.length; i++) {
                this.tablasArmas[i].setAnulable(false);
            }

            for (i=0; i < this.habilidadesKi.length; i++) {
                this.habilidadesKi[i].setAnulable(false);
            }

            for (i=0; i < this.tecnicasKi.length; i++) {
                this.tecnicasKi[i].setAnulable(false);
            }

            for (i=0; i < this.artesMarciales.length; i++) {
                this.artesMarciales[i].setAnulable(false);
            }

            this.nivelGeneracionTerminada = this.nivel;
            this.nivel += numNiveles;

            this.GENERACION_INICIADA = ESTADO_GENERACION_SUBIENDO_NIVEL;
            lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
            lanzarEvento(EVENT_CHARACTER_SECCION_ARTES_MARCIALES);
            lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES);
            lanzarEvento(EVENT_CHARACTER_SECCION_CARACTERISTICAS);
            lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
            lanzarEvento(EVENT_CHARACTER_SECCION_DESVENTAJAS);
            lanzarEvento(EVENT_CHARACTER_SECCION_ELAN);
            lanzarEvento(EVENT_CHARACTER_SECCION_KI);
            lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
            lanzarEvento(EVENT_CHARACTER_SECCION_PERSONALES);
            lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
            lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);
            lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
            lanzarEvento(EVENT_CHARACTER_SECCION_VENTAJAS);
        }
    },

    /**
     *
     * @returns {number}
     */
    getNivel : function() {
        return this.nivel;
    },

//endregion PX y nivel

//region Ventajas y Desventajas
    /**
     *
     * @param {ElementoProhibido} elementoProhibido
     */
    addProhibido : function(elementoProhibido) {
        var existia = false;

        for (var i = 0; i < this.prohibidos.length; i++) {
            if ((this.prohibidos[i].getNombre() == elementoProhibido.getNombre()) &&
                (this.prohibidos[i].getTipo() == elementoProhibido.getTipo()) &&
                (this.prohibidos[i].getOpcion() == elementoProhibido.getOpcion())) {
                this.prohibidos[i].cierraCandado();
                existia = true;
            }
        }

        if (!existia) {
            elementoProhibido.setCandados(1);
            this.prohibidos.push(elementoProhibido);
        }
    },

    /**
     *
     * @param {string} campo
     * @param {string} opcion
     */
    eliminarElementosPCPorCampo : function(campo,opcion) {

        this.ventajas = limpiarArrayObjetosPorCampo(this.ventajas,campo,opcion,this.anularVentaja,this);

        this.desventajas = limpiarArrayObjetosPorCampo(this.desventajas,campo,opcion,this.anularVentaja,this);

        lanzarEvento(EVENT_CHARACTER_SECCION_VENTAJAS);
        lanzarEvento(EVENT_CHARACTER_SECCION_DESVENTAJAS);
    },

    /**
     *
     * @param {ElementoProhibido} elementoProhibido
     */
    eliminaProhibido : function(elementoProhibido) {
        var prohibidosLimpios = [];

        for (var i = 0; i < this.prohibidos.length; i++) {
            if ((this.prohibidos[i].getNombre() == elementoProhibido.getNombre()) &&
                (this.prohibidos[i].getTipo() == elementoProhibido.getTipo()) &&
                (this.prohibidos[i].getOpcion() == elementoProhibido.getOpcion())) {
                this.prohibidos[i].abreCandado();
                if (this.prohibidos[i].getCandados() > 0) {
                    prohibidosLimpios.push (this.prohibidos[i]);
                }
            } else {
                prohibidosLimpios.push (this.prohibidos[i]);
            }
        }

        this.prohibidos = prohibidosLimpios;
    },

    /**
     *
     * @param {Ventaja} ventaja
     * @param {string} opcion
     * @returns {boolean}
     */
    puedeComprar : function(ventaja, opcion) {
        var puede = true;

        if (ventaja.getRepetible() == NO_COMPRABLE) {
            puede = false;
        } else if ((ventaja.getRepetible() == NO_REPETIBLE) &&
            (this.hasVentaja(ventaja))) {
            puede = false;
        } else if (opcion != undefined) {
            if ((ventaja.getRepetible() == REPETIBLE_OPCIONES) && (this.hasVentaja(ventaja,opcion))) {
                puede = false;
            }
        }

        if ((ventaja.getGrupo() == GRUPO_DON) && (!ventaja.isBasica)) {
            if (!personaje_actual.hasFlag(FLAG_DON)) {
                puede = false;
            }
        } else if ((ventaja.getGrupo() == GRUPO_PSIQUICAS) && (!ventaja.isBasica)) {
            if (!personaje_actual.hasFlag(FLAG_PSIQUICO)) {
                puede = false;
            }
        }

        for (var i = 0; i < this.prohibidos.length; i++) {
            var elementoProhibido = this.prohibidos[i];
            if (elementoProhibido.getTipo() == VENTAJA) {
                if (elementoProhibido.getNombre() == ventaja.getNombre()) {
                    if (elementoProhibido.getOpcion() == undefined) {
                        puede = false;
                    } else {
                        if (opcion == elementoProhibido.getOpcion()) {
                            puede = false;
                        }
                    }
                }
            }
        }



        return puede;
    },

    /**
     *
     * @param {Ventaja} ventaja
     * @param {string} opcion
     * @returns {boolean}
     */
    hasVentaja : function(ventaja, opcion) {
        if (opcion != undefined) {
            var elemento;
            if (ventaja.getNombre() in this.ventajas) {
                elemento = this.ventajas[ventaja.getNombre()];
            } else if (ventaja.getNombre() in this.desventajas) {
                elemento = this.desventajas[ventaja.getNombre()];
            }
            if (elemento == undefined) {
                return false;
            } else {
                return (elemento.getOpcion() == opcion);
            }
        } else {
            return ((ventaja.getNombre() in this.ventajas) || (ventaja.getNombre() in this.desventajas));
        }
    },

    /**
     *
     * @param {ElementoPCComprado} ventajaComprada
     */
    removeVentaja : function(ventajaComprada) {
        var ventajasLimpias = [];
        var j;
        var anular = false;
        var paraAnular = "";
        for (j = 0; j < this.ventajas.length;j++) {
            /**
             *
             * @type {ElementoPCComprado}
             */
            var estaVentaja = this.ventajas[j];
            if ((estaVentaja.getVentaja() == ventajaComprada.getVentaja()) &&
                (estaVentaja.pc == ventajaComprada.pc) &&
                (estaVentaja.getOpcion() == ventajaComprada.getOpcion()) &&
                (estaVentaja.getOrigen() == ventajaComprada.getOrigen())) {
                delete this.ventajas[ventajaComprada.getVentaja().getNombre()];
                anular = true;
                paraAnular = estaVentaja;
            } else {
                ventajasLimpias.push(estaVentaja);
            }
        }
        this.ventajas = ventajasLimpias;

        if (anular) {
            this.anularVentaja(paraAnular);
        }

        var desventajasLimpias = [];
        anular = false;
        paraAnular = "";
        for (j = 0; j < this.desventajas.length;j++) {
            var estaDesventaja = this.desventajas[j];
            if ((estaDesventaja.getVentaja() == ventajaComprada.getVentaja()) &&
                (estaDesventaja.getPc() == ventajaComprada.getPc()) &&
                (estaDesventaja.getOpcion() == ventajaComprada.getOpcion()) &&
                (estaDesventaja.getOrigen() == ventajaComprada.getOrigen())) {
                delete this.desventajas[ventajaComprada.getVentaja().getNombre()];
                anular = true;
                paraAnular = estaDesventaja;
            } else {
                desventajasLimpias.push(estaDesventaja);
            }
        }
        this.desventajas = desventajasLimpias;
        if (anular) {
            this.anularVentaja(paraAnular);
        }

        lanzarEvento(EVENT_CHARACTER_SECCION_DESVENTAJAS);
        lanzarEvento(EVENT_CHARACTER_SECCION_VENTAJAS);
    },

    /**
     * Elimina, devolviendo los PC, los elementos PC que requieren el flag necesario
     * @param {string} flag
     */
    anularVentajasPorFlag : function(flag) {
        var flagsNecesarios;
        var i,j;
        for ( i =0; i < this.ventajas.length; i++) {
            flagsNecesarios = this.ventajas[i].getVentaja().getFlagsNecesarios();
            for ( j = 0; j < flagsNecesarios.length;j++) {
                if (flagsNecesarios[j] == flag) {
                    this.anularVentaja(this.ventajas[i]);
                    i--;
                }
            }
        }
        for ( i =0; i < this.desventajas.length; i++) {
            flagsNecesarios = this.desventajas[i].getVentaja().getFlagsNecesarios();
            for ( j = 0; j < flagsNecesarios.length;j++) {
                if (flagsNecesarios[j] == flag) {
                    this.anularVentaja(this.desventajas[i]);
                    i--;
                }
            }
        }
    },

    /**
     *
     * @param {Ventaja} ventaja
     * @param {number} coste
     * @param {string} opcion
     */
    aplicarVentaja : function(ventaja, coste, opcion) {
        var delegado = ventaja.getDelegadoVentaja();

        //incompatibilidades
        var incompatibilidades = ventaja.getIncompatibles();
        for (var i = 0; i < incompatibilidades.length; i++) {
            this.addProhibido(incompatibilidades[i]);
        }

        //efectos
        if (delegado.length == 1) {
            delegado[0](coste, opcion, true);
        } else if (delegado.length == 2) {
            delegado[0](coste, opcion, true, delegado[1]);
        } else if (delegado.length == 3) {
            delegado[0](coste, opcion, true, delegado[1], delegado[2]);
        }
        this.updatePC();
    },

    /**
     *
     * @param {ElementoPCComprado} ventajaComprada
     */
    anularVentaja : function(ventajaComprada) {
        var delegado = ventajaComprada.getVentaja().getDelegadoVentaja();

/*        this.PC_libres_generales += parseInt(ventajaComprada.getRepartoCostes().getLibres());
        this.PC_libres_don += parseInt(ventajaComprada.getRepartoCostes().getDon());
        this.PC_libres_psiquicas += parseInt(ventajaComprada.getRepartoCostes().getPsiquica());
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);*/

        //incompatibilidades
        var incompatibilidades = ventajaComprada.getVentaja().getIncompatibles();
        for (var i = 0; i < incompatibilidades.length; i++) {
            this.eliminaProhibido(incompatibilidades[i]);
        }

        //efectos
        if (delegado.length == 1) {
            delegado[0](ventajaComprada.getPc(), ventajaComprada.getOpcion(), false);
        } else if (delegado.length == 2) {
            delegado[0](ventajaComprada.getPc(), ventajaComprada.getOpcion(), false, delegado[1]);
        } else if (delegado.length == 3) {
            delegado[0](ventajaComprada.getPc(), ventajaComprada.getOpcion(), false, delegado[1], delegado[2]);
        }
        this.updatePC();
        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
    },

    /**
     *
     * @param {Ventaja} ventaja
     * @param {number} coste
     * @param {string} opcion
     * @param {string} origen
     * @param {boolean} isVentaja
     * @param {RepartoCostes} repartoCostes
     * @param {boolean} ordenar
     */
    addVentaja : function(ventaja, coste, opcion, origen, isVentaja, repartoCostes, ordenar) {
        var ventajaComprada = new ElementoPCComprado(ventaja,coste, opcion, origen);
        ventajaComprada.setRepartoCostes(repartoCostes);

        if (isVentaja) {
            this.ventajas.push(ventajaComprada);
            this.ventajas[ventaja.getNombre()] = ventajaComprada;
            if (ordenar) {
                this.ordenarElementosPC();
            }
            lanzarEvento(EVENT_CHARACTER_SECCION_VENTAJAS);
        } else {
            this.desventajas.push(ventajaComprada);
            this.desventajas[ventaja.getNombre()] = ventajaComprada;
            if (ordenar) {
                this.ordenarElementosPC();
            }
            lanzarEvento(EVENT_CHARACTER_SECCION_DESVENTAJAS);
        }
        this.aplicarVentaja(ventaja, coste, opcion);
    },

    /**
     *
     */
    ordenarElementosPC : function() {
        this.ventajas.sort(SortVentajaComprada);
        this.desventajas.sort(SortVentajaComprada);
    },

    /**
     *
     * @returns {ElementoPCComprado[]}
     */
    getVentajas : function() {
        return this.ventajas;
    },

    /**
     *
     * @returns {ElementoPCComprado[]}
     */
    getDesventajas : function() {
        return this.desventajas;
    },

//endregion Ventajas y Desventajas


//region Habilidades Primarias: Combate

//region Artes Marciales
    /**
     *
     * @param {string} nombreArteMarcial
     */
    addArteMarcial : function(nombreArteMarcial)  {
        var arteMarcial = getArteMarcial(nombreArteMarcial);

        var bonos = arteMarcial.getBonos();
        for (var i = 0; i < bonos.length;i++) {
            this.addBono(bonos[i], false, true);
        }

        this.addBono(
            new Bono(BONO_CM,BONO_CM,arteMarcial.getBonoCM(),"",false,BONO_INNATO,arteMarcial.getNombre()),
            false,
            false
        );

        this.artesMarciales.push(new ArteMarcialComprada(arteMarcial));
        lanzarEvento(EVENT_CHARACTER_SECCION_ARTES_MARCIALES);
        lanzarEvento(EVENT_CHARACTER_SECCION_KI);
    },

    /**
     *
     * @param {string} nombreArteMarcial
     */
    removeArteMarcial : function(nombreArteMarcial)  {
        var arteMarcial = getArteMarcial(nombreArteMarcial);
        var i;

        var bonos = arteMarcial.getBonos();
        for (i = 0; i < bonos.length;i++) {
            this.removeBono(bonos[i], true);
        }

        this.removeBono(new Bono(BONO_CM, BONO_CM, arteMarcial.getBonoCM(), "", false, BONO_INNATO, arteMarcial.getNombre()), true);

        var artesLimpias = [];
        for (i = 0; i < this.artesMarciales.length; i++) {
            if (this.artesMarciales[i].getNombre() != nombreArteMarcial) {
                artesLimpias.push(this.artesMarciales[i]);
            }
        }
        this.artesMarciales = artesLimpias;
        lanzarEvento(EVENT_CHARACTER_SECCION_ARTES_MARCIALES);
        lanzarEvento(EVENT_CHARACTER_SECCION_KI);
    },

    /**
     *
     * @param {string} nombreArteMarcial
     * @returns {boolean}
     */
    hasArteMarcial : function(nombreArteMarcial)  {
        for (var i = 0; i < this.artesMarciales.length; i++) {
            if (this.artesMarciales[i].getNombre() == nombreArteMarcial) {
                return true;
            }
        }
        return false;
    },

    /**
     *
     * @returns {ArteMarcialComprada[]}
     */
    getArtesMarciales : function() {
        return this.artesMarciales;
    },

    /**
     *
     * @returns {number}
     */
    numArtesMarciales : function()  {
        return this.artesMarciales.length;
    },

    /**
     *
     * @returns {number}
     */
    maxArtesMarciales : function()  {
        var sumaAtaqueDefensa = this[HB_ATAQUE].valorFinalActual();
        var parada = this[HB_PARADA].valorFinalActual();
        var esquiva = this[HB_ESQUIVA].valorFinalActual();
        sumaAtaqueDefensa += (parada > esquiva) ? parada : esquiva;
        if (sumaAtaqueDefensa < 0) {
            sumaAtaqueDefensa = 0;
        }
        return Math.floor(sumaAtaqueDefensa/ATAQUE_DEFENSA_PARA_ARTE_MARCIAL);
    },

    /**
     *
     * @returns {PuedeComprar}
     */
    puedeComprarNuevaArteMarcial : function() {
        return new PuedeComprar((this.numArtesMarciales() < this.maxArtesMarciales()),ALERT_ARTE_MARCIAL_ATAQUE_DEFENSA_BAJOS);
    },
//endregion Artes Marciales

//region Manejo de armas y tablas de armas
    /**
     *
     * @param {string} nombreArma
     * @returns {boolean}
     */
    hasArmaManejada : function(nombreArma)  {
        for (var i = 0; i < this.manejoArmas.length; i++) {
            if (this.manejoArmas[i].getNombre() == nombreArma) {
                return true;
            }
        }
        return false;
    },

    /**
     *
     * @param {string}nombreArma
     */
    removeArmaManejada : function(nombreArma)  {
        var armasLimpias = [];
        for (var i = 0; i < this.manejoArmas.length; i++) {
            if (this.manejoArmas[i].getNombre() != nombreArma) {
                armasLimpias.push(this.manejoArmas[i]);
            }
        }
        this.manejoArmas = armasLimpias;
        lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
    },

    /**
     *
     * @param {string} nombreNuevaArma
     * @param {string} nombreArmaAntigua
     */
    comprobarCambiosPDArmaInicial : function(nombreArmaAntigua, nombreNuevaArma)  {
        if ((nombreNuevaArma == ARMA_SIN_ARMAS) && (nombreArmaAntigua != ARMA_SIN_ARMAS)) {
            if (this.artesMarciales.length > 0) {
                this.PD_libres += costeArteMarcial(true);
                lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
            }
        } else if ((nombreNuevaArma != ARMA_SIN_ARMAS) && (nombreArmaAntigua == ARMA_SIN_ARMAS)) {
            if (this.artesMarciales.length > 0) {
                this.PD_libres -= costeArteMarcial(true); 
                lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
            }
        }
    },

    /**
     *
     * @param {string} nombreArma
     * @param {boolean} isInicial
     */
    addArmaManejada : function(nombreArma, isInicial)  {
        if (isInicial) {
            if (this.armaInicial != undefined) {
                this.removeArmaManejada(this.armaInicial);
            }
            this.manejoArmas.push(getArma(nombreArma));
            var armaAnterior = this.armaInicial;
            this.armaInicial = nombreArma;
            this.comprobarCambiosPDArmaInicial(armaAnterior,nombreArma);
        } else {
            if (!this.hasArmaManejada(nombreArma)) {
                this.manejoArmas.push(getArma(nombreArma));
            }
        }
        lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
    },

    /**
     *
     * @param {boolean} separarMixtos
     * @returns {string[]}
     */
    getTiposArmasConocidos : function(separarMixtos)  {
        var tiposConocidos = [];
        for (var i = 0; i < this.manejoArmas.length; i++) {
            var tipo = [];
            if (!separarMixtos) {
                tipo[0] = this.manejoArmas[i].getCategoria();
            } else {
                tipo = this.manejoArmas[i].getCategorias();
            }
            var yaExiste = false;
            for (var k = 0; k < tipo.length;k++) {
                for (var j=0; j < tiposConocidos.length; j++) {
                    if (tiposConocidos[j] == tipo[k]) {
                        yaExiste = true;
                        break;
                    }
                }
                if (!yaExiste) {
                    tiposConocidos.push(tipo[k]);
                }
            }
        }
        return tiposConocidos;
    },

    /**
     *
     * @param {string} nombreTabla
     */
    addTablaArmas : function(nombreTabla)  {
        var tabla = getTablaArmas(nombreTabla);
        var i;
        var opciones;

        switch (tabla.getTipoTabla()) {
            case TABLA_ESPECIAL :

                break;
            case TABLA_MANEJO_CATEGORIA :
                opciones = tabla.getOpciones();
                for (i = 0; i < opciones.length;i++) {
                    var nombreTipo = opciones[i];
                    this.addTipoArmaManejada(nombreTipo);
                }

                break;
            case TABLA_MANEJO_ARMAS :
                opciones = tabla.getOpciones();
                for (i = 0; i < opciones.length;i++) {
                    var nombreArma = opciones[i];
                    this.addArmaManejada(nombreArma,false);
                }

                break;
            case TABLA_SIN_EFECTO :
            default:
                break;
        }


        this.tablasArmas.push(new TablaArmasComprada(tabla,""));
        lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
    },

    /**
     *
     * @param {string} nombreTabla
     * @param {string} opcion
     */
    addTablaArmasEspecial : function(nombreTabla, opcion)  {
        /**
         *
         * @type {TablaArmasComprada}
         */
        var tabla = new TablaArmasComprada(getTablaArmas(nombreTabla),opcion);

        if ((tabla.getOpciones()[0] == TABLA_ARMA_SIMILAR) ||
            (tabla.getOpciones()[0] == TABLA_ARMA_MIXTA) ||
            (tabla.getOpciones()[0] == TABLA_ARMA_DISTINTA)) {
            this.addArmaManejada(opcion,false);
        } else if (tabla.getOpciones()[0] == TABLA_TIPOLOGIA) {
            this.addTipoArmaManejada(opcion);
        }

        this.tablasArmas.push(tabla);
        lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
    },

    /**
     *
     * @param {string} nombre
     * @returns {TablaArmasComprada}
     * @param {string} opcion
     */
    getTablaArmasComprada : function(nombre,opcion) {
        for (var i = 0; i < this.tablasArmas.length; i++) {
            if ((this.tablasArmas[i].getNombre() == nombre) && (this.tablasArmas[i].getOpcion() == opcion)) {
                return this.tablasArmas[i];
            }
        }
        throw ERR_TABLA_DESCONOCIDA + ": " + nombre + " (" + opcion + ")";
    },

    /**
     *
     * @param {string} nombreTabla
     * @param {string} opcionTabla
     */
    removeTablaArmas : function(nombreTabla,opcionTabla)  {
        var tabla = this.getTablaArmasComprada(nombreTabla,opcionTabla);
        var i;

        switch (tabla.getTipoTabla()) {
            case TABLA_ESPECIAL :
                if ((tabla.getOpciones()[0] == TABLA_ARMA_SIMILAR) ||
                    (tabla.getOpciones()[0] == TABLA_ARMA_MIXTA) ||
                    (tabla.getOpciones()[0] == TABLA_ARMA_DISTINTA)) {
                    this.removeArmaManejada(tabla.getOpcion());
                } else if (tabla.getOpciones()[0] == TABLA_TIPOLOGIA) {
                    this.removeTipoArmaManejada(tabla.getOpcion());
                }
                break;
            case TABLA_MANEJO_CATEGORIA :
                for (i = 0; i < tabla.getOpciones().length;i++) {
                    var nombreTipo = tabla.getOpciones()[i];
                    this.removeTipoArmaManejada(nombreTipo);
                }
                break;
            case TABLA_MANEJO_ARMAS :
                for (i = 0; i < tabla.getOpciones().length;i++) {
                    var nombreArma = tabla.getOpciones()[i];
                    this.removeArmaManejada(nombreArma);
                }
                break;
            case TABLA_SIN_EFECTO :
            default:
                break;
        }

        var tablasLimpias = [];
        for (i = 0; i < this.tablasArmas.length;i++) {
            if (((this.tablasArmas[i].getNombre() != tabla.getNombre()) || (this.tablasArmas[i].getOpcion() != tabla.getOpcion()))) {
                tablasLimpias.push(this.tablasArmas[i]);
            }
        }

        this.tablasArmas = tablasLimpias;
        lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
    },

    /**
     *
     * @param {string} nombreTabla
     * @returns {boolean}
     */
    hasTablaArmas : function(nombreTabla)  {
        for (var i = 0; i < this.tablasArmas.length;i++) {
            if (this.tablasArmas[i].getNombre() == nombreTabla) {
                return true;
            }
        }
        return false;
    },

    /**
     *
     * @param {string} tipoArma
     * @returns {boolean}
     */
    hasTipoArmaManejada : function(tipoArma)  {
        for (var i = 0; i < this.manejoTiposArmas.length; i++) {
            if (this.manejoTiposArmas[i] == tipoArma) {
                return true;
            }
        }
        return false;
    },

    /**
     *
     * @param {string} tipoArma
     */
    addTipoArmaManejada : function(tipoArma)  {
        if (!this.hasTipoArmaManejada(tipoArma)) {
            this.manejoTiposArmas.push(tipoArma);
            lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
        }
    },

    /**
     *
     * @param {string} tipoArma
     */
    removeTipoArmaManejada : function(tipoArma)  {
        var tiposLimpios = [];
        for (var i = 0; i < this.manejoTiposArmas.length;i++) {
            if (this.manejoTiposArmas[i] != tipoArma) {
                tiposLimpios.push(tipoArma);
            }
        }
        this.manejoTiposArmas = tiposLimpios;
        lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
    },
//endregion Manejo de armas y tablas de armas

    /**
     *
     * @param {Categoria} nuevaCategoria
     */
    ajustarCambiosPDPorCambiosCategoria : function(nuevaCategoria)  {
        var ajusteArteMarcial = COSTE_ARTE_MARCIAL - COSTE_TAO_ARTE_MARCIAL;
        var ajustePrimeraArteMarcial = COSTE_ARTE_MARCIAL/2 - COSTE_TAO_ARTE_MARCIAL/2;
        var i;
        if ((nuevaCategoria.getNombre() == CAT_MAESTRO_ARMAS) && (this.categoria.getNombre() != CAT_MAESTRO_ARMAS)) {
            for (i = 0; i < this.tablasArmas.length; i++) {
                if ((this.tablasArmas[i].getCategoriaTabla() == CATEGORIA_TABLA_ARMAS_GENERALES) ||
                    (this.tablasArmas[i].getCategoriaTabla() == CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS) ||
                    (this.tablasArmas[i].getCategoriaTabla() == CATEGORIA_TABLA_ARMAS_ESTILOS)) {
                    this.PD_libres += this.tablasArmas[i].tablaArmas.getCoste() / 2;
                    lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
                }
            }
        } else if ((nuevaCategoria.getNombre() != CAT_MAESTRO_ARMAS) && (this.categoria.getNombre() == CAT_MAESTRO_ARMAS)) {
            for (i = 0; i < this.tablasArmas.length; i++) {
                if ((this.tablasArmas[i].getCategoriaTabla() == CATEGORIA_TABLA_ARMAS_GENERALES) ||
                    (this.tablasArmas[i].getCategoriaTabla() == CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS) ||
                    (this.tablasArmas[i].getCategoriaTabla() == CATEGORIA_TABLA_ARMAS_ESTILOS)) {
                    if (this.PD_libres - this.tablasArmas[i].tablaArmas.getCoste() / 2 < 0) {
                        alert("Eliminada tabla de armas " + this.tablasArmas[i].getNombre() + " por PDs insuficientes");
                        this.removeTablaArmas(this.tablasArmas[i].getNombre(),this.tablasArmas[i].getOpcion());
                    } else {
                        this.PD_libres -= this.tablasArmas[i].tablaArmas.getCoste() / 2;
                        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
                    }
                }
            }
        } else if ((nuevaCategoria.getNombre() == CAT_TAO) && (this.categoria.getNombre() != CAT_TAO)) {
            for (i = 0; i < this.artesMarciales.length; i++) {
                if ((i == 0) && (this.armaInicial == ARMA_SIN_ARMAS)) {
                    this.PD_libres += ajustePrimeraArteMarcial;
                } else {
                    this.PD_libres += ajusteArteMarcial;
                }
            }
            lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
        } else if ((nuevaCategoria.getNombre() != CAT_TAO) && (this.categoria.getNombre() == CAT_TAO)) {
            for (i = 0; i < this.artesMarciales.length; i++) {
                if ((this.artesMarciales.length == 1) && (this.armaInicial == ARMA_SIN_ARMAS)) {
                    if (this.PD_libres - ajustePrimeraArteMarcial < 0) {
                        alert("Eliminada arte marcial " + this.artesMarciales[i].getNombre() + " por PDs insuficientes");
                        this.removeArteMarcial(this.artesMarciales[i].getNombre());
                    } else {
                        this.PD_libres -= ajustePrimeraArteMarcial;
                        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
                    }
                } else {
                    if (this.PD_libres - ajusteArteMarcial < 0) {
                        alert("Eliminada arte marcial " + this.artesMarciales[i].getNombre() + " por PDs insuficientes");
                        this.removeArteMarcial(this.artesMarciales[i].getNombre());
                    } else {
                        this.PD_libres -= ajusteArteMarcial;
                        lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
                    }
                }
            }
        }
    },

    //region Ki
    /**
     *
     * @param {boolean} notificar
     */
    updateKiInicial : function (notificar)  {
        this[HB_KI_AGI].setValorInicial(valorKiBase(this.getCaracteristica(AGI)));
        this[HB_KI_CON].setValorInicial(valorKiBase(this.getCaracteristica(CON)));
        this[HB_KI_DES].setValorInicial(valorKiBase(this.getCaracteristica(DES)));
        this[HB_KI_FUE].setValorInicial(valorKiBase(this.getCaracteristica(FUE)));
        this[HB_KI_POD].setValorInicial(valorKiBase(this.getCaracteristica(POD)));
        this[HB_KI_VOL].setValorInicial(valorKiBase(this.getCaracteristica(VOL)));

        this[HB_ACUM_KI_AGI].setValorInicial(acumulacionKiBase(this.getCaracteristica(AGI)));
        this[HB_ACUM_KI_DES].setValorInicial(acumulacionKiBase(this.getCaracteristica(DES)));
        this[HB_ACUM_KI_CON].setValorInicial(acumulacionKiBase(this.getCaracteristica(CON)));
        this[HB_ACUM_KI_FUE].setValorInicial(acumulacionKiBase(this.getCaracteristica(FUE)));
        this[HB_ACUM_KI_POD].setValorInicial(acumulacionKiBase(this.getCaracteristica(POD)));
        this[HB_ACUM_KI_VOL].setValorInicial(acumulacionKiBase(this.getCaracteristica(VOL)));

        if (notificar)
        lanzarEvento(EVENT_CHARACTER_SECCION_KI);
    },

    /**
     *
     * @param {string} nombreHabilidadKi
     * @param {boolean} ignoraRequisitos
     * @param {boolean} anulable
     */
    addHabilidadKi : function(nombreHabilidadKi, ignoraRequisitos, anulable) {
        if (!this.hasHabilidadKi(nombreHabilidadKi)) {
            var habilidadKi = new HabilidadKiComprada(getHabilidadKi(nombreHabilidadKi),anulable, ignoraRequisitos);
            this.habilidadesKi.push(habilidadKi);
            this.habilidadesKi[habilidadKi.getNombre()] = habilidadKi;

            habilidadKi.getEfecto()(true);

            lanzarEvento(EVENT_CHARACTER_SECCION_KI);
        }
    },

    /**
     *
     * @param {string} nombreHabilidadKi
     */
    removeHabilidadKi : function(nombreHabilidadKi) {
        if (this.hasHabilidadKi(nombreHabilidadKi)) {
            var yaDesactivadas = true;
            if (notificacionesActivas) {
                desactivarNotificaciones();
                yaDesactivadas = false;
            }

            var habilidadKi = this.getHabilidadKi(nombreHabilidadKi);
            var i;
            var j;
            var habKiLimpias = [];

            for (i = 0; i < this.habilidadesKi.length;i++) {
                if (this.habilidadesKi[i].getNombre() != nombreHabilidadKi) {
                    habKiLimpias.push(this.habilidadesKi[i]);
                    habKiLimpias[this.habilidadesKi[i].getNombre()] = this.habilidadesKi[i];
                } else {
                    this.habilidadesKi[i].getEfecto()(false);
                }
            }
            this.habilidadesKi = habKiLimpias;

            for (i = 0; i < this.habilidadesKi.length;i++) {
                var req = this.habilidadesKi[i].getRequisitos();
                for (j = 0; j < req.length; j++) {
                    if (req[j] == habilidadKi.getNombre()) {
                        this.addCMGastado(-1 * this.habilidadesKi[i].getCosteCM());
                        this.removeHabilidadKi(this.habilidadesKi[i].getNombre());
                        i--;
                    }
                }
            }

            if (!yaDesactivadas) {
                activarNotificaciones();
            }
            lanzarEvento(EVENT_CHARACTER_SECCION_KI);
        }
    },

    /**
     *
     * @returns {HabilidadKiComprada[]}
     */
    getHabilidadesKi : function() {
        return this.habilidadesKi;
    },

    /**
     *
     * @returns {TecnicaKiComprada[]}
     */
    getTecnicasKi : function() {
        return this.tecnicasKi;
    },

    /**
     *
     * @param {string} nombreHabilidad
     * @returns {HabilidadKiComprada}
     */
    getHabilidadKi : function(nombreHabilidad) {
        return this.habilidadesKi[nombreHabilidad];
    },

    /**
     *
     * @param {string} nombreHabilidad
     * @returns {boolean}
     */
    hasHabilidadKi : function(nombreHabilidad) {
        return this.habilidadesKi[nombreHabilidad] != undefined;
    },

    /**
     *
     * @param {TecnicaKi} tecnicaKi
     */
    addTecnicaKi : function(tecnicaKi) {
        if (!this.hasTecnicaKi(tecnicaKi.getNombre())) {
            this.tecnicasKi.push(new TecnicaKiComprada(tecnicaKi));
            this.numTecnicas["nivel"+tecnicaKi.getNivel()]++;
            lanzarEvento(EVENT_CHARACTER_SECCION_KI);
        }
    },

    /**
     *
     * @param {TecnicaKi} tecnicaKi
     */
    puedeComprarTecnicaKi : function(tecnicaKi) {
        var puede = true;

        if (tecnicaKi.getCosteCM() > this.getCMTotal()-this.getCMGastado()) {
            puede = false;
        } else if (!this.hasFlag(FLAG_PUEDE_USAR_TECNICAS)) {
            puede = false;
        } else if (this.hasTecnicaKi(tecnicaKi.getNombre())) {
            puede = false;
        } else {
            var nivelTecnica = tecnicaKi.getNivel();

            if (nivelTecnica == 2) {
                puede = (this.numTecnicas["nivel1"] >= 2);
            } else if (nivelTecnica == 3) {
                puede = (this.numTecnicas["nivel2"] >= 2);
            }

            //TODO limitar por atadura elemental?
        }
        return puede;
    },

    /**
     *
     * @param {string} nombreTecnicaKi
     */
    removeTecnicaKi : function(nombreTecnicaKi) {
        if (this.hasTecnicaKi(nombreTecnicaKi)) {
            this.numTecnicas["nivel"+this.getTecnicaKi(nombreTecnicaKi).getNivel()]--;
            this.tecnicasKi = limpiarArrayObjetosPorFuncion(this.tecnicasKi,comparaGetNombre,nombreTecnicaKi);
            lanzarEvento(EVENT_CHARACTER_SECCION_KI);
        }
    },

    getTecnicaKi : function(nombreTecnicaKi) {
        for (var i = 0;i < this.tecnicasKi.length ;i++) {
            if (this.tecnicasKi[i].getNombre() == nombreTecnicaKi) {
                return this.tecnicasKi[i];
            }
        }
        throw ERR_TECNICA_KI_DESCONOCIDA + ": " + nombreTecnicaKi;
    },

    /**
     *
     * @param {string} nombreTecnica
     * @returns {boolean}
     */
    hasTecnicaKi : function(nombreTecnica) {
        for (var i = 0;i < this.tecnicasKi.length ;i++) {
            if (this.tecnicasKi[i].getNombre() == nombreTecnica) {
                return true;
            }
        }
        return false;
    },

    /**
     *
     * @return {number}
     */
    getCMTotal : function() {
        var bonos = personaje_actual.getBonos(BONO_CM, BONO_CM, CATEGORIA_BONO_CUALQUIERA);
        var valor = 0;
        for (var i = 0; i < bonos.length; i++) {
            valor += bonos[i].getBonoParaNivel(this.nivel,personaje_actual);
        }
        return valor;
    },

    /**
     *
     * @returns {number}
     */
    getCMGastado : function() {
        return this.CMGastado;
    },

    /**
     *
     * @param {number} valor
     */
    addCMGastado : function(valor) {
        this.CMGastado += valor;
        lanzarEvento(EVENT_CHARACTER_SECCION_KI);
    },

    //endregion Ki

    /**
     *
     * @returns {number}
     */
    maxPDsAtaqueDefensa : function()  {
        return Math.floor(this.PD_totales / 2);
    },

    /**
     *
     * @returns {number}
     */
    gastoActualPDsAtaqueDefensa : function()  {
        return this[HB_ATAQUE].getPDinvertidos() + this[HB_ESQUIVA].getPDinvertidos() + this[HB_PARADA].getPDinvertidos();
    },

    /**
     *
     * @returns {string}
     */
    getArmaInicial : function() {
        return this.armaInicial;
    },
//endregion Habilidades Primarias: Combate

//region Habilidades Primarias: Magia

    /**
     *
     * @param {boolean} notificar
     */
    updateZeonBase : function (notificar)  {
        var valorBase = 0;

        switch (this.getCaracteristica(POD)) {
            case 1 : valorBase = 5;
                break;
            case 2 : valorBase = 20;
                break;
            case 3 : valorBase = 40;
                break;
            case 4  : valorBase = 55;
                break;
            case 5  : valorBase = 70;
                break;
            case 6  : valorBase = 85;
                break;
            case 7  : valorBase = 95;
                break;
            case 8  : valorBase = 110;
                break;
            case 9  : valorBase = 120;
                break;
            case 10  : valorBase = 135;
                break;
            case 11  : valorBase = 150;
                break;
            case 12  : valorBase = 160;
                break;
            case 13  : valorBase = 175;
                break;
            case 14 : valorBase =  185;
                break;
            case 15  : valorBase = 200;
                break;
            case 16  : valorBase = 215;
                break;
            case 17  : valorBase = 225;
                break;
            case 18  : valorBase = 240;
                break;
            case 19  : valorBase = 250;
                break;
            case 20  : valorBase = 265;
                break;
        }

        this[HB_ZEON].setValorInicial(valorBase);
        if (notificar)
            lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
    },


    /**
     *
      * @param {boolean} notificar
     */
    updateACTBase : function (notificar)  {
        var valorPOD = personaje_actual.getCaracteristica(POD);
        var valorBase = 0;

        if (valorPOD <= 4) {
            valorBase = 0;
        } else if (valorPOD <= 7) {
            valorBase = 5;
        } else if (valorPOD <= 11) {
            valorBase = 10;
        } else if (valorPOD <= 14) {
            valorBase = 15;
        } else if (valorPOD == 15) {
            valorBase = 20;
        } else if (valorPOD <= 17) {
            valorBase = 25;
        } else if (valorPOD <= 19) {
            valorBase = 30;
        } else if (valorPOD == 20) {
            valorBase = 35;
        }

        this[HB_ACT].setValorInicial(valorBase);
        if (notificar)
            lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
    },
//endregion Habilidades Primarias: Magia

//region Habilidades Primarias: Psíquica
    /**
     *
     * @returns {number}
     */
    getCVGastados : function()  {
        return this.cv_gastados;
    },

    /**
     *
     * @param {number} valor
     */
    setCVGastados : function(valor) {
        this.cv_gastados = valor;
        lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
    },

    /**
     *
     * @param {number} valor
     */
    addCVGastados : function(valor) {
        this.setCVGastados(this.getCVGastados()+valor);
    },

    /**
     *
     * @param {string} nombreDisciplina
     * @returns {boolean}
     */
    hasDisciplina : function(nombreDisciplina)  {
        for (var i = 0; i < this.disciplinasPsiquicas.length; i++) {
            if (this.disciplinasPsiquicas[i].getNombre() == nombreDisciplina) {
                return true;
            }
        }
        return false;
    },

    /**
     *
     * @param {DisciplinaPsiquica} disciplina
     */
    addDisciplina : function(disciplina)  {
        this.disciplinasPsiquicas.push(new DisciplinaPsiquicaAccedida(disciplina));
        lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
    },

    /**
     *
     * @returns {DisciplinaPsiquicaAccedida[]}
     */
    getDisciplinasPsiquicas  :function() {
        return this.disciplinasPsiquicas;
    },

    /**
     *
     * @returns {string[]}
     */
    getAccesoDisciplinas : function() {
        return this.acceso_disciplinas;
    },

    hasAccesoDisciplina : function(nombreDisciplina) {
        var tiene;
        if (this.hasFlag(FLAG_PSIQUICO)) {
            if (this.hasFlag(FLAG_ACCESO_TODAS_DISCIPLINAS)) {
                tiene = true;
            } else {
                tiene = false;
                for (var i = 0; i < this.acceso_disciplinas.length; i++) {
                    if (this.acceso_disciplinas[i] == nombreDisciplina) {
                        tiene = true;
                    }
                }
            }
        } else {
            tiene = false;
        }
        return tiene;
    },

    /**
     *
     * @param {string} nombreDisciplina
     */
    addAccesoDisciplina : function(nombreDisciplina) {
        if (!this.hasAccesoDisciplina(nombreDisciplina)) {
            this.acceso_disciplinas.push(nombreDisciplina);
        }
    },

    /**
     *
     * @param {string[]} valor
     */
    setAccesoDisciplinas : function(valor) {
        this.acceso_disciplinas = valor;
    },

    /**
     *
     * @returns {number}
     */
    getPotencialPsiquicoBase : function ()  {
        return getPotencialPsiquicoPorVoluntad(this.getCaracteristica(VOL));
    },

    /**
     *
     * @returns {number}
     */
    getInnatosPsiquicos : function() {
        return this.innatosPsiquicos;
    },

    /**
     *
     * @param {number} valor
     */
    setInnatosPsiquicos : function(valor) {
        this.innatosPsiquicos = valor;
        lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
    },

    /**
     *
     * @param {number} valor
     */
    addInnatoPsiquico : function(valor) {
        this.setInnatosPsiquicos(this.innatosPsiquicos+valor);
    },

    /**
     *
     */
    updateCVBase : function()  {
        var valorBase = 0;

        if (this.hasFlag(FLAG_PSIQUICO)) {
            valorBase = 1;
        } else {
            valorBase = 0;
        }
        this[HB_CV].setValorInicial(valorBase);
        lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
    },

    /**
     *
     * @param {DisciplinaPsiquica} disciplina
     */
    removeDisciplina : function(disciplina)  {
        var discLimpias = [];
        var i;

        for (i = 0; i < this.disciplinasPsiquicas.length; i++) {
            if (this.disciplinasPsiquicas[i].getNombre() != disciplina.getNombre()) {
                discLimpias.push(this.disciplinasPsiquicas[i]);
            }
        }

        this.disciplinasPsiquicas = discLimpias;

        var podeLimpios = [];
        for (i = 0; i < this.poderesPsiquicosDominados.length;i++) {
            if (this.poderesPsiquicosDominados[i].getDisciplina() != disciplina) {
                podeLimpios.push(this.poderesPsiquicosDominados[i])
            } else {
                if (this.poderesPsiquicosDominados[i].getFortalecimiento() > 0) {
                    this.cv_gastados -= this.poderesPsiquicosDominados[i].getFortalecimiento();
                }
                this.cv_gastados--;
            }
        }

        this.poderesPsiquicosDominados = podeLimpios;
        lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
    },

    /**
     *
     * @param {DisciplinaPsiquica} disciplina
     * @param {PoderPsiquico} poder
     */
    addPoderDominado : function(disciplina, poder)  {
        if ((this.hasDisciplina(disciplina.getNombre())) || (disciplina.isLibre())) {
            this.poderesPsiquicosDominados.push(new PoderPsiquicoDominado(poder,disciplina));
            lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
        }
    },

    /**
     *
     * @param {DisciplinaPsiquica} disciplina
     * @param {string} nombrePoder
     * @returns {boolean}
     */
    hasPoderDominado : function(disciplina, nombrePoder)  {
        for (var i = 0; i < this.poderesPsiquicosDominados.length;i++) {
            if ( (this.poderesPsiquicosDominados[i].getDisciplina() == disciplina) && (this.poderesPsiquicosDominados[i].getPoder().getNombre() == nombrePoder)) {
                return true;
            }
        }
        return false;
    },

    /**
     *
     * @param {DisciplinaPsiquica} disciplina
     * @returns {Array}
     */
    getPoderesDominadosDisciplina : function(disciplina)  {
        var poderes = [];
        for (var i = 0; i < this.poderesPsiquicosDominados.length;i++) {
            if (this.poderesPsiquicosDominados[i].getDisciplina() == disciplina) {
                poderes.push(this.poderesPsiquicosDominados[i])
            }
        }
        return poderes;
    },

    /**
     *
     * @param {DisciplinaPsiquica} disciplina
     * @returns {number}
     */
    maxNivelDominadoDisciplina : function(disciplina)  {
        var maxNivel = 0;
        for (var i = 0; i < this.poderesPsiquicosDominados.length;i++) {
            if (this.poderesPsiquicosDominados[i].getDisciplina() == disciplina) {
                if (this.poderesPsiquicosDominados[i].getPoder().getNivel() > maxNivel) {
                    maxNivel = this.poderesPsiquicosDominados[i].getPoder().getNivel();
                }
            }
        }
        return maxNivel;
    },

    /**
     *
     * @param {DisciplinaPsiquica} disciplina
     * @param {PoderPsiquico} poder
     */
    removePoderDominado : function(disciplina, poder)  {
        var podeLimpios = [];
        for (var i = 0; i < this.poderesPsiquicosDominados.length;i++) {
            if ((this.poderesPsiquicosDominados[i].getPoder() != poder) || (this.poderesPsiquicosDominados[i].getDisciplina() != disciplina)) {
                podeLimpios.push(this.poderesPsiquicosDominados[i])
            } else {
                if (this.poderesPsiquicosDominados[i].getFortalecimiento() > 0) {
                    this.cv_gastados -= this.poderesPsiquicosDominados[i].getFortalecimiento();
                }
            }
        }

        this.poderesPsiquicosDominados = podeLimpios;
        lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
    },

    /**
     *
     * @param {DisciplinaPsiquica} disciplina
     * @param {PoderPsiquicoDominado} poder
     * @param {number} cantidad
     */
    fortalecerPoder : function(disciplina, poder, cantidad)  {
        for (var i = 0; i < this.poderesPsiquicosDominados.length;i++) {
            if ((this.poderesPsiquicosDominados[i] == poder) && (this.poderesPsiquicosDominados[i].getDisciplina() == disciplina)) {
                this.poderesPsiquicosDominados[i].addFortalecimiento(cantidad);
                lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
                break;
            }
        }
    },

//endregion Habilidades Primarias: Psíquica

//region Habilidades Secundarias
    /**
     *
     * @returns {number}
     */
    gastoActualPDsSecundarias : function() {
        var gasto = 0;

        for (var i = 0; i < habilidades_secundarias.length; i++) {
            var grupo = habilidades_secundarias[i];

            for (var j = 0; j < grupo.length; j++) {

                gasto += this[grupo[j]].getPDinvertidos();
            }
        }

        return gasto;
    },

    /**
     *
     * @param {boolean} notificar
     */
    updateBonosSecundarias : function (notificar)  {
        for (var i = 0; i < habilidades_secundarias.length; i++) {
            var grupoHabilidades = habilidades_secundarias[i];

            for (var j = 0; j < grupoHabilidades.length; j++) {
                var habilidad = getHabilidad(grupoHabilidades[j]);

                var bono = new Bono(BONO_HABILIDAD,habilidad.getNombre(),this.getBonoCaracteristica(habilidad.getCaracteristica()),"",false,BONO_CARACTERISTICA,caracAbreviatura(habilidad.getCaracteristica()));
                this.addBono(bono, true, false);

            }
        }
        if (notificar)
            lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
    },

    /**
     *
     * @param {string} nombreHabilidad
     * @param {string} especializacion
     */
    setEspecializacionHabilidadSecundaria : function(nombreHabilidad, especializacion) {
        this.getHabilidadDePersonaje(nombreHabilidad).setEspecializacion(especializacion);
        lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
    },
//endregion Habilidades Secundarias

//region Equipo y dinero

    /**
     *
     * @returns {Dinero}
     */
    getDinero : function() {
        return this.dinero;
    },

    /**
     *
     * @param {number} valor
     */
    addDineroOro : function(valor) {
        this.dinero.addOro(valor);
        //TODO dispatch evento equipo
    },

//endregion

//region Flags
    /**
     *
     * @param {string} flag
     */
    setFlag : function(flag)  {
        if (!this.hasFlag(flag)) {
            this.flags.push(flag);

            if (flag == FLAG_PSIQUICO) {
                if (this[HB_CV].getValorInicial() == 0) {
                    this[HB_CV].setValorInicial(1);
                    lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
                }
            }
        }
    },

    /**
     *
     * @param {string} flag
     */
    removeFlag : function(flag)  {
        for (var i = 0; i < this.flags.length; i++) {
            if (this.flags[i] == flag) {
                this.flags[i] = "";
                this.anularVentajasPorFlag(flag);
                if (flag == FLAG_PSIQUICO) {
                    this[HB_CV].setValorInicial(0);
                    this.disciplinasPsiquicas = [];
                    this.poderesPsiquicosDominados = [];
                    this.innatosPsiquicos = 0;
                    this.cv_gastados = 0;
                    lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
                } else if (flag == FLAG_DON) {
                    lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
                    var pds = this[HB_VALORACION_MAGICA].getPDinvertidos();
                    this[HB_VALORACION_MAGICA].setPDinvertidos(0);
                    this.addPDLibres(pds);
                    this.nivelMagiaGastado = 0;
                    this.viasMagia = [];
                    this.conjurosSueltos = [];
                }
                return;
            }
        }
    },

    /**
     *
     * @param {string} flag
     * @returns {boolean}
     */
    hasFlag : function(flag)  {
        for (var i = 0; i < this.flags.length; i++) {
            if (this.flags[i] == flag) {
                return true;
            }
        }
        return false;
    },
//endregion Flags

//region Funciones generales
    /**
     *
     */
    updateBonoyBases : function()  {
        this.pv = this.pvBase();
        this.updateMultiplosVida(false);
        this.updateBonosTurnoCarac(false);
        this.updateCapacidadesFisicas(false);
        lanzarEvento(EVENT_CHARACTER_SECCION_CAPACIDADES);

        this.updateBonosResistenciasCarac(false);
        lanzarEvento(EVENT_CHARACTER_SECCION_RESISTENCIAS);

        this.updateBonosPrimarias(false);
        this.updateZeonBase(false);
        this.updateACTBase(false);

        lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
        lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
        lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);

        this.updateKiInicial(false);
        lanzarEvento(EVENT_CHARACTER_SECCION_KI);

        this.updateBonosSecundarias(false);
        lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
    },

    /**
     *
      * @param {boolean} notificar
     */
    updateBonosPrimarias : function (notificar)  {
        var bonoAtaque = new Bono(BONO_HABILIDAD,HB_ATAQUE,this.getBonoCaracteristica(DES),"",false,BONO_CARACTERISTICA,DES3);
        this.addBono(bonoAtaque, true, false);

        var bonoParada = new Bono(BONO_HABILIDAD,HB_PARADA,this.getBonoCaracteristica(DES),"",false,BONO_CARACTERISTICA,DES3);
        this.addBono(bonoParada, true, false);

        var bonoEsquiva = new Bono(BONO_HABILIDAD,HB_ESQUIVA,this.getBonoCaracteristica(AGI),"",false,BONO_CARACTERISTICA,AGI3);
        this.addBono(bonoEsquiva, true, false);

        var bonoArmadura = new Bono(BONO_HABILIDAD,HB_ARMADURA,this.getBonoCaracteristica(FUE),"",false,BONO_CARACTERISTICA,FUE3);
        this.addBono(bonoArmadura, true, false);

        var bonoProyeccionMagica = new Bono(BONO_HABILIDAD,HB_PROYECCION_MAGICA,this.getBonoCaracteristica(DES),"",false,BONO_CARACTERISTICA,DES3);
        this.addBono(bonoProyeccionMagica, true, false);

        var bonoConvocar = new Bono(BONO_HABILIDAD,HB_CONVOCAR,this.getBonoCaracteristica(POD),"",false,BONO_CARACTERISTICA,POD3);
        this.addBono(bonoConvocar, true, false);

        var bonoAtar = new Bono(BONO_HABILIDAD,HB_ATAR,this.getBonoCaracteristica(POD),"",false,BONO_CARACTERISTICA,POD3);
        this.addBono(bonoAtar, true, false);

        var bonoDesconvocar = new Bono(BONO_HABILIDAD,HB_DESCONVOCAR,this.getBonoCaracteristica(POD),"",false,BONO_CARACTERISTICA,POD3);
        this.addBono(bonoDesconvocar, true, false);

        var bonoDominar = new Bono(BONO_HABILIDAD,HB_DOMINAR,this.getBonoCaracteristica(VOL),"",false,BONO_CARACTERISTICA,VOL3);
        this.addBono(bonoDominar, true, false);

        var bonoProyeccionPsiquica = new Bono(BONO_HABILIDAD,HB_PROYECCION_PSIQUICA,this.getBonoCaracteristica(DES),"",false,BONO_CARACTERISTICA,DES3);
        this.addBono(bonoProyeccionPsiquica, true, false);

        if (notificar) {
            lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
            lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
            lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
        }
    },

    /**
     *
     * @param {string} nombreHabilidad
     * @param {boolean} esPrimaria
     * @returns {number}
     */
    getCoste : function(nombreHabilidad, esPrimaria)  {
        var coste = 1;

        if (nombreHabilidad == HB_MULTIPLO_VIDA) {
            coste = this.categoria.multiploDeVida;
        } else if (esPrimaria) {
            coste = this.categoria.getCosteHabilidadPrimaria(nombreHabilidad);
        } else {
            coste = this.categoria.getCosteHabilidadSecundaria(nombreHabilidad);
        }

        if (coste == 0) {
            return 0;
        }

        var grupoHabilidad = getGrupoDeHabilidadSecundaria(nombreHabilidad);

        for (var i = 0; i < this.costesReducidos.length;i++) {
            var costeReducido = this.costesReducidos[i];

            if ((costeReducido.getNombre() == nombreHabilidad) ||
                (costeReducido.getNombre() == grupoHabilidad)) {
                if (costeReducido.isAbsoluto()) {
                    coste = costeReducido.getCoste();
                } else {
                    coste -= costeReducido.getCoste();
                }
            }
        }

        if (coste < 1) {
            coste = 1;
        }

        return coste;
    },

    /**
     *
     * @param {string} grupo
     * @returns {number}
     */
    maxPDsGrupoHabilidad : function(grupo)  {
        var multiplicador;
        switch (grupo) {
            case TIPO_HB_COMBATE:
                multiplicador = this.categoria.limiteCombate;
                break;
            case TIPO_HB_SOBRENATURAL:
                multiplicador = this.categoria.limiteSobrenatural;
                break;
            case TIPO_HB_PSIQUICA:
                multiplicador = this.categoria.limitePsiquica;
                break;
            default:
                multiplicador = 100000;
                break;
        }

        return this.PD_totales*multiplicador;
    },

    /**
     *
     * @param {string} grupo
     * @returns {number}
     */
    gastoActualPDsGrupoHabilidad : function(grupo)  {
        var gasto = 0;
        var tablaArmas;
        var i;

        switch (grupo) {
            case TIPO_HB_COMBATE:
                gasto = this[HB_ATAQUE].getPDinvertidos() +
                    this[HB_ESQUIVA].getPDinvertidos() +
                    this[HB_PARADA].getPDinvertidos() +
                    this[HB_ARMADURA].getPDinvertidos() +
                    this[HB_ACUM_KI_AGI].getPDinvertidos() +
                    this[HB_ACUM_KI_CON].getPDinvertidos() +
                    this[HB_ACUM_KI_DES].getPDinvertidos() +
                    this[HB_ACUM_KI_FUE].getPDinvertidos() +
                    this[HB_ACUM_KI_POD].getPDinvertidos() +
                    this[HB_ACUM_KI_VOL].getPDinvertidos() +
                    this[HB_KI_AGI].getPDinvertidos() +
                    this[HB_KI_CON].getPDinvertidos() +
                    this[HB_KI_DES].getPDinvertidos() +
                    this[HB_KI_FUE].getPDinvertidos() +
                    this[HB_KI_POD].getPDinvertidos() +
                    this[HB_KI_VOL].getPDinvertidos();

                for (i = 0; i < this.tablasArmas.length; i++) {
                    tablaArmas = this.tablasArmas[i];
                    gasto += tablaArmas.getCoste(this);
                }

                for (i = 0; i < this.artesMarciales.length; i++) {
                    gasto += costeArteMarcial(i==0);
                }
                break;
            case TIPO_HB_SOBRENATURAL:
                gasto = this[HB_ZEON].getPDinvertidos() +
                    this[HB_ACT].getPDinvertidos() +
                    this[HB_PROYECCION_MAGICA].getPDinvertidos() +
                    this[HB_CONVOCAR].getPDinvertidos() +
                    this[HB_DOMINAR].getPDinvertidos() +
                    this[HB_ATAR].getPDinvertidos() +
                    this[HB_DESCONVOCAR].getPDinvertidos();

                for (i = 0; i < this.tablasArmas.length; i++) {
                    tablaArmas = this.tablasArmas[i];
                    if (tablaArmas.getCategoriaTabla() == CATEGORIA_TABLA_MISTICAS) {
                        gasto += tablaArmas.getCoste(this);
                    }
                }
                break;
            case TIPO_HB_PSIQUICA:
                gasto = this[HB_CV].getPDinvertidos() +
                    this[HB_PROYECCION_PSIQUICA].getPDinvertidos();
                for (i = 0; i < this.tablasArmas.length; i++) {
                    tablaArmas = this.tablasArmas[i];
                    if (tablaArmas.getCategoriaTabla() == CATEGORIA_TABLA_PSIQUICAS) {
                        gasto += tablaArmas.getCoste(this);
                    }
                }
                break;
        }

        return gasto;
    },

    /**
     *
     * @param {string} nombreHabilidad
     * @returns {HabilidadDePersonaje}
     * @throws ERR_HABILIDAD_ERRONEA
     */
    getHabilidadDePersonaje : function (nombreHabilidad)  {
        if (this[nombreHabilidad] != undefined) {
            return this[nombreHabilidad];
        }

        throw ERR_HABILIDAD_ERRONEA + " " + nombreHabilidad;
    },

    /**
     *
     */
    updateNivelesPDHabilidades : function() {
        var pdsDevueltos = 0;
        var mensaje = "";
        for (var i = 0; i < this.allHabilidades.length; i++) {
            var coste = this.getCoste(this.allHabilidades[i].getHabilidad().getNombre(),this.allHabilidades[i].getHabilidad().isPrincipal());
            if (coste != 0) {
                var retorno = this.allHabilidades[i].ajustarPDEnMultiplo(coste);
                if (retorno.mensaje != "") {
                    pdsDevueltos += retorno.pdDevueltos;
                    mensaje += retorno.mensaje + "<br>";
                }
            }
        }
        if (pdsDevueltos != 0) {
            this.PD_libres += pdsDevueltos;
            lanzarEvento(EVENT_CHARACTER_SECCION_DESARROLLO);
            lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
            lanzarEvento(EVENT_CHARACTER_SECCION_KI);
            lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
            lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
            lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
            alert (mensaje);
        }
    },

    /**
     *
     * @param {string} nombreHabilidad
     */
    updateNivelesPDHabilidad : function(nombreHabilidad) {
        var coste = this.getCoste(this[nombreHabilidad].getNombre(),this[nombreHabilidad].isPrincipal());
        if (coste != 0) {
            var retorno = this[nombreHabilidad].ajustarPDEnMultiplo(coste);
            if (retorno.pdsDevueltos != 0) {
                this.PD_libres += retorno.pdsDevueltos;
                lanzarEventoSegunHabilidad(nombreHabilidad);
                alert (retorno.mensaje);
            }
        }
    },

    /**
     *
     * @param {string} nombreHabilidad
     * @param {number} gastoPD
     */
    aumentaPDHabilidad : function(nombreHabilidad, gastoPD) {
        this[nombreHabilidad].addPDinvertidos(gastoPD);
        lanzarEventoSegunHabilidad(nombreHabilidad);
        this.addPDLibres(-1 * gastoPD);
    },

//endregion Funciones generales

//region Presencia, gnosis, natura

    /**
     *
     * @returns {number}
     */
    getPresencia : function()  {
        return 30 + (5 * (this.nivel-1));
    },

    /**
     *
     * @returns {number}
     */
    getGnosis : function() {
        return this.gnosis;
    },

    /**
     *
     * @param {number} valor
     */
    setGnosis : function(valor) {
        removeEfectosGnosis(this.gnosis,personaje_actual);
        this.gnosis = valor;
        aplicaEfectosGnosis(valor,personaje_actual);
    }

//endregion Presencia, gnosis, natura
};







var MOV_ANDANDO = "Andando";

function TipoMovimiento(tipo, velocidad) {
    this.tipo = tipo;
    this.velocidad = velocidad;
}

TipoMovimiento.prototype = {
    constructor : TipoMovimiento,

    getTipo : function() {
        return this.tipo;
    },

    setTipo : function(valor) {
        this.tipo = valor;
    },

    getVelocidad : function() {
        return this.velocidad;
    },

    setVelocidad : function() {
        return this.velocidad;
    },

    toString : function() {
        return this.tipo + " " + this.velocidad;
    }
};

var ARMADURA_NATURAL = "Natural";
var ARMADURA_NINGUNA = "Ninguna";

/**
 *
 * @param {string} nombre
 * @param {number[]} arrayTAs
 * @param {boolean} blanda
 * @constructor
 */
function TipoArmadura(nombre, arrayTAs, blanda) {
    /**
     *
     * @type {string}
     */
    this.nombre = nombre;

    /**
     *
     * @type {number[]}
     */
    this.TAs = arrayTAs;

    /**
     *
     * @type {boolean}
     */
    this.blanda = blanda;
}

TipoArmadura.prototype = {
    constructor : TipoArmadura,

    toString : function() {
        var cadena = "[";
        for (var i = 0; i < this.TAs.length;i++) {
            cadena += this.TAs[i];
            if (i < this.TAs.length-1) {
                cadena += " ";
            }
        }
        cadena += "]"
        return cadena;
    },

    getNombre : function() {
        return this.nombre;
    },

    getTAs : function() {
        return this.TAs;
    },

    isBlanda : function() {
        return this.blanda;
    },

    setTA : function(taArmadura, valor) {
        switch (taArmadura) {
            case ATAQUE_FIL3:
            case ATAQUE_FIL:
                this.TAs[0] = valor;
                break;
            case ATAQUE_CON3:
            case ATAQUE_CON:
                this.TAs[1] = valor;
                break;
            case ATAQUE_PEN3:
            case ATAQUE_PEN:
                this.TAs[2] = valor;
                break;
            case ATAQUE_CAL3:
            case ATAQUE_CAL:
                this.TAs[3] = valor;
                break;
            case ATAQUE_FRI3:
            case ATAQUE_FRI:
                this.TAs[4] = valor;
                break;
            case ATAQUE_ELE3:
            case ATAQUE_ELE:
                this.TAs[5] = valor;
                break;
            case ATAQUE_ENE3:
            case ATAQUE_ENE:
                this.TAs[6] = valor;
                break;
        }
    },

    getTA : function(taArmadura) {
        var ta = 0;
        switch (taArmadura) {
            case ATAQUE_FIL3:
            case ATAQUE_FIL:
                ta = this.TAs[0];
                break;
            case ATAQUE_CON3:
            case ATAQUE_CON:
                ta =  this.TAs[1];
                break;
            case ATAQUE_PEN3:
            case ATAQUE_PEN:
                ta =  this.TAs[2];
                break;
            case ATAQUE_CAL3:
            case ATAQUE_CAL:
                ta =  this.TAs[3];
                break;
            case ATAQUE_FRI3:
            case ATAQUE_FRI:
                ta =  this.TAs[4];
                break;
            case ATAQUE_ELE3:
            case ATAQUE_ELE:
                ta =  this.TAs[5];
                break;
            case ATAQUE_ENE3:
            case ATAQUE_ENE:
                ta =  this.TAs[6];
                break;
        }
        return ta;
    },

    isCero : function() {
        var cero = true;
        for (var i = 0; i < this.TAs.length;i++) {
            if (this.TAs[i] != 0) {
                cero = false;
                break;
            }
        }
        return cero;
    }
};

var EST_AUM_LIBRE = "libre";
var EST_AUM_GASTADO = "gastado";
var EST_AUM_FIJO = "fijo";
var USO_AUM_NO = "no";
var USO_AUM_PC = "PC";

function AumentoCaracteristicas() {
    this.estado = EST_AUM_LIBRE;

    this.uso = USO_AUM_NO;
}

AumentoCaracteristicas.prototype = {
    constructor : AumentoCaracteristicas,

    toString : function() {
        var cadena = "";
        switch (this.estado) {
            case EST_AUM_LIBRE:
                cadena = EST_AUM_LIBRE;
                break;
            case EST_AUM_GASTADO:
            case EST_AUM_FIJO:
                cadena= "+1 " + this.uso;
                break;
        }
        return cadena;
    },

    /**
     *
     * @returns {boolean}
     */
    isLibre : function() {
        return (this.estado == EST_AUM_LIBRE);
    },

    /**
     *
     * @returns {boolean}
     */
    isAnulable : function() {
        return (this.estado == EST_AUM_GASTADO);
    },

    /**
     *
     * @returns {boolean}
     */
    gastadoEnCaracteristicas : function() {
        return ((this.uso != USO_AUM_PC) && (this.uso != USO_AUM_NO));
    },

    /**
     *
     * @param {string} caracteristica
     * @returns {boolean}
     */
    gastadoEnCaracteristica : function(caracteristica) {
        return (this.uso == caracteristica);
    },

    /**
     *
     * @returns {boolean|string}
     */
    getCaracteristica : function() {
        if (this.gastadoEnCaracteristicas()) {
            return this.uso;
        } else {
            return "";
        }
    },

    /**
     *
     * @returns {string}
     */
    getUso : function() {
        return this.uso;
    },

    /**
     *
     * @param {string} uso
     */
    gasta : function(uso) {
        this.uso = uso;
        this.estado = EST_AUM_GASTADO;
    },

    /**
     *
     */
    libera : function() {
        this.uso = USO_AUM_NO;
        this.estado = EST_AUM_LIBRE;
    },

    fija : function() {
        this.estado = EST_AUM_FIJO;
    }
};




/**
 *
 * @param {string} nombreHabilidad
 */
function lanzarEventoSegunHabilidad(nombreHabilidad) {
    var habilidad = getHabilidad(nombreHabilidad);

    switch (habilidad.getTipo()) {
        case TIPO_CAPACIDAD:
            personaje_actual.updateMultiplosVida(true);
            break;
        case TIPO_HB_COMBATE:
            lanzarEvento(EVENT_CHARACTER_SECCION_COMBATE_GENERAL);
            lanzarEvento(EVENT_CHARACTER_SECCION_KI);
            break;
        case TIPO_HB_SOBRENATURAL:
            lanzarEvento(EVENT_CHARACTER_SECCION_MAGIA);
            break;
        case TIPO_HB_PSIQUICA:
            lanzarEvento(EVENT_CHARACTER_SECCION_PSIQUICA);
            break;
        default:
            lanzarEvento(EVENT_CHARACTER_SECCION_SECUNDARIAS);
            lanzarEvento(EVENT_CHARACTER_SECCION_KI);
            break;
    }
}

/**
 *
 * @param {number} gnosis
 * @param {Personaje} personaje
 */
function removeEfectosGnosis(gnosis, personaje) {
    //noinspection FallThroughInSwitchStatementJS
    switch (gnosis) {
        case 50:
        case 45:
        case 40:
        case 35:
        case 30:
        case 25:
            personaje.removeFlag(FLAG_PUEDE_USAR_PODERES_MONSTRUO);
        default:
            //nada
            break;
    }
}

/**
 *
 * @param {number} gnosis
 * @param {Personaje} personaje
 */
function aplicaEfectosGnosis(gnosis, personaje) {
    //noinspection FallThroughInSwitchStatementJS
    switch (gnosis) {
        case 50:
        case 45:
        case 40:
        case 35:
        case 30:
        case 25:
            personaje.setFlag(FLAG_PUEDE_USAR_PODERES_MONSTRUO);
        default:
            //nada
            break;
    }
}

/*
25:

 Poderes de monstruo: A partir de esta cantidad, un ser puede utilizar sus
 PD para desarrollar libremente cualquier poder descrito en el Capítulo 26: La
 creación de seres. Si sube de nivel, puede mejorar los que posee o adquirir
 otros nuevos, incluso si difieren de los de su especie o etnia.

30:
 Percepción expandida: El ser percibe el mundo de
 un modo ligeramente diferente. Por su cercanía con el
 plano espiritual, es capaz de sentir las alteraciones de
 la realidad en el entorno y leer el aura de la gente. De
 este modo, aprecia fácilmente el estado de ánimo de las
 personas y puede discernir si en un lugar determinado
 se han desencadenado habilidades sobrenaturales, y
 en qué medida.
 • Control elemental: Si la criatura es un
 elemental, puede afectar parcialmente el medio
 al que es afín. Automáticamente, influye en un
 número de intensidades equivalente a una tercera
 parte de su Gnosis. También ejerce cierta influencia
 en cualquier ser de su elemento con un Gnosis
 inferior al suyo. Si no es un elemental, puede dominar
 intensidades de cualquier tipo, pero este se reduce sólo
 a una sexta parte en lugar de a una tercera.
 • Bonos de creación: Otorga un Punto de
 Creación adicional, o en su defecto 50 PD extras, para
 obtener poderes y habilidades esenciales de criaturas
 sobrenaturales.

    35:
 • Influir en la realidad: Exteriorizando su poder, la
 entidad modifica pequeños aspectos de la realidad circundante,
 alterando a voluntad cualquier objeto inanimado con una presencia inferior al
 doble de su Gnosis (es decir, si tuviera 35, influiría en cosas cuya presencia fuera
 65 o inferior). Sólo puede influir en un objeto por asalto, siempre y cuando no
 esté en contacto con alguien vivo. Esta habilidad tiene como límite un uso al día
 por cada punto de Gnosis que posea.
 • Inmortal: La entidad ha superado la muerte en muchos aspectos, y sólo puede
 ser exterminada bajo ciertas circunstancias específicas. Incluso si recibe daños que
 disminuyan sus PV por debajo del estado de entre la vida y la muerte, simplemente
 permanecerá inconsciente hasta recuperarse de las heridas. Sólo serán capaces de
 matarlo definitivamente las criaturas cuyo Gnosis no sea 25 puntos inferior al suyo.
 Por tanto, matar a una criatura con Gnosis 35 requiere a alguien de 10 o más, al igual
 que un ser con 40 moriría sólo a manos de un individuo que poseyera 15 puntos.
 • Presencia: Su mera presencia modifica el entorno, volviéndolo afín a su
 naturaleza. Por ejemplo, un elemental oscuro con Gnosis 35 o superior influiría
 en el ambiente tornándolo tenebroso y sombrío.
 • Bonos de creación: Otorga tres Puntos de Creación adicionales o, en
 su defecto, 150 PD extras para obtener poderes y habilidades esenciales de
 criaturas sobrenaturales.

    40:
 • Áuspice: Es capaz de influir en el entorno y en el curso de los
 acontecimientos de manera favorable para él. Por tanto, obtiene un éxito
 automático en cualquier control de una habilidad secundaria que
 no requiera conocimientos o se enfrente directamente a la de otro
 individuo. Esta capacidad no le permite superar directamente
 la dificultad Inhumano o superior. En el caso de los controles
 enfrentados, gana un bono de +10 por cada 5 puntos de Gnosis
 por los que supere a su adversario, incluyendo las habilidades
 de combate.
 • Avatar: La entidad puede erigir varios avatares de sí misma
 proyectando una parte de su conciencia a distancia. Crea
 uno por cada diez puntos de Gnosis que posea, pero es
 incapaz de generar dos de ellos a la vez en el mismo
 lugar. Un avatar tiene aproximadamente entre cinco
 y diez niveles por debajo del ser original y 15 puntos
 menos de Gnosis. Su apariencia y forma es variable,
 pero sus poderes y habilidades deben ser al menos
 parecidos en todas sus encarnaciones. Si el alma de
 un avatar resulta destruida o este es asesinado por un
 ser con un Gnosis igual o superior al suyo, la entidad
 pierde para siempre la capacidad de manifestarlo.
 • Bonos de creación: Otorga seis Puntos de
 Creación adicionales o, en su defecto, 300 PD extras
 para obtener poderes y habilidades esenciales de
 criaturas sobrenaturales.

    45:
 • Caminar entre mundos: Estando más allá de la
 influencia del flujo de almas, la entidad es capaz de moverse
 libremente entre el mundo espiritual, el material o la Vigilia.
 Incluso si fallece, puede volver a manifestarse con todo su
 poder tras cierto tiempo (dependiendo de las circunstancias
 de su fallecimiento, puede costarle desde simples días a
 siglos enteros), salvo si su alma es destruida o muere a
 manos de alguien con un Gnosis superior al suyo.
 • Bonos de creación: Otorga diez Puntos de
 Creación adicionales o, en su defecto, 500 PD extras
 para obtener poderes y habilidades esenciales de criaturas sobrenaturales.

    50:
 • Bonos de creación: Otorga quince Puntos de Creación adicionales o,
 en su defecto, 750 PD extras para obtener poderes y habilidades esenciales de
 criaturas sobrenaturales.

    */
var DIV_DESTINO_PERSONALES = "#divPersonales";
var DIV_DESTINO_CARACTERISTICAS = "#divCaracteristicas";
var DIV_DESTINO_CAPACIDADES = "#divCapacidades";
var DIV_DESTINO_RESISTENCIAS = "#divResistencias";
var DIV_DESTINO_VENTAJAS = "#divVentajas";
var DIV_DESTINO_DESVENTAJAS = "#divDesventajas";
var DIV_DESTINO_COMBATE = "#divCombate";
var DIV_DESTINO_ARTES_MARCIALES = "#divArtesMarciales";
var DIV_DESTINO_KI = "#divKi";
var DIV_DESTINO_SOBRENATURAL = "#divSobrenatural";
var DIV_DESTINO_PSIQUICA = "#divPsiquica";
var DIV_DESTINO_SECUNDARIAS = "#divSecundarias";
var DIV_DESTINO_DESARROLLO = "#divDesarrollo";
var DIV_DESTINO_ELAN = "#divElan";

var listenerActivado = false;

function addActualizador(nombre, delegado) {
    removeActualizador(nombre, delegado);
    DISPATCHER.on(nombre,delegado);
}

function removeActualizador(nombre, delegado) {
    DISPATCHER.off(nombre,delegado);
}

function muestraPersonaje() {
    if (notificacionesActivas) {
        desactivarNotificaciones();
        personaje_actual.updateBonoyBases();
        activarNotificaciones();
    } else {
        personaje_actual.updateBonoyBases();
    }

    $(DIV_DESTINO_PERSONALES).empty().append(muestraPersonales(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_CAPACIDADES).empty().append(muestraCapacidades(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_DESARROLLO).empty().append(muestraDesarrollo(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_CARACTERISTICAS).empty().append(muestraCaracteristicas(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_RESISTENCIAS).empty().append(muestraResistencias(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_VENTAJAS).empty().append(muestraVentajas(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_DESVENTAJAS).empty().append(muestraDesventajas(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_SECUNDARIAS).empty().append(muestraSecundarias(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_COMBATE).empty().append(muestraCombate(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_ARTES_MARCIALES).empty().append(muestraArtesMarciales(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_KI).empty().append(muestraKi(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_SOBRENATURAL).empty().append(muestraSobrenatural(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_PSIQUICA).empty().append(muestraPsiquica(personaje_actual.GENERACION_INICIADA));
    $(DIV_DESTINO_ELAN).empty().append(muestraElan(personaje_actual.GENERACION_INICIADA));

    enableButtonsPasosCreacion(personaje_actual.GENERACION_INICIADA);

    if (!listenerActivado) {
        activaListenerCambiosPersonaje();
    }
}

function activaListenerCambiosPersonaje() {
    DISPATCHER.on(EVENT_CHARACTER_SECCION_PERSONALES,{evento: EVENT_CHARACTER_SECCION_PERSONALES}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_CAPACIDADES,{evento: EVENT_CHARACTER_SECCION_CAPACIDADES}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_CARACTERISTICAS,{evento: EVENT_CHARACTER_SECCION_CARACTERISTICAS}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_DESARROLLO,{evento: EVENT_CHARACTER_SECCION_DESARROLLO}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_VENTAJAS,{evento: EVENT_CHARACTER_SECCION_VENTAJAS}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_DESVENTAJAS,{evento: EVENT_CHARACTER_SECCION_DESVENTAJAS}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_RESISTENCIAS,{evento: EVENT_CHARACTER_SECCION_RESISTENCIAS}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_COMBATE_GENERAL,{evento: EVENT_CHARACTER_SECCION_COMBATE_GENERAL}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_KI,{evento: EVENT_CHARACTER_SECCION_KI}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_MAGIA,{evento: EVENT_CHARACTER_SECCION_MAGIA}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_PSIQUICA,{evento: EVENT_CHARACTER_SECCION_PSIQUICA}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_ELAN,{evento: EVENT_CHARACTER_SECCION_ELAN}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_ARTES_MARCIALES,{evento: EVENT_CHARACTER_SECCION_ARTES_MARCIALES}, recargaSeccionPersonaje);
    DISPATCHER.on(EVENT_CHARACTER_SECCION_SECUNDARIAS,{evento: EVENT_CHARACTER_SECCION_SECUNDARIAS}, recargaSeccionPersonaje);
    listenerActivado = true;
}

function recargaSeccionPersonaje(event) {
    var divDestino;
    var funcionRecarga;

    switch (event.data.evento) {
        case EVENT_CHARACTER_SECCION_ARTES_MARCIALES:
            divDestino = DIV_DESTINO_ARTES_MARCIALES;
            funcionRecarga = muestraArtesMarciales;
            break;
        case EVENT_CHARACTER_SECCION_CAPACIDADES:
            divDestino = DIV_DESTINO_CAPACIDADES;
            funcionRecarga = muestraCapacidades;
            break;
        case EVENT_CHARACTER_SECCION_CARACTERISTICAS:
            divDestino = DIV_DESTINO_CARACTERISTICAS;
            funcionRecarga = muestraCaracteristicas;
            break;
        case EVENT_CHARACTER_SECCION_COMBATE_GENERAL:
            divDestino = DIV_DESTINO_COMBATE;
            funcionRecarga = muestraCombate;
            break;
        case EVENT_CHARACTER_SECCION_DESARROLLO:
            divDestino = DIV_DESTINO_DESARROLLO;
            funcionRecarga = muestraDesarrollo;
            break;
        case EVENT_CHARACTER_SECCION_DESVENTAJAS:
            divDestino = DIV_DESTINO_DESVENTAJAS;
            funcionRecarga = muestraDesventajas;
            break;
        case EVENT_CHARACTER_SECCION_ELAN:
            divDestino = DIV_DESTINO_ELAN;
            funcionRecarga = muestraElan;
            break;
        case EVENT_CHARACTER_SECCION_KI:
            divDestino = DIV_DESTINO_KI;
            funcionRecarga = muestraKi;
            break;
        case EVENT_CHARACTER_SECCION_MAGIA:
            divDestino = DIV_DESTINO_SOBRENATURAL;
            funcionRecarga = muestraSobrenatural;
            break;
        case EVENT_CHARACTER_SECCION_PERSONALES:
            divDestino = DIV_DESTINO_PERSONALES;
            funcionRecarga = muestraPersonales;
            break;
        case EVENT_CHARACTER_SECCION_PSIQUICA:
            divDestino = DIV_DESTINO_PSIQUICA;
            funcionRecarga = muestraPsiquica;
            break;
        case EVENT_CHARACTER_SECCION_RESISTENCIAS:
            divDestino = DIV_DESTINO_RESISTENCIAS;
            funcionRecarga = muestraResistencias;
            break;
        case EVENT_CHARACTER_SECCION_VENTAJAS:
            divDestino = DIV_DESTINO_VENTAJAS;
            funcionRecarga = muestraVentajas;
            break;
        case EVENT_CHARACTER_SECCION_SECUNDARIAS:
            divDestino = DIV_DESTINO_SECUNDARIAS;
            funcionRecarga = muestraSecundarias;
            break;
    }
    enableButtonsPasosCreacion(personaje_actual.GENERACION_INICIADA);
    $(divDestino).empty().append(funcionRecarga(personaje_actual.GENERACION_INICIADA));
}

function recuadroBase() {
    var div = getDiv(CSS_RECUADRO);
    return div;
}

function muestraSubtitulo(etiqueta, esTitulo) {
    var divTitulo = getDiv("pretty");
    if (esTitulo) {
        divTitulo.addClass(CSS_TITULO_SECCION);
        divTitulo.addClass("pretty label secondary");
    } else {
        divTitulo.addClass(CSS_SUBTITULO_SECCION);
        divTitulo.addClass("pretty label danger");
    }
    divTitulo.append(etiqueta);
    return divTitulo;
}


/********* datos personales **********/
/**
 *
 * @param {string} estadoGeneracion
 * @returns {jQuery}
 */
function muestraPersonales(estadoGeneracion) {
    var div = recuadroBase();
    var modificarPersonales = (estadoGeneracion == ESTADO_GENERACION_INICIADA);

    div.append(muestraSubtitulo(UI_PERSONALES, true));

    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);
    divContenido.append(muestraPersonal(UI_NOMBRE, personaje_actual.getNombre(), modificarPersonales, elegirManualNombre));
    divContenido.append(muestraPersonal(UI_SEXO, personaje_actual.getSexo(), modificarPersonales, elegirManualSexo));
    divContenido.append(muestraPersonal(UI_RAZA, personaje_actual.getRaza().getNombre(), modificarPersonales,dialogoElegirRaza));
    divContenido.append(muestraPersonal(UI_PESO, personaje_actual.getPeso(), modificarPersonales, elegirPeso));
    divContenido.append(muestraPersonal(UI_ALTURA, personaje_actual.getAltura(), modificarPersonales, elegirAltura));
    divContenido.append(muestraPersonalConDivExtra(UI_CATEGORIA, personaje_actual.getCategoria().getNombre(), modificarPersonales, dialogoElegirCategoria,{}, muestraBotonPequeño("Cambiar cat.",{},cambiarCategoria)));

    div.append(divContenido);


    return div;
}

function muestraCapacidades(estadoGeneracion) {
    var div = recuadroBase();
    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);

    var modificarApariencia = (estadoGeneracion == ESTADO_GENERACION_INICIADA);
    var modificarPV = ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL));
    div.append(muestraSubtitulo(UI_CAPACIDADES_FISICAS, true));

    divContenido.append(muestraValorPV(modificarPV));

    divContenido.append(muestraPersonal(UI_PUNTOS_CANSANCIO, personaje_actual.getPuntosCansancio(), false));
    divContenido.append(muestraPersonal(UI_TIPO_MOVIMIENTO, personaje_actual.getTipoMovimiento(), false));
    divContenido.append(muestraPersonal(UI_APARIENCIA, personaje_actual.getApariencia(), modificarApariencia, elegirManualApariencia));
    divContenido.append(muestraPersonal(UI_TAMAÑO, personaje_actual.getTamaño(), false));

    divContenido.append(muestraValorRegeneracion());

    div.append(divContenido);
    return div;
}

function muestraDesarrollo(estadoGeneracion) {
    var div = recuadroBase();
    div.append(muestraSubtitulo(UI_DESARROLLO, true));
    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);

    var modificarPX = (estadoGeneracion == ESTADO_GENERACION_PERSONAJE_HECHO);
    var mostrarPDyPCArriba = ((estadoGeneracion == ESTADO_GENERACION_INICIADA) ||(estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL));

    divContenido.append(muestraPersonal(UI_NIVEL, personaje_actual.getNivel(), false));

    divContenido.append(muestraPersonal(UI_PUNTOS_DESARROLLO, personaje_actual.getPDTotales() + "(" + personaje_actual.getPDLibres() + " " + UI_PUNTOS_SIN_USAR + ")", false));
    if ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL)) {
        var ul = $("<ul></ul>");
        ul.append($("<li></li>").append(muestraPersonal(UI_PD_COMBATE, personaje_actual.gastoActualPDsGrupoHabilidad(TIPO_HB_COMBATE) + "/" + personaje_actual.maxPDsGrupoHabilidad(TIPO_HB_COMBATE), false)));
        ul.append($("<li></li>").append(muestraPersonal(UI_PD_ATAQUE_DEFENSA, personaje_actual.gastoActualPDsAtaqueDefensa() + "/" + personaje_actual.maxPDsAtaqueDefensa(), false)));
        ul.append($("<li></li>").append(muestraPersonal(UI_PD_SOBRENATURAL, personaje_actual.gastoActualPDsGrupoHabilidad(TIPO_HB_SOBRENATURAL) + "/" + personaje_actual.maxPDsGrupoHabilidad(TIPO_HB_SOBRENATURAL), false)));
        ul.append($("<li></li>").append(muestraPersonal(UI_PD_PSIQUICA, personaje_actual.gastoActualPDsGrupoHabilidad(TIPO_HB_PSIQUICA) + "/" + personaje_actual.maxPDsGrupoHabilidad(TIPO_HB_PSIQUICA), false)));
        ul.append($("<li></li>").append(muestraPersonal(UI_PD_SECUNDARIAS, personaje_actual.gastoActualPDsSecundarias(), false)));
        divContenido.append(ul);
    }

    if ((estadoGeneracion == ESTADO_GENERACION_INICIADA)) {
        divContenido.append(muestraPersonal(UI_PUNTOS_CREACION, personaje_actual.getPCTotales() +
            "(" + personaje_actual.getPC("PC_libres_generales") + " " + UI_PUNTOS_SIN_USAR + ")" +
            "(" + personaje_actual.getPC("PC_libres_don") + " " + UI_PC_DON + ")" +
            "(" + personaje_actual.getPC("PC_libres_psiquicas") + " " + UI_PC_PSIQUICA + ")", false));
    }

    if (mostrarPDyPCArriba) {
        var divPDArriba = $("<p></p>").css("font-size","smaller");
        divPDArriba.css("margin-bottom","0px");
        var divPCArriba = $("<p></p>").css("font-size","smaller");
        divPCArriba.css("margin-bottom","0px");
        var divDestinoAlto =$("#infoSuperior");
        divDestinoAlto.empty();
        divDestinoAlto.append(divPDArriba.html("PD:" +personaje_actual.getPDLibres() + "/" + personaje_actual.getPDTotales()));
        divDestinoAlto.append(divPCArriba.html("PC:" +personaje_actual.getPCLibres() + "/" + personaje_actual.getPCTotales()));
    }


    if ((estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL)) {
        divContenido.append(muestraPersonal(UI_AUMENTOS_CARACTERISTICAS, personaje_actual.getAumentosCaracteristicasLibres(), false));
    }

    divContenido.append(muestraPersonal(UI_PX, personaje_actual.getPX(), modificarPX, elegirPX));

    div.append(divContenido);
    return div;
}

/**
 *
 * @param {string} etiqueta
 * @param {number|string} valor
 * @param {boolean} mostrarBotonEleccionManual
 * @param {function} [funcionEleccionManual]
 * @returns {jQuery}
 * @param {{}} [parametrosEleccionManual]
 */
function muestraPersonal(etiqueta, valor, mostrarBotonEleccionManual, funcionEleccionManual, parametrosEleccionManual) {
    var divCampo = getDiv(CSS_CAMPO_PERSONALES);
    var divEtiqueta = getDiv(CSS_ETIQUETA);
    var divValor = getDiv(CSS_VALOR_PERSONALES);

    divEtiqueta.append(etiqueta + ":");
    divValor.append(valor);
    divCampo.append(divEtiqueta).append(divValor);

    if (mostrarBotonEleccionManual) {
        var divBoton = boton("small info pretty btn",UI_ELEGIR);
        divBoton.on("click",parametrosEleccionManual,funcionEleccionManual);
//        divBoton.css("width","1rem");
        divCampo.append(divBoton);
    }

    return divCampo;
}

/**
 *
 * @param {string} etiqueta
 * @param {number|string} valor
 * @param {boolean} mostrarBotonEleccionManual
 * @param {function} [funcionEleccionManual]
 * @returns {jQuery}
 * @param {{}} [parametrosEleccionManual]
 * @param {jQuery} divExtra
 */
function muestraPersonalConDivExtra(etiqueta, valor, mostrarBotonEleccionManual, funcionEleccionManual, parametrosEleccionManual, divExtra) {
    var divCampo = getDiv(CSS_CAMPO_PERSONALES);
    var divEtiqueta = getDiv(CSS_ETIQUETA);
    var divValor = getDiv(CSS_VALOR_PERSONALES);

    divEtiqueta.append(etiqueta + ":");
    divValor.append(valor);
    divCampo.append(divEtiqueta).append(divValor);

    if (mostrarBotonEleccionManual) {
        var divBoton = boton("small info pretty btn",UI_ELEGIR);
        divBoton.on("click",parametrosEleccionManual,funcionEleccionManual);
//        divBoton.css("width","1rem");
        divCampo.append(divBoton);
    }

    if (personaje_actual.GENERACION_INICIADA == ESTADO_GENERACION_SUBIENDO_NIVEL) {
        divCampo.append(divExtra);
    }

    return divCampo;
}

function muestraValorPV(modificable) {
    var div = getDiv(CSS_CAMPO_PERSONALES);
    var divCampo = getDiv(CSS_CAMPO_PERSONALES);
    var divCampo2 = getDiv(CSS_CAMPO_PERSONALES);
    var divEtiqueta = getDiv(CSS_ETIQUETA);
    var divValor = getDiv(CSS_VALOR_PERSONALES);

    divEtiqueta.append(UI_PUNTOS_VIDA + ":");
    var valorFinal = parseInt(personaje_actual.pv);

    var tooltip = personaje_actual.pv + "(base)";

    var bonos = personaje_actual.getBonos(BONO_PV, BONO_PV, CATEGORIA_BONO_CUALQUIERA);
    for (var i = 0; i < bonos.length; i++) {
        var bono = bonos[i];
        var valorBono = bono.bono;
        valorFinal += parseInt(valorBono);
        if (valorBono >= 0) {
            valorBono = "+" + valorBono;
        } else {
            valorBono = "" + valorBono;
        }
        tooltip += valorBono + " (" + bono.origen + ")";
    }
    tooltip += "=" + valorFinal + " (final)";

    divValor.append(valorFinal);

    addToolTip(divValor,tooltip);

    divCampo.append(divEtiqueta).append(divValor);

    var divCoste = getDiv(CSS_COSTE);
    divCoste.addClass("textSmaller");
    divCoste.append("[" + personaje_actual.getCostePV() + "] ");

    var etiMultip = getDiv(CSS_ETIQUETA).append(UI_MULTIPLO_VIDA + ": ");
    var valorMultip = getDiv(CSS_VALOR_PERSONALES).append(personaje_actual.getHabilidadDePersonaje(HB_MULTIPLO_VIDA).valorBase(personaje_actual.getCostePV()));

    divCampo2.append(divCoste).append(etiMultip).append(valorMultip);

    if (modificable) {
        divCampo2.append(muestraBotonMasMenosHabilidad(HB_MULTIPLO_VIDA).addClass(CSS_MUESTRA_INLINE));
    }

    div.append(divCampo).append(divCampo2);

    return div;
}

function muestraValorRegeneracion() {
    var divCampo = getDiv(CSS_CAMPO_PERSONALES);
    var divEtiqueta = getDiv(CSS_ETIQUETA);
    var divValor = getDiv(CSS_VALOR_PERSONALES);

    divEtiqueta.append(UI_REGENERACION + ":");
    var valorFinal = parseInt(personaje_actual.getRegeneracionBase());

    var tooltip = personaje_actual.getRegeneracionBase() + "(base)";

    var bonos = personaje_actual.getBonos(BONO_REGENERACION, BONO_REGENERACION, CATEGORIA_BONO_CUALQUIERA);
    for (var i = 0; i < bonos.length; i++) {
        var bono = bonos[i];
        var valorBono = bono.bono;
        valorFinal += parseInt(valorBono);
        if (valorBono >= 0) {
            valorBono = "+" + valorBono;
        } else {
            valorBono = "" + valorBono;
        }
        tooltip += valorBono + " (" + bono.origen + ")";
    }
    tooltip += "=" + valorFinal + " (final)";

    divValor.append(valorFinal);

    addToolTip(divValor,tooltip);

    divCampo.append(divEtiqueta).append(divValor).append("<br>");

    return divCampo;
}

/******** caracteristicas *************/
function muestraCaracteristicas(estadoGeneracion) {
    var div = recuadroBase();
    div.append(muestraSubtitulo(UI_CARACTERISTICAS, true));
    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);

    var divRow = getDiv(CSS_TEXTO_SMALL);
    divRow.addClass("row");
    var divNombre = getDiv("four columns");
    divNombre.append("Característica");
    var divValor = getDiv("three columns").addClass(CSS_TEXTO_CENTRO);
    divValor.append("Valor");
    var divBono = getDiv("three columns").addClass(CSS_TEXTO_CENTRO);
    divBono.append("Bono");
    var divAumento = getDiv("two columns");
    divRow.append(divNombre).append(divValor).append(divBono).append(divAumento);
    divContenido.append(divRow);

    for (var i = 0;i<CARACTERISTICAS_NOMBRES.length;i++) {
        var valor = personaje_actual.getCaracteristica(CARACTERISTICAS_NOMBRES[i]);
        var bono = modificadorBonito(personaje_actual.getBonoCaracteristica(CARACTERISTICAS_NOMBRES[i]));

        divContenido.append(muestraCaracteristica(CARACTERISTICAS_NOMBRES[i],valor,bono,(estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL)));
    }

    div.append(divContenido);
    return div;
}

/**
 *
 * @param {string} nombre
 * @param {number} valor
 * @param {string} bono
 * @param {boolean} mostrarBotonesAumento
 * @returns {jQuery}
 */
function muestraCaracteristica(nombre, valor, bono, mostrarBotonesAumento) {

    var divRow = getDiv("row").addClass(CSS_CAMPO_CARACTERISTICAS);
    var divNombre = getDiv("four columns").addClass(CSS_ETIQUETA);
    var divValor = getDiv("three columns").addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_CENTRO);
    var divBono = getDiv("three columns").addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_CENTRO);
    var divAumento = getDiv("two columns");

    divRow.append(divNombre).append(divValor).append(divBono);

    if (mostrarBotonesAumento) {
        console.debug("Se muestran botones para " + nombre);
        divRow.append(divAumento);
        var botonMas = muestraBotonPequeño("+",{caracteristica:nombre},gastaAumentoCaracteristica,"");
        divAumento.append(botonMas);

        var botonMenos = muestraBotonPequeño("-",{caracteristica:nombre},recuperaAumentoCaracteristica,"")
        divAumento.append(botonMenos);

        if (personaje_actual.getAumentosCaracteristicasLibres() < 1) {
            disableButton(botonMas);
            console.debug("Mas desactivado");
        }

        disableButton(botonMenos);
        console.debug("Menos desactivado");
        if (personaje_actual.aumentoGastadoEn(nombre)) {
            enableButton(botonMenos);
            console.debug("Menos activado");
        }
    }

    divNombre.append(nombre);
    divValor.append(valor);
    divBono.append(bono);

    divRow.append(divNombre).append(divValor).append(divBono);

    return divRow;
}

/******* resistencias ***********/
function muestraResistencias(estadoGeneracion) {
    var div = recuadroBase();
    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);

    div.append(muestraSubtitulo(UI_RESISTENCIAS, true));

    var multiplicador;

    if (personaje_actual.hasFlag(FLAG_RF_A_MITAD)) {
        multiplicador = MULTIPLICADOR_MITAD;
    } else {
        multiplicador = MULTIPLICADOR_ENTERO;
    }
    divContenido.append(muestraValorConBonos(UI_RF, personaje_actual.getPresencia(), personaje_actual.getBonos(BONO_RESISTENCIA, RF, CATEGORIA_BONO_CUALQUIERA),multiplicador));
    if (personaje_actual.hasFlag(FLAG_RE_A_MITAD)) {
        multiplicador = MULTIPLICADOR_MITAD;
    } else {
        multiplicador = MULTIPLICADOR_ENTERO;
    }
    divContenido.append(muestraValorConBonos(UI_RE, personaje_actual.getPresencia(), personaje_actual.getBonos(BONO_RESISTENCIA, RE, CATEGORIA_BONO_CUALQUIERA),multiplicador));
    if (personaje_actual.hasFlag(FLAG_RV_A_MITAD)) {
        multiplicador = MULTIPLICADOR_MITAD;
    } else {
        multiplicador = MULTIPLICADOR_ENTERO;
    }
    divContenido.append(muestraValorConBonos(UI_RV, personaje_actual.getPresencia(), personaje_actual.getBonos(BONO_RESISTENCIA, RV, CATEGORIA_BONO_CUALQUIERA),multiplicador));
    if (personaje_actual.hasFlag(FLAG_RM_A_MITAD)) {
        multiplicador = MULTIPLICADOR_MITAD;
    } else {
        multiplicador = MULTIPLICADOR_ENTERO;
    }
    divContenido.append(muestraValorConBonos(UI_RM, personaje_actual.getPresencia(), personaje_actual.getBonos(BONO_RESISTENCIA, RM, CATEGORIA_BONO_CUALQUIERA),multiplicador));
    if (personaje_actual.hasFlag(FLAG_RP_A_MITAD)) {
        multiplicador = MULTIPLICADOR_MITAD;
    } else {
        multiplicador = MULTIPLICADOR_ENTERO;
    }
    divContenido.append(muestraValorConBonos(UI_RP, personaje_actual.getPresencia(), personaje_actual.getBonos(BONO_RESISTENCIA, RP, CATEGORIA_BONO_CUALQUIERA),multiplicador));

    div.append(divContenido);
    return div;
}

function muestraValorConBonos(etiqueta, valorBase, bonos,multiplicador) {
    var divCampo = getDiv(CSS_CAMPO_PERSONALES);
    var divEtiqueta = getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALL);
    var divValor = getDiv(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_SMALL);

    if (multiplicador == undefined) {
        multiplicador = 1;
    }

    var tooltip = "";

    divEtiqueta.append(etiqueta + ":");
    divValor.append(valorBase + "(base)");
    tooltip = valorBase + "(base)";
    var valorFinal = parseInt(valorBase);
    var valorBonos = 0;
    for (var i = 0; i < bonos.length; i++) {
        var bono = bonos[i];
        var valorBono = bono.bono;
        valorFinal += parseInt(valorBono);
        valorBonos += parseInt(valorBono);
        if (valorBono >= 0) {
            valorBono = "+" + valorBono;
        } else {
            valorBono = "" + valorBono;
        }
        tooltip += valorBono + " (" + bono.origen + ")";
    }
    valorFinal *= multiplicador;

    if (multiplicador < 1) {
        tooltip += " x" + multiplicador;
    }
    if (valorBonos >= 0) {
        valorBonos = "+" + valorBonos;
    } else {
        valorBonos = "" + valorBonos;
    }
    tooltip += "=" + valorFinal + " (final)";
    divValor.append(valorBonos + "(bonos) =" + valorFinal + " (final)");

    addToolTip(divValor,tooltip);

    divCampo.append(divEtiqueta).append(divValor);

    return divCampo;
}

function muestraElan(estadoGeneracion) {
    var div = recuadroBase();

    var muestraBotones = ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL));

    div.append(muestraSubtitulo(UI_ELAN, true));
    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);

    if (personaje_actual.elan.length == 0) {
        divContenido.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALLER).html("<br>"));
    }
    for (var i = 0; i < personaje_actual.elan.length; i++) {
        var elanPersonaje = personaje_actual.elan[i];

        var divElan = getDiv(CSS_MUESTRA_BLOCK).addClass(CSS_TEXTO_SMALLER);
        var divEtiElan = getDiv(CSS_ETIQUETA).html(elanPersonaje.nombre);
        var divSincro = getDiv(CSS_COSTE).html("(" + elanPersonaje.getSincronizacion().toString() + "/" + (elanPersonaje.getSincronizacion()-elanPersonaje.getSinGastada()).toString() + " libre)");
        divElan.append(divEtiElan).append(divSincro);
        divContenido.append(divElan);

        if (elanPersonaje.dones.length > 0) {
            var divDones = getDiv(CSS_TABULADO);
            for (var j = 0; j < elanPersonaje.dones.length; j++) {
                var divNombreDon = getDiv(CSS_TEXTO_SMALLER).addClass(CSS_MUESTRA_BLOCK);
                divNombreDon.append(elanPersonaje.dones[j].nombre);
                addToolTip(divNombreDon,elanPersonaje.dones[j].descripcion);
                divDones.append(divNombreDon);
            }
            divContenido.append(divDones);
        }
    }
    div.append(divContenido);
    return div;
}

/******* ventajas ********/
function muestraVentajas(estadoGeneracion) {
    var div = recuadroBase();
    var puedeAñadir = false;

    if ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL)) {
        puedeAñadir = true;
    }

    div.append(listaElementosPCComprados(UI_VENTAJAS,personaje_actual.ventajas,anularelementoPCComprado,puedeAñadir, dialogoVentajas,"Comprar ventaja"));

    return div;
}

function muestraDesventajas(estadoGeneracion) {
    var div = recuadroBase(estadoGeneracion);
    var puedeAñadir = false;

    if ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL)) {
        puedeAñadir = true;
    }

    div.append(listaElementosPCComprados(UI_DESVENTAJAS,personaje_actual.desventajas,anularelementoPCComprado,puedeAñadir,dialogoDesventajas,"Comprar desventaja"));

    return div;
}

function listaElementosPCComprados(titulo,arrayElementos,callback,puedeComprarNuevo,callbackBotonNuevo, etiquetaBotonNuevo) {
    var div = getDiv("");

    var divTitulo = muestraSubtitulo(titulo, true);
    div.append(divTitulo);
    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);

    if (puedeComprarNuevo) {
        divContenido.append(botonComprarNuevo(etiquetaBotonNuevo,BOTON_VENTAJAS,callbackBotonNuevo,{}));
    }

    if (arrayElementos.length == 0) {
        divContenido.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALLER).html("<br>"));
    }

    for (var i = 0; i < arrayElementos.length; i++) {
        var ventajaComprada = arrayElementos[i];
        var divV = muestraVentaja(ventajaComprada);
        if (puedeComprarNuevo) {
            if ((ventajaComprada.isAnulable()) && (ventajaComprada.ventaja.origen != ORIGEN_RAZA) && (ventajaComprada.ventaja.origen != ORIGEN_ELAN)) {
                divV.append(muestraBotonAnular(callback,{elementoPCComprado: ventajaComprada}));
            }
        }
        divContenido.append(divV);
    }
    div.append(divContenido);
    return div;
}

function botonComprarNuevo(label, id, callback, parametros) {
    var divBotonNuevo = boton("small primary btn pretty",label);
    divBotonNuevo.attr("id",id);
    divBotonNuevo.on("click",parametros,callback);
    return divBotonNuevo;
}

function muestraVentaja(ventajaComprada) {
    var div = getDiv(CSS_TEXTO_SMALL);

    var divNombre = getDiv(CSS_ETIQUETA);
    var divCoste = getDiv(CSS_COSTE);

    div.append(divNombre).append(divCoste);

    divNombre.append(ventajaComprada.ventaja.nombre);

    if (ventajaComprada.opcion != "") {
        divNombre.append(" (" + ventajaComprada.opcion + ")");
    }
    if (ventajaComprada.origen == ORIGEN_PC) {
        divCoste.append(" [" + ventajaComprada.pc + "]");
    } else {
        divCoste.append(" (" + ventajaComprada.origen + ")");
    }

    addToolTip(div,ventajaComprada.ventaja.descripcion + "<hr>" + ventajaComprada.ventaja.descripcionEfecto);

    return div;
}

/******* habilidades **********/

function muestraHabilidadPrimaria(nombreHabilidad,etiqueta,muestraBotones) {
    var coste = personaje_actual.getCoste(nombreHabilidad, true);

    var mostrarBotones = ((coste != 0) || (nombreHabilidad == HB_POTENCIAL_PSIQUICO)) && muestraBotones;

    return muestraValorConBonosYCoste(etiqueta,
        personaje_actual.getHabilidadDePersonaje(nombreHabilidad).valorBase(coste),
        personaje_actual.getBonos(BONO_HABILIDAD, nombreHabilidad, CATEGORIA_BONO_CUALQUIERA),
        coste,
        (mostrarBotones) ? muestraBotonMasMenosHabilidad(nombreHabilidad).addClass(CSS_MUESTRA_INLINE) : "",
        true,
        (nombreHabilidad == HB_POTENCIAL_PSIQUICO));
}

function muestraCombate(estadoGeneracion) {
    var muestraBotones = ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL));

    var div = recuadroBase();
    div.append(muestraSubtitulo(UI_COMBATE, true));

    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);
    divContenido.append(muestraCabecerasBaseBonosFinal());

    divContenido.append(muestraCombateHabilidadesGenerales(muestraBotones));

    divContenido.append(muestraSubtitulo(UI_ARMAS_MANEJADAS, false));
    divContenido.append(muestraManejoArmas());

    divContenido.append(muestraSubtitulo(UI_ARMADURA, false));
    divContenido.append(muestraArmadura());

    divContenido.append(muestraSubtitulo(UI_TURNO, false));
    divContenido.append(muestraValorConBonos(UI_TURNO, personaje_actual.turnoBase, personaje_actual.getBonos(BONO_TURNO, BONO_TURNO, CATEGORIA_BONO_CUALQUIERA)));

    divContenido.append(muestraSubtitulo(UI_TABLAS, false));
    divContenido.append(muestraTablas([CATEGORIA_TABLA_ARMAS_ARQUETÍPICAS,CATEGORIA_TABLA_ARMAS_ESTILOS,CATEGORIA_TABLA_ARMAS_GENERALES],muestraBotones));

    div.append(divContenido);
    return div;
}

function muestraKi(estadoGeneracion) {
    var div = recuadroBase();

    var muestraBotones = ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL));

    div.append(muestraSubtitulo(UI_DOMINIOS_KI, true));

    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);

    divContenido.append(muestraCMPersonaje());


    divContenido.append(muestraCabecerasBaseBonosFinal());

    divContenido.append(muestraHabilidadPrimaria(HB_KI_AGI,UI_KI_AGI,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_KI_CON,UI_KI_CON,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_KI_DES,UI_KI_DES,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_KI_FUE,UI_KI_FUE,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_KI_POD,UI_KI_POD,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_KI_VOL,UI_KI_VOL,muestraBotones));

    divContenido.append(muestraHabilidadPrimaria(HB_ACUM_KI_AGI,UI_ACUMULACION_KI_AGI,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_ACUM_KI_CON,UI_ACUMULACION_KI_CON,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_ACUM_KI_DES,UI_ACUMULACION_KI_DES,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_ACUM_KI_FUE,UI_ACUMULACION_KI_FUE,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_ACUM_KI_POD,UI_ACUMULACION_KI_POD,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_ACUM_KI_VOL,UI_ACUMULACION_KI_VOL,muestraBotones));

    divContenido.append(muestraHabilidadesKi(muestraBotones));

    divContenido.append(muestraTecnicasKi(muestraBotones));

    div.append(divContenido);
    return div;
}

function muestraCMPersonaje() {
    var divCM = getDiv("");
    divCM.append(getDiv(CSS_MUESTRA_BLOCK).append(muestraValorConBonos(UI_CM, 0, personaje_actual.getBonos(BONO_CM, BONO_CM, CATEGORIA_BONO_CUALQUIERA))));
    var divCMlibreEti = getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALL).addClass(CSS_MUESTRA_INLINE).append("CM libre: ");
    var divCMlibreValor = getDiv(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_SMALL).addClass(CSS_MUESTRA_INLINE).append(personaje_actual.getCMTotal()-personaje_actual.getCMGastado());
    divCM.append(getDiv(CSS_TEXTO_SMALL).append(divCMlibreEti).append(divCMlibreValor));
    return divCM;
}


/**
 *
 * @returns {jQuery}
 */
function muestraHabilidadesKi(muestraBotones) {
    var div = getDiv("");

    div.append(muestraSubtitulo(UI_HABILIDADES_KI, false));

    if (muestraBotones) {
        div.append(botonComprarNuevo("Comprar habilidad del ki",BOTON_CM,dialogoCM,{}));
    }

    var habKi = personaje_actual.getHabilidadesKi();

    if (habKi.length == 0) {
        div.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALLER).html("<br>"));
    }
    for (var i = 0; i < habKi.length; i++) {
        var divHabilidad = getDiv("");
        if (habKi[i].isHabilidad()) {
            var divBotones = getDiv("");
            if ((habKi[i].isAnulable()) && muestraBotones) {
                divBotones.append(muestraBotonAnular(anularHabilidadKi,{habilidadKi: habKi[i]}));
            }
            divHabilidad.append(
                muestraValorConBonosYCoste(
                    habKi[i].getNombre(),
                    habKi[i].getValorActual(personaje_actual),
                    personaje_actual.getBonos(BONO_KI, habKi[i].getNombre(), CATEGORIA_BONO_CUALQUIERA),
                    0,
                    divBotones,
                    true,
                    false)
            );
        } else {
            divHabilidad.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALL).append(habKi[i].getNombre()));
            if (muestraBotones) {
                divHabilidad.append(muestraBotonAnular(anularHabilidadKi,{habilidadKi: habKi[i]}));
            }
        }

        div.append(divHabilidad);
    }

    return div;
}

/**
 *
 * @returns {jQuery}
 */
function muestraTecnicasKi(muestraBotones) {
    var div = getDiv("");
    var tecnicasKi = personaje_actual.getTecnicasKi();

    div.append(muestraSubtitulo(UI_TECNICAS_KI, false));

    if (muestraBotones) {
        var divBotonNuevo = $("<div></div>");
        divBotonNuevo.append(muestraBotonPequeño("Comprar técnica del dominio",{},dialogoCM,BOTON_CM));
        div.append(divBotonNuevo);
    } else if (tecnicasKi.length == 0) {
        div.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALLER).html("<br>"));
    }

    for (var i = 0; i < tecnicasKi.length; i++) {
        var divTecnica = getDiv("");

        divTecnica.append(tecnicasKi[i].getNombre());
        if (muestraBotones) {
            divTecnica.append(muestraBotonAnular(anularTecnicaKi,{tecnicaKi: tecnicasKi[i]}));
        }

        div.append(divTecnica);
    }

    return div;
}

/**
 *
 * @returns {jQuery}
 */
function muestraCombateHabilidadesGenerales(muestraBotones) {
    var div = $("<div></div>");

    div.append(muestraHabilidadPrimaria(HB_ATAQUE, UI_ATAQUE,muestraBotones));
    div.append(muestraHabilidadPrimaria(HB_PARADA, UI_PARADA,muestraBotones));

    div.append(muestraHabilidadPrimaria(HB_ESQUIVA, UI_ESQUIVA,muestraBotones));

    div.append(muestraHabilidadPrimaria(HB_ARMADURA, UI_LLEVAR_ARMADURA,muestraBotones));

    return div;
}

function muestraArmadura() {
    var div = getDiv(CSS_TEXTO_SMALL).addClass("sixteen colgrid");
    var divRow = getDiv("row");
    for (var i = 0; i < TAS_ARMADURA.length; i++) {
        var divTA = getDiv(CSS_ETIQUETA).addClass(CSS_MUESTRA_INLINE);
        var divValor = getDiv(CSS_VALOR_PERSONALES).addClass(CSS_MUESTRA_INLINE);
        var divCol;
        if (i == 0) {
            divCol = getDiv("push_one two columns");
        } else {
            divCol = getDiv("two columns");
        }
        divCol
            .append(divTA.append(TAS_ARMADURA[i] + ":"))
            .append(divValor.append(personaje_actual.getArmadura(TAS_ARMADURA[i])));
        divRow.append(divCol);
    }
    div.append(divRow);
    return div;
}

function muestraManejoArmas() {
    var div = getDiv(CSS_TEXTO_SMALL);
    var divInicial = getDiv(CSS_MUESTRA_BLOCK);
    var divEtiInicial = getDiv(CSS_ETIQUETA).addClass(CSS_MUESTRA_INLINE).append("Arma inicial: ");
    var divValorInicial = getDiv(CSS_VALOR_PERSONALES).addClass(CSS_MUESTRA_INLINE).append(personaje_actual.getArmaInicial());
    div.append(divInicial.append(divEtiInicial).append(divValorInicial));
    if (personaje_actual.manejoArmas.length > 1) {
        var divAdicional = getDiv(CSS_MUESTRA_BLOCK);
        var divMasArmasEti = getDiv(CSS_ETIQUETA).addClass(CSS_MUESTRA_INLINE).append("Otras armas: ");
        divAdicional.append(divMasArmasEti);
        for (var i = 0; i < personaje_actual.manejoArmas.length; i++) {
            var divMasValor = getDiv(CSS_VALOR_PERSONALES).addClass(CSS_LISTA_INLINE).addClass(CSS_MUESTRA_INLINE).append(personaje_actual.manejoArmas[i].nombre);
            divAdicional.append(divMasValor);
        }
        div.append(divAdicional);
    }
    return div;
}


function muestraSobrenatural(estadoGeneracion) {
    var div = recuadroBase();

    var muestraBotones = ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL));
    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);
    div.append(muestraSubtitulo(UI_SOBRENATURALES, true));
    divContenido.append(muestraCabecerasBaseBonosFinal());

    divContenido.append(muestraHabilidadPrimaria(HB_ZEON,UI_ZEON,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_ACT,UI_ACT,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_PROYECCION_MAGICA,UI_PROYECCION_MAGICA,muestraBotones));

    divContenido.append(muestraMagiaInnata());

    divContenido.append(muestraSubtitulo(UI_VIAS, false));
    divContenido.append(muestraViasMagia(muestraBotones));

    divContenido.append(muestraSubtitulo(UI_CONJUROS, false));
    divContenido.append(muestraConjurosSueltos(muestraBotones));

    divContenido.append(muestraSubtitulo(UI_TABLAS, false));
    divContenido.append(muestraTablas([CATEGORIA_TABLA_MISTICAS],muestraBotones));

    divContenido.append(muestraSubtitulo(UI_CONVOCATORIA, false));
    divContenido.append(muestraCabecerasBaseBonosFinal());

    divContenido.append(muestraHabilidadPrimaria(HB_CONVOCAR,UI_CONVOCAR,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_DOMINAR,UI_DOMINAR,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_ATAR,UI_ATAR,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_DESCONVOCAR,UI_DESCONVOCAR,muestraBotones));

    div.append(divContenido);
    return div;
}

function muestraMagiaInnata() {
    var div = getDiv(CSS_TEXTO_SMALL);
    var divEtiqueta = getDiv(CSS_ETIQUETA).append("Magia innata: ");
    var divValor = getDiv(CSS_VALOR_PERSONALES).append(personaje_actual.getZeonMagiaInnata());
    div.append(divEtiqueta).append(divValor);
    return div;
}

/**
 *
 * @returns {jQuery}
 */
function muestraViasMagia(muestraBotones) {
    var div = $("<div></div>");
    var i,j;
    var divVias = $("<div></div>");

    var viasMagia = personaje_actual.getViasMagia();

    if (muestraBotones) {
        var divBotonNuevo = getDiv("");
        divBotonNuevo.append(muestraBotonPequeño("Aumentar niveles en vías",{},dialogoMagia,BOTON_MAGIA));
        div.append(divBotonNuevo);
    } else if (viasMagia.length == 0) {
        div.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALLER).html("<br>"));
    }

    for (i=0; i < viasMagia.length;i++) {
        var divVia = getDiv(CSS_TEXTO_SMALL);
        var divNombre = getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALL).addClass(CSS_MUESTRA_INLINE).append(viasMagia[i].getVia().getNombre());
        var divNivel = getDiv(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_SMALL).addClass(CSS_MUESTRA_INLINE).append(" (nv " + viasMagia[i].getNivel() + ")");
        divVia.append(divNombre).append(divNivel);
        divVias.append(divVia);
        var divListaConjuros = getDiv("row");
        for (j=2; j <= viasMagia[i].getNivel(); j += 2) {
            var conjuro = viasMagia[i].getConjuro(j);
            if(!conjuro) {
                var botonDefinir = muestraBotonElegirConjuroLibreAcceso(viasMagia[i].getVia(),j).addClass(CSS_TEXTO_CENTRO).addClass("four columns");
                divListaConjuros.append(botonDefinir);
            } else {
                var divConjuro = getDiv(CSS_TEXTO_SMALL).addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_CENTRO).addClass("four columns");
                divConjuro.append(conjuro.getNombre() + " (" +conjuro.getNivel()+")" );
                addToolTip(divConjuro,"Nivel: "+conjuro.getNivel()/*+"<hr>"+conjuro.getEfecto()*/);
                divListaConjuros.append(divConjuro);
            }
        }
        divVias.append(divListaConjuros);
    }

    div.append(divVias);

    return div;
}

/**
 *
 * @returns {jQuery}
 */
function muestraConjurosSueltos(muestraBotones) {
    var div = getDiv("");
    var i;
    var divConjuros = getDiv("row");

    var conjuros = personaje_actual.getConjurosSueltos();

    if (muestraBotones) {
        div.append(muestraBotonElegirConjuroSuelto());
    } else if (conjuros.length == 0) {
        div.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALLER).html("<br>"));
    }

    for (i=0; i < conjuros.length;i++) {
        var conjuro = conjuros[i];
        var divConjuro = getDiv(CSS_TEXTO_SMALL).addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_CENTRO).addClass("four columns");
        divConjuro.append(conjuro.getNombre() + " (" +conjuro.getNivel()+")" );
        addToolTip(divConjuro,"Nivel: "+conjuro.getNivel()/*+"<hr>"+conjuro.getEfecto()*/);
        divConjuros.append(divConjuro);
    }

    div.append(divConjuros);
    return div;
}

/**
 *
 * @returns {jQuery}
 */
function muestraPsiquica(estadoGeneracion) {
    var div = recuadroBase();

    var muestraBotones = ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL));
    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);
    div.append(muestraSubtitulo(UI_PSIQUICA, true));

    divContenido.append(muestraCabecerasBaseBonosFinal());

    divContenido.append(muestraHabilidadPrimaria(HB_CV,UI_CV,muestraBotones));
    divContenido.append(muestraCVLibres());

    divContenido.append(muestraHabilidadPrimaria(HB_PROYECCION_PSIQUICA,UI_PROYECCION_PSIQUICA,muestraBotones));
    divContenido.append(muestraHabilidadPrimaria(HB_POTENCIAL_PSIQUICO,UI_POTENCIAL_PSIQUICO,muestraBotones));

    divContenido.append(muestraInnatos(muestraBotones));

    if (muestraBotones) {
        var divBotonNuevo = getDiv("");
        divBotonNuevo.append(muestraBotonPequeño("Gastar CVs",{},dialogoCV,BOTON_CV));
        divContenido.append(divBotonNuevo);
    }

    divContenido.append(muestraDisciplinasYPoderes(muestraBotones));

    divContenido.append(muestraSubtitulo(UI_TABLAS, false));
    divContenido.append(muestraTablas([CATEGORIA_TABLA_PSIQUICAS],muestraBotones));

    div.append(divContenido);
    return div;
}

function muestraCVLibres() {
    var div = getDiv("row");
    var divEtiqueta = getDiv("four columns").addClass(CSS_TEXTO_SMALL).addClass(CSS_ETIQUETA).append("CV Libres");
    var divValor = getDiv("one column").addClass(CSS_TEXTO_SMALL).addClass(CSS_VALOR_PERSONALES).append((personaje_actual.getHabilidadDePersonaje(HB_CV).valorFinalActual() - personaje_actual.cv_gastados));
    div.append(divEtiqueta).append(divValor);
    return div;
}

function muestraDisciplinasYPoderes(muestraBotones) {
    var div = getDiv("");
    var i;
    var divDisciplinas = getDiv(CSS_TEXTO_SMALL);
    div.append(muestraSubtitulo("Afinidad con disciplinas", false));

    if (muestraBotones) {
        var divBotonNuevaDisciplina = getDiv("");
        divBotonNuevaDisciplina.append(muestraBotonPequeño("Gastar CVs",{},dialogoCV,BOTON_CV));
        divDisciplinas.append(divBotonNuevaDisciplina);
    } else if (personaje_actual.disciplinasPsiquicas.length == 0) {
        divDisciplinas.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALLER).html("<br>"));
    }

    for (i=0; i < personaje_actual.disciplinasPsiquicas.length;i++) {
        var divDisciplina = getDiv(CSS_ETIQUETA).addClass(CSS_MUESTRA_BLOCK).append(personaje_actual.disciplinasPsiquicas[i].nombre);
        addToolTip(divDisciplina,personaje_actual.disciplinasPsiquicas[i].getDescripcion());
        divDisciplinas.append(divDisciplina);
    }

    div.append(divDisciplinas);

    div.append(muestraSubtitulo("Poderes dominados", false));
    var divPoderes = getDiv("");

    if (muestraBotones) {
        var divBotonNuevoPoder = getDiv("");
        divBotonNuevoPoder.append(muestraBotonPequeño("Gastar CVs",{},dialogoCV,BOTON_CV));
        divPoderes.append(divBotonNuevoPoder);
    } else if (personaje_actual.poderesPsiquicosDominados.length == 0) {
        divPoderes.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALLER).html("<br>"));
    }

    for (i=0; i < personaje_actual.poderesPsiquicosDominados.length;i++) {
        var divPoder = getDiv(CSS_TEXTO_SMALL);

        var divNombre = getDiv(CSS_ETIQUETA).addClass(CSS_MUESTRA_INLINE).append(personaje_actual.poderesPsiquicosDominados[i].poder.nombre);
        var divFortalecimiento = getDiv(CSS_VALOR_PERSONALES).addClass(CSS_MUESTRA_INLINE).append(" (+" + 10*personaje_actual.poderesPsiquicosDominados[i].fortalecimiento + ")");
        divPoderes.append(divPoder.append(divNombre).append(divFortalecimiento));
    }

    div.append(divPoderes);

    return div;
}

function muestraInnatos(muestraBotones) {
    var div = getDiv("row");

    var divNombre = getDiv("four columns");

    var divEtiqueta = getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALL);

    var divValor = getDiv("one columns").addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_SMALL);

    var divCoste = getDiv(CSS_COSTE).addClass(CSS_TEXTO_SMALL);

    divCoste.append("[2 CV] ");

    divEtiqueta.append("Innatos");

    divNombre.append(divCoste).append(divEtiqueta);
    divValor.append(personaje_actual.getInnatosPsiquicos())

    div.append(divNombre).append(divValor);

    var divBotones = getDiv("push_four two columns");

    var botonMasInnato = boton("small primary pretty btn","+",(personaje_actual.getHabilidadDePersonaje(HB_CV).valorFinalActual()-personaje_actual.cv_gastados < 2));

    var botonMenosInnato = boton("small primary pretty btn","-",(personaje_actual.innatosPsiquicos == 0));

    botonMasInnato.on("click", {cantidad: 1}, comprarInnato);

    botonMenosInnato.on("click", {cantidad: -1}, comprarInnato);

    divBotones.append(botonMasInnato).append(botonMenosInnato);

    if (muestraBotones) {
        div.append(divBotones);
    }
    return div;
}

function muestraCabecerasBaseBonosFinal() {
    var div = getDiv(CSS_TEXTO_SMALL);
    div.addClass("row");
    var divNombre = $("<div>Nombre</div>");
    divNombre.addClass("four columns");
    var divBase = $("<div>Base</div>");
    divBase.addClass("one columns");
    var divBonos = $("<div>Bonos</div>");
    divBonos.addClass("two columns");
    var divFinal = $("<div>Final</div>");
    divFinal.addClass("one columns");

    div.append(divNombre).append(divBase).append(divBonos).append(divFinal);

    return div;
}
function muestraSecundarias(estadoGeneracion) {
    var div = recuadroBase();
    var muestraBotones = ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL));

    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);
    div.addClass("tablaSecundarias");

    div.append(muestraSubtitulo(UI_SECUNDARIAS, true));


    for (var i = 0; i <habilidades_secundarias.length; i++) {
        var grupoHab = habilidades_secundarias[i];

        divContenido.append(muestraSubtitulo(habilidades_secundarias_nombres_grupos[i], false));
        divContenido.append(muestraCabecerasBaseBonosFinal());

        for (var j = 0; j< grupoHab.length; j++) {
            var habilidadDePersonaje = personaje_actual.getHabilidadDePersonaje(grupoHab[j]);
            var coste = personaje_actual.getCoste(habilidadDePersonaje.getHabilidad().getNombre(),false);
            var valorBase = habilidadDePersonaje.valorBase(coste);
            var etiqueta = habilidadDePersonaje.getHabilidad().getNombre();
            var divBotones = $("<div></div>");
            if (muestraBotones) {
                divBotones.append(muestraBotonMasMenosHabilidad(habilidadDePersonaje.getHabilidad().getNombre()).addClass(CSS_MUESTRA_INLINE));
                if (habilidadDePersonaje.getHabilidad().getEspecializacionesPosibles().length > 0) {
                    divBotones.append(muestraBotonElegirEspecialidad(habilidadDePersonaje.getHabilidad().getNombre()).addClass(CSS_MUESTRA_INLINE));
                }
            }
            if (habilidadDePersonaje.getEspecializacion() != "") {
                etiqueta += " (" + habilidadDePersonaje.getEspecializacion() + ")";
            }
            divContenido.append(
                muestraValorConBonosYCoste(etiqueta, habilidadDePersonaje.valorBase(coste), personaje_actual.getBonos(BONO_HABILIDAD, habilidadDePersonaje.getHabilidad().getNombre(), CATEGORIA_BONO_CUALQUIERA), coste, divBotones, (valorBase != HABILIDAD_NO_USABLE), false)
            );
        }
    }

    div.append(divContenido);
    return div;

}

function muestraValorConBonosYCoste(etiqueta, valorBase, bonos, coste, toAppend, usable, esPotencialPsiquico) {
    var divRow = getDiv("row");

    var divEtiqueta = getDiv("four columns").addClass(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALL);

    var divValorBase = getDiv("one columns").addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_SMALL);

    var divBonos = getDiv("two columns").addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_SMALL);

    var divValor = getDiv("one columns").addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_SMALL);

    var divCoste;
    if (coste != 0) {
        divCoste = getDiv(CSS_COSTE).addClass(CSS_TEXTO_SMALL);
        divCoste.append("[" + coste + "] ");
        divEtiqueta.append(divCoste);
    } else {
        if (esPotencialPsiquico) {
            var costePotencial = siguienteCostePotencial(personaje_actual.getHabilidadDePersonaje(HB_POTENCIAL_PSIQUICO).CVsGastados);
            if (costePotencial != -1) {
                costePotencial = "[" + costePotencial + " CV] ";
            } else {
                costePotencial = "[max] ";
            }

            divCoste = getDiv(CSS_COSTE).addClass(CSS_TEXTO_SMALL);
            divCoste.append(costePotencial);
            divEtiqueta.append(divCoste);

        }
    }

    var valorBonos = 0;
    var tooltip = "";

    divEtiqueta.append(etiqueta + ":");

    if (usable) {
        divValorBase.append(valorBase);
        tooltip = valorBase + "(base)";
    } else {
        divValorBase.append(UI_NO_USABLE_SIN_RANGOS);
        tooltip = UI_NO_USABLE_SIN_RANGOS + "(base)";
    }

    var valorFinal = parseInt(valorBase);
    for (var i = 0; i < bonos.length; i++) {
        /**
         *
         * @type {Bono}
         */
        var bono = bonos[i];
        var valorBono = bono.getBonoParaNivel(personaje_actual.getNivel(),personaje_actual);
        valorFinal += parseInt(valorBono);
        valorBonos += parseInt(valorBono);
        if (valorBono >= 0) {
            valorBono = "+" + valorBono;
        } else {
            valorBono = "" + valorBono;
        }
        tooltip += valorBono + " (" + bono.origen + ")";
    }
    if (valorBonos >= 0) {
        valorBonos = "+" + valorBonos;
    } else {
        valorBonos = "" + valorBonos;
    }
    divBonos.append(valorBonos);
    if (usable) {
        divValor.append("=" + valorFinal);
        tooltip += "=" + valorFinal + " (final)";
    } else {
        divValor.append("=" + UI_NO_USABLE_SIN_RANGOS);
        tooltip += "=" + UI_NO_USABLE_SIN_RANGOS + " (final)";
    }
    addToolTip(divRow,tooltip);

    divRow.append(divEtiqueta).append(divValorBase).append(divBonos).append(divValor);

    if (toAppend != undefined) {
        var divAppend = getDiv("push_one three columns");
        divAppend.append(toAppend);
        divRow.append(divAppend);
    }

    return divRow;
}

function muestraValorPuntual(coste, etiqueta, valorBase, parametros, toAppend) {
    var divRow = getDiv("row");
    var divEtiqueta = getDiv("four columns").addClass(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALL);
    var divValorBase = getDiv("one columns").addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_SMALL);
    var divBonos = getDiv("two columns").addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_SMALL);
    var divValor = getDiv("one columns").addClass(CSS_VALOR_PERSONALES).addClass(CSS_TEXTO_SMALL);

    var divCoste;
    if (coste != 0) {
        divCoste = getDiv(CSS_COSTE).addClass(CSS_TEXTO_SMALL);
        divCoste.append("[" + coste + "] ");
        divEtiqueta.append(divCoste);
    }

    var tooltip = "";

    divEtiqueta.append(etiqueta + ":");

    divValorBase.append(valorBase);
    tooltip = valorBase + "(base)";

    var valorFinal = parseInt(valorBase);

    if (parametros.valorBonos) {
        parametros.valorBonos = modificadorBonito(parametros.valorBonos);
        tooltip += parametros.valorBonos + " (bonos)";
        divBonos.append(parametros.valorBonos);
    }

    if (parametros.descripcion) {
        valorFinal += " " + parametros.descripcion;
    }

    divValor.append("=" + valorFinal);
    tooltip += "=" + valorFinal + " (final)";
    addToolTip(divRow,tooltip);

    divRow.append(divEtiqueta).append(divValorBase).append(divBonos).append(divValor);

    if (toAppend != undefined) {
        var divAppend = getDiv("push_one three columns");
        divAppend.append(toAppend);
        divRow.append(divAppend);
    }

    return divRow;
}


function muestraTablas(tiposTablas,muestraBotones) {
    var div = getDiv("");

    var listables = 0;

    for (var i = 0; i < personaje_actual.tablasArmas.length; i++) {
        var tablaArmas = personaje_actual.tablasArmas[i];
        var listable = false;

        for (var j = 0; j < tiposTablas.length; j++) {
            if (tablaArmas.getCategoriaTabla() == tiposTablas[j]) {
                listable = true;
                listables++;
                break;
            }
        }

        if (listable) {
            var divV = getDiv(CSS_TEXTO_SMALL);
            var divNombre = getDiv(CSS_ETIQUETA).addClass(CSS_MUESTRA_INLINE).append(tablaArmas.getNombre());
            if (tablaArmas.getOpcion() != "") {
                divNombre.append(" (" + tablaArmas.getOpcion() + ")");
            }
            divV.append(divNombre);
            var divCoste = getDiv(CSS_VALOR_PERSONALES).addClass(CSS_MUESTRA_INLINE).append(" [" + tablaArmas.getCoste(personaje_actual) + "]");
            divV.append(divCoste);
            if ((muestraBotones) && (tablaArmas.isAnulable())) {
                divV.append(muestraBotonAnular(anularTablaArmas,{tablaArmas: tablaArmas}));
            }
            div.append(divV);
        }
    }

    if (muestraBotones) {
        div.append(botonComprarNuevo("Comprar tabla de armas",BOTON_TABLAS_ARMAS,dialogoTablasArmas,{}));
    } else if (listables == 0) {
        div.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALLER).html("<br>"));
    }

    return div;
}

/**
 *
 * @param {{data:{tablaArmas:TablaArmasComprada}}} event
 */
function anularTablaArmas(event) {
    var tabla = event.data.tablaArmas;
    var coste = tabla.getCoste(personaje_actual);

    personaje_actual.addPDLibres(coste);
    personaje_actual.removeTablaArmas(tabla.getNombre(),tabla.getOpcion());
    muestraPersonaje();
}








var DIV_DESTINO_CONTROLES = "#divControles";
var BTN_TIPO = "Tipo";
var DIV_DESTINO_EXPLICACION_GENERACION = "explicacionMetodo";

var DIV_DIALOGO_REPARTO_CARACTERISTICAS = "dialogRepartoCaracteristicas";

var UI_REPARTO_CARACTERISTICAS = "Asigna los valores";
var DIV_DESTINO_EXPLICACION_RAZA = ".explicacionRaza";
var DIV_DESTINO_EXPLICACION_ARMA = ".explicacionArma";
var DIV_DESTINO_EXPLICACION_VENTAJA = ".explicacionVentaja";
var DIV_DESTINO_EXPLICACION_DESVENTAJA = ".explicacionDesventaja";

var BOTON_CREACION = "BOTON_CREACION";
var BOTON_RAZA = "BOTON_RAZA";
var BOTON_CATEGORIA = "BOTON_CATEGORIA";
var BOTON_VENTAJAS = "BOTON_VENTAJAS";
var BOTON_BONOS_NATURALES = "BOTON_BONOS_NATURALES";
var BOTON_ARMA_INICIAL = "BOTON_ARMA_INICIAL";
var BOTON_TABLAS_ARMAS = "BOTON_TABLAS_ARMAS";
var BOTON_ARTES_MARCIALES = "BOTON_ARTES_MARCIALES";
var BOTON_CV = "BOTON_CV";
var BOTON_CM = "BOTON_CM";
var BOTON_MAGIA = "BOTON_MAGIA";
var BOTON_ELAN = "BOTON_ELAN";
var BOTON_FINALIZAR_CREACION = "BOTON_FINALIZAR_CREACION";
var BOTON_SUBIR_NIVEL = "BOTON_SUBIR_NIVEL";

var BOTON_GUARDAR = "BOTON_GUARDAR";
var BOTON_CARGAR = "BOTON_CARGAR";

var BOTON_LOG = "BOTON_LOG";
var BOTON_LICENCIA = "BOTON_LICENCIA";
var BOTON_SOPORTE = "BOTON_SOPORTE";
var BOTON_COMENTARIOS = "BOTON_COMENTARIOS";

/**
 *
 * @type {string[]}
 */
var BOTONES_BARRA_CONTROLES = [
    BOTON_CREACION,
    BOTON_RAZA,
    BOTON_CATEGORIA,
    BOTON_VENTAJAS,
    BOTON_BONOS_NATURALES,
    BOTON_ARMA_INICIAL,
    BOTON_ARTES_MARCIALES,
    BOTON_TABLAS_ARMAS,
    BOTON_CV,
    BOTON_CM,
    BOTON_MAGIA,
    BOTON_ELAN,
    BOTON_FINALIZAR_CREACION,
    BOTON_SUBIR_NIVEL
];

/**
 * Crea los botones de la barra de controles
 */
function muestraControles() {

    $("#"+BOTON_ELAN).off("click",dialogoElan);
    $("#"+BOTON_MAGIA).off("click",dialogoMagia);
    $("#"+BOTON_CV).off("click",dialogoCV);
    $("#"+BOTON_CM).off("click",dialogoCM);
    $("#"+BOTON_TABLAS_ARMAS).off("click",dialogoTablasArmas);
    $("#"+BOTON_ARMA_INICIAL).off("click",dialogoElegirArmaTodas);
    $("#"+BOTON_BONOS_NATURALES).off("click",dialogoBonosNaturales);
    $("#"+BOTON_CREACION).off("click",iniciarGeneracion);
    $("#"+BOTON_FINALIZAR_CREACION).off("click",finalizarGeneracion);
    $("#"+BOTON_SUBIR_NIVEL).off("click",subirNivel);
    $("#"+BOTON_GUARDAR).off("click",muestraDialogoGuardarPersonaje);
    $("#"+BOTON_CARGAR).off("click",muestraDialogoCargarPersonaje);
    $("#"+BOTON_LOG).off("click",mostrarLogCambios);
    $("#"+BOTON_LICENCIA).off("click",mostrarLicencia);

    $("#"+BOTON_ELAN).on("click",dialogoElan);
    $("#"+BOTON_MAGIA).on("click",dialogoMagia);
    $("#"+BOTON_CV).on("click",dialogoCV);
    $("#"+BOTON_CM).on("click",dialogoCM);
    $("#"+BOTON_TABLAS_ARMAS).on("click",dialogoTablasArmas);
    $("#"+BOTON_ARMA_INICIAL).on("click",dialogoElegirArmaTodas);
    $("#"+BOTON_BONOS_NATURALES).on("click",dialogoBonosNaturales);
    $("#"+BOTON_CREACION).on("click",iniciarGeneracion);
    $("#"+BOTON_FINALIZAR_CREACION).on("click",finalizarGeneracion);
    $("#"+BOTON_SUBIR_NIVEL).on("click",subirNivel);
    $("#"+BOTON_GUARDAR).on("click",muestraDialogoGuardarPersonaje);
    $("#"+BOTON_CARGAR).on("click",muestraDialogoCargarPersonaje);
    $("#"+BOTON_LOG).on("click",mostrarLogCambios);
    $("#"+BOTON_LICENCIA).on("click",mostrarLicencia);
}

/**
 * Activa o desactiva los botones de la barra de controles, menos el de índice 0 (que inicia el proceso para activar los demás)
 * @param {string} estadoGeneracion
 */
function enableButtonsPasosCreacion(estadoGeneracion) {

    var activar = 0;

    switch (estadoGeneracion) {
        case ESTADO_GENERACION_INICIADA:
            activar = 1;
            break;
        case ESTADO_GENERACION_PERSONAJE_HECHO:
            activar = 2;
            break;
        case ESTADO_GENERACION_SUBIENDO_NIVEL:
            activar = 3;
            break;
        case ESTADO_GENERACION_NINGUNO:
        default:
            activar = 0;
            break;
    }

    for (var i = 1; i < BOTONES_BARRA_CONTROLES.length; i++) {
        botonActivado(
            $("#"+BOTONES_BARRA_CONTROLES[i]),
            !((activar==0)||(activar==2))
        );
    }

    var botonArtesMarciales = $("#"+BOTON_ARTES_MARCIALES);
    if (personaje_actual.numArtesMarciales() >= personaje_actual.maxArtesMarciales()) {
        botonActivado(botonArtesMarciales,false);
        addToolTip(botonArtesMarciales,"Necesitas 40 de ataque y defensa por cada arte marcial.");
    } else {
        botonActivado(botonArtesMarciales,true);
    }

    botonActivado($("#"+BOTON_CV),!((activar==0) || (personaje_actual.getHabilidadDePersonaje(HB_CV).valorFinalActual() == 0)));

    botonActivado($("#"+BOTON_MAGIA), !((activar==0) || (personaje_actual.nivelMagiaMaximo() == 0)) );

    botonActivado($("#"+BOTON_ELAN), !((activar==0) || (personaje_actual.getElan().length == 0)) );

    botonActivado($("#"+BOTON_FINALIZAR_CREACION), !(((activar==0)||(activar==2)) || (!personajeCompleto())) );

    botonActivado($("#"+BOTON_SUBIR_NIVEL), (activar==2) );

    botonActivado($("#"+BOTON_GUARDAR), (activar!=0));

    //menu Personaje
    var menuPersonaje = $("#menuPersonaje").empty();
    var liNuevo, liSubir, liGuardar, liCargar;

    liNuevo = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_CREACION).append("Crear nuevo"));
    if (activar==2) {
        liSubir = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_SUBIR_NIVEL).append("Subir de nivel"));
    } else {
        liSubir = $("<li></li>").addClass("desactivado").append("Subir de nivel");
    }
    if (activar!=0) {
        liGuardar = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_GUARDAR).append("Guardar"));
    } else {
        liGuardar = $("<li></li>").addClass("desactivado").append("Guardar");
    }
    liCargar = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_CARGAR).append("Cargar"));

    menuPersonaje.append(liNuevo).append(liSubir).append(liGuardar).append(liCargar);

    //menu Creacion
    var menuCreacion = $("#menuCreacion").empty();

    var liBonosNaturales;
    var liArmaInicial;
    var liTablaArmas;
    var liCM;
    if (((activar==1)||(activar==3))) {
        liBonosNaturales = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_BONOS_NATURALES).append("Elegir bonos naturales"));
        liArmaInicial = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_ARMA_INICIAL).append("Elegir arma inicial"));
        liTablaArmas = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_TABLAS_ARMAS).append("Comprar tablas de armas"));
        liCM = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_CM).append("Gastar CM (Ki)"));
    } else {
        liBonosNaturales = $("<li></li>").addClass("desactivado").append("Elegir bonos naturales");
        liArmaInicial = $("<li></li>").addClass("desactivado").append("Elegir arma inicial");
        liTablaArmas = $("<li></li>").addClass("desactivado").append("Comprar tablas de armas");
        liCM = $("<li></li>").addClass("desactivado").append("Gastar CM (Ki)");
    }

    var liArtesMarciales;

    if (personaje_actual.numArtesMarciales() >= personaje_actual.maxArtesMarciales()) {
        liArtesMarciales = $("<li></li>").addClass("desactivado").append("Comprar artes marciales");
    } else {
        liArtesMarciales = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_ARTES_MARCIALES).append("Comprar artes marciales"));
    }

    var liMagia, liCV, liElan, liFinCreacion;

    if (!((activar==0) || (personaje_actual.nivelMagiaMaximo() == 0))) {
        liMagia = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_MAGIA).append("Gastar niveles de vía (Magia)"));
    } else {
        liMagia = $("<li></li>").addClass("desactivado").append("Gastar niveles de vía (Magia)");
    }

    if (!((activar==0) || (personaje_actual.getHabilidadDePersonaje(HB_CV).valorFinalActual() == 0)) ) {
        liCV = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_CV).append("Gastar CV (Psíquica)"));
    } else {
        liCV = $("<li></li>").addClass("desactivado").append("Gastar CV (Psíquica)");
    }

    if (!((activar==0) || (personaje_actual.getElan().length == 0)) ) {
        liElan = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_ELAN).append("Gastar sincronización (Elan)"));
    } else {
        liElan = $("<li></li>").addClass("desactivado").append("Gastar sincronización (Elan)");
    }

    if (!(((activar==0)||(activar==2)) || (!personajeCompleto()))) {
        liFinCreacion = $("<li></li>").append($("<a></a>").prop("href","#").prop("id",BOTON_FINALIZAR_CREACION).append("Finalizar creación/subida"));
    } else {
        liFinCreacion = $("<li></li>").addClass("desactivado").append("Finalizar creación/subida");
    }

    menuCreacion.append(liBonosNaturales).append(liArmaInicial).append(liTablaArmas).append(liArtesMarciales).append(liCM).append(liMagia).append(liCV).append(liElan).append("<hr>").append(liFinCreacion);

    muestraControles();
}



/**
 * Muestra un diálogo modal en el que se da a elegir entre varias opciones. Al elegir una se pasa a una función concreta con ciertos parámetros.
 * @param {string} opciones las opciones (en forma de strings) a elegir. Se identifican con las constantes LISTA_etc
 * @param {{}} parametros estructura con los parametros que se pasaran tal cual a la función callback.
 * @param {function} callback función a llamar al elegir una opción.
 */
function muestraDialogoElegirOpcion(opciones, parametros, callback) {
    var i;
    var j;
    var arrayOpciones = [];
    var categorias = [];

    switch (opciones) {
        case  LISTA_CARACTERISTICAS :
            for (i = 0; i < CARACTERISTICAS_NOMBRES.length; i++) {
                arrayOpciones.push(new OpcionMostrable(CARACTERISTICAS_NOMBRES[i],""));
            }
            muestraDialogoElegirOpciones(arrayOpciones, parametros, {principal: callback.principal, isDisabled: callback.isDisabled}, true);
            break;
        case  LISTA_TIPOS_SECUNDARIAS :
            for (i = 0; i < habilidades_secundarias_nombres_grupos.length; i++) {
                arrayOpciones.push(new OpcionMostrable(habilidades_secundarias_nombres_grupos[i],""));
            }
            muestraDialogoElegirOpciones(arrayOpciones, parametros, {principal: callback.principal, isDisabled: callback.isDisabled}, true);
            break;
        case  LISTA_HABILIDADES_SECUNDARIAS :
            for (i = 0; i < habilidades_secundarias.length;i++) {
                var grupoHabi = habilidades_secundarias[i];
                categorias.push(new OpcionMostrable(habilidades_secundarias_nombres_grupos[i],habilidades_secundarias_nombres_grupos[i]));
                for (j = 0; j < grupoHabi.length; j++) {
                    arrayOpciones.push(new OpcionMostrable(grupoHabi[j],habilidades_secundarias_nombres_grupos[i]));
                }
            }
            muestraDialogoElegirOpciones(arrayOpciones, parametros, {principal: callback.principal, isDisabled: callback.isDisabled}, true, categorias);
            break;
        case  LISTA_DISCIPLINAS_PSIQUICAS :
            for (i = 0; i < disciplinasPsiquicas_set.length;i++) {
                var disciplina = disciplinasPsiquicas_set[i];
                if (!disciplina.isLibre()) {
                    arrayOpciones.push(new OpcionMostrable(disciplina.getNombre(),"",disciplina.getDescripcion()));
                }
            }
            muestraDialogoElegirOpciones(arrayOpciones, parametros, {principal: callback.principal, isDisabled: callback.isDisabled}, true);
            break;
        case  LISTA_AJUSTE_TAMAÑO :
            for (i = -5; i <= 5; i++) {
                if (personaje_actual.getTamaño()>(-1*i)) {
                    arrayOpciones.push(new OpcionMostrable(i,""));
                }
            }
            muestraDialogoElegirOpciones(arrayOpciones, parametros, {principal: callback.principal, isDisabled: callback.isDisabled}, true);
            break;
        case  LISTA_HABILIDAD_COMBATE :
            arrayOpciones.push(new OpcionMostrable(HB_ATAQUE,""));
            arrayOpciones.push(new OpcionMostrable(HB_PARADA,""));
            arrayOpciones.push(new OpcionMostrable(HB_ESQUIVA,""));
            muestraDialogoElegirOpciones(arrayOpciones, parametros, {principal: callback.principal, isDisabled: callback.isDisabled}, true);
            break;
        case  LISTA_PODER_PSIQUICO :
            var dificultadMaxima = DIF_ZEN;
            if (parametros.elementoPC.getNombre() == "Acceso a poderes psíquicos naturales") {
                switch(parseInt(parametros.coste)) {
                    case 1:
                        dificultadMaxima = DIF_DIF;
                        break;
                    case 2:
                        dificultadMaxima = DIF_MDF;
                        break;
                    case 3:
                        dificultadMaxima = DIF_ABS;
                        break;
                }
            }

            for (i = 0; i < disciplinasPsiquicas_set.length; i++) {
                var disciplinaAct = disciplinasPsiquicas_set[i];
                categorias.push(new OpcionMostrable(disciplinaAct.getNombre(),disciplinaAct.getNombre()));
                var poderesPsiquicos = disciplinaAct.getPoderesPsiquicos();
                for (j = 0; j < poderesPsiquicos.length; j++) {
                    var poder = poderesPsiquicos[j];
                    if (indiceDificultad(poder.dificultadMinima()) <= indiceDificultad(dificultadMaxima)) {
                        arrayOpciones.push(new OpcionMostrable(poder.getNombre(),disciplinaAct.getNombre(),poder.getDescripcion()));
                    }
                }
            }
            muestraDialogoElegirOpciones(arrayOpciones, parametros, {principal: callback.principal, isDisabled: callback.isDisabled}, true, categorias);
            break;
        case  LISTA_SHAJADS_BERYLS :
            for (i = 0; i < berylShajad_set.length;i++) {
                arrayOpciones.push(new OpcionMostrable(berylShajad_set[i].getNombre(), berylShajad_set[i].getTipo()));
            }
            categorias.push(new OpcionMostrable(BERYL, BERYL));
            categorias.push(new OpcionMostrable(SHAJAD, SHAJAD));
            muestraDialogoElegirOpciones(arrayOpciones, parametros, {principal: callback.principal, isDisabled: callback.isDisabled}, true, categorias);
            break;
        case  LISTA_VIAS_MAGIA :
            for (i = 0; i < VIAS_MAGICAS.length;i++) {
                arrayOpciones.push(new OpcionMostrable(VIAS_MAGICAS[i],""));
            }
            muestraDialogoElegirOpciones(arrayOpciones, parametros, {principal: callback.principal, isDisabled: callback.isDisabled}, true);
            break;
        case  LISTA_DESEQUILIBRIO_SEPHIROTICO :
            var gruposOpciones = [
                new GrupoOpciones("Fuego/Agua",[VIA_AGUA,VIA_FUEGO],1),
                new GrupoOpciones("Aire/Tierra",[VIA_AIRE,VIA_TIERRA],1),
                new GrupoOpciones("Luz/Oscuridad",[VIA_LUZ,VIA_OSCURIDAD],1),
                new GrupoOpciones("Esencia/Ilusión",[VIA_ESENCIA,VIA_ILUSION],1),
                new GrupoOpciones("Creación/Destrucción",[VIA_CREACION,VIA_DESTRUCCION],1)
            ];
            parametros.isDesequilibrioSephirotico = true;
            dialogoSeleccionMultiple(gruposOpciones,parametros,callback.principal);
            break;
        case  LISTA_INTRODUCCION_USUARIO :
        case  LISTA_DESCRIPCION :
            parametros.opcion = prompt("Especifica","");
            callback.principal(parametros);
            break;
    }
}

/**
 *
 * @param {OpcionMostrable[]} arrayOpciones
 * @param {{}} parametros
 * @param {{}} callback
 * @param {string[]} [categorias]
 * @param {boolean} permitirCierre
 */
function muestraDialogoElegirOpciones(arrayOpciones, parametros, callback, permitirCierre, categorias) {
    var dialogo = getDiv("");

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: true,
        ////show: "puff",
        title: DIAG_ELEGIR_OPCIONES_TITULO,
        position: "center",
        closeOnEscape: permitirCierre,
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        close: function(event, ui) {dialogo.empty();}
    });

    if (!permitirCierre) {
        dialogo.dialog("option","dialogClass", "no-close");
    }

    var contenidoDialogo = getDiv("");
    var gridGeneral = $("<ul></ul>").addClass("four_up tiles");

    if (categorias != undefined) {
        for (var j = 0; j < categorias.length; j++) {
            var categ = categorias[j];
            var divCateg = getDiv("contenedorBotonesVentajas");
            var gridCateg = $("<ul></ul>").addClass("four_up tiles");

            contenidoDialogo.append("<h3>"+categ.etiqueta+"</h3>");
            gridCateg.attr("id",categ.categoria.replace(/\s+/g, ''));
            divCateg.append(gridCateg);
            contenidoDialogo.append(divCateg);
        }
    } else {
        contenidoDialogo.append(gridGeneral);
    }

    dialogo.append(contenidoDialogo);

    for (var i = 0; i < arrayOpciones.length;i++) {
        parametros.opcion = arrayOpciones[i].etiqueta;
        if (arrayOpciones[i].categoria != undefined) {
            parametros.categoria = arrayOpciones[i].categoria;
        }
        var botonOpcion = boton("big pretty primary btn",arrayOpciones[i].etiqueta,callback.isDisabled(parametros));
        botonOpcion.addClass("botonDialogoOpciones");
        if (arrayOpciones[i].tooltip != undefined) {
            addToolTip(botonOpcion,arrayOpciones[i].tooltip);
        }

        botonOpcion.css("width","100%");

        if (categorias != undefined) {
            $("#"+arrayOpciones[i].categoria.replace(/\s+/g, '')).append($("<li></li>").append(botonOpcion));
        } else {
            gridGeneral.append($("<li></li>").append(botonOpcion));
        }
        botonOpcion.on("click",{opcion: arrayOpciones[i].etiqueta, categoria: arrayOpciones[i].categoria}, function(event) {
            dialogo.dialog("close" );
            dialogo.empty();
            parametros.opcion = event.data.opcion;
            parametros.categoria = event.data.categoria;
            callback.principal(parametros);
        });
    }



    if (categorias != undefined) {
        contenidoDialogo.accordion({
            heightStyle: "content"
        });
    }
}

/**
 *
 * @param {*} opcion
 * @returns {boolean} Siempre devuelve false
 */
function alwaysEnabled(opcion) {
    return false;
}

/**
 *
 * @param {function} callback
 * @param {{}} parametros
 * @returns {jQuery}
 */
function muestraBotonAnular(callback, parametros) {
    var botonAnular = boton("small pretty primary btn","X");
//    botonAnular.css("width", "1rem");

    if (parametros) {
        botonAnular.on("click", parametros, callback);
    } else {
        botonAnular.on("click", callback);
    }
    return botonAnular;
}

/**
 *
 * @param {GrupoOpciones[]} gruposOpciones
 * @param {function} callback
 * @param {object} parametros
 */
function dialogoSeleccionMultiple(gruposOpciones, parametros, callback) {
    var dialogo = $("<div></div>");

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: true,
        ////show: "puff",
        title: DIAG_ELEGIR_OPCIONES_TITULO,
        position: "center",
        closeOnEscape: true,
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        close: function(event, ui) {dialogo.empty();},
        buttons: [
            {
                text: "Ok",
                click: function() {
                    $( this ).dialog( "close" );
                    parametros.gruposOpciones = gruposOpciones;
                    callback(parametros);
                }
            }
        ]
    });

    for (var i = 0; i < gruposOpciones.length;i++) {
        var grOp = gruposOpciones[i];
        dialogo.append(grOp.etiqueta);
        var divBotones = $("<div></div>").attr("id","botones"+i);
        for (var j = 0; j < grOp.opciones.length;j++) {
            var inputCheck = $("<input>").attr("type","checkbox").attr("id","checkBotones"+i+"_"+j).addClass("checkBotones"+i);
            var labelCheck = $("<label></label>").attr("for","checkBotones"+i+"_"+j).append(grOp.opciones[j]);
            divBotones.append(inputCheck).append(labelCheck);

            inputCheck.on("click", {grupoOpciones:gruposOpciones[i], claseChecks:".checkBotones"+i, item:grOp.opciones[j]}, function(event) {
                var grupoOpciones = event.data.grupoOpciones;
                var claseChecks = event.data.claseChecks;
                var item = event.data.item;
                if (this.checked) {
                    grupoOpciones.opcionesElegidas[grupoOpciones.checked] = item;
                    $(this).attr("indice",grupoOpciones.checked);
                    grupoOpciones.checked++;
                    if (grupoOpciones.checked  == grupoOpciones.numAElegir) {
                        $(claseChecks).prop("disabled",true);
                        $(claseChecks+":checked").prop("disabled",false);
                    }
                } else {
                    var indice = $(this).attr("indice");
                    $(this).removeAttr("indice");
                    if (grupoOpciones.checked > 1) {
                        grupoOpciones.opcionesElegidas[indice] = grupoOpciones.opcionesElegidas[grupoOpciones.checked-1];
                        grupoOpciones.opcionesElegidas[grupoOpciones.checked-1] = "";
                    } else {
                        grupoOpciones.opcionesElegidas[indice]  = "";
                    }
                    grupoOpciones.checked--;
                    if (grupoOpciones.checked  < grupoOpciones.numAElegir) {
                        $(claseChecks).prop("disabled",false);
                    }
                }
            });
        }
        divBotones.buttonset();
        dialogo.append(divBotones);
    }
}

/**
 *
 * @param {string} etiqueta
 * @param {string[]} opciones
 * @param {number} numAElegir
 */
function GrupoOpciones(etiqueta, opciones, numAElegir) {
    this.etiqueta = etiqueta;
    this.opciones = opciones;
    this.numAElegir = numAElegir;
    this.checked = 0;
    this.opcionesElegidas = [];
}

function muestraBotonPequeño(label, parametros, callback, id) {
    var divBoton = boton("small primary btn pretty",label);
//    divBoton.css("width", "1rem");

    divBoton.attr("id",id);
    divBoton.on("click",parametros,callback);
    return divBoton;
}

/**
 *
 * @param {string} clase
 * @param {string} label
 * @param {boolean} [disabled]
 * @returns {*}
 */
function boton(clase, label, disabled) {
    var boton = getDiv(clase);
    boton.append("<a href='#'>"+ label + "</a>");

    if (disabled) {
        disableButton(boton);
    }

    return boton;
}

function eventoDesactivado(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    console.log("prevented");
}

function disableButton(bot) {
    bot.addClass("disabledButton");

    bot.on("click",eventoDesactivado);
}

function enableButton(bot) {
    bot.removeClass("disabledButton");

    bot.off("click",eventoDesactivado);
}

function botonActivado(boton, activado) {
    if (activado) {
        enableButton(boton);
    } else {
        disableButton(boton);
    }
}

var applyContainerHeight = function() {
    var height = $(window).height();
    try {
        $(".ui-dialog").dialog("option","height",height * 0.8);
    } catch (err) {

    }
};


$(window).on("resize",function() {
    applyContainerHeight();
    ALTO_DIALOGO =  $(window).height() * 0.8;
    console.log("Ahora el alto es " + ALTO_DIALOGO);
});
/**
 * Muestra el diálogo para elegir el tipo de método de generación de características.
 */
function mostrarDialogoTipoGeneracion() {
    var dialogMetodoCreacion = getDiv("");

    dialogMetodoCreacion.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: false,
        //////show: "puff",
        title: DIAG_METODO_CREACION_TITULO,
        width: 500,
        height: 500,
        dialogClass: "no-close",
        closeOnEscape: false,
        close: function() {
            dialogMetodoCreacion.empty();
        }
    });

    var filaBotones = getDiv("row");
    dialogMetodoCreacion.append(filaBotones);

    var numeroMetodos = 4;

    if (PANTALLA_ENABLED) {
        numeroMetodos = 5;
    }

    for (var i = 1; i <= numeroMetodos; i++) {
        var divTipo = getDiv("two columns");
        var divBoton = boton("big primary btn pretty",BTN_TIPO + " " + i);
        divBoton.css("width","100%");

        divTipo.append(divBoton);
        filaBotones.append(divTipo);

        divBoton.on("click", {tipo:i}, function(event) {
            dialogMetodoCreacion.dialog("close");
            generarMetodo(event.data.tipo);
        });

        divBoton.on("mouseenter", {metodo:i}, function(event) {
            $("."+DIV_DESTINO_EXPLICACION_GENERACION).empty().append(getExplicacionMetodo(event.data.metodo));
        });
        divBoton.on("mouseleave", function() {
            $("."+DIV_DESTINO_EXPLICACION_GENERACION).empty();
        });
    }

    var divExplicacion = getDiv(DIV_DESTINO_EXPLICACION_GENERACION);
    dialogMetodoCreacion.append(divExplicacion);
}

/**
 * Muestra el diálogo para repartir valores entre las ocho características de personaje_actual
 * @param {number[]} valores Los valores a repartir
 * @param {number[]} valoresAbandonados Los valores que se han ignorado por diversos motivos
 */
function mostrarDialogoRepartoTiradasCaracteristicas(valores,valoresAbandonados) {
    var dialogo = getDiv("");
    dialogo.attr("id",DIV_DIALOGO_REPARTO_CARACTERISTICAS);

    var actualizaDialogoReparto = function(arrayValores, arrayAsignados, caracteristicasAsignadas, arrayAbandonados) {
        var divZonaCaracteristicas = getDiv("");
        var divValores = getDiv("");
        var divValoresAbandonados = getDiv("");
        var i, j;

        dialogo.empty();

        desactivarNotificaciones();

        divZonaCaracteristicas.append(
            getDiv("row").append(
                    getDiv("four columns").append(UI_CARACTERISTICA)
                ).append(
                    getDiv("four columns").append(UI_VALOR).addClass(CSS_TEXTO_CENTRO)
                ).append(
                    getDiv("four columns").append(UI_BONO).addClass(CSS_TEXTO_CENTRO)
                )
        );

        for (i = 0;i<CARACTERISTICAS_NOMBRES.length;i++) {
            var divCaracteristica = getDiv("");
            divCaracteristica.droppable( {
                hoverClass: "ui-state-highlight"
            });
            divCaracteristica.on("drop", {caracteristica:CARACTERISTICAS_NOMBRES[i], indice:i}, function (event ,ui) {
                var indiceCarac;
                var valor = ui.draggable.attr("valor");
                var origen = ui.draggable.attr("origen");
                if (isNaN(origen)) {
                    //de una característica ya asignada
                    indiceCarac = getIndiceCaracteristica(origen);
                    origen = caracteristicasAsignadas[indiceCarac];
                    caracteristicasAsignadas[indiceCarac] = false;
                } else {
                    //de la zona de valores a asignar
                    arrayAsignados[origen] = true;
                }

                personaje_actual.setCaracteristica(event.data.caracteristica,valor);
                if (caracteristicasAsignadas[event.data.indice]) {
                    //ya estaba asignada, devolver el valor
                    arrayAsignados[caracteristicasAsignadas[event.data.indice]] = false;
                }
                caracteristicasAsignadas[event.data.indice] = origen;

                actualizaDialogoReparto(arrayValores,arrayAsignados,caracteristicasAsignadas,arrayAbandonados);
            });

            var divCarac = getDiv(CSS_CAMPO_CARACTERISTICAS);
            var divEtiqueta = getDiv(CSS_ETIQUETA_CARACTERISTICAS);
            var divValor = getDiv(CSS_VALOR_CARACTERISTICAS);
            var divBono = getDiv(CSS_BONO_CARACTERISTICAS);

            divEtiqueta.append(CARACTERISTICAS_NOMBRES[i]);

            if (caracteristicasAsignadas[i]) {
                divValor.append(nuevoValorDraggable(personaje_actual.getCaracteristica(CARACTERISTICAS_NOMBRES[i]),CARACTERISTICAS_NOMBRES[i]));
                divBono.append(modificadorBonito(personaje_actual.getBonoCaracteristica(CARACTERISTICAS_NOMBRES[i])));
            } else {
                divValor.append("--");
                divBono.append("--");
            }

            divCarac.append(
                getDiv("row").append(
                        getDiv("four columns").append(divEtiqueta)
                    ).append(
                        getDiv("four columns").append(divValor).addClass(CSS_TEXTO_CENTRO)
                    ).append(
                        getDiv("four columns").append(divBono).addClass(CSS_TEXTO_CENTRO)
                    )
            );

            divCaracteristica.append(divCarac);
            divZonaCaracteristicas.append(divCaracteristica);
        }

        var divGridValores = getDiv("sixteen colgrid");
        var divRowValores = getDiv("row");

        for (j = 0; j < arrayValores.length; j++) {
            var divColValor = getDiv("two columns");
            if (!arrayAsignados[j]) {
                divColValor.append(nuevoValorDraggable(arrayValores[j],j));
            }
            divRowValores.append(divColValor);
        }

        divGridValores.append(divRowValores);
        divValores.append(divGridValores);

        var divRowValoresAbandonados = $("<ul></ul>").addClass("five_up tiles");

        for (j = 0; j < arrayAbandonados.length; j++) {
            divRowValoresAbandonados.append(nuevoValorAbandonado(arrayAbandonados[j]));
        }

        divValoresAbandonados.append(divRowValoresAbandonados);

        dialogo.append(divZonaCaracteristicas).append(divValores).append(divValoresAbandonados);

        var todoAsignado = true;
        for (i = 0; i<caracteristicasAsignadas.length;i++) {
            todoAsignado = todoAsignado && caracteristicasAsignadas[i];
        }
        if (todoAsignado) {
            dialogo.dialog("option","buttons", [
                {
                    text: "Ok",
                    disabled: false,
                    click: function() {
                        dialogo.dialog( "close" );
                        activarNotificaciones();
                        finAsignacionCaracteristicas();
                    }
                }
            ]);
        }
    };

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: false,
        ////show: "puff",
        title: UI_REPARTO_CARACTERISTICAS,
        width: 500,
        height: 600,
        dialogClass: "no-close",
        closeOnEscape: false,
        buttons: [
            {
                text: "Ok",
                disabled: true,
                click: function() {
                    dialogo.dialog( "close" );
                    activarNotificaciones();
                    finAsignacionCaracteristicas();
                }
            }
        ]
    });

    actualizaDialogoReparto(valores,[false,false,false,false,false,false,false,false],[false,false,false,false,false,false,false,false],valoresAbandonados);
}

/**
 * Función auxiliar. Genera el valor draggable para mostrarDialogoRepartoTiradasCaracteristicas
 * @param {number} valor El valor a mostrar
 * @param {number|string} origen Un índice o la característica de la que viene
 * @returns {jQuery}
 */
function nuevoValorDraggable(valor, origen) {
    var div = getDiv("listaValores");
    div.addClass("valorCaracteristica");
    div.draggable( {
        cursor: "pointer",
        revert: "invalid"
    });
    div.attr("valor",valor);
    div.attr("origen",origen);
    div.append(valor);
    return div;
}

/**
 * Función auxiliar. Genera el valor abandonado para mostrarDialogoRepartoTiradasCaracteristicas
 * @param {number} valor El valor a mostrar
 * @returns {jQuery}
 */
function nuevoValorAbandonado(valor) {
    var div = $("<li></li>").addClass(CSS_TEXTO_CENTRO);
    div.addClass(CSS_VALOR_ABANDONADO);
    div.append(valor);
    return div;
}

/**
 * Muestra el diálogo para repartir puntos entre las ocho características de personaje_actual
 * @param {number} total El total de puntos a repartir
 * @param {boolean} diezCuestaDoble Indica si el décimo punto cuesta doble
 */
function mostrarDialogoRepartoPuntosCaracteristicas(total,diezCuestaDoble) {
    var dialogo = getDiv("");
    dialogo.attr("id",DIV_DIALOGO_REPARTO_CARACTERISTICAS);

    desactivarNotificaciones();

    var actualizaDialogoReparto = function(puntosTotales, puntosLibres) {
        var divValorTotal = getDiv("");
        var divZonaCaracteristicas = getDiv("");

        dialogo.empty();

        divZonaCaracteristicas.append(
            getDiv("row").append(
                    getDiv("four columns").append(UI_CARACTERISTICA)
                ).append(
                    getDiv("four columns").append(UI_VALOR).addClass(CSS_TEXTO_CENTRO)
                ).append(
                    getDiv("four columns").append(UI_BONO).addClass(CSS_TEXTO_CENTRO)
                )
        );

        for (var i = 0;i<CARACTERISTICAS_NOMBRES.length;i++) {
            var divCaracteristica = getDiv("row");

            var divEtiqueta = getDiv(CSS_ETIQUETA_CARACTERISTICAS);
            var divValor = getDiv(CSS_VALOR_CARACTERISTICAS);
            var divBono = getDiv(CSS_BONO_CARACTERISTICAS);
            divEtiqueta.append(CARACTERISTICAS_NOMBRES[i]);

            var divContenidoValor = $("<input>");
            divContenidoValor.prop("type","number");
            divContenidoValor.prop("value",personaje_actual.getCaracteristica(CARACTERISTICAS_NOMBRES[i]));

            divContenidoValor.addClass(CSS_MUESTRA_INLINE);
            divContenidoValor.addClass("spinnerMetodo4");
            divContenidoValor.spinner({
                incremental: false,
                max: 10,
                min: 1,
                page: 1
            });
            divContenidoValor.on("change",{caracteristica:CARACTERISTICAS_NOMBRES[i],divSpinner:divContenidoValor}, function(event, ui) {
                var caracteristica = event.data.caracteristica;
                var currentValue = personaje_actual.getCaracteristica(caracteristica);
                var newValue = event.data.divSpinner.spinner("value");
                var paso = newValue - currentValue;
                var actualizar = false;

                if ((newValue <= 10) && (newValue >= 1)) {
                    if (paso > 0) {
                        if (puntosLibres >= paso) {
                            actualizar = true;
                        }
                    } else {
                        if (puntosLibres <= puntosTotales-7+paso) {
                            actualizar = true;
                        }
                    }
                }

                if (actualizar) {
                    if (diezCuestaDoble) {
                        if ((currentValue < 10) && (newValue == 10)) {
                            paso++;
                        }
                        if ((currentValue == 10) && (newValue < 10)) {
                            paso--;
                        }
                    }
                    puntosLibres -= paso;
                    personaje_actual.setCaracteristica(caracteristica,newValue);
                }
                actualizaDialogoReparto(puntosTotales,puntosLibres);
            });

            divValor.append(divContenidoValor);

            divBono.append(modificadorBonito(personaje_actual.getBonoCaracteristica(CARACTERISTICAS_NOMBRES[i])));

            divCaracteristica.append(
                    getDiv("four columns").append(divEtiqueta)
                ).append(
                    getDiv("four columns").append(divValor).addClass(CSS_TEXTO_CENTRO)
                ).append(
                    getDiv("four columns").append(divBono).addClass(CSS_TEXTO_CENTRO)
                );

            divZonaCaracteristicas.append(divCaracteristica);

            dialogo.dialog( "option", "buttons", [ {
                text: "Ok",
                disabled: (puntosLibres > 0),
                click: function() {
                    $( this ).dialog( "close" );
                    activarNotificaciones();
                    finAsignacionCaracteristicas();
                }
            }]);

        }


        var divTotal = getDiv("");
        var divLibre = getDiv("");
        divTotal.append("Total: " + puntosTotales);
        divLibre.append("Libres: " + puntosLibres);

        divValorTotal.append(divTotal).append(divLibre);

        dialogo.append(divZonaCaracteristicas).append(divValorTotal);
    };

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: false,
        ////show: "puff",
        title: UI_REPARTO_CARACTERISTICAS,
        width: 500,
        height: 600,
        dialogClass: "no-close",
        closeOnEscape: false,
        buttons: [
            {
                text: "Ok",
                disabled: true,
                click: function() {
                    $( this ).dialog( "close" );
                    activarNotificaciones();
                    finAsignacionCaracteristicas();
                }
            }
        ]
    });

    for (var i = 0;i<CARACTERISTICAS_NOMBRES.length;i++) {
        personaje_actual.setCaracteristica(CARACTERISTICAS_NOMBRES[i],1);
    }

    actualizaDialogoReparto(total,total-8);
}



/**
 *
 * @param {function} callback
 * @param {{}} parametros
 * @param {jQuery} divExplicativo
 */
function muestraDialogoElegirCaracteristica(callback,parametros,divExplicativo) {
    var botones = [];
    for (var i = 0; i < CARACTERISTICAS_NOMBRES.length;i++) {
        botones.push({
            text: CARACTERISTICAS_NOMBRES[i],
            click: function(event) {
                $( this ).dialog("close" );
                callback(event.target.innerHTML,parametros)
            }
        });
    }
    var dialogo = "";
    if (divExplicativo != undefined) {
        dialogo = divExplicativo;
    } else {
        dialogo = $("<div></div>");
    }
    dialogo.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: false,
        ////show: "puff",
        title: DIAG_ELEGIR_OPCIONES_TITULO,
        dialogClass: "no-close",
        closeOnEscape: false,
        buttons: botones,
        width: ANCHO_DIALOGO
    });

}


var DIV_DIALOG_ELEGIR_CATEGORIA = "#dialogElegirCategoria";
var DESTINO_EXPLICACION_CATEGORIA = "explicacionCategoria";
var DIAG_ELEGIR_CATEGORIA_TITULO = "Seleccionar categoría";

/**
 *
 */
function dialogoElegirCategoria() {
    var dialogElegirCategoria = getDiv("");
    dialogElegirCategoria.prop("id",DIV_DIALOG_ELEGIR_CATEGORIA);
    dialogElegirCategoria.empty();

    dialogElegirCategoria.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: true,
        closeOnEscape: true,
        ////show: "puff",
        title: DIAG_ELEGIR_CATEGORIA_TITULO,
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO
    });



    var gridCategorias = $("<ul></ul>").addClass("four_up tiles");

    for (var i = 0; i < categorias_set.length ; i++) {
        var categoria = categorias_set[i];

        var divCategoria = boton("big primary btn pretty",categoria.getNombre(),!puedeElegirCategoria(categoria.getNombre()));
        divCategoria.css("width","100%");

        gridCategorias.append( $("<li></li>").append(divCategoria));

        divCategoria.on("click", {categoria:categoria}, function(event) {
            dialogElegirCategoria.dialog("close");
            aplicarCategoria(event.data.categoria);
        });

        divCategoria.on("mouseenter", {categoria:categoria}, mostrarDetallesCategoria);
    }

    dialogElegirCategoria.append(gridCategorias);

    var divExplicacion = $("<div></div>");
    divExplicacion.addClass(CSS_CLASS_EXPLICACION_CATEGORIA);
    divExplicacion.attr("id",DESTINO_EXPLICACION_CATEGORIA);
    dialogElegirCategoria.append(divExplicacion);
}

/**
 *
 * @param {jQuery} elementoBase
 * @param {Categoria} categoria
 */
function mostrarCostesReducidosCategoria(elementoBase, categoria) {
    var divCostesReducidos = $("<div></div>");
    divCostesReducidos.addClass(CSS_MUESTRA_BLOCK);
    divCostesReducidos.addClass(CSS_TEXTO_FUERTE);
    divCostesReducidos.append(UI_COSTES_REDUCIDOS);
    elementoBase.append(divCostesReducidos);
    var costesReducidos = categoria.getCostesReducidos();
    if (costesReducidos.length == 0) {
        var divCostesReducidosNinguno = $("<div></div>");
        divCostesReducidosNinguno.addClass(CSS_MUESTRA_BLOCK);
        divCostesReducidosNinguno.append(UI_NINGUNO);
        elementoBase.append(divCostesReducidosNinguno);
    } else {
        for (var i = 0; i < costesReducidos.length; i++) {
            var _costeReducido = costesReducidos[i];

            var divCosteRed = $("<div></div>");
            divCosteRed.addClass(CSS_MUESTRA_BLOCK);
            var divCosteRedEti = $("<div></div>");
            divCosteRedEti.addClass(CSS_MUESTRA_INLINE);
            divCosteRedEti.addClass(CSS_TEXTO_FUERTE);
            divCosteRedEti.append(_costeReducido.getNombre() + ": ");
            var divCosteRedTex = $("<div></div>");
            divCosteRedTex.addClass(CSS_MUESTRA_INLINE);
            divCosteRedTex.append(_costeReducido.getCoste());
            divCosteRed.append(divCosteRedEti).append(divCosteRedTex);
            elementoBase.append(divCosteRed);
        }
    }
}

/**
 *
 * @param {jQuery} elemento
 * @param {Categoria} categoria
 */
function mostrarBonosInnatosCategoria(elemento, categoria) {
    var divBonosInnatos = $("<div></div>");
    divBonosInnatos.addClass(CSS_MUESTRA_BLOCK);
    divBonosInnatos.addClass(CSS_TEXTO_FUERTE);
    divBonosInnatos.append(UI_BONOS_INNATOS);
    elemento.append(divBonosInnatos);
    var bonosInnatos = categoria.getBonosInnatos();
    if (bonosInnatos.length == 0) {
        var divBonosInnatosNinguno = $("<div></div>");
        divBonosInnatosNinguno.addClass(CSS_MUESTRA_BLOCK);
        divBonosInnatosNinguno.append(UI_NINGUNO);
        elemento.append(divBonosInnatosNinguno);
    } else {
        for (var i = 0; i < bonosInnatos.length; i++) {
            var _bonoInnato = bonosInnatos[i];

            var divBonoInn = $("<div></div>");
            divBonoInn.addClass(CSS_MUESTRA_BLOCK);
            var divBonoInnEti = $("<div></div>");
            divBonoInnEti.addClass(CSS_MUESTRA_INLINE);
            divBonoInnEti.addClass(CSS_TEXTO_FUERTE);
            divBonoInnEti.append(_bonoInnato.item + ": ");
            var divBonoInnTex = $("<div></div>");
            divBonoInnTex.addClass(CSS_MUESTRA_INLINE);
            divBonoInnTex.append("+" + _bonoInnato.bono + " " + UI_POR_NIVEL);
            divBonoInn.append(divBonoInnEti).append(divBonoInnTex);
            elemento.append(divBonoInn);

        }
    }
}

/**
 *
 * @param {jQuery} elemento
 * @param {Categoria} categoria
 */
function mostrarDescripcionCategoria(elemento, categoria) {
    var descripcion = categoria.getDescripcion();
    var divDescripcion = $("<div></div>");
    divDescripcion.addClass(CSS_TEXTO_ITALIC);
    divDescripcion.addClass(CSS_MUESTRA_BLOCK);
    divDescripcion.append(descripcion);
    elemento.append(divDescripcion);
}

/**
 *
 * @param {jQuery} elemento
 * @param {Categoria} categoria
 */
function mostrarArquetipoCategoria(elemento, categoria) {
    var arquetipo = categoria.getArquetipo().toString();
    var divArquetipo = $("<div></div>");
    divArquetipo.addClass(CSS_MUESTRA_BLOCK);
    var divArqEti = $("<div></div>");
    divArqEti.addClass(CSS_MUESTRA_INLINE);
    divArqEti.addClass(CSS_TEXTO_FUERTE);
    divArqEti.append(UI_ARQUETIPO + ": ");
    var divArqTex = $("<div></div>");
    divArqTex.addClass(CSS_MUESTRA_INLINE);
    divArqTex.append(arquetipo);
    divArquetipo.append(divArqEti).append(divArqTex);
    elemento.append(divArquetipo);
}

/**
 *
 * @param {jQuery} elementoUno
 * @param {jQuery} elementoDos
 * @param {Categoria} categoria
 */
function mostrarCostesCategoria(elementoUno, elementoDos, categoria) {
    var costes = categoria.getCostes();
    for (var i = 0; i < costes.length; i++) {
        var _coste = costes[i];

        var divCoste = $("<div></div>");
        divCoste.addClass(CSS_MUESTRA_BLOCK);
        var divCosteEti = $("<div></div>");
        divCosteEti.addClass(CSS_MUESTRA_INLINE);
        divCosteEti.addClass(CSS_TEXTO_FUERTE);
        divCosteEti.append(_coste.getNombre() + ": ");
        var divCosteTex = $("<div></div>");
        divCosteTex.addClass(CSS_MUESTRA_INLINE);
        divCosteTex.append(_coste.getCoste());
        divCoste.append(divCosteEti).append(divCosteTex);
        if (i < costes.length / 2) {
            elementoUno.append(divCoste);
        } else {
            elementoDos.append(divCoste);
        }

    }
}

/**
 *
 * @param {{}} event
 */
function mostrarDetallesCategoria(event) {
    var categoriaAct = event.data.categoria;

    var divGeneral = $("<div></div>");
    divGeneral.addClass(CSS_TEXTO_SMALLER);

    var divIzquierda = $("<div></div>");
    divIzquierda.addClass(CSS_FLOAT_LEFT);
    divIzquierda.css("width","50%");
    divIzquierda.css("margin-right","1em");

    var divDerecha = $("<div></div>");
    divDerecha.addClass(CSS_FLOAT_LEFT);
    divDerecha.css("width","40%");

    mostrarDescripcionCategoria(divIzquierda, categoriaAct);
    mostrarArquetipoCategoria(divIzquierda, categoriaAct);
    mostrarCostesCategoria(divIzquierda, divDerecha, categoriaAct);
    mostrarCostesReducidosCategoria(divDerecha, categoriaAct);
    mostrarBonosInnatosCategoria(divDerecha, categoriaAct);

    divGeneral.append(divIzquierda).append(divDerecha);

    $("#"+DESTINO_EXPLICACION_CATEGORIA).empty().append(divGeneral);
}

var UI_ARTES_MARCIALES_BASICAS = "Artes Marciales Básicas";
var UI_ARTES_MARCIALES_AVANZADAS = "Artes Marciales Avanzadas";
var CATEGORIA_BASICA = "CATEGORIA_BASICA";
var CATEGORIA_AVANZADA = "CATEGORIA_AVANZADA";

/**
 *
 */
function dialogoTablasArmas() {
    var arrayTablaArmas = [];
    var categorias = [];
    var i;
    var j;

    for (i=0;i<CATEGORIAS_TABLAS_ARMAS.length;i++) {
        categorias.push(new OpcionMostrable(CATEGORIAS_TABLAS_ARMAS[i],CATEGORIAS_TABLAS_ARMAS[i]+"ElegirTablaArmas"));
    }

    for (i=0; i<tablasArmas_set.length;i++) {
        var tablaArmas = tablasArmas_set[i];
        var categoria = tablaArmas.getCategoriaTabla();


        arrayTablaArmas.push(new OpcionMostrable(tablaArmas.getNombre(),categoria+"ElegirTablaArmas",tablaArmas.getDescripcion()));

    }

    muestraDialogoElegirOpciones(arrayTablaArmas, {}, {principal: aplicarTablaArmas, isDisabled: tablaArmasDisabled}, true, categorias);
}

/**
 *
 * @param {{}} parametros
 * @returns {boolean}
 */
function tablaArmasDisabled(parametros) {
    var nombreTabla = parametros.opcion;
    var tabla = getTablaArmas(nombreTabla);

    if (tabla.getTipoTabla() == TABLA_ESPECIAL) {
        return false;
    }
    return personaje_actual.hasTablaArmas(nombreTabla);
}



/**
 *
 */
function dialogoElegirArmaTodas() {
    var catArmas = [];

    for (i=0; i<armas_set.length;i++) {
        var arma = armas_set[i];
        var categoria = arma.getCategoria();

        if (categoria != CAT_ARMA_MUNICION) {
            catArmas.push(categoria);
        }
    }
    dialogoElegirArma(catArmas, {principal:aplicarArma, isDisabled: alwaysEnabled},{})
}

function dialogoElegirTipoArma(categoriasPermitidas, callback, parametros) {
    var i;
    var j;
    var arrayOpciones = [];

    categorias:
    for (i=0; i<categoriasPermitidas.length;i++) {
        var categoria = categoriasPermitidas[i];

        for (j=0; j < arrayOpciones.length; j++) {
            if (categoria == arrayOpciones[j].etiqueta) {
                continue categorias;
            }
        }

        arrayOpciones.push(new OpcionMostrable(categoria,""));
    }

    parametros.elegir = true;

    muestraDialogoElegirOpciones(arrayOpciones, parametros, callback, true);
}

/**
 *
 * @param {string[]} categoriasPermitidas
 * @param callback
 * @param parametros
 */
function dialogoElegirArma(categoriasPermitidas, callback, parametros) {
    var arrayArmas = [];
    var categorias = [];
    var i;
    var j;
    var k;

    for (i=0; i<armas_set.length;i++) {
        var arma = armas_set[i];
        var categoria = arma.getCategoria();

        var permitida = false;
        for (k = 0; k < categoriasPermitidas.length; k++) {
            if (categoria == categoriasPermitidas[k]) {
                permitida = true;
                break;
            }
        }
        if (!permitida) {
            continue;
        }
        var categoriaLimpia = categoria.replace("/","");

        var yaListada = false;
        for (j=0; j < categorias.length; j++) {
            if (categorias[j].etiqueta == categoria) {
                yaListada = true;
                break;
            }
        }

        if (!yaListada) {
            categorias.push(new OpcionMostrable(categoria,categoriaLimpia+"ElegirArma"));
        }

        arrayArmas.push(new OpcionMostrable(arma.nombre,categoriaLimpia+"ElegirArma"));

    }

    parametros.elegir = true;

    muestraDialogoElegirOpciones(arrayArmas, parametros, callback, true, categorias);
}



var UI_CM = "Conocimiento Marcial";
var UI_HABILIDADES_KI = "Habilidades del Ki";
var UI_TECNICAS_KI = "Técnicas de Dominio";

/**
 *
 */
function dialogoCM() {
    var dialogo = $("<div></div>");

    var actualizarDialogoKi = function() {
        dialogo.empty();

        dialogo.append(muestraCM());

        dialogo.append(muestraHabilidadesKi());

        dialogo.append(muestraBotonNuevaHabilidadKi());

        dialogo.append(muestraTecnicasKi());

        dialogo.append(muestraBotonCompraTecnicaKi());

        dialogo.append(muestraBotonNuevaTecnicaKi());

    };

    actualizarDialogoKi();

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        resizable: true,
        draggable: true,
        //show: "puff",
        title: DIAG_PODERES_KI,
        position: "center",
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        closeOnEscape: true,
        close: function() {
            dialogo.empty();
            removeActualizador(EVENT_CHARACTER_SECCION_KI,actualizarDialogoKi);
        }
    });

    addActualizador(EVENT_CHARACTER_SECCION_KI,actualizarDialogoKi);
}

/**
 *
 * @returns {jQuery}
 */
function muestraCM() {
    var div = $("<div></div>");
    div.append(muestraSubtitulo(UI_CM, false));
    var divCM = $("<div></div>").addClass(CSS_ETIQUETA_EFECTO_TECNICA);
    divCM.append(muestraValorConBonos(UI_CM, 0, personaje_actual.getBonos(BONO_CM, BONO_CM, CATEGORIA_BONO_CUALQUIERA)).addClass(CSS_MUESTRA_INLINE));
    divCM.append(" - CM Libre: " + (personaje_actual.getCMTotal() - personaje_actual.getCMGastado()));
    div.append(divCM);
    return div;
}

/**
 *
 * @returns {jQuery}
 */
function muestraBotonNuevaHabilidadKi() {
    var divBotonNuevaHabilidadKi = boton("medium primary pretty btn","Comprar habilidad de ki");

    divBotonNuevaHabilidadKi.on("click", comprarHabilidadKi);

    return divBotonNuevaHabilidadKi;
}

/**
 *
 * @returns {jQuery}
 */
function muestraBotonCompraTecnicaKi() {
    var divBotonComprarTecnicaKiExistente = boton("medium primary pretty btn","Comprar técnica de dominio existente",noPuedeComprarTecnicas());

    divBotonComprarTecnicaKiExistente.on("click", comprarTecnicaKi);

    return divBotonComprarTecnicaKiExistente;
}

/**
 *
 * @returns {jQuery}
 */
function muestraBotonNuevaTecnicaKi() {
    var divBotonNuevaTecnicaKi = boton("medium primary pretty btn","Crear técnica de dominio",noPuedeComprarTecnicas());

    divBotonNuevaTecnicaKi.on("click", crearTecnicaKi);

    return divBotonNuevaTecnicaKi;
}

/**
 *
 * @param {TecnicaKi} tecnicaKi
 */
function muestraDialogoCrearTecnicaKi(tecnicaKi) {
    var dialogo = $("<div></div>");
    var i;
    var j;
    var dialogInicializado = false;

    var actualizarDialogoCrearTecnica = function() {
        dialogo.empty();

        var divFila = $("<div></div>");
        divFila.addClass("row");

        dialogo.append(divFila);

        var divListaEfectos = $("<div></div>");
        divListaEfectos.addClass("four columns").addClass(CSS_TEXTO_SMALL);

        divFila.append(divListaEfectos);

        var divEfectos = $("<div></div>");

        for( i = 0; i < TIPOS_EFECTOS_TECNICAS.length; i++) {
            var divCategoriaEfecto = $("<h3></h3>");
            divCategoriaEfecto.append(TIPOS_EFECTOS_TECNICAS[i]);
            divEfectos.append(divCategoriaEfecto);
            var divEfectosCategoria = $("<div></div>");
            for (j = 0; j < efectosTecnicas.length; j++) {
                if (efectosTecnicas[j].getTipoEfecto() == TIPOS_EFECTOS_TECNICAS[i]) {
                    var divFilaEfectos = $("<div></div>").addClass("row");

                    var divEfectoNombre = $("<div></div>").addClass("seven columns");

                    divEfectoNombre.append(efectosTecnicas[j].getNombre());

                    var divEfectoCompraPrim = $("<div></div>").addClass("two columns");

                    var botonAñadePrimaria = boton("small primary pretty btn","1ª",!puedeComprarseEfecto(tecnicaKi,efectosTecnicas[j],true));
                    divEfectoCompraPrim.append(botonAñadePrimaria);
                    botonAñadePrimaria.on("click",{tecnicaKi:tecnicaKi, efecto:efectosTecnicas[j]},añadeEfectoPrimarioTecnica);

                    var divEfectoCompraSec = $("<div></div>").addClass("push_one two columns");

                    var botonAñadeSecundaria = boton("small secondary pretty btn","2ª",!puedeComprarseEfecto(tecnicaKi,efectosTecnicas[j],false));
                    divEfectoCompraSec.append(botonAñadeSecundaria);
                    botonAñadeSecundaria.on("click",{tecnicaKi:tecnicaKi, efecto:efectosTecnicas[j]},añadeEfectoSecundarioTecnica);

                    divFilaEfectos.append(divEfectoNombre).append(divEfectoCompraPrim).append(divEfectoCompraSec);

                    divEfectosCategoria.append(divFilaEfectos);
                }
            }
            divEfectos.append(divEfectosCategoria);
        }

        var divCategoriaDesventaja = $("<h3></h3>");
        divCategoriaDesventaja.append(UI_DESVENTAJAS);
        divEfectos.append(divCategoriaDesventaja);
        var divListaDesventajas = $("<div></div>");
        for (j = 0; j < desventajasTecnicas.length; j++) {
            var divFilaDesventajas = $("<div></div>").addClass("row");

            var divDesventajaNombre = $("<div></div>").addClass("nine columns");

            divDesventajaNombre.append(desventajasTecnicas[j].getNombre());

            var divDesventajaCompra = $("<div></div>").addClass("three columns");

            var botonAñadeDesventaja = boton("small primary pretty btn","+",!puedeAñadirseDesventajaATecnica(tecnicaKi,desventajasTecnicas[i]));

            divDesventajaCompra.append(botonAñadeDesventaja);
            botonAñadeDesventaja.on("click",{tecnicaKi:tecnicaKi, desventaja:desventajasTecnicas[j]},añadeDesventajaTecnica);

            divFilaDesventajas.append(divDesventajaNombre).append(divDesventajaCompra);

            divListaDesventajas.append(divFilaDesventajas);
        }
        divEfectos.append(divListaDesventajas);

        divListaEfectos.append(divEfectos);

        var divResumenTecnica = $("<div></div>");
        divResumenTecnica.addClass("eight columns");

        var divDatosTecnica = $("<div></div>");

        divResumenTecnica.append(divDatosTecnica);

        var divNombre = $("<div></div>").append(muestraPersonal(UI_NOMBRE, tecnicaKi.getNombre(), true, elegirManualNombreTecnica, {tecnicaKi:tecnicaKi}));
        var divNivel  = $("<div></div>").append(muestraPersonal(UI_NIVEL, tecnicaKi.getNivel(), true, elegirNivelTecnica, {tecnicaKi:tecnicaKi}));
        var divCoste = $("<div></div>").append("CM: " + tecnicaKi.getCosteCM() + " / CM Mínimo: " + tecnicaKi.getMinCM() + " / CM Máximo: " + tecnicaKi.getMaxCM());
        var divDescripcion = $("<div></div>").append(muestraPersonal(UI_DESCRIPCION, tecnicaKi.getDescripcion(), true, elegirManualDescripcionTecnica, {tecnicaKi:tecnicaKi}));
        var divCosteKi = $("<div></div>").append(muestraPersonal(UI_COSTE_KI, tecnicaKi.getCosteKi().toString(), false));
        var divIsMantenida = $("<div></div>");
        if (tecnicaKi.isMantenida()) {
            divIsMantenida.append(muestraPersonal(UI_MANTENIDA + ". " + UI_COSTE_MANTENIMIENTO, tecnicaKi.getCosteMantenimiento().toString(), false));
        }

        var divEfectosDeLaTecnica = $("<div></div>").append("Efectos de la técnica:").addClass(CSS_TEXTO_SMALL);

        var filaEncabezados = $("<div></div>").addClass("row");
        var encabezadoNombre = $("<div></div>").addClass("three columns").append("Efecto");
        var encabezadoCM = $("<div></div>").addClass("one columns").append("CM");
        var encabezadoKi = $("<div></div>").addClass("three columns").append("Ki");
        var encabezadoMantenimiento = $("<div></div>").addClass("three columns").append("Mantenimiento");
        var encabezadoBotonesVentajas = $("<div></div>").addClass("one columns").append("Ventajas");
        var encabezadoBoton = $("<div></div>").addClass("one columns").append("Borrar");

        filaEncabezados.append(encabezadoNombre).append(encabezadoCM).append(encabezadoKi).append(encabezadoMantenimiento).append(encabezadoBotonesVentajas).append(encabezadoBoton);

        divEfectosDeLaTecnica.append(filaEncabezados);

        var ventajasOpcionalesElegidas;
        var efectoPrimario =tecnicaKi.getEfectoPrimario();
        if (efectoPrimario) {
            divEfectosDeLaTecnica.append(muestraEfectoTecnica(efectoPrimario,tecnicaKi, false));
            ventajasOpcionalesElegidas = efectoPrimario.getVentajasOpcionalesElegidas();
            for (i = 0;i<ventajasOpcionalesElegidas.length;i++) {
                divEfectosDeLaTecnica.append(muestraVentajaOpcionalEfectoTecnica(ventajasOpcionalesElegidas[i],efectoPrimario,tecnicaKi,true));
            }
        }
        var efectosSecundarios = tecnicaKi.getEfectosSecundarios();
        for (i = 0; i < efectosSecundarios.length;i++) {
            divEfectosDeLaTecnica.append(muestraEfectoTecnica(efectosSecundarios[i],tecnicaKi, true));
            ventajasOpcionalesElegidas = efectosSecundarios[i].getVentajasOpcionalesElegidas();
            for (j = 0;j<ventajasOpcionalesElegidas.length;j++) {
                divEfectosDeLaTecnica.append(muestraVentajaOpcionalEfectoTecnica(ventajasOpcionalesElegidas[j],efectosSecundarios[i],tecnicaKi,true));
            }
        }

        var filaEncabezadosDesv = $("<div></div>").addClass("row");
        var encabezadoNombreDesv = $("<div></div>").addClass("four columns").append("Desventaja");
        var encabezadoCMDesv = $("<div></div>").addClass("seven columns").append("CM");
        var encabezadoBotonDesv = $("<div></div>").addClass("one columns").append("Borrar");

        filaEncabezadosDesv.append(encabezadoNombreDesv).append(encabezadoCMDesv).append(encabezadoBotonDesv);

        var divDesventajas = $("<div></div>").append("Desventajas de la técnica (Max. " + tecnicaKi.getMaxDesventajas() + "):").addClass(CSS_TEXTO_SMALL);

        divDesventajas.append(filaEncabezadosDesv);

        var desventajas = tecnicaKi.getDesventajas();
        for (i = 0; i < desventajas.length;i++) {
            divDesventajas.append(muestraDesventajaTecnica(desventajas[i],tecnicaKi,true));
        }

        divResumenTecnica.append(divNombre).append(divNivel).append(divDescripcion).append(divCoste).append(divCosteKi).append(divIsMantenida).append(divEfectosDeLaTecnica).append(divDesventajas);

        divFila.append(divResumenTecnica);

        divEfectos.accordion({
            heightStyle: "content"
        });

        if (dialogInicializado) {
            dialogo.dialog("option", "buttons", [{text: "Crear",
                disabled: !(tecnicaKi.isCorrecta() && personaje_actual.puedeComprarTecnicaKi(tecnicaKi)),
                click: function() {
                    dialogo.dialog( "close" );
                    personaje_actual.addTecnicaKi(tecnicaKi);
                    personaje_actual.addCMGastado(tecnicaKi.getCosteCM());
                }}]);
        }
    };

    actualizarDialogoCrearTecnica();

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        resizable: true,
        draggable: true,
        //show: "puff",
        title: DIAG_CREACION_TECNICA,
        position: "center",
        closeOnEscape: true,
        width: ANCHO_COMPLETO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        closeOnEscape: true,
        close: function() {
            dialogo.empty();
            removeActualizador(EVENT_TECNICA_CREACION,actualizarDialogoCrearTecnica);
        },
        buttons: [
            {
                text: "Crear",
                disabled: !(tecnicaKi.isCorrecta() && personaje_actual.puedeComprarTecnicaKi(tecnicaKi)),
                click: function() {
                    dialogo.dialog( "close" );
                    personaje_actual.addTecnicaKi(tecnicaKi);
                    personaje_actual.addCMGastado(tecnicaKi.getCosteCM());
                }
            }
        ]
    });
    dialogInicializado = true;

    addActualizador(EVENT_TECNICA_CREACION,actualizarDialogoCrearTecnica);
}

/**
 *
 * @param {EfectoTecnicaElegido} efectoTecnicaElegido
 * @param {boolean} anulable
 * @param {TecnicaKi} tecnicaKi
 */
function muestraEfectoTecnica(efectoTecnicaElegido, tecnicaKi, anulable) {
    var div = $("<div></div>").addClass("row");

    var divNombre = $("<div></div>").addClass("three columns");
    var contentNombre = $("<div></div>");
    contentNombre.addClass(CSS_ETIQUETA_EFECTO_TECNICA).append(efectoTecnicaElegido.getNombreCompleto());
    divNombre.append(contentNombre);

    var divCoste = $("<div></div>").addClass("one columns");
    var contentCoste = $("<div></div>");
    contentCoste.append(efectoTecnicaElegido.getCosteCM());
    divCoste.append(contentCoste);

    var divCosteKi = $("<div></div>").addClass("three columns");
    var contentCosteKi = getDiv(CSS_MUESTRA_INLINE);
    contentCosteKi.append(efectoTecnicaElegido.getCosteKi().toString());
    divCosteKi.append(contentCosteKi);
    divCosteKi.append(muestraBotonPequeño("?",{costeKi:efectoTecnicaElegido.getCosteKi()},muestraDialogoRecolocacionCosteKi,""));

    var divMantenimiento = $("<div></div>").addClass("three columns");
    var subrow = $("<div></div>").addClass("row");
    var subCol1 = $("<div></div>").addClass("six columns");
    var subCol2 = $("<div></div>").addClass("six columns");
    var contentMantenimiento = $("<div></div>").addClass(CSS_FILA_EFECTO_TECNICA);
    var divCosteMantenimiento = $("<div></div>").addClass(CSS_MUESTRA_INLINE);
    if (efectoTecnicaElegido.isMantenible()) {
        var isMantenida = efectoTecnicaElegido.isMantenido();
        contentMantenimiento.attr("id",efectoTecnicaElegido.getNombre().replace(/\s+/g, '')+"_mant");
        var divBotonMantenimientoOn = $("<input>")
            .attr("type","radio")
            .attr("id",efectoTecnicaElegido.getNombre().replace(/\s+/g, '')+"_mantOn")
            .attr("name",efectoTecnicaElegido.getNombre().replace(/\s+/g, '')+"_mant");
        var labelBotonOn = $("<label></label>").attr("for",efectoTecnicaElegido.getNombre().replace(/\s+/g, '')+"_mantOn").append("On");

        var divBotonMantenimientoOff = $("<input>")
            .attr("type","radio")
            .attr("id",efectoTecnicaElegido.getNombre().replace(/\s+/g, '')+"_mantOff")
            .attr("name",efectoTecnicaElegido.getNombre().replace(/\s+/g, '')+"_mant");
        var labelBotonOff = $("<label></label>").attr("for",efectoTecnicaElegido.getNombre().replace(/\s+/g, '')+"_mantOff").append("Off");

        if (isMantenida) {
            divBotonMantenimientoOn.attr("checked","checked");
        } else {
            divBotonMantenimientoOff.attr("checked","checked");
        }

        contentMantenimiento.append(divBotonMantenimientoOn).append(labelBotonOn).append(divBotonMantenimientoOff).append(labelBotonOff);
        contentMantenimiento.buttonset();

        if (efectoTecnicaElegido.isMantenido()) {
            divCosteMantenimiento.append(efectoTecnicaElegido.getCosteMantenimiento().toString());
            divCosteMantenimiento.append(muestraBotonPequeño("?",{costeKi:efectoTecnicaElegido.getCosteMantenimiento()},muestraDialogoRecolocacionCosteKi,""));
        }

        divBotonMantenimientoOn.on("click",{tecnicaKi:tecnicaKi,efectoTecnica:efectoTecnicaElegido,activado:true},cambiaMantenimiento);
        divBotonMantenimientoOff.on("click",{tecnicaKi:tecnicaKi,efectoTecnica:efectoTecnicaElegido,activado:false},cambiaMantenimiento);
    }
    subCol1.append(divCosteMantenimiento);
    subCol2.append(contentMantenimiento);
    subrow.append(subCol1).append(subCol2);
    divMantenimiento.append(subrow);


    var divBotonesVentajas = $("<div></div>").addClass("one columns");
    if (efectoTecnicaElegido.getVentajasOpcionales().length > 0) {
        var divBotonAddVentajaTecnica = boton("small primary pretty btn","+");

        divBotonAddVentajaTecnica.on("click",{tecnicaKi:tecnicaKi,efectoTecnica:efectoTecnicaElegido},addVentajaOpcionalEfectoTecnica);

        divBotonesVentajas.append(divBotonAddVentajaTecnica);
    }

    var divBoton = $("<div></div>").addClass("one columns");
    if (anulable) {
        divBoton.append(muestraBotonAnular(quitaEfectoSecundario,{tecnicaKi:tecnicaKi,efecto:efectoTecnicaElegido}));
    }

    div.append(divNombre).append(divCoste).append(divCosteKi).append(divMantenimiento).append(divBotonesVentajas).append(divBoton);

    return div;
}

/**
 *
 * @param {VentajaTecnicaElegida} ventajaElegida
 * @param {EfectoTecnicaElegido} efectoTecnicaElegido
 * @param {boolean} anulable
 * @param {TecnicaKi} tecnicaKi
 */
function muestraVentajaOpcionalEfectoTecnica(ventajaElegida, efectoTecnicaElegido, tecnicaKi, anulable) {
    var div = $("<div></div>").addClass("row");

    var divNombre = $("<div></div>").addClass("push_one two columns");
    var contentNombre= $("<div></div>");
    contentNombre.addClass(CSS_ETIQUETA_EFECTO_TECNICA).append(ventajaElegida.getNombre());
    divNombre.append(contentNombre);

    var divCoste = $("<div></div>").addClass("one columns");
    var contentCoste = $("<div></div>");
    contentCoste.append("+" + ventajaElegida.getCosteCM());
    divCoste.append(contentCoste);

    var divCosteKi = $("<div></div>").addClass("three columns");
    var contentKi = $("<div></div>");
    contentKi.append("+" + ventajaElegida.getCosteKi().toString());
    divCosteKi.append(contentKi);

    var divMantenimiento = $("<div></div>").addClass("three columns");
    var contentMantenimiento= $("<div></div>").addClass(CSS_FILA_EFECTO_TECNICA);
    if (efectoTecnicaElegido.isMantenible()) {

    }
    divMantenimiento.append(contentMantenimiento);

    var divBoton = $("<div></div>").addClass("push_one one columns");
    if (anulable) {
        divBoton.append(muestraBotonAnular(quitaVentajaEfecto,{tecnicaKi:tecnicaKi,efecto:efectoTecnicaElegido,ventaja:ventajaElegida}));
    }

    div.append(divNombre).append(divCoste).append(divCosteKi).append(divMantenimiento).append(divBoton);

    return div;
}

/**
 *
 * @param {{data:{tecnicaKi:TecnicaKi,efectoTecnica:EfectoTecnicaElegido}}} event
 */
function addVentajaOpcionalEfectoTecnica(event) {
    var tecnicaKi = event.data.tecnicaKi;
    var efecto = event.data.efectoTecnica;

    var arrayOpciones = [];

    var ventajasOpc = efecto.getVentajasOpcionales();

    for (var i = 0; i < ventajasOpc.length; i++) {
        arrayOpciones.push(new OpcionMostrable(ventajasOpc[i].getNombre(),"",ventajasOpc[i].getDescripcion()));
    }

    var parametros = {
        tecnicaKi:tecnicaKi,
        efecto:efecto
    };

    muestraDialogoElegirOpciones(arrayOpciones,parametros,{principal:ventajaEfectoTecnicaElegida,isDisabled:noPuedePonerseVentajaEfectoTecnica},true);
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi, efecto:EfectoTecnicaElegido, opcion: string}} parametros
 */
function ventajaEfectoTecnicaElegida(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    var efecto = parametros.efecto;
    var nombreVentaja = parametros.opcion;
    var ventaja = efecto.getVentajaOpcionalPorNombre(nombreVentaja);

    parametros.ventaja = ventaja;

    if (ventaja.getNivelesVentaja().length > 1) {

        var arrayOpciones = [];

        var niveles = ventaja.getNivelesVentaja();

        for (var i = 0; i < niveles.length; i++) {
            arrayOpciones.push(new OpcionMostrable(niveles[i].getNombre(),"","CM: " + niveles[i].getCosteCM() + ", Ki: " + niveles[i].getCosteKi()));
        }

        muestraDialogoElegirOpciones(arrayOpciones,parametros,{principal:nivelVentajaEfectoTecnicaElegida,isDisabled:noPuedePonerseNivelVentajaEfectoTecnica},true);
    } else {
        parametros.opcion = ventaja.getNivelesVentaja()[0].getNombre();
        if (!noPuedePonerseNivelVentajaEfectoTecnica(parametros)) {
            nivelVentajaEfectoTecnicaElegida(parametros);
        }
    }
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi, efecto:EfectoTecnicaElegido, ventaja:VentajaTecnica, opcion: string}} parametros
 */
function nivelVentajaEfectoTecnicaElegida(parametros) {
    var tecnicaKi = parametros.tecnicaKi;
    var efecto = parametros.efecto;
    var ventaja = parametros.ventaja;
    var nivelVentaja = ventaja.getNivelPorNombre(parametros.opcion);

    var ventajaElegida = new VentajaTecnicaElegida(ventaja,nivelVentaja);

    tecnicaKi.addVentajaEfecto(efecto,ventajaElegida);
}

function noPuedePonerseNivelVentajaEfectoTecnica(parametros) {
    //TODO
    return false;
}

/**
 *
 * @param {{tecnicaKi:TecnicaKi, efecto:EfectoTecnicaElegido, opcion: string}} parametros
 */
function noPuedePonerseVentajaEfectoTecnica(parametros) {
    var puede = true;
    var tecnicaKi = parametros.tecnicaKi;
    var efecto = parametros.efecto;
    var nombreVentaja = parametros.opcion;

    var ventajasElegidas = efecto.getVentajasOpcionalesElegidas();

    for (var i = 0; i < ventajasElegidas.length; i++) {
        if (ventajasElegidas[i].getNombre() == nombreVentaja) {
            puede = false;
        }
    }

    return !puede;
}

/**
 *
 * @param {DesventajaTecnicaElegida} desventajaElegida
 * @param {boolean} anulable
 * @param {TecnicaKi} tecnicaKi
 */
function muestraDesventajaTecnica(desventajaElegida, tecnicaKi, anulable) {
    var div = $("<div></div>").addClass("row");

    var divNombre = $("<div></div>").addClass("four columns");
    divNombre.addClass(CSS_ETIQUETA_EFECTO_TECNICA).append(desventajaElegida.getNombre());

    var divCoste = $("<div></div>").addClass("seven columns");
    divCoste.append(desventajaElegida.getCosteCM());

    var divBoton = $("<div></div>").addClass("one columns");
    if (anulable) {
        divBoton.append(muestraBotonAnular(quitaDesventajaTecnica,{tecnicaKi:tecnicaKi,desventaja:desventajaElegida}));
    }

    div.append(divNombre).append(divCoste).append(divBoton);

    return div;
}

/**
 *
 * @param {CosteKi} costeKi
 */
function dialogoRecolocacionCosteKi(costeKi) {
    var dialogo = $("<div></div>");

    var actualizaDialogoColocacionKi = function() {
        dialogo.empty();

        var divFila = getDiv("row");
        var divColOrigen = getDiv("five columns");
        var divColDestino = getDiv("push_two five columns");

        var divOrigen = getDiv("");
        var divDestino = getDiv("");

        var divNombreOrigen = getDiv(CSS_TEXTO_CENTRO);
        divNombreOrigen.append(costeKi.caracbase);
        var divCosteOrigen = getDiv(CSS_TEXTO_CENTRO);
        divCosteOrigen.append(costeKi.getCoste(costeKi.caracbase));

        divOrigen.append(divNombreOrigen).append(divCosteOrigen);
        divColOrigen.append(divOrigen);

        var caracsDestino = costeKi.getCaracteristicasDestino();

        for (var i = 0; i < caracsDestino.length; i++) {
            var carDest = caracsDestino[i];

            var divNombreDestino = getDiv(CSS_TEXTO_CENTRO);
            divNombreDestino.append(carDest + " (+" + costeKi.mod[carDest] + ")");
            var divCosteDestino = getDiv(CSS_TEXTO_CENTRO);
            divCosteDestino.append(costeKi.getCoste(carDest));

            var divBotones = muestraBotonMasMenosCosteKi(costeKi, carDest);

            divDestino.append(divNombreDestino).append(divCosteDestino).append(divBotones);
        }

        divColDestino.append(divDestino);

        divFila.append(divColOrigen).append(divColDestino);
        dialogo.append(divFila);
    };

    actualizaDialogoColocacionKi();

    addActualizador(EVENT_COSTE_KI_CAMBIO,actualizaDialogoColocacionKi);

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        resizable: true,
        draggable: true,
        //show: "puff",
        title: DIAG_REASIGNA_COSTE_KI,
        position: "center",
        closeOnEscape: true,
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        close: function() {
            dialogo.empty();
            removeActualizador(EVENT_COSTE_KI_CAMBIO,actualizaDialogoColocacionKi);
            lanzarEvento(EVENT_TECNICA_CREACION);
        },
        buttons: [
            {
                text: "Ok",
                click: function() {
                    $( this ).dialog( "close" );
                }
            }
        ]
    });

}


/**
 *
 * @returns {jQuery}
 * @param {CosteKi} costeKi
 * @param {string} caracDestino
 */
function muestraBotonMasMenosCosteKi(costeKi, caracDestino) {
    var div = $("<div></div>");
    var divMas = boton("small primary pretty btn","+");
    var divMenos = boton("small secondary pretty btn","+");

//    divMas.css("width","1rem");
  //  divMenos.css("width","1rem");

    div.append(divMas).append(divMenos);

    divMas.on("click",{costeKi: costeKi,caracDestino: caracDestino, unidades: 1}, aumentaCaracCosteKiClick);
    divMenos.on("click",{costeKi: costeKi,caracDestino: caracDestino, unidades: -1}, aumentaCaracCosteKiClick);
    return div;
}

/**
 *
 * @param {{data:{costeKi:CosteKi,caracDestino:string,unidades:number}}} event
 */
function aumentaCaracCosteKiClick(event) {
    event.data.costeKi.pasaCoste(event.data.caracDestino,event.data.unidades);
    lanzarEvento(EVENT_COSTE_KI_CAMBIO)
}

/**
 *
 * @param {{data:{costeKi:CosteKi}}} event
 */
function muestraDialogoRecolocacionCosteKi(event) {
    dialogoRecolocacionCosteKi(event.data.costeKi);
}
var UI_NIVELES_VIA = "Niveles de vía";
var UI_VIAS = "Vías de magia";
var UI_CONJUROS = "Conjuros sueltos";

/**
 *
 */
function dialogoMagia() {
    var dialogo = $("<div></div>");
    var titulo;

    var actualizarDialogoMagia = function() {
        dialogo.empty();

        dialogo.append(muestraSubtitulo(UI_NIVELES_VIA, true));
        var divNivelMagia = $("<div></div>");
        divNivelMagia.append("Niveles máximos a repartir: " + personaje_actual.nivelMagiaMaximo() + "<br>Niveles libres para repartir: " + (personaje_actual.nivelMagiaMaximo()-personaje_actual.getNivelMagiaGastado()));
        dialogo.append(divNivelMagia);

        dialogo.append(muestraSubtitulo(UI_VIAS, false));

        var botonViaDisabled = false;

        if (personaje_actual.nivelMagiaMaximo()-personaje_actual.getNivelMagiaGastado() < 2) {
            botonViaDisabled = true;
        }

        if (!personaje_actual.hasFlag(FLAG_DON)) {
            botonViaDisabled = true;
        }

        if (personaje_actual.getViasMagia().length == VIAS_MAGICAS.length) {
            botonViaDisabled = true;
        }

        var divBotonNuevaVia = boton("medium primary pretty btn","Acceso a nueva vía de magia",botonViaDisabled);

        dialogo.append(divBotonNuevaVia);

        divBotonNuevaVia.on("click", accesoNuevaVia);

        var divZonaVias = $("<div></div>");
        var viasMagia = personaje_actual.getViasMagia();
        for (var i = 0; i < viasMagia.length;i++) {
            var nivelEnVia = viasMagia[i];
            var via = nivelEnVia.getVia();
            var coste = nivelEnVia.getNivel() * personaje_actual.getCosteVia(nivelEnVia.getVia().getNombre());
            titulo = $("<h3></h3>")
            titulo.append(nivelEnVia.getVia().getNombre() + " - Nv: " + nivelEnVia.getNivel() + " (" + coste + " niveles gastados)");

            titulo.append(muestraBotonMasMenosNivelVia(nivelEnVia));

            titulo.append(muestraBotonAnular(eliminarAccesoViaMagia,{via: via, coste: coste}));

            divZonaVias.append(titulo);

            var divConjurosVia = $("<div></div>");

            for (var j = 2; j <= nivelEnVia.getNivel(); j += 2) {
                if (via.isNivelLibreAcceso(j)) {
                    divConjurosVia.append("<br><b>Nivel " + j + ": Libre Acceso");
                    if (nivelEnVia.getConjuroLibre(j) != undefined) {
                        var conjuroLibre = nivelEnVia.getConjuroLibre(j);
                        divConjurosVia.append(" - " + conjuroLibre.getNombre());
                    }
                    divConjurosVia.append("</b>");
                    divConjurosVia.append(muestraBotonElegirConjuroLibreAcceso(via,j));
                } else {
                    var conjuro = via.getConjuro(j);
                    divConjurosVia.append("<br><b>Nivel " + j + ": " + conjuro.getNombre() +  "</b>");
                }
            }

            divZonaVias.append(divConjurosVia);
        }

        titulo = $("<h3></h3>")
        titulo.append(UI_CONJUROS);
        divZonaVias.append(titulo);
        var divConjurosSueltos = $("<div></div>");

        divConjurosSueltos.append(muestraBotonElegirConjuroSuelto());
        var conjurosSueltos = personaje_actual.getConjurosSueltos();
        for (var k = 0; k < conjurosSueltos.length; k++) {
            divConjurosSueltos.append("<br><b>Nivel " + conjurosSueltos[k].getNivel() + ": " + conjurosSueltos[k].getNombre() +  "</b>");
        }

        divZonaVias.append(divConjurosSueltos);
        dialogo.append(divZonaVias);
        divZonaVias.accordion({
            heightStyle: "content"
        });
    };

    actualizarDialogoMagia();

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        resizable: true,
        draggable: true,
        //show: "puff",
        title: DIAG_PODERES_MAGIA,
        position: "center",
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        closeOnEscape: true,
        close: function(event, ui) {dialogo.empty();}
    });

    dialogo.on("close",function() {
        dialogo.empty();
        removeActualizador(EVENT_CHARACTER_SECCION_MAGIA,actualizarDialogoMagia);
    });


    addActualizador(EVENT_CHARACTER_SECCION_MAGIA,actualizarDialogoMagia);
}


/**
 *
 * @param {NivelEnVia} nivelVia
 * @returns {jQuery}
 */
function muestraBotonMasMenosNivelVia(nivelVia) {
    var div = $("<div></div>");
    var divMas = boton("small primary pretty btn","+");
    var divMenos = boton("small secondary pretty btn","+");

//    divMas.css("width","1rem");
  //  divMenos.css("width","1rem");

    div.append(divMas).append(divMenos);

    divMas.on("click",{nivelEnVia: nivelVia,unidades: 2}, aumentaNivelViaClick);
    divMenos.on("click",{nivelEnVia: nivelVia,unidades: -2}, aumentaNivelViaClick);
    return div;
}

/**
 *
 * @param {ViaMagia} via
 * @param {number} nivel
 * @returns {jQuery}
 */
function muestraBotonElegirConjuroLibreAcceso(via,nivel) {
    var botonDiv = boton("small primary pretty btn",UI_ELEGIR);

    botonDiv.on("click",{via:via,nivel:nivel},elegirConjuroLibreAcceso);

    return botonDiv;
}

function muestraBotonElegirConjuroSuelto() {
    var botonDiv = boton("small primary pretty btn","Comprar conjuro suelto");

    botonDiv.on("click",{},elegirConjuroSuelto);

    return botonDiv;
}
var UI_DISCIPLINAS_DOMINADAS = "Disciplinas dominadas";
var UI_CVS_POTENCIAL = "CVs, Potencial Psíquico e Innatos";
var UI_CV_LIBRES = "CV Libres";
var UI_INNATO = "Innatos";

function dialogoCV() {
    var dialogo = getDiv();

    var actualizarDialogoPsiquica = function() {
        var titulo;
        var contenido;
        var cvLibres = personaje_actual.getHabilidadDePersonaje(HB_CV).valorFinalActual() - personaje_actual.getCVGastados();

        dialogo.empty();

        /**
         * CVs, potencial psíquico e innatos
         */
        dialogo.append(muestraSubtitulo(UI_CVS_POTENCIAL, false));

        var divHabilidades = getDiv();

        divHabilidades.append(muestraCabecerasBaseBonosFinal());

        var divCVs = getDiv().append(muestraHabilidadPrimaria(HB_CV,UI_CV,true));
        var divCVsLibres = getDiv().append(muestraValorPuntual(0,UI_CV_LIBRES,cvLibres,{}));
        var divPotencial = getDiv().append(muestraHabilidadPrimaria(HB_POTENCIAL_PSIQUICO,UI_POTENCIAL_PSIQUICO,true));
        var botonMasInnato = boton("small primary pretty btn","+",(cvLibres < 2));
        var botonMenosInnato = boton("small secondary pretty btn","-",(personaje_actual.getInnatosPsiquicos() == 0));
        var divBotones = getDiv().append(botonMasInnato).append(botonMenosInnato);
        var divInnatos = getDiv().append(muestraValorPuntual("2 CV",UI_INNATO,personaje_actual.getInnatosPsiquicos(),{},divBotones));

        botonMasInnato.on("click", {cantidad: 1}, comprarInnato);
        botonMenosInnato.on("click", {cantidad: -1}, comprarInnato);

        divHabilidades.append(divCVs).append(divCVsLibres).append(divPotencial).append(divInnatos);

        dialogo.append(divHabilidades);

        /**
         * Disciplinas y poderes
         */
        dialogo.append(muestraSubtitulo(UI_DISCIPLINAS_DOMINADAS, false));

        var botonAfinidadDisciplinaDisabled = false;

        if (cvLibres < 1) {
            botonAfinidadDisciplinaDisabled = true;
        }

        if (!personaje_actual.hasFlag(FLAG_PSIQUICO)) {
            botonAfinidadDisciplinaDisabled = true;
        } else if (!personaje_actual.hasFlag(FLAG_ACCESO_TODAS_DISCIPLINAS)) {
            if (personaje_actual.getDisciplinasPsiquicas().length == personaje_actual.getAccesoDisciplinas().length) {
                botonAfinidadDisciplinaDisabled = true;
            }
        }
        var divBotonNuevaDisciplina = muestraBotonPequeño("Afinidad con nueva disciplina [1 CV]",{},afinidadNuevaDisciplina);
            //boton("medium primary pretty btn",,botonAfinidadDisciplinaDisabled);

        dialogo.append(divBotonNuevaDisciplina);

        if (botonAfinidadDisciplinaDisabled) {
            disableButton(divBotonNuevaDisciplina);
        }


        var zonasDisciplinas = getDiv();
        var disciplinasPsiquicas = personaje_actual.getDisciplinasPsiquicas();
        for (var i = 0; i < disciplinasPsiquicas.length; i++) {
            titulo = $("<h3></h3>").append(disciplinasPsiquicas[i].getNombre());

            titulo.append(muestraBotonAnular(eliminarAfinidadDisciplina,{disciplina: disciplinasPsiquicas[i]}));

            contenido = getDiv().attr("id","disciplinaPsiquica" + disciplinasPsiquicas[i].getNombre().replace(/\s+/g, ''));
            appendPoderesPsiquicos(contenido,disciplinasPsiquicas[i]);

            zonasDisciplinas.append(titulo).append(contenido);
        }

        var poderesMatriciales = getDisciplina(DISCIPLINA_PODERES_MATRICIALES);
        titulo = $("<h3></h3>").append(poderesMatriciales.getNombre());
        contenido = getDiv().attr("id","disciplinaPsiquica" + poderesMatriciales.getNombre().replace(/\s+/g, ''));
        if (personaje_actual.hasFlag(FLAG_PSIQUICO)) {
            appendPoderesPsiquicos(contenido,poderesMatriciales);
        }
        zonasDisciplinas.append(titulo).append(contenido);

        zonasDisciplinas.accordion({
            heightStyle: "content"
        });
        dialogo.append(zonasDisciplinas);
    };

    actualizarDialogoPsiquica();

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        resizable: true,
        draggable: true,
        title: DIAG_PODERES_PSIQUICOS,
        position: "center",
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        closeOnEscape: true
    });

    dialogo.on("close",function( event, ui ) {
        dialogo.empty();
        removeActualizador(EVENT_CHARACTER_SECCION_PSIQUICA,actualizarDialogoPsiquica);
    });


    addActualizador(EVENT_CHARACTER_SECCION_PSIQUICA,actualizarDialogoPsiquica);
}


function appendPoderesPsiquicos(elemento, disciplinaPsiquica) {
    var poderesDominados = personaje_actual.getPoderesDominadosDisciplina(disciplinaPsiquica);

    var noQuedanCV = (personaje_actual.getHabilidadDePersonaje(HB_CV).valorFinalActual()-personaje_actual.getCVGastados() == 0);

    var nuevoPoder = muestraBotonPequeño("Dominar un nuevo poder [1 CV]",{disciplina: disciplinaPsiquica},elegirPoderADominar);

    elemento.append(nuevoPoder);

    if (((poderesDominados.length == disciplinaPsiquica.getPoderesPsiquicos().length) || noQuedanCV)) {
        disableButton(nuevoPoder);
    }

    for (var i = 0; i < poderesDominados.length; i++) {
        var poder = poderesDominados[i];
        var divPoder = getDiv();

        var botonMas = boton("small primary pretty btn","+",((poder.getFortalecimiento() == 10) || noQuedanCV));
        var botonMenos = boton("small primary pretty btn","-",(poder.getFortalecimiento() == 0));
        var divBotones = getDiv().append(botonMas).append(botonMenos);

        var labelPoder = muestraValorPuntual(" [Nvl:" + poder.getPoder().getNivel() + "]",poder.getPoder().getNombre(),poder.getFortalecimiento()*10,{descripcion:"potencial"},divBotones);

        divPoder.append(labelPoder);

        botonMas.on("click", {disciplina: disciplinaPsiquica, poder: poder, cantidad: 1}, fortalecerPoderPsiquico);

        botonMenos.on("click", {disciplina: disciplinaPsiquica, poder: poder, cantidad: -1}, fortalecerPoderPsiquico);

        divPoder.append(botonMas).append(botonMenos).append(muestraBotonAnular(eliminarPoderDominado,{disciplina: disciplinaPsiquica, poder: poder}));

        elemento.append(divPoder);
    }
}


function elegirPoderADominar(event) {
    var disciplina = event.data.disciplina;

    var arrayOpciones = [];
    var poderesPsiquicos = disciplina.getPoderesPsiquicos();
    for (var j = 0; j < poderesPsiquicos.length; j++) {
        var poder = poderesPsiquicos[j];
        arrayOpciones.push(new OpcionMostrable(poder.getNombre(),"",poder.getDescripcion()));
    }

    muestraDialogoElegirOpciones(arrayOpciones, {disciplina: disciplina}, {principal: dominarPoder, isDisabled: noPuedeDominarPoder}, true);
}



var TAG_ID_ARTE_MARCIAL = "TagIdArteMarcial";
var ALERT_ARTE_MARCIAL_ATAQUE_DEFENSA_BAJOS = "No puedes aprender más artes marciales. Mejora más tu ataque y defensa";

/**
 * Bloque con las artes marciales conocidas por personaje_actual
 * @returns {jQuery}
 */
function muestraArtesMarciales(estadoGeneracion) {
    var div = recuadroBase(estadoGeneracion);
    var artesMarciales = personaje_actual.getArtesMarciales();

    var muestraBotones = ((estadoGeneracion == ESTADO_GENERACION_INICIADA) || (estadoGeneracion == ESTADO_GENERACION_SUBIENDO_NIVEL));

    div.append(muestraSubtitulo(UI_ARTES_MARCIALES, true));

    var divContenido = getDiv(CSS_CONTENIDO_RECUADRO);

    if (muestraBotones) {
        var divBotonNuevo = getDiv("");
        divBotonNuevo.append(muestraBotonPequeño("Comprar artes marciales",{},prepararDialogoArtesMarciales,BOTON_ARTES_MARCIALES));
        divContenido.append(divBotonNuevo);
    } else if (artesMarciales.length == 0) {
        divContenido.append(getDiv(CSS_ETIQUETA).addClass(CSS_TEXTO_SMALLER).html("<br>"));
    }
    for (var i = 0; i < artesMarciales.length; i++) {
        var arteMarcial = artesMarciales[i];
        var primera = (artesMarciales.length == 1);

        var divArteMarcial = getDiv(CSS_TEXTO_SMALL);

        var divNombre = getDiv(CSS_ETIQUETA).append(arteMarcial.getNombre());

        divArteMarcial.append(divNombre);

        addToolTip(divNombre,arteMarcial.getDescripcion());

        if ((muestraBotones) && (arteMarcial.isAnulable())) {
            divArteMarcial.append(muestraBotonAnular(anularArteMarcial,{arteMarcial: arteMarcial, esPrimera: primera}));
        }

        divContenido.append(divArteMarcial);
    }

    div.append(divContenido);
    return div;
}

/**
 * Preparación para mostrar un cuadro de diálogo de elección de un arte marcial
 */
function prepararDialogoArtesMarciales() {
    var arrayArtesMarciales = [];
    var categorias = [];
    var i;

    categorias.push(new OpcionMostrable(UI_ARTES_MARCIALES_BASICAS,CATEGORIA_BASICA + TAG_ID_ARTE_MARCIAL));
    categorias.push(new OpcionMostrable(UI_ARTES_MARCIALES_AVANZADAS,CATEGORIA_AVANZADA + TAG_ID_ARTE_MARCIAL));

    for (i=0;i<artesMarcialesBasicas_set.length;i++) {
        arrayArtesMarciales.push(new OpcionMostrable(artesMarcialesBasicas_set[i].getNombre(),CATEGORIA_BASICA + TAG_ID_ARTE_MARCIAL,artesMarcialesBasicas_set[i].getDescripcion() + "<hr>" + artesMarcialesBasicas_set[i].getDescripcionVentajas()));
    }
    for (i=0;i<artesMarcialesAvanzadas_set.length;i++) {
        arrayArtesMarciales.push(new OpcionMostrable(artesMarcialesAvanzadas_set[i].getNombre(),CATEGORIA_AVANZADA + TAG_ID_ARTE_MARCIAL,artesMarcialesAvanzadas_set[i].getDescripcion() + "<hr>" + artesMarcialesAvanzadas_set[i].getDescripcionVentajas()));
    }

    var puedeComprar = personaje_actual.puedeComprarNuevaArteMarcial();
    if (puedeComprar.puedeComprar) {
        muestraDialogoElegirOpciones(arrayArtesMarciales, {}, {principal: aplicarArteMarcial, isDisabled: arteMarcialNoComprable}, true, categorias);
    } else {
        alert(puedeComprar.mensajeFallo);
    }
}

/**
 *
 * @param {{opcion:string}} parametros
 * @returns {boolean}
 */
function arteMarcialNoComprable(parametros) {
    var arteMarcial = getArteMarcial(parametros.opcion);


    return ( (!arteMarcial.cumpleRequisitos(personaje_actual)) || (personaje_actual.hasArteMarcial(parametros.opcion)) );
}



function dialogoVentajas() {
    dialogoPuntosCreacion(DIAG_COMPRAR_VENTAJAS_TITULO, true);
}

function dialogoDesventajas() {
    dialogoPuntosCreacion(DIAG_ELEGIR_DESVENTAJAS_TITULO, false);
}

function dialogoPuntosCreacion(tituloDialogo, esVentajas) {
    var dialogPuntosCreacion = $("#dialogPuntosCreacion");
    dialogPuntosCreacion.empty();

    var divAcord = $("<div></div>");

    for (var j = 0; j < categoriasDeVentajasComprables.length; j++) {
        var categ = categoriasDeVentajasComprables[j];
        var divCateg = $("<div></div>");
        if (esVentajas) {
            divAcord.append("<h3>"+categ+"</h3>");
            divCateg.attr("id",categ.replace(/\s+/g, ''));
        } else {
            divAcord.append("<h3>"+categ.replace("Ventaja","Desventaja")+"</h3>");
            divCateg.attr("id",categ.replace(/\s+/g, '')+"Desv");
        }
        divCateg.addClass("contenedorBotonesVentajas");
        divAcord.append(divCateg);
    }
    dialogPuntosCreacion.append(divAcord);

    var arrayPC;
    if (esVentajas) {
        arrayPC = ventajas_set;
    } else {
        arrayPC = desventajas_set;
    }

    for (var i = 0; i < arrayPC.length ; i++) {
        var elemento = arrayPC[i];

        if (elemento.repetible != NO_COMPRABLE) {


            var labelVent = elemento.nombre + "<br>[";
            for (var k = 0;k<elemento.costes.length;k++) {
                labelVent += elemento.costes[k];
                if (k < elemento.costes.length-1) {
                    labelVent += ",";
                }
            }
            labelVent += "]";

            var isDisabled = !personaje_actual.puedeComprar(elemento);

            var divElemento = boton("big primary pretty btn",labelVent,isDisabled);

            if (esVentajas) {
                $("#"+elemento.grupo.replace(/\s+/g, '')).append(divElemento);
                divElemento.attr("ventaja",elemento.nombre);
            } else {
                $("#"+elemento.grupo.replace(/\s+/g, '')+"Desv").append(divElemento);
                divElemento.attr("desventaja",elemento.nombre);
            }
            divElemento.on("click",
                {
                    elementoPC:elemento,
                    isVentaja: esVentajas
                },
                aplicarElementoPC);
            divElemento.on("mouseenter", function() {
                if (esVentajas) {
                    var elementoAct = getVentaja($(this).attr("ventaja"));
                } else {
                    var elementoAct = getVentaja($(this).attr("desventaja"));
                }

                var divGeneral = $("<div></div>");
                divGeneral.addClass(CSS_TEXTO_SMALLER);

                var descripcion = elementoAct.descripcion + " - " + elementoAct.descripcionEfecto;
                var divDescripcion = $("<div></div>");
                divDescripcion.addClass(CSS_TEXTO_ITALIC);
                divDescripcion.addClass("muestraBlock");
                divDescripcion.append(descripcion);
                divGeneral.append(divDescripcion);


                $(DIV_DESTINO_EXPLICACION_VENTAJA).empty().append(divGeneral);
            });
        }
        divElemento.on("mouseleave", function() {
            //$(DIV_DESTINO_EXPLICACION_VENTAJA).empty();
        });

    }

    divAcord.accordion({
        heightStyle: "content"
    });

    var divExplicacion = $("<div></div>");
    divExplicacion.addClass("explicacionVentaja");
    dialogPuntosCreacion.append(divExplicacion);

    dialogPuntosCreacion.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: true,
        //show: "puff",
        title: tituloDialogo,
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        closeOnEscape: true
    });
}





function dialogoElegirRaza() {
    var dialogElegirRaza = $("#dialogElegirRaza");
    dialogElegirRaza.empty();
    dialogElegirRaza.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: true,
        //show: "puff",
        title: DIAG_ELEGIR_RAZA_TITULO,
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        closeOnEscape: true
    });
    dialogElegirRaza.on("close",mostrarPersonajeActual);

    for (var i = 0; i < razas_set.length ; i++) {
        var raza = razas_set[i];

        var divRaza = boton("big primary pretty btn",raza.nombre,(raza.nombre == personaje_actual.raza.nombre));

        dialogElegirRaza.append(divRaza);
        divRaza.attr("raza",raza.nombre);
        divRaza.on("click", {raza:raza}, aplicarRaza);
        divRaza.on("mouseenter", function() {
            var razaAct = getRaza($(this).attr("raza"));
            var ventRaza = razaAct.getExplicacion();
            var divVent = $("<div></div>");

            for (var k = 0; k < ventRaza.length; k++) {
                var divUnaVentaja = $("<div></div>");
                divUnaVentaja.addClass("muestraBlock");

                var divNombre = $("<div></div>");
                var divDesc = $("<div></div>");
                var divreg = $("<div></div>");

                divNombre.addClass(CSS_MUESTRA_INLINE);
                divNombre.addClass("textoFuerte");
                divNombre.addClass(CSS_TEXTO_SMALLER);

                divDesc.addClass(CSS_MUESTRA_INLINE);
                divDesc.addClass(CSS_TEXTO_SMALLER);

                divreg.addClass(CSS_TEXTO_SMALLER);
                divreg.addClass(CSS_TEXTO_ITALIC);
                divreg.addClass(CSS_MUESTRA_INLINE);

                divNombre.append(ventRaza[k].nombre + ": ");
                divDesc.append(ventRaza[k].descripcion);
                divreg.append(" (" + ventRaza[k].reglas + ") ");
                divUnaVentaja.append(divNombre).append(divDesc).append(divreg);
                divVent.append(divUnaVentaja);
            }

            $(DIV_DESTINO_EXPLICACION_RAZA).empty().append(divVent);
        });
        divRaza.on("mouseleave", function() {
            //$(DIV_DESTINO_EXPLICACION_RAZA).empty();
        });
    }

    var divExplicacion = $("<div></div>");
    divExplicacion.addClass("explicacionRaza");
    dialogElegirRaza.append(divExplicacion);
}



/**
 *
 */
function dialogoElan() {
    var dialogo = $("<div></div>");

    var zonasElan = $("<div></div>");
    var elanPersonaje = personaje_actual.getElan();
    for (var i = 0; i < elanPersonaje.length; i++) {
        var titulo = $("<h3></h3>");
        titulo.append(elanPersonaje[i].getNombre() + " - Sincronización: " + elanPersonaje[i].getSincronizacion() + " / Libre: " + elanPersonaje[i].sincLibre());
        var contenido = $("<div></div>");
        contenido.attr("id","donesElan" + elanPersonaje[i].getNombre());
        appendDonesElan(contenido,elanPersonaje[i].getNombre(),dialogo);
        zonasElan.append(titulo).append(contenido);
    }
    zonasElan.accordion({
        heightStyle: "content"
    });
    dialogo.append(zonasElan);

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: true,
        ////show: "puff",
        title: DIAG_ELEGIR_OPCIONES_TITULO,
        position: "center",
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        closeOnEscape: true,
        close: function(event, ui) {dialogo.empty();}
    });
}

/**
 *
 * @param {jQuery} elemento
 * @param {string} nombre
 * @param {jQuery} dialogo
 */
function appendDonesElan(elemento, nombre, dialogo) {
    var elan = getElan(nombre);
    var dones = elan.getDones();

    var gridBotones = $("<ul></ul>").addClass("three_up tiles");

    for (var i = 0; i < dones.length; i++) {
        var labelBoton = "[" + dones[i].getCoste() + "] " + dones[i].getNombre() + "<br>";
        labelBoton += "Req: Sinc. " + dones[i].getElanMinimo();
        if (dones[i].getDonesRequisito().length > 0) {
            labelBoton += ", ";
            var donesRequisito = dones[i].getDonesRequisito();
            for (var j = 0; j < donesRequisito.length; j++) {
                labelBoton += donesRequisito[j];
                if (j+1 < donesRequisito.length) {
                    labelBoton += ", ";
                }
            }
        }
        var botonDon = boton("big primary pretty btn",labelBoton,!dones[i].puedeComprarse());
        botonDon.css("width", "100%");

        botonDon.on("click",{indice: i}, function(event) {
            var i = event.data.indice;
            dialogo.dialog("close" );
            aplicarDonElan(dones[i],nombre);
        });

        gridBotones.append($("<li></li>").append(botonDon));
    }
    elemento.append(gridBotones);
}

/**
 *
 */
function dialogoBonosNaturales() {
    var i;
    var dialogBonosNaturales = $("#dialogBonosNaturales");
    dialogBonosNaturales.empty();
    dialogBonosNaturales.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: true,
        ////show: "puff",
        title: DIAG_ELEGIR_BONOS_NATURALES_TITULO,
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO,
        closeOnEscape: true,
        buttons: [
            { text: "Ok",
                click: function() {
                    $( this ).dialog( "close" );
                }
            }
        ]
    });

    var divGeneral = $("<div></div>");

    for (i = 0; i < 5; i++) {
        var div = $("<div></div>");

        var etiqu =  $("<div></div>");
        etiqu.addClass(CSS_MUESTRA_INLINE);
        etiqu.append(UI_HABILIDAD_NATURAL + " " + (i+1) + ": ");

        var divNombre = $("<div></div>");
        divNombre.attr("id","habilidadNaturalElegida"+i);
        divNombre.addClass(CSS_MUESTRA_INLINE);
        if (personaje_actual.getBonoHabilidadNatural(i,personaje_actual.getNivel()) != -1) {
            var nombreElegido = personaje_actual.getBonoHabilidadNatural(i,personaje_actual.getNivel()).getItem();
            divNombre.append(nombreElegido);
        }
        etiqu.append(divNombre);

        div.append(etiqu);

        var botonBono = boton("medium pretty primary btn",UI_ELEGIR);
        div.append(botonBono);

        botonBono.on("click",{indice: i, nivel: personaje_actual.getNivel()}, elegirHabilidadNatural);

        divGeneral.append(div);
    }

    if (!personaje_actual.hasFlag(FLAG_SIN_BONIFICADOR_NATURAL)) {
        /*bonificador natural físico*/
        var divBonificadoresNaturales = $("<div></div>");

        var divFisico = $("<div></div>");

        var etiquFisico =  $("<div></div>");
        etiquFisico.addClass(CSS_MUESTRA_INLINE);
        etiquFisico.append(UI_BONIFICADOR_NATURAL_FISICO + ": ");

        var divNombreFisico = $("<div></div>");
        divNombreFisico.addClass(CSS_MUESTRA_INLINE);
        divNombreFisico.attr("id","bonificadorNaturalElegido"+TIPO_BONIFICADOR_NATURAL_FISICO);

        if (personaje_actual.getBonificadorNatural(TIPO_BONIFICADOR_NATURAL_FISICO,1) != "") {
            var nombreElegidoFisico = personaje_actual.getBonificadorNatural(TIPO_BONIFICADOR_NATURAL_FISICO,1);
            divNombreFisico.append(nombreElegidoFisico);
        }
        etiquFisico.append(divNombreFisico);
        divFisico.append(etiquFisico);

        var botonFisico = boton("medium pretty primary btn",UI_ELEGIR);
        divFisico.append(botonFisico);
        divBonificadoresNaturales.append(divFisico);

        botonFisico.on("click",{tipo: TIPO_BONIFICADOR_NATURAL_FISICO}, elegirBonificadorNatural);


        /*bonificador natural mental*/
        var divMental = $("<div></div>");

        var etiquMental =  $("<div></div>");
        etiquMental.addClass(CSS_MUESTRA_INLINE);
        etiquMental.append(UI_BONIFICADOR_NATURAL_MENTAL + ": ");

        var divNombreMental = $("<div></div>");
        divNombreMental.addClass(CSS_MUESTRA_INLINE);
        divNombreMental.attr("id","bonificadorNaturalElegido"+TIPO_BONIFICADOR_NATURAL_MENTAL);

        if (personaje_actual.getBonificadorNatural(TIPO_BONIFICADOR_NATURAL_MENTAL,1) != "") {
            var nombreElegidoMental = personaje_actual.getBonificadorNatural(TIPO_BONIFICADOR_NATURAL_MENTAL,1);
            divNombreMental.append(nombreElegidoMental);
        }
        etiquMental.append(divNombreMental);

        divMental.append(etiquMental);


        var botonMental = boton("medium pretty primary btn",UI_ELEGIR);
        divMental.append(botonMental);

        divBonificadoresNaturales.append(divMental);
        botonMental.on("click",{tipo: TIPO_BONIFICADOR_NATURAL_MENTAL}, elegirBonificadorNatural);

        if (personaje_actual.hasFlag(FLAG_BONO_NATURAL_EXTRA)) {
            /*bonificador natural extra*/
            var divExtra = $("<div></div>");

            var etiquExtra =  $("<div></div>");
            etiquExtra.addClass(CSS_MUESTRA_INLINE);
            etiquExtra.append(UI_BONIFICADOR_NATURAL_EXTRA + ": ");

            var divNombreExtra = $("<div></div>");
            divNombreExtra.addClass(CSS_MUESTRA_INLINE);
            divNombreExtra.attr("id","bonificadorNaturalElegido"+TIPO_BONIFICADOR_NATURAL_EXTRA);

            if (personaje_actual.getBonificadorNatural(TIPO_BONIFICADOR_NATURAL_EXTRA,1) != "") {
                var nombreElegidoExtra = personaje_actual.getBonificadorNatural(TIPO_BONIFICADOR_NATURAL_EXTRA,1);
                divNombreExtra.append(nombreElegidoExtra);
            }
            etiquExtra.append(divNombreExtra);

            divExtra.append(etiquExtra);


            var botonExtra = boton("medium pretty primary btn",UI_ELEGIR);
            divExtra.append(botonExtra);

            divBonificadoresNaturales.append(divExtra);
            botonExtra.on("click",{tipo: TIPO_BONIFICADOR_NATURAL_EXTRA}, elegirBonificadorNatural);
        }
        divGeneral.append(divBonificadoresNaturales);
    }

    if (personaje_actual.getCategoria().getNombre() == CAT_NOVEL) {
        for (i = 0; i < 5; i++) {
            var divNovel = $("<div></div>");

            var etiquNovel =  $("<div></div>");
            etiquNovel.addClass(CSS_MUESTRA_INLINE);
            etiquNovel.append(UI_BONO_NOVEL + " " + (i+1) + ": ");

            var divNombreNovel = $("<div></div>");
            divNombreNovel.attr("id","habilidadNaturalElegidaNovel"+i);
            divNombreNovel.addClass(CSS_MUESTRA_INLINE);
            if (personaje_actual.getBonoNovel(i,personaje_actual.getNivel()) != "") {
                var nombreElegidoNovel = personaje_actual.getBonoNovel(i,personaje_actual.getNivel());
                divNombreNovel.append(nombreElegidoNovel);
            }
            etiquNovel.append(divNombreNovel);

            divNovel.append(etiquNovel);

            var botonNovel = boton("medium pretty primary btn",UI_ELEGIR);
            botonNovel.css("cursor", "pointer");
            divNovel.append(botonNovel);

            botonNovel.on("click",{indice: i, nivel:personaje_actual.getNivel()}, elegirBonoNovel);

            divGeneral.append(divNovel);
        }
    }

    dialogBonosNaturales.append(divGeneral);
    elegirBonosNaturales();
}

/**
 *
 * @param {string} nombreHabilidad
 * @returns {jQuery}
 */
function muestraBotonMasMenosHabilidad(nombreHabilidad) {
    var div = $("<div></div>");
    var divMas = boton("small primary pretty btn","+");
    var divMenos = boton("small secondary pretty btn","-");

//    divMas.css("width", "1rem")
  //  divMenos.css("width", "1rem")

    div.append(divMas).append(divMenos);

    divMas.on("click",{nombreHabilidad: nombreHabilidad,unidades: 1}, aumentaHabilidadClick);
    divMenos.on("click",{nombreHabilidad: nombreHabilidad,unidades: -1}, aumentaHabilidadClick);
    return div;
}

function muestraBotonElegirEspecialidad(nombreHabilidad) {
    var div = $("<div></div>");
    var divBoton = boton("small info pretty btn","E");
//    divBoton.css("width", "1rem")
    div.append(divBoton);

    divBoton.on("click",{nombreHabilidad: nombreHabilidad}, eligeEspecialidad);
    return div;
}

/**
 *
 * @param {{principal:function,isDisabled:function}} callback
 * @param {{}} parametro
 * @param {string} [soloFisicasOMentales]
 */
function muestraDialogoElegirOpcionHabilidad(callback,parametro,soloFisicasOMentales) {
    var arrayOpciones =  [];
    var categorias = [];
    var i;
    var j;
    var grupoHabi;
    var habi;

    for (i = 0; i < habilidades_secundarias.length;i++) {
        grupoHabi = habilidades_secundarias[i];
        categorias.push(new OpcionMostrable(habilidades_secundarias_nombres_grupos[i],habilidades_secundarias_nombres_grupos[i]+"_tipo"+soloFisicasOMentales));
        for (j = 0; j < grupoHabi.length; j++) {
            habi = getHabilidad(grupoHabi[j]);
            if ((soloFisicasOMentales == TIPO_BONIFICADOR_NATURAL_EXTRA) ||
                ((soloFisicasOMentales == TIPO_BONIFICADOR_NATURAL_FISICO) && ((habi.getCaracteristica() == FUE) || (habi.getCaracteristica() == DES) || (habi.getCaracteristica() == AGI) || (habi.getCaracteristica() == CON))) ||
                ((soloFisicasOMentales == TIPO_BONIFICADOR_NATURAL_MENTAL) && ((habi.getCaracteristica() == INT) || (habi.getCaracteristica() == VOL) || (habi.getCaracteristica() == POD) || (habi.getCaracteristica() == PER)))) {
                arrayOpciones.push(new OpcionMostrable(habi.getNombre(),habilidades_secundarias_nombres_grupos[i]+"_tipo"+soloFisicasOMentales));
            }
        }
    }
    muestraDialogoElegirOpciones(arrayOpciones, parametro, {principal: callback.principal, isDisabled: callback.isDisabled}, true, categorias);
}


/**
 * Created by Guille on 5/12/13.
 */

var DIAG_LOG_CAMBIOS = "Log de cambios";
var DIAG_LICENCIA = "Agradecimientos y licencia de software";

var CURRENT_VERSION = 21;

function mostrarLogCambios() {
    $("#logCambios").dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: false,
        ////show: "puff",
        title: DIAG_LOG_CAMBIOS,
        position: "center",
        closeOnEscape: true,
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO
    });

    localStorage.ultimosCambiosVistos = CURRENT_VERSION;
}

function mostrarLicencia() {
    $("#licencia").dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: false,
        ////show: "puff",
        title: DIAG_LICENCIA,
        position: "center",
        closeOnEscape: true,
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO
    });
}
/**
 * @type Personaje
 */
var personaje_actual;

/**
 *
 * @type {boolean}
 */
var ESTADO_GENERACION_INICIADA = "ESTADO_GENERACION_INICIADA";
var ESTADO_GENERACION_NINGUNO = "ESTADO_GENERACION_NINGUNO";
var ESTADO_GENERACION_PERSONAJE_HECHO = "ESTADO_GENERACION_PERSONAJE_HECHO";
var ESTADO_GENERACION_SUBIENDO_NIVEL = "ESTADO_GENERACION_SUBIENDO_NIVEL";
var GENERACION_INICIADA = ESTADO_GENERACION_NINGUNO;


var DIAG_METODO_CREACION_TITULO = "Seleccionar método de creación";
var DIAG_ELEGIR_RAZA_TITULO = "Seleccionar raza";

var DIAG_COMPRAR_VENTAJAS_TITULO = "Comprar ventajas";
var DIAG_ELEGIR_DESVENTAJAS_TITULO = "Elegir desventajas";
var DIAG_ELEGIR_BONOS_NATURALES_TITULO = "Elegir bonos naturales";
var DIAG_ELEGIR_OPCIONES_TITULO = "Elegir opciones";
var DIAG_PODERES_PSIQUICOS = "Poderes Psíquicos";
var DIAG_PODERES_KI = "Dominios del Ki";
var DIAG_PODERES_MAGIA = "Magia";
var DIAG_CREACION_TECNICA = "Crear Técnica de Dominio";
var DIAG_REASIGNA_COSTE_KI = "Reparte coste de ki";
var EXPLI_METODO_1 = "El método tradicional y más recomendado para generar las tiradas es el de lanzar un D10 ocho veces y apuntar las características en una hoja de papel. Ignora cualquier resultado de 1, 2 ó 3 que saques y repítelo, lo que permitirá a tu personaje no tener en ningún momento puntuaciones demasiado bajas. Una vez que tengas las ocho, sustituye la menor por un 9 para asegurar así que, incluso en el improbable caso de que no tengas ninguna cifra elevada, el personaje será excepcional en al menos un campo. A continuación reparte las cifras como prefieras, definiendo exactamente lo que quieres. Este sistema de generación proporciona unas cifras por media elevadas, pero es natural teniendo en cuenta que los personajes suelen ser individuos excepcionales.";
var EXPLI_METODO_2 = "Consiste en tirar dos D10 ocho veces, anotando sólo el resultado más alto de los dos obtenidos. Cuando se tengan las ocho cifras, el personaje las reparte libremente entre las características. Este método asegura una media alta, pero también permite obtener algunas cifras realmente bajas.";
var EXPLI_METODO_3 = "Este método se utiliza en el caso de que los jugadores decidan interpretar personajes comunes, sin características demasiado excepcionales. Consiste en lanzar ocho veces un dado apuntando en orden las cifras obtenidas en las casillas de características. Cualquier tirada, por alta o baja que sea, deberá aceptarse.";
var EXPLI_METODO_4 = "El último método consiste en tirar siete veces un D10 y sumar todos los resultados obtenidos. La cifra resultante, un número entre siete y setenta, puede ser dividida libremente entre las características, pero sin que en ningún caso se pueda superar el diez.";
var EXPLI_METODO_5 = "Se reparten 55 puntos entre las características. Cualquier diez cuesta dos puntos en vez de uno. Pueden repartirse 45 puntos o 65, según el nivel de la partida.";

var ERR_PC_INSUFICIENTES = "PC insuficientes";
var ERR_METODO_DESCONOCIDO = "Error: Metodo de generación desconocido";
var ERR_MAX_DESVENTAJAS = "Límite de desventajas alcanzado";
var ERR_OVERFLOW_NIVEL = "Límite de gasto del nivel previo alcanzando";

var RANGOS_HABILIDAD = "RANGOS_HABILIDAD";
var TABLA_ARMAS = "TABLA_ARMAS";
var ARTE_MARCIAL = "ARTE_MARCIAL";
var POTENCIAL_PSIQUICO = "POTENCIAL_PSIQUICO";

var MAX_DIF_ATAQUE_DEFENSA = 50;

var PERSONAJE_EN_MARCHA = false;
/**
 *
 */
function iniciarGeneracion() {
    if (PERSONAJE_EN_MARCHA) {
        var adelante = confirm("¿Seguro? Esto sustituirá al personaje actual");

        if (!adelante) {
            return;
        }
    }
    desactivarNotificaciones();
    personaje_actual = new Personaje();
    personaje_actual.setRaza(getRaza(RAZA_HUMANO));
    personaje_actual.setCategoria(CATEGORIA_NOVEL);
    personaje_actual.GENERACION_INICIADA = ESTADO_GENERACION_INICIADA;
    PERSONAJE_EN_MARCHA = true;
    activarNotificaciones();
    mostrarPersonajeActual();
    mostrarDialogoTipoGeneracion();
}
/***** PASO 1: Características *****/

/**
 *
 * @param {number} metodo
 * @throws ERR_METODO_DESCONOCIDO
 */
function generarMetodo(metodo) {
    switch (metodo) {
        case 1:
            generarMetodo1();
            break;
        case 2:
            generarMetodo2();
            break;
        case 3:
            generarMetodo3();
            break;
        case 4:
            generarMetodo4();
            break;
        case 5:
            generarMetodo5();
            break;
        default:
            throw ERR_METODO_DESCONOCIDO;
            break;
    }
}

/**
 *
 * @param {number} metodo
 * @returns {string}
 * @throws ERR_METODO_DESCONOCIDO
 */
function getExplicacionMetodo(metodo) {
    switch (metodo) {
        case 1:
            return EXPLI_METODO_1;
            break;
        case 2:
            return EXPLI_METODO_2;
            break;
        case 3:
            return EXPLI_METODO_3;
            break;
        case 4:
            return EXPLI_METODO_4;
            break;
        case 5:
            return EXPLI_METODO_5;
            break;
        default:
            throw ERR_METODO_DESCONOCIDO;
            break;
    }
}

/**
 *
 */
function generarMetodo1() {
    var tiradas = [];
    var valoresAbandonados = [];

    for (var i = 0; i < CARACTERISTICAS_NOMBRES.length; i++) {
        tiradas[i] = d10();
    }

    var min = 30;
    var indiceMin = 0;
    for (var j = 0; j < tiradas.length; j++) {
        while (tiradas[j] <= 3) {
            valoresAbandonados.push(tiradas[j]);
            tiradas[j] = d10();
        }
        if (tiradas[j] <= min) {
            min = tiradas[j];
            indiceMin = j;
        }
    }

    valoresAbandonados.push(min);
    tiradas[indiceMin] = 9;

    tiradas.sort();
    valoresAbandonados.sort();

    mostrarDialogoRepartoTiradasCaracteristicas(tiradas,valoresAbandonados);
}

/**
 *
 */
function generarMetodo2() {
    var tiradas = [];
    var valoresAbandonados = [];

    for (var i = 0; i < CARACTERISTICAS_NOMBRES.length; i++) {
        var valor1 = d10();
        var valor2 = d10();

        if (valor1 < valor2) {
            valoresAbandonados.push(valor1);
            tiradas.push(valor2);
        } else {
            valoresAbandonados.push(valor2);
            tiradas.push(valor1);
        }
    }
    tiradas.sort();
    valoresAbandonados.sort();

    mostrarDialogoRepartoTiradasCaracteristicas(tiradas,valoresAbandonados);
}

/**
 *
 */
function generarMetodo3() {
    desactivarNotificaciones();
    for (var i = 0; i < CARACTERISTICAS_NOMBRES.length; i++) {
        personaje_actual.setCaracteristica(CARACTERISTICAS_NOMBRES[i],d10());
    }
    activarNotificaciones();
    finAsignacionCaracteristicas()
}

/**
 *
 */
function generarMetodo4() {
    var total = 0;
    for (var i = 0; i < 7; i++) {
        total += d10();
    }
    mostrarDialogoRepartoPuntosCaracteristicas(total,false);
}

/**
 *
 */
function generarMetodo5() {
    muestraDialogoElegirOpciones([new OpcionMostrable("45",""),new OpcionMostrable("55",""),new OpcionMostrable("65","")],{},{principal:metodo5PuntosElegidos,isDisabled:alwaysEnabled},false);
}

function metodo5PuntosElegidos(parametros) {
    var total = parseInt(parametros.opcion);
    mostrarDialogoRepartoPuntosCaracteristicas(total,true);
}

/**
 *
 */
function finAsignacionCaracteristicas() {
    desactivarNotificaciones();
    personaje_actual.setTamaño(personaje_actual.getCaracteristica(FUE) + personaje_actual.getCaracteristica(CON));
    personaje_actual.setApariencia(d10());
    personaje_actual.setFlag(FLAG_APARIENCIA_ALEATORIA);
    activarNotificaciones();
    lanzarEvento(EVENT_CHARACTER_SECCION_CARACTERISTICAS);
    personaje_actual.updateBonoyBases();
}

/***** PASO 2: Raza *****/

/**
 *
 * @param {{}} event
 */
function aplicarRaza(event) {
    $("#dialogElegirRaza").dialog("close");
    var raza = event.data.raza;

    personaje_actual.setRaza(raza);
}

/***** PASO 3: Categoría *****/
/**
 *
 * @param {Categoria} categoria
 */
function aplicarCategoria(categoria) {
    personaje_actual.setCategoria(categoria);
}

/***** PASO 4: Ventajas y Desventajas ******/
/**
 *
 * @param {{}} event
 */
function aplicarElementoPC(event) {
    $("#dialogPuntosCreacion").dialog("close");
    /**
     *
     * @type {Ventaja}
     */
    var elementoPC = event.data.elementoPC;
    var isVentaja = event.data.isVentaja;
    var costes = elementoPC.getCostes();

    if (costes.length > 1) {
        var arrayOpciones = [];
        for (var i=0; i < costes.length;i++) {
            arrayOpciones.push(new OpcionMostrable(costes[i],""));
        }
        muestraDialogoElegirOpciones(arrayOpciones, {elementoPC: elementoPC, isVentaja: isVentaja}, {principal: aplicarElementoPCPaso2, isDisabled: alwaysEnabled}, true);
    } else {
        aplicarElementoPCPaso2({elementoPC: elementoPC,opcion: costes[0], isVentaja: isVentaja});
    }
}

/**
 *
 * @param {{}} parametros
 */
function aplicarElementoPCPaso2(parametros) {
    var coste = parametros.opcion;
    var elementoPC = parametros.elementoPC;
    var isVentaja = parametros.isVentaja;

    var elegir = elementoPC.getElegir();
    if (elegir.length > 0) {
        muestraDialogoElegirOpcion(elegir[0],{elementoPC: elementoPC,coste: coste, isVentaja: isVentaja},{principal: aplicarElementoPCFinal, isDisabled: opcionElementoPCNoValida});
    } else {
        aplicarElementoPCFinal({elementoPC: elementoPC,coste: coste, opcion: "", isVentaja: isVentaja});
    }
}

/**
 *
 * @param {{}} parametros
 * @returns {boolean}
 */
function opcionElementoPCNoValida(parametros) {
    var elementoPC = parametros.elementoPC;
    var opcion = parametros.opcion;

    return !(personaje_actual.puedeComprar(elementoPC,opcion));
}

/**
 *
 * @param {number} coste
 * @param {Ventaja} elementoPC
 * @param {string} opcion
 * @param {string} [atributoPCGrupo]
 * @param {string} [atributoRepartoCostes]
 */
function aplicarVentajaFinalGrupo(coste, elementoPC, opcion, atributoPCGrupo, atributoRepartoCostes) {
    var repartoCostes = new RepartoCostes();
    var diferencial = 0;

    if (atributoPCGrupo != undefined) {
        diferencial = personaje_actual[atributoPCGrupo];
    }

    if (personaje_actual.getPCLibres() + diferencial >= coste) {
/*        if ((atributoPCGrupo != undefined) && (coste <= diferencial)) {
            personaje_actual.gastaPC(coste, atributoPCGrupo);
            repartoCostes.setValor(atributoRepartoCostes,coste);
        } else {
            personaje_actual.gastaPC(coste - diferencial, "PC_libres_generales");
            repartoCostes.setLibres(coste - diferencial);
            if (atributoPCGrupo != undefined) {
                repartoCostes[atributoRepartoCostes] = diferencial;
                personaje_actual.setPC(0, atributoPCGrupo);
            }
        }*/
        personaje_actual.addVentaja(elementoPC, coste, opcion, ORIGEN_PC, true, repartoCostes, true);
        personaje_actual.updatePC();
        //mostrarPersonajeActual();
    } else {
        alert(ERR_PC_INSUFICIENTES);
    }
}

/**
 *
 * @param {Ventaja} elementoPC
 * @param {number} coste
 * @param {string} opcion
 */
function aplicarVentajaFinal(elementoPC, coste, opcion) {
    if (elementoPC.getGrupo() == GRUPO_DON) {
        aplicarVentajaFinalGrupo(coste, elementoPC, opcion, "PC_libres_don", "don");
    } else if (elementoPC.getGrupo() == GRUPO_PSIQUICAS) {
        aplicarVentajaFinalGrupo(coste, elementoPC, opcion, "PC_libres_psiquicas", "psiquica");
    } else {
        aplicarVentajaFinalGrupo(coste, elementoPC, opcion);
    }
}

/**
 *
 * @param {Ventaja} elementoPC
 * @param {number} coste
 * @param {string} opcion
 */
function aplicarDesventajaFinal(elementoPC, coste, opcion) {
    var repartoCostes = new RepartoCostes();
    var desventajas = personaje_actual.getDesventajas();

    var numDesventajas = desventajas.length;

    for (var i = 0; i < desventajas.length; i++) {
        if (desventajas[i].getOrigen() != ORIGEN_PC) {
            numDesventajas--;
        }
    }

    if (numDesventajas < 3) {
/*        if (elementoPC.getGrupo() == GRUPO_DON) {
            personaje_actual.gastaPC(coste,"PC_libres_don");
            repartoCostes.setDon(coste);
        } else if (elementoPC.getGrupo() == GRUPO_PSIQUICAS) {
            personaje_actual.gastaPC(coste,"PC_libres_psiquicas");
            repartoCostes.setPsiquica(coste);
        } else {
            personaje_actual.gastaPC(coste);
            repartoCostes.setLibres(coste);
        }
        personaje_actual.PC_generales -= coste;*/
        personaje_actual.addVentaja(elementoPC, coste, opcion, ORIGEN_PC, false, repartoCostes, true);
        personaje_actual.updatePC();
    } else {
        alert(ERR_MAX_DESVENTAJAS);
    }
}

/**
 *
 * @param {{}} parametros
 */
function aplicarElementoPCFinal(parametros) {
    var elementoPC = parametros.elementoPC;
    var coste = parametros.coste;
    var opcion = parametros.opcion;
    var isVentaja = parametros.isVentaja;

    if (parametros.isDesequilibrioSephirotico) {
        var gruposOpciones = parametros.gruposOpciones;
        opcion = "[";
        for (var i = 0; i < gruposOpciones.length;i++) {
            opcion += gruposOpciones[i].opcionesElegidas[0];
            if (i +1 < gruposOpciones.length) {
                opcion += ","
            }
        }
        opcion += "]";
    }

    if (isVentaja) {
        aplicarVentajaFinal(elementoPC, coste, opcion);
    } else {
        aplicarDesventajaFinal(elementoPC, coste, opcion);
    }
}

/**
 *
 * @param {{}} event
 */
function anularelementoPCComprado(event) {
    var elementoPCComprado = event.data.elementoPCComprado;

    personaje_actual.removeVentaja(elementoPCComprado);
}

/***** PASO 5 y PASO 6: Habilidades primarias y secundarias *****/

/**
 *
 * @param {number} coste
 * @returns {PuedeComprar}
 */
function comprasiPuedesPotencialPsiquico(coste) {
    return new PuedeComprar((personaje_actual.getHabilidadDePersonaje(HB_CV).valorFinalActual() - personaje_actual.getCVGastados() >= coste),"CVs libres insuficientes");
}

/**
 * Devuelve false se se ha desarrollado ataque y defensa. Si sólo se ha desarrollado una habilidad, devuelve su nombre
 * @returns {boolean|string}
 */
function desarrolloSoloAtaqueODefensa() {
    var valor = false;
    var pdAtaque = personaje_actual.getHabilidadDePersonaje(HB_ATAQUE).getPDinvertidos();
    var pdParada = personaje_actual.getHabilidadDePersonaje(HB_ESQUIVA).getPDinvertidos();
    var pdEsquiva = personaje_actual.getHabilidadDePersonaje(HB_PARADA).getPDinvertidos();

    if ( (pdAtaque == 0) || ( (pdEsquiva == 0) && (pdParada == 0)) ) {
        if (pdAtaque > 0) {
            valor = HB_ATAQUE;
        } else if (pdEsquiva > 0) {
            valor = HB_ESQUIVA;
        } else {
            valor = HB_PARADA;
        }
    }

    return valor;
}

/**
 *
 * @param {string} tipoCompra
 * @param {{}} parametros
 * @param {number} cantidad
 * @param {number} coste
 * @returns {PuedeComprar}
 */
function compraSiPuedesCombate(tipoCompra, parametros, cantidad, coste) {
    var nombreHabilidad = "";
    if ("habilidad" in parametros) {
        nombreHabilidad = parametros.habilidad.getNombre();
    }

    var valorAtaque = personaje_actual.getHabilidadDePersonaje(HB_ATAQUE).valorFinalActual();
    var valorParada = personaje_actual.getHabilidadDePersonaje(HB_PARADA).valorFinalActual();
    var valorEsquiva = personaje_actual.getHabilidadDePersonaje(HB_ESQUIVA).valorFinalActual();
    console.log("ataque:"+valorAtaque+" - parada:"+valorParada+" - esquiva:"+valorEsquiva);
    var puedeComprar = new PuedeComprar(true);

    if (tipoCompra == RANGOS_HABILIDAD) {
        if ((nombreHabilidad == HB_ATAQUE)||(nombreHabilidad == HB_PARADA) || (nombreHabilidad == HB_ESQUIVA)) {
            if ( desarrolloSoloAtaqueODefensa() == nombreHabilidad ) {
                console.log("desarrollado solo ataque o defensa");
                if (personaje_actual.gastoActualPDsAtaqueDefensa() + coste > personaje_actual.maxPDsAtaqueDefensa() / 2) {
                    puedeComprar.puedeComprar = false;
                    puedeComprar.mensajeFallo = "Max PDs en Ataque/Defensa alcanzados (Mitad del normal por no desarrollar defensa)";
                }
            } else {
                console.log("desarrollados ataque y defensa");
                if (personaje_actual.gastoActualPDsAtaqueDefensa() + coste <= personaje_actual.maxPDsAtaqueDefensa()) {
                    console.log("gastoActualPDsAtaqueDefensa:"+personaje_actual.gastoActualPDsAtaqueDefensa() + " más coste: " + (personaje_actual.gastoActualPDsAtaqueDefensa() + coste));
                    switch (nombreHabilidad) {
                        case HB_ATAQUE:
                            valorAtaque += cantidad * parametros.habilidad.getPuntosAComprar();
                            break;
                        case HB_PARADA:
                            valorParada += cantidad * parametros.habilidad.getPuntosAComprar();
                            break;
                        default:
                            valorEsquiva += cantidad * parametros.habilidad.getPuntosAComprar();
                    }
                    var valorDefensa = (valorParada>valorEsquiva?valorParada:valorEsquiva);
                    console.log("ahora son -- ataque:"+valorAtaque+" - defensa:"+valorDefensa);
                    console.log("ataque y defensa:"+(Math.abs(valorAtaque - valorDefensa)));
                    if ((Math.abs(valorAtaque - valorDefensa) > MAX_DIF_ATAQUE_DEFENSA)) {
                        puedeComprar.puedeComprar = false;
                        puedeComprar.mensajeFallo = "Ataque y Defensa base no pueden separarse en más de 50.";
                    }
                } else {
                    puedeComprar.puedeComprar = false;
                    puedeComprar.mensajeFallo = "Max PDs en Ataque/Defensa alcanzados";
                }
            }
        }
    }
    return puedeComprar;
}

/**
 *
 * @param {string} tipoCompra
 * @param {{}} parametros
 * @param {number} coste
 * @returns {PuedeComprar}
 */
function compraSiPuedesSobrenatural(tipoCompra, parametros, coste) {
    var nombreHabilidad = "";
    if ("habilidad" in parametros) {
        nombreHabilidad = parametros.habilidad.getNombre();
    }

    var habilidadProyeccionMagica = personaje_actual.getHabilidadDePersonaje(HB_PROYECCION_MAGICA);

    var puedeComprar = new PuedeComprar(true);

    if (tipoCompra == RANGOS_HABILIDAD) {
        if (nombreHabilidad == HB_PROYECCION_MAGICA) {
            if (habilidadProyeccionMagica.getPDinvertidos() + coste > personaje_actual.maxPDsGrupoHabilidad(TIPO_HB_SOBRENATURAL) / 2) {
                puedeComprar.puedeComprar = false;
                puedeComprar.mensajeFallo = "Max PDs en Proyección Mágica alcanzados (mitad del tope en sobrenaturales)";
            }
        }
    }
    return puedeComprar;
}

/**
 *
 * @param {string} tipoCompra
 * @param {{}} parametros
 * @param {number} cantidad
 * @param {number} coste
 * @returns {PuedeComprar}
 */
function compraSiPuedesPsiquica(tipoCompra, parametros, cantidad, coste) {
    var nombreHabilidad = "";
    if ("habilidad" in parametros) {
        nombreHabilidad = parametros.habilidad.getNombre();
    }

    var habilidadProyeccionPsiquica = personaje_actual.getHabilidadDePersonaje(HB_PROYECCION_PSIQUICA);
    var habilidadCV = personaje_actual.getHabilidadDePersonaje(HB_CV);

    var puedeComprar = new PuedeComprar(true);

    if (tipoCompra == RANGOS_HABILIDAD) {
        if (nombreHabilidad == HB_PROYECCION_PSIQUICA) {
            if (habilidadProyeccionPsiquica.getPDinvertidos() + coste > personaje_actual.maxPDsGrupoHabilidad(TIPO_HB_PSIQUICA) / 2) {
                puedeComprar.puedeComprar = false;
                puedeComprar.mensajeFallo = "Max PDs en Proyección Psíquica alcanzados (mitad del tope en sobrenaturales)";
            }
        } else if (nombreHabilidad == HB_CV) {
            if (  habilidadCV.valorFinalActual() + cantidad * parametros.habilidad.getPuntosAComprar() - personaje_actual.getCVGastados() < 0 ) {
                puedeComprar.puedeComprar = false;
                puedeComprar.mensajeFallo = "CVs ya gastados. Primero devuelvelos.";
            }
        }
    }

    return puedeComprar;
}

/**
 *
 * @param {string} tipoCompra
 * @param {{}} parametros
 * @param {string} grupoPD
 * @param {number} cantidad
 * @param {number} coste
 */
function compraSiPuedes(tipoCompra, parametros, grupoPD, cantidad, coste) {
    var nombreHabilidad = "";
    if ("habilidad" in parametros) {
        nombreHabilidad = parametros.habilidad.getNombre();
    }
    var puedeComprar = new PuedeComprar(true);

    if (nombreHabilidad == HB_POTENCIAL_PSIQUICO) {
        puedeComprar = comprasiPuedesPotencialPsiquico(coste);
    } else {
        if ((personaje_actual.getPDLibres() >= coste) && (personaje_actual.getPDLibres()-coste <= personaje_actual.getPDTotales())) {
            if (personaje_actual.gastoActualPDsGrupoHabilidad(grupoPD) + coste <= personaje_actual.maxPDsGrupoHabilidad(grupoPD)) {
                switch (grupoPD) {
                    case TIPO_HB_COMBATE :
                        puedeComprar = compraSiPuedesCombate(tipoCompra, parametros, cantidad, coste);
                        break;
                    case TIPO_HB_SOBRENATURAL:
                        puedeComprar = compraSiPuedesSobrenatural(tipoCompra, parametros, coste);
                        break;
                    case TIPO_HB_PSIQUICA:
                        puedeComprar = compraSiPuedesPsiquica(tipoCompra, parametros, cantidad, coste);
                        break;
                    default:
                        break;
                }
            } else {
                puedeComprar.puedeComprar = false;
                puedeComprar.mensajeFallo = "Max PDs en " + grupoPD + " alcanzados";
                return;
            }
        } else {
            puedeComprar.puedeComprar = false;
            puedeComprar.mensajeFallo = "PDs insuficientes";
        }
    }

    if (puedeComprar.puedeComprar) {
        compra(tipoCompra, parametros, coste);
    } else {
        alert(puedeComprar.mensajeFallo);
    }
}

/**
 *
 * @param {string} tipoCompra
 * @param {{}} parametros
 * @param {number} coste
 */
function compra(tipoCompra, parametros, coste) {
    switch (tipoCompra) {
        case RANGOS_HABILIDAD:
            personaje_actual.aumentaPDHabilidad(parametros.habilidad.getNombre(),coste);
            break;
        case TABLA_ARMAS:
            var tabla = getTablaArmas(parametros.tablaArmas.getNombre());
            if (tabla.getTipoTabla() == TABLA_ESPECIAL) {
                personaje_actual.addTablaArmasEspecial(parametros.tablaArmas.getNombre(), parametros.opcion);
            } else {
                personaje_actual.addTablaArmas(parametros.tablaArmas.getNombre());
            }
            personaje_actual.addPDLibres(-1 * coste);
            break;
        case ARTE_MARCIAL:
            if (!personaje_actual.hasArmaManejada(ARMA_SIN_ARMAS)) {
                personaje_actual.addArmaManejada(ARMA_SIN_ARMAS,false);
                personaje_actual.setFlag(FLAG_SIN_ARMAS_POR_ARTES_MARCIALES);
            }
            personaje_actual.addArteMarcial(parametros.arteMarcial.getNombre());
            personaje_actual.addPDLibres(-1 * coste);
            if (personaje_actual.numArtesMarciales() == 1) {
                vigilaRequisitosArtesMarciales(true);
            }
            break;
        case POTENCIAL_PSIQUICO:
            var potencialPsiquico = personaje_actual.getHabilidadDePersonaje(parametros.habilidad.getNombre());
            potencialPsiquico.CVsGastados += coste;
            if (coste > 0) {
                potencialPsiquico.bono += 10;
            } else {
                potencialPsiquico.bono -= 10;
            }
            personaje_actual.addCVGastados(coste);
            break;
    }
}

/***** PASO 7 : mejoras naturales *****/

/**
 *
 */
function elegirBonosNaturales() {
    $("#dialogBonosNaturales").dialog("open");
}

/**
 *
 * @param {{data:{indice:number,nivel:number}}} event
 */
function elegirHabilidadNatural(event) {
    var indice = event.data.indice;
    var nivel = event.data.nivel;

    muestraDialogoElegirOpcionHabilidad({principal:añadirHabilidadNatural,isDisabled:noPuedeAñadirHabilidadNatural},{indice: indice, nivel: nivel});
}

/**
 *
 * @param {{data:{indice:number,nivel:number}}} event
 */
function elegirBonoNovel(event) {
    var indice = event.data.indice;
    var nivel = event.data.nivel;

    muestraDialogoElegirOpcionHabilidad({principal:añadirBonoNovel,isDisabled:noPuedeAñadirBonoNovel},{indice: indice, nivel:nivel});
}

/**
 *
 * @param {{}} parametros
 */
function añadirHabilidadNatural(parametros) {
    var nombreHabilidad = parametros.opcion;
    var indice = parametros.indice;
    var bono = new Bono(BONO_HABILIDAD,nombreHabilidad,10,"",false,BONO_NATURAL,ORIGEN_HABILIDAD_NATURAL);
    bono.indice = indice;
    bono.nivel = 1;
    personaje_actual.addBonoHabilidadNatural(bono,indice);
    $("#habilidadNaturalElegida"+indice).empty().append(nombreHabilidad);
}

/**
 *
 * @param {{}} parametros
 */
function añadirBonoNovel(parametros) {
    var nombreHabilidad = parametros.opcion;
    var indice = parametros.indice;
    var bono = new Bono(BONO_HABILIDAD,nombreHabilidad,10,"",false,BONO_INNATO,ORIGEN_CATEGORIA,CAT_NOVEL);
    bono.indice = indice;
    bono.nivel = 1;
    personaje_actual.bonoNovel[personaje_actual.getNivel()][indice] = nombreHabilidad;
    personaje_actual.addBonoHabilidadNatural(bono,indice);
    $("#habilidadNaturalElegidaNovel"+indice).empty().append(nombreHabilidad);
}

/**
 *
 * @param {{}} event
 */
function elegirBonificadorNatural(event) {
    var tipoBonificadorNatural = event.data.tipo;

    muestraDialogoElegirOpcionHabilidad({principal:añadirBonificadorNatural,isDisabled:noPuedeAñadirBonificadorNatural},{tipo: tipoBonificadorNatural},tipoBonificadorNatural);
}

/**
 *
 * @param {{tipo:string,opcion:string}} parametros
 */
function noPuedeAñadirBonificadorNatural(parametros) {
    var puede = true;

    if (personaje_actual.getBonoCaracteristica(getHabilidad(parametros.opcion).getCaracteristica()) <= 0) {
        puede = false;
    }

    return !puede;
}

/**
 *
 * @param {{nivel:number,indice:number,opcion:string}} parametros
 */
function noPuedeAñadirBonoNovel(parametros) {
    var puede = true;

    for (var i = 0; i < 5; i++) {
        if (i != parametros.indice) {
            puede = puede && !(personaje_actual.getBonoNovel(i,parametros.nivel) == parametros.opcion);
        }
    }

    return !puede;
}

/**
 *
 * @param {{nivel:number,indice:number,opcion:string}} parametros
 */
function noPuedeAñadirHabilidadNatural(parametros) {
    var puede = true;

    for (var i = 0; i < 5; i++) {
        if (i != parametros.indice) {
            if (personaje_actual.getBonoHabilidadNatural(i,parametros.nivel) != -1) {
                puede = puede && !(personaje_actual.getBonoHabilidadNatural(i,parametros.nivel).getItem() == parametros.opcion);
            }
        }
    }

    return !puede;
}


/**
 *
 * @param {{}} parametros
 */
function añadirBonificadorNatural(parametros) {
    var nombreHabilidad = parametros.opcion;
    var tipoBonificadorNatural = parametros.tipo;

    personaje_actual.addBonificadorNatural(nombreHabilidad,tipoBonificadorNatural,1);
    $("#bonificadorNaturalElegido"+tipoBonificadorNatural).empty().append(nombreHabilidad);
}

/****** otros pasos *******/
/**
 *
 * @param {{}} parametros
 */
function aplicarArma(parametros) {
    var nombreArma = parametros.opcion;

    personaje_actual.addArmaManejada(nombreArma,true);
}

/**
 *
 * @param {TablaArmas} tablaArmas
 * @param {string} tipoCompra
 * @param {number} costeFinal
 */
function compraTablaArmasEspecial(tablaArmas, tipoCompra, costeFinal) {
    var opciones = tablaArmas.getOpciones();
    for (var i = 0; i < opciones.length; i++) {
        var efectoTabla = opciones[i];

        if (efectoTabla == TABLA_ARMA_SIMILAR) {
            var tiposArmasConocidos = personaje_actual.getTiposArmasConocidos(false);
            dialogoElegirArma(tiposArmasConocidos, {principal: compraTablaEspecial, isDisabled: noPuedeComprarManejoArma}, {tablaArmas: tablaArmas, tipoCompra: tipoCompra, costeFinal: costeFinal});
        } else if (efectoTabla == TABLA_ARMA_MIXTA) {
            var tiposArmasMixtos = getTiposMixtos(personaje_actual.getTiposArmasConocidos(true));
            dialogoElegirArma(tiposArmasMixtos, {principal: compraTablaEspecial, isDisabled: noPuedeComprarManejoArma}, {tablaArmas: tablaArmas, tipoCompra: tipoCompra, costeFinal: costeFinal});
        } else if (efectoTabla == TABLA_ARMA_DISTINTA) {
            var tiposArmasDistintos = getTiposDistintos(personaje_actual.getTiposArmasConocidos(true));
            dialogoElegirArma(tiposArmasDistintos, {principal: compraTablaEspecial, isDisabled: noPuedeComprarManejoArma}, {tablaArmas: tablaArmas, tipoCompra: tipoCompra, costeFinal: costeFinal});
        } else if (efectoTabla == TABLA_TIPOLOGIA) {
            var tiposArmas = getAllTipos();
            dialogoElegirTipoArma(tiposArmas, {principal: compraTablaEspecial, isDisabled: noPuedeComprarManejoTipo}, {tablaArmas: tablaArmas, tipoCompra: tipoCompra, costeFinal: costeFinal});
        }
    }
}

/**
 *
 * @param {{}} parametros
 */
function aplicarTablaArmas(parametros) {
    var nombreTabla = parametros.opcion;
    var tablaArmas = getTablaArmas(nombreTabla);
    var tipoCompra = TIPO_HB_COMBATE;
    var costeFinal = tablaArmas.getCoste();

    switch (tablaArmas.getCategoriaTabla()) {
        case CATEGORIA_TABLA_MISTICAS:
            tipoCompra = TIPO_HB_SOBRENATURAL;
            break;
        case CATEGORIA_TABLA_PSIQUICAS:
            tipoCompra = TIPO_HB_PSIQUICA;
            break;
        default :
            tipoCompra = TIPO_HB_COMBATE;
            if (personaje_actual.getCategoria().getNombre() == CAT_MAESTRO_ARMAS) {
                costeFinal /= 2;
            }
            break;
    }


    if (tablaArmas.getTipoTabla() == TABLA_ESPECIAL) {
        compraTablaArmasEspecial(tablaArmas, tipoCompra, costeFinal);
    } else {
        compraSiPuedes(TABLA_ARMAS, {tablaArmas: tablaArmas}, tipoCompra, 1, costeFinal);
    }
}

/**
 *
 * @param {{}} parametros
 */
function compraTablaEspecial(parametros) {
    compraSiPuedes(TABLA_ARMAS, {tablaArmas: parametros.tablaArmas, opcion: parametros.opcion}, parametros.tipoCompra, 1, parametros.costeFinal);
}

/**
 *
 * @param {{}} event
 */
function anularArteMarcial(event) {
    var arteMarcial = event.data.arteMarcial;
    var esPrimera = event.data.esPrimera;

    if (esPrimera) {
        vigilaRequisitosArtesMarciales(false);
    }

    if (personaje_actual.hasFlag(FLAG_SIN_ARMAS_POR_ARTES_MARCIALES)) {
        personaje_actual.removeArmaManejada(ARMA_SIN_ARMAS);
    }

    personaje_actual.addPDLibres(costeArteMarcial(esPrimera));
    personaje_actual.removeArteMarcial(arteMarcial.getNombre());
}

/**
 *
 * @param {{opcion:string}} parametros
 */
function aplicarArteMarcial(parametros) {
    var nombreArteMarcial = parametros.opcion;
    var arteMarcial = getArteMarcial(nombreArteMarcial);
    var esPrimera;
    var coste;

    esPrimera = (personaje_actual.numArtesMarciales() == 0);

    coste = costeArteMarcial(esPrimera);

    compraSiPuedes(ARTE_MARCIAL, {arteMarcial: arteMarcial},TIPO_HB_COMBATE, 1, coste);
}

/**
 *
 * @param {{data:{nombreHabilidad:string,unidades:string}}} event
 */
function aumentaHabilidadClick(event) {
    var nombreHabilidad = event.data.nombreHabilidad;
    var cantidad = event.data.unidades;
    var habilidadDePersonaje = personaje_actual.getHabilidadDePersonaje(nombreHabilidad);
    var coste;
    var costeFinal;
    var tipoCompra = RANGOS_HABILIDAD;

    if (nombreHabilidad == HB_POTENCIAL_PSIQUICO) {
        if (cantidad > 0) {
            coste = siguienteCostePotencial(habilidadDePersonaje.CVsGastados);
            if (coste == -1) {
                alert("No se puede aumentar más");
                return;
            }
        } else {
            coste = previoCostePotencial(habilidadDePersonaje.CVsGastados);
            if (coste == -1) {
                alert("No se puede disminuir más");
                return;
            }
        }
        costeFinal = coste*habilidadDePersonaje.getHabilidad().getPuntosAComprar()*cantidad;
        tipoCompra = POTENCIAL_PSIQUICO;
    } else {
        coste = personaje_actual.getCoste(habilidadDePersonaje.getHabilidad().getNombre(),habilidadDePersonaje.getHabilidad().isPrincipal());
        costeFinal = coste*habilidadDePersonaje.getHabilidad().getPuntosAComprar()*cantidad/habilidadDePersonaje.getHabilidad().getPuntosPorCoste();

        if (costeFinal < 0) {
            if (habilidadDePersonaje.getPDinvertidosActuales() < Math.abs(costeFinal)) {
                alert("No se puede disminuir más");
                return;
            }
        }
    }

    compraSiPuedes(tipoCompra, {habilidad: habilidadDePersonaje.getHabilidad()}, habilidadDePersonaje.getHabilidad().getTipo(), cantidad, costeFinal);
}


function elegirManualApariencia() {
    var arrayOpciones = [];
    for (var i = 1; i <= 10; i++) {
        arrayOpciones.push(new OpcionMostrable(i,""));
    }
    muestraDialogoElegirOpciones(arrayOpciones, {}, {principal: asignarApariencia, isDisabled: alwaysEnabled}, true);
}

function elegirPeso() {
    alert("Con tu tamaño, tu peso debería ser de " + getRangoPesoPorTamaño(personaje_actual.getTamaño()));
    muestraDialogoElegirOpcion(LISTA_INTRODUCCION_USUARIO,{},{principal:asignarPeso,isDisabled:alwaysEnabled});
}

function getRangoPesoPorTamaño(tam) {
    switch (tam) {
        case 2 :
            return "5 a 15 kg";
        case 3 :
            return "10 a 20 kg";
        case 4 :
            return "20 a 30 kg";
        case 5:
            return "20 a 50 kg";
        case 6:
            return "30 a 50 kg";
        case 7:
            return "30 a 60 kg";
        case 8:
            return "35 a 70 kg";
        case 9:
            return "40 a 80 kg";
        case 10:
            return "40 a 90 kg";
        case 11:
            return "50 a 100 kg";
        case 12:
            return "50 a 120 kg";
        case 13:
            return "50 a 140 kg";
        case 14:
            return "50 a 150 kg";
        case 15:
            return "60 a 180 kg";
        case 16:
            return "70 a 220 kg";
        case 17:
            return "80 a 240 kg";
        case 18:
            return "90 a 260 kg";
        case 19:
            return "100 a 280 kg";
        case 20:
            return "110 a 320 kg";
        case 21:
            return "120 a 450 kg";
        default:
            return "más de 400 kg";
    }
}

function getRangoAlturaPorTamaño(tam) {
    switch (tam) {
        case 2 :
            return "0’20 a 0’60 m";
        case 3 :
            return "0’40 a 0’60 m";
        case 4 :
            return "0’60 a 1’00 m";
        case 5:
            return "0’80 a 1’20 m";
        case 6:
            return "1’00 a 1’40 m";
        case 7:
            return "1’10 a 1’50 m";
        case 8:
            return "1’20 a 1’60 m";
        case 9:
            return "1’30 a 1’60 m";
        case 10:
            return "1’40 a 1’70 m";
        case 11:
            return "1’40 a 1’80 m";
        case 12:
            return "1’50 a 1’80 m";
        case 13:
            return "1’50 a 1’80 m";
        case 14:
            return "1’60 a 1’90 m";
        case 15:
            return "1’60 a 2’00 m";
        case 16:
            return "1’70 a 2’10 m";
        case 17:
            return "1’70 a 2’10 m";
        case 18:
            return "1’80 a 2’20 m";
        case 19:
            return "1’90 a 2’30 m";
        case 20:
            return "2’00 a 2’40 m";
        case 21:
            return "2’10 a 2’60 m";
        default:
            return "más de 2'5 m";
    }
}

function elegirAltura() {
    alert("Con tu tamaño, tu altura debería ser de " + getRangoAlturaPorTamaño(personaje_actual.getTamaño()));
    muestraDialogoElegirOpcion(LISTA_INTRODUCCION_USUARIO,{},{principal:asignarAltura,isDisabled:alwaysEnabled});
}

function elegirPX() {
    alert("Introduce la nueva cantidad de PX");
    muestraDialogoElegirOpcion(LISTA_INTRODUCCION_USUARIO,{},{principal:asignarPX,isDisabled:alwaysEnabled});
}

function elegirManualSexo() {
    muestraDialogoElegirOpciones([new OpcionMostrable(SEXO_HOMBRE, ""), new OpcionMostrable(SEXO_MUJER)], {}, {principal: asignarSexo, isDisabled: alwaysEnabled}, true);
}

function elegirManualNombre() {
    muestraDialogoElegirOpcion(LISTA_INTRODUCCION_USUARIO,{},{principal:asignarNombre,isDisabled:alwaysEnabled});
}

function asignarNombre(parametros) {
    personaje_actual.setNombre(parametros.opcion);
}

function asignarSexo(parametros) {
    personaje_actual.setSexo(parametros.opcion);
}

function asignarApariencia(parametros) {
    personaje_actual.setApariencia(parametros.opcion);
    personaje_actual.removeFlag(FLAG_APARIENCIA_ALEATORIA);
}

function asignarPeso(parametros) {
    personaje_actual.setPeso(parametros.opcion);
}

function asignarAltura(parametros) {
    personaje_actual.setAltura(parametros.opcion);
}

function asignarPX(parametros) {

    if (!isNaN(parametros.opcion)) {
        personaje_actual.setPX(parametros.opcion);
    }
}

/**
 *
 * @param {{data:{nombreHabilidad:string}}} event
 */
function eligeEspecialidad(event) {
    var habilidad = getHabilidad(event.data.nombreHabilidad);

    alert("Ejemplos de especialidades " + habilidad.getEspecializacionesPosibles());
    muestraDialogoElegirOpcion(LISTA_INTRODUCCION_USUARIO,{nombreHabilidad:event.data.nombreHabilidad},{principal:asignarEspecialidad,isDisabled:alwaysEnabled});
}

/**
 *
 * @param {{opcion:string,nombreHabilidad:string}} parametros
 */
function asignarEspecialidad(parametros) {
    if (parametros.opcion == undefined) {
        parametros.opcion = "";
    }
    personaje_actual.setEspecializacionHabilidadSecundaria(parametros.nombreHabilidad,parametros.opcion);
}

function finalizarGeneracion() {
    personaje_actual.nivelGeneracionTerminada = personaje_actual.getNivel();
    personaje_actual.GENERACION_INICIADA = ESTADO_GENERACION_PERSONAJE_HECHO;
    mostrarPersonajeActual();
}

function personajeCompleto() {
    var correcto = true;

    //comprobar que se han gastado los PD
/*    if (personaje_actual.getPDLibres() != 0) {
        correcto = false;
    }
*/
    //comprobar que se han gastado los PC
/*    if (personaje_actual.getPCLibres() != 0) {
        correcto = false;
    }
    if (personaje_actual.PC_libres_don != 0) {
        correcto = false;
    }
    if (personaje_actual.PC_libres_psiquicas != 0) {
        correcto = false;
    }
*/
    //comprobar bonos naturales

    return correcto;
}

/**
 *
 * @param {Personaje} personaje
 * @param {Categoria} nuevaCategoria
 */
function comprarCambioCategoria(personaje,nuevaCategoria) {
    var catActual = personaje.getCategoria();

    var coste = costeCambioCategoria(catActual,nuevaCategoria);

    var nivelActual = personaje.getNivel();

    var nivelDeCambio = nivelActual + 2;

    if (personaje.hasFlag(FLAG_VERSATIL)) {
        nivelDeCambio = nivelActual + 1;
        coste /= 2;
    }

    if (personaje.getPDLibres() >= coste) {
        personaje.addPDLibres(-1*coste);
        personaje.cambioCategoria = nivelDeCambio;
        personaje.proximaCategoria = nuevaCategoria;
    } else {
        alert ("PDs insuficientes");
    }
}

function cambiarCategoria() {
    var dialogElegirCategoria = getDiv("");
    dialogElegirCategoria.prop("id",DIV_DIALOG_ELEGIR_CATEGORIA);
    dialogElegirCategoria.empty();

    dialogElegirCategoria.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: true,
        closeOnEscape: true,
        ////show: "puff",
        title: DIAG_ELEGIR_CATEGORIA_TITULO,
        width: ANCHO_DIALOGO,
        height: ALTO_DIALOGO,
        maxHeight: ALTO_DIALOGO
    });



    var gridCategorias = $("<ul></ul>").addClass("four_up tiles");

    for (var i = 0; i < categorias_set.length ; i++) {
        var categoria = categorias_set[i];

        var divCategoria = boton("big primary btn pretty",categoria.getNombre() + "[" + costeCambioCategoria(personaje_actual.getCategoria(),categoria) + " PD]",!puedeElegirCategoria(categoria.getNombre()));
        divCategoria.css("width","100%");

        gridCategorias.append( $("<li></li>").append(divCategoria));

        divCategoria.on("click", {categoria:categoria}, function(event) {
            dialogElegirCategoria.dialog("close");
            comprarCambioCategoria(personaje_actual,event.data.categoria);
        });

        divCategoria.on("mouseenter", {categoria:categoria}, mostrarDetallesCategoria);
    }

    dialogElegirCategoria.append(gridCategorias);

    var divExplicacion = $("<div></div>");
    divExplicacion.addClass(CSS_CLASS_EXPLICACION_CATEGORIA);
    divExplicacion.attr("id",DESTINO_EXPLICACION_CATEGORIA);
    dialogElegirCategoria.append(divExplicacion);
}

function subirNivel() {
    var nivelActual = personaje_actual.getNivel() + personaje_actual.getRaza().getModNivel();

    var nivelObjetivo = getNivelPorPX(personaje_actual.getPX());

    if (nivelObjetivo > nivelActual) {
        personaje_actual.GENERACION_INICIADA = ESTADO_GENERACION_SUBIENDO_NIVEL;
        personaje_actual.subeNivel(nivelObjetivo-nivelActual);
    }
}

/**
 *
 * @param {{data:{caracteristica:string}}} event
 */
function gastaAumentoCaracteristica(event) {
    if (personaje_actual.hasAumentoDeCaracteristicasLibre()) {
        personaje_actual.gastaAumentoDeCaracteristicas(event.data.caracteristica);
        personaje_actual.setCaracteristica(event.data.caracteristica,personaje_actual.getCaracteristica(event.data.caracteristica)+1);
    }
}

/**
 *
 * @param {{data:{caracteristica:string}}} event
 */
function recuperaAumentoCaracteristica(event) {
    if (personaje_actual.recuperaAumentoDeCaracteristicas(event.data.caracteristica)) {
        personaje_actual.setCaracteristica(event.data.caracteristica,personaje_actual.getCaracteristica(event.data.caracteristica)-1);
    }
}

/**
 * Devuelve el nivel que corresponde a una cantidad de px, desde 1 hasta el que sea
 * @param {number} px
 * @returns {number}
 */
function getNivelPorPX(px) {
    var nivel = 0;
    var addLevel  = 0;
    if (px >= 3675) {
        var dif = px - 3675;
        addLevel = 1 + Math.floor(dif/450);
        px = 3674;
    }
    if (px < 100) {
        nivel = 1;
    } else if (px < 225) {
        nivel = 2;
    } else if (px < 375) {
        nivel = 3;
    } else if (px < 550) {
        nivel = 4;
    } else if (px < 750) {
        nivel =5;
    } else if (px < 975) {
        nivel =6;
    } else if (px < 1225) {
        nivel =7;
    } else if (px < 1500) {
        nivel =8;
    } else if (px < 1800) {
        nivel =9;
    } else if (px < 2125) {
        nivel =10;
    } else if (px < 2475) {
        nivel =11;
    } else if (px < 2850) {
        nivel =12;
    } else if (px < 3250) {
        nivel =13;
    } else if (px < 3675) {
        nivel =14;
    }

    nivel += addLevel;

    return nivel;
}

var ERR_NIVEL_ERRONEO = "Error: nivel erróneo";

function getPDsPorNivel(nivel) {
    var pds = 0;
    if (nivel < 0) {
        throw ERR_NIVEL_ERRONEO;
    }
    if (nivel == 0) {
        pds = 400;
    } else {
        pds = 600 + 100 * (nivel - 1);
    }
    return pds;
}

function getAumentosCaracteristicasPorNivel(nivel) {
    var aumentos = 0;
    if (nivel < 2) {
        aumentos = 0;
    } else {
        aumentos = Math.floor(nivel/2);
    }

    return aumentos;
}

/*
 json_parse.js
 2012-06-20

 Public Domain.

 NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

 This file creates a json_parse function.

 json_parse(text, reviver)
 This method parses a JSON text to produce an object or array.
 It can throw a SyntaxError exception.

 The optional reviver parameter is a function that can filter and
 transform the results. It receives each of the keys and values,
 and its return value is used instead of the original value.
 If it returns what it received, then the structure is not modified.
 If it returns undefined then the member is deleted.

 Example:

 // Parse the text. Values that look like ISO date strings will
 // be converted to Date objects.

 myData = json_parse(text, function (key, value) {
 var a;
 if (typeof value === 'string') {
 a =
 /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
 if (a) {
 return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
 +a[5], +a[6]));
 }
 }
 return value;
 });

 This is a reference implementation. You are free to copy, modify, or
 redistribute.

 This code should be minified before deployment.
 See http://javascript.crockford.com/jsmin.html

 USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
 NOT CONTROL.
 */

/*members "", "\"", "\/", "\\", at, b, call, charAt, f, fromCharCode,
 hasOwnProperty, message, n, name, prototype, push, r, t, text
 */

var json_parse = (function () {
    "use strict";

    var at,     // The index of the current character
        ch,     // The current character
        escapee = {
            '"':  '"',
            '\\': '\\',
            '/':  '/',
            b:    '\b',
            f:    '\f',
            n:    '\n',
            r:    '\r',
            t:    '\t'
        },
        text,

        error = function (m) {
            throw {
                name:    'SyntaxError',
                message: m,
                at:      at,
                text:    text
            };
        },

        next = function (c) {
            if (c && c !== ch) {
                error("Expected '" + c + "' instead of '" + ch + "'");
            }
            ch = text.charAt(at);
            at += 1;
            return ch;
        },

        number = function () {
            var number,
                string = '';

            if (ch === '-') {
                string = '-';
                next('-');
            }
            while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
            }
            if (ch === '.') {
                string += '.';
                while (next() && ch >= '0' && ch <= '9') {
                    string += ch;
                }
            }
            if (ch === 'e' || ch === 'E') {
                string += ch;
                next();
                if (ch === '-' || ch === '+') {
                    string += ch;
                    next();
                }
                while (ch >= '0' && ch <= '9') {
                    string += ch;
                    next();
                }
            }
            number = +string;
            if (!isFinite(number)) {
                error("Bad number");
            } else {
                return number;
            }
        },

        string = function () {

            var hex,
                i,
                string = '',
                uffff;

            if (ch === '"') {
                while (next()) {
                    if (ch === '"') {
                        next();
                        return string;
                    }
                    if (ch === '\\') {
                        next();
                        if (ch === 'u') {
                            uffff = 0;
                            for (i = 0; i < 4; i += 1) {
                                hex = parseInt(next(), 16);
                                if (!isFinite(hex)) {
                                    break;
                                }
                                uffff = uffff * 16 + hex;
                            }
                            string += String.fromCharCode(uffff);
                        } else if (typeof escapee[ch] === 'string') {
                            string += escapee[ch];
                        } else {
                            break;
                        }
                    } else {
                        string += ch;
                    }
                }
            }
            error("Bad string");
        },

        white = function () {
            while (ch && ch <= ' ') {
                next();
            }
        },

        word = function () {
            switch (ch) {
                case 't':
                    next('t');
                    next('r');
                    next('u');
                    next('e');
                    return true;
                case 'f':
                    next('f');
                    next('a');
                    next('l');
                    next('s');
                    next('e');
                    return false;
                case 'n':
                    next('n');
                    next('u');
                    next('l');
                    next('l');
                    return null;
            }
            error("Unexpected '" + ch + "'");
        },

        value,  // Place holder for the value function.

        array = function () {
            var array = [];

            if (ch === '[') {
                next('[');
                white();
                if (ch === ']') {
                    next(']');
                    return array;   // empty array
                }
                while (ch) {
                    array.push(value());
                    white();
                    if (ch === ']') {
                        next(']');
                        return array;
                    }
                    next(',');
                    white();
                }
            }
            error("Bad array");
        },

        object = function () {

            var key,
                object = {};

            if (ch === '{') {
                next('{');
                white();
                if (ch === '}') {
                    next('}');
                    return object;   // empty object
                }
                while (ch) {
                    key = string();
                    white();
                    next(':');
                    if (Object.hasOwnProperty.call(object, key)) {
                        error('Duplicate key "' + key + '"');
                    }
                    object[key] = value();
                    white();
                    if (ch === '}') {
                        next('}');
                        return object;
                    }
                    next(',');
                    white();
                }
            }
            error("Bad object");
        };

    value = function () {
        white();
        switch (ch) {
            case '{':
                return object();
            case '[':
                return array();
            case '"':
                return string();
            case '-':
                return number();
            default:
                return ch >= '0' && ch <= '9' ? number() : word();
        }
    };

// Return the json_parse function. It will have access to all of the above
// functions and variables.

    return function (source, reviver) {
        var result;

        text = source;
        at = 0;
        ch = ' ';
        result = value();
        white();
        if (ch) {
            error("Syntax error");
        }

// If there is a reviver function, we recursively walk the new structure,
// passing each name/value pair to the reviver function for possible
// transformation, starting with a temporary root object that holds the result
// in an empty key. If there is not a reviver function, we simply return the
// result.

/*        return typeof reviver === 'function'
            ? (function walk(holder, key) {
            var k, v, value = holder[key];
            if (value && typeof value === 'object') {
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = walk(value, k);
                        if (v !== undefined) {
                            value[k] = v;
                        } else {
                            delete value[k];
                        }
                    }
                }
            }
            return reviver.call(holder, key, value);
        }({'': result}, ''))
            : result;
    };*/
        return typeof reviver === 'function'
            ? (function walk(holder) {
            var v, k;
            for (k in holder) {
                if (Object.prototype.hasOwnProperty.call(holder, k)) {
                    v = holder[k];
                    reviver.call(holder, k, v);
                }
            }
        }(result))
            : result;
    };
}());

function parseObject(holder, reviver) {
    var v, k;
    for (k in holder) {
        if (Object.prototype.hasOwnProperty.call(holder, k)) {
            v = holder[k];
            reviver.call(holder, k, v);
        }
    }
}
function muestraDialogoGuardarPersonaje() {
    var dialogo  = $("#dialogFileSystem");
    dialogo.empty();

    var personajeSerializado = JSON.stringify(personaje_actual);

    /**Metodo 0: servidor */
    var enlaceServidorDiv = $("<div></div>");
    var tituloServidor = getDiv(CSS_SUBTITULO_SECCION).append("Método base: Servidor de personajes");
    var textoServidor = getDiv(CSS_TEXTO_SMALL);
    var explicacionServidor = getDiv().append("Si tienes conexión de internet, puedes guardar tu personaje en el servidor de personajes de Anima: Único.");
    var formServidor = $("<form name='salvaPersonaje' action='http://www.helechaloscuro.net/cake/personajes/salva' method='post' target='_blank'>" +
        "<input type='text' name='nombre' hidden value='"+personaje_actual.getNombre()+"'/> " +
        "<input type='text' name='categoria' hidden value='"+personaje_actual.getStringCategoria() +"'/> " +
        "<input type='text' name='nivel' hidden value='"+personaje_actual.getNivel()+"'/> " +
        "<input type='text' name='raza' hidden value='"+personaje_actual.getRaza().toString() +"'/> " +
        "<input type='text' name='json' hidden value='"+personajeSerializado+"'/> " +
        "<input type='submit' value='Guardar'/>" +
        "</form>" );

    dialogo.append(enlaceServidorDiv.append(tituloServidor).append(textoServidor.append(explicacionServidor).append(formServidor)));

    /**Metodo 1: por enlace de descarga */
    var enlaceDescargaDiv = $("<div></div>");
    var tituloEnlace = getDiv(CSS_SUBTITULO_SECCION).append("Método 1: Enlace de descarga");
    var textoEnlace = getDiv(CSS_TEXTO_SMALL);
    var explicacionEnlace = getDiv().append("En algunos navegadores puedes descargarlo directamente como fichero con el siguiente enlace:");
    var enlace = $("<a href='#' onclick='descarga();'>Descarga en fichero de texto</a>");
    dialogo.append(enlaceDescargaDiv.append(tituloEnlace).append(textoEnlace.append(explicacionEnlace).append(enlace)));

    /**Mettodo 2: por copia y pega*/
    var copiaPegaDiv = $("<div></div>");
    var tituloCopiaPega = getDiv(CSS_SUBTITULO_SECCION).append("Método 2: Copia y pega");
    var textoCopiaPega = getDiv(CSS_TEXTO_SMALL);
    var explicacionCopiaPega = getDiv().append("Si lo anterior no te funciona, puedes copiar el siguiente texto (¡entero! No te dejes nada) a algún fichero de texto y guardarlo manualmente.  No es necesario que" +
        "le pongas .animaUnico como extensión para que la aplicación pueda cargarlo más tarde. Si lo prefieres, pulsa el botón para facilitar el copiado.");
    var copiaPega = $("<textarea></textarea>").append(personajeSerializado);
    var botonCopiaPega = muestraBotonPequeño("Copia",{texto:personajeSerializado},copiaAlPortapapeles);
    dialogo.append(copiaPegaDiv.append(tituloCopiaPega).append(textoCopiaPega.append(explicacionCopiaPega).append(copiaPega).append(botonCopiaPega)));

    /**Mettodo 3: web storage*/
    var webStorageDiv = $("<div></div>");
    var tituloWebStorage = getDiv(CSS_SUBTITULO_SECCION).append("Método 3: Almacenamiento Web");
    var textoWebStorage = getDiv(CSS_TEXTO_SMALL);
    var explicacionWebStorage = "";
    if (typeof(Storage)!=="undefined") {
        explicacionWebStorage = getDiv().append("Con este método el personaje se almacenará internamente en tu ordenador, en el navegador web y luego podrás cargarlo desde allí.");
    } else {
        explicacionWebStorage = getDiv().append("Tu navegador no permite usar este método. Lo siento.");
    }

    var botonWebStorage = muestraBotonPequeño("Guarda en el navegador",{texto:personajeSerializado},guardaEnWebStorage);
    dialogo.append(webStorageDiv.append(tituloWebStorage).append(textoWebStorage.append(explicacionWebStorage).append(botonWebStorage)));

    dialogo.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: false,
        closeOnEscape: true,
        ////show: "puff",
        title: "Guardar personaje",
        width: 500,
        height: 500
    });
}

function copiaAlPortapapeles(event) {
    window.prompt("Ahora copia al portapapeles pulsando Control+C (o Cmd+C) y luego pégalo donde quieras con Control+v (o Cmd+v)", event.data.texto);
}

function descarga() {
    download(personaje_actual.getNombre()+".animaUnico",JSON.stringify(personaje_actual));
}

function download(filename, text) {
    var pom = document.createElement('a');
    pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    pom.setAttribute('download', filename);
    pom.click();
}

function muestraDialogoCargarPersonaje() {
//    personaje_actual = parseObject(prompt("Introduzca personaje..."));

    var dialogo  = $("#dialogFileSystem");
    dialogo.empty();

    /**Metodo 0: servidor */
    var enlaceServidorDiv = $("<div></div>");
    var tituloServidor = getDiv(CSS_SUBTITULO_SECCION).append("Método base: Servidor de personajes");
    var textoServidor = getDiv(CSS_TEXTO_SMALL);
    var explicacionServidor = getDiv().append("Si tienes conexión de internet, puedes cargar un personaje del servidor de personajes de Anima: Único.");
    var enlaceCargaServidor = $("<a href='http://helechaloscuro.net/cake/personajes/index' target='_blank'>Accede al servidor de personajes</a>");
    dialogo.append(enlaceServidorDiv.append(tituloServidor).append(textoServidor.append(explicacionServidor).append(enlaceCargaServidor)));

    /**Metodo 1: carga de fichero */
    var enlaceDescargaDiv = $("<div></div>");
    var tituloEnlace = getDiv(CSS_SUBTITULO_SECCION).append("Método 1: Carga el fichero");
    var textoEnlace = getDiv(CSS_TEXTO_SMALL);
    var explicacionEnlace = getDiv().append("En algunos navegadores puedes cargar directamente el fichero de texto .animaUnico:");
    var inputDiv = $("<input>");
    inputDiv.attr("type","file");
    inputDiv.attr("id","loadCharacterFile");
    inputDiv.attr("name","file");
    inputDiv.attr("accept",".animaUnico");

    dialogo.append(enlaceDescargaDiv.append(tituloEnlace).append(textoEnlace.append(explicacionEnlace).append(inputDiv)));
    document.getElementById('loadCharacterFile').addEventListener('change', function (evt) {
        dialogo.dialog("close" );
        handleCharacterFileLoad(evt);
    }, false);

    /**Mettodo 2: por copia y pega*/
    var copiaPegaDiv = $("<div></div>");
    var tituloCopiaPega = getDiv(CSS_SUBTITULO_SECCION).append("Método 2: Copia y pega");
    var textoCopiaPega = getDiv(CSS_TEXTO_SMALL);
    var explicacionCopiaPega = getDiv().append("Si lo anterior no te funciona, puedes copiar el texto que te descargaste y pegarlo en el siguiente cuadro de texto. Luego dale al botón cargar.");
    var copiaPega = $("<textarea></textarea>").attr("id","zonaCargaPersonaje");
    var botonCopiaPega = muestraBotonPequeño("Carga",{},cargaCopiaPega);
    dialogo.append(copiaPegaDiv.append(tituloCopiaPega).append(textoCopiaPega.append(explicacionCopiaPega).append(copiaPega).append(botonCopiaPega)));

    /**Mettodo 3: web storage*/
    var webStorageDiv = $("<div></div>");
    var tituloWebStorage = getDiv(CSS_SUBTITULO_SECCION).append("Método 3: Almacenamiento Web");
    var textoWebStorage = getDiv(CSS_TEXTO_SMALL);
    var explicacionWebStorage = "";
    var listaPersonajes = getDiv("");
    if (typeof(Storage)!=="undefined") {
        explicacionWebStorage = getDiv().append("Con este método el personaje se carga internamente de tu ordenador, en el navegador web. En estos momentos sólo se carga el último guardado");
        if (localStorage.getItem("numPersonajes")) {
            listaPersonajes.append(cargaDeWebStorage());
        }
    } else {
        explicacionWebStorage = getDiv().append("Tu navegador no permite usar este método. Lo siento.");
    }



    dialogo.append(webStorageDiv.append(tituloWebStorage).append(textoWebStorage.append(explicacionWebStorage).append(listaPersonajes)));


    dialogo.dialog({
        modal: true,
        autoOpen: true,
        draggable: true,
        resizable: false,
        closeOnEscape: true,
        ////show: "puff",
        title: "Cargar personaje",
        width: 500,
        height: 500
    });

}

//region Almacenamiento web
function guardaEnWebStorage(event) {
    var numPersonajes = 0;
    if (localStorage.getItem("numPersonajes")) {
        numPersonajes = Number(localStorage.getItem("numPersonajes")) + 1;
    } else {
        numPersonajes = 1;
    }

    var prefijo = "per"+numPersonajes;

    localStorage.setItem("numPersonajes", numPersonajes);
    localStorage.setItem(prefijo, event.data.texto);
    localStorage.setItem(prefijo+"_Nombre", personaje_actual.getNombre());
    localStorage.setItem(prefijo+"_Categoria", personaje_actual.getStringCategoria());
    localStorage.setItem(prefijo+"_Raza", personaje_actual.getRaza());
    localStorage.setItem(prefijo+"_Nivel", personaje_actual.getNivel());
}

function cargaDeWebStorage(event) {
    var numPersonajes = Number(localStorage.getItem("numPersonajes"));
    var div = getDiv(CSS_TEXTO_SMALL);
    for (var i = 1; i <= numPersonajes; i++) {
        var personaje = localStorage.getItem("per"+i);
        var nombre = localStorage.getItem("per"+i+"_Nombre");
        var categoria = localStorage.getItem("per"+i+"_Categoria");
        var raza = localStorage.getItem("per"+i+"_Raza");
        var nivel = localStorage.getItem("per"+i+"_Nivel");
        var divNombre = getDiv(CSS_MUESTRA_INLINE).append(nombre + " [" + categoria + " " + raza + "]");
        var botonCarga = muestraBotonPequeño("Carga",{personaje:personaje},lanzaCargado);
        div.append(divNombre).append(botonCarga);
    }
    return div;
}
//endregion Almacenamiento web

function lanzaCargado(event) {
    cargarPersonaje(event.data.personaje);
}

function cargaCopiaPega() {
    var texto = $("#zonaCargaPersonaje")[0].value;
    cargarPersonaje(texto);
}
function sv(item) {
    return JSON.stringify(item);
}

function handleCharacterFileLoad(evt) {

    /** @type FileReader */
    var reader;

    for (var i = 0; i < evt.target.files.length; i++) {
        /**  @type FileList */
        var f = evt.target.files[i]; // FileList object
        reader = new FileReader();

        reader.onload = (function(theFile) {
            return function(e) {
                cargarPersonaje(e.target.result);
            };
        })(f);

        reader.readAsText(f);
    }
}

/**
 *
 * @param {string[]} v
 * @returns {Elan[]}
 */
function parseArrayElan(v) {
    var elan = [];

    for (var i = 0; i < v.length;i++) {
        var nuevoElan = new Elan("",0);
        parseElan(nuevoElan,v[i]);
        elan.push(nuevoElan);
    }

    return elan;
}

function parseElan(elan,texto) {
    parseObject(texto, function(k,v) {
        switch (k) {
            case 'dones':
                elan[k] = parseArrayDonElan(v);
                break;
            default:
                elan[k] = v;
        }
    });
}

/**
 *
 * @param {string[]} a
 */
function parseArrayDonElan(a) {
    var dones = [];
    for (var i = 0; i < a.length; i++) {
        var don = new DonElan("","",0,0,[],[]);
        parseStandard(don, a[i]);
    }
    return dones;
}

function parseStandard(elemento,texto) {
    parseObject(texto, function(k,v) {
        elemento[k] = v;
    });
}

/**
 *
 * @param {string} v
 * @returns {NivelEnVia[]}
 */
function parseArrayNivelEnVia(v) {
    var viasMagia = [];

    for (var i = 0; i < v.length;i++) {
        var nivelEnVia = new NivelEnVia(getVia(VIA_AGUA),0);
        parseNivelEnVia(nivelEnVia,v[i]);
        viasMagia.push(nivelEnVia);
    }

    return viasMagia;
}

function parseNivelEnVia(nivelEnVia,texto) {
    parseObject(texto,function(k,v) {
        switch (k) {
            case 'via':
                nivelEnVia[k] = parseViaMagia(v);
                break;
            case 'conjurosLibres':
                nivelEnVia[k] = parseArrayConjuros(v);
                break;
            default:
                nivelEnVia[k] = v;
        }
    });
}

function parseViaMagia(texto) {
    return getVia(texto);
}

/**
 *
 * @param {string} v
 */
function parseArrayCategorias(v) {
    var categorias = [];

    for (var i = 0; i < v.length;i++) {
        var categoria = getCategoria(v[i]);
        categorias.push(categoria);
    }

    return categorias;
}

/**
 *
 * @param {string} v
 * @returns {Conjuro[]}
 */
function parseArrayConjuros(v) {
    var conjuros = [];

    for (var i = 0; i < v.length;i++) {
        var conjuro = new Conjuro("",1,"",[],"",new NivelesConjuro(0,0,0,0,false),new NivelesConjuro(0,0,0,0,false),new NivelesConjuro(0,0,0,0,false),new NivelesConjuro(0,0,0,0,false));
        parseConjuro(conjuro,v[i]);
        conjuros.push(conjuro);
    }

    return conjuros;
}

function parseConjuro(conjuro, texto) {
    parseObject(texto,function(k,v) {
        //noinspection FallThroughInSwitchStatementJS
        switch (k) {
            case 'mantenimiento':
                if (v == false) {
                    conjuro[k] = v;
                    break;
                }
            case 'costesZeon':
            case 'intReq':
            case 'objetivo':
                conjuro[k] = new NivelesConjuro(0,0,0,0,false);
                parseStandard(conjuro[k],v);
                break;
            default:
                conjuro[k] = v;
        }
    });
}

/**
 *
 * @param {string} v
 * @returns {Bono[]}
 */
function parseArrayBonos(v) {
    var bonos = [];

    for (var i = 0; i < v.length;i++) {
        var bono = new Bono("","",0,"",false,"","");
        parseStandard(bono,v[i]);
        bonos.push(bono);
    }

    return bonos;
}

/**
 *
 * @param {string} v
 * @returns {Coste[]}
 */
function parseArrayCostesReducidos(v) {
    var costesReducidos = [];

    for (var i = 0; i < v.length;i++) {
        var coste = new Coste("",0,false,"");
        parseStandard(coste,v[i]);
        costesReducidos.push(coste);
    }

    return costesReducidos;
}
/**
 *
 * @param {string} v
 * @returns {BonificadorNatural[]}
 */
function parseArrayBonificadoresNaturales(v) {
    var bonificadoresNaturales = [];

    for (var i = 0; i < v.length;i++) {
        var bono = new BonificadorNatural();
        parseStandard(bono,v[i]);
        bonificadoresNaturales.push(bono);
    }

    return bonificadoresNaturales;
}


/**
 *
 * @param {string} v
 * @returns {ElementoPCComprado[]}
 */
function parseArrayElementoPCComprado(v) {
    var ventajas = [];
    var elementoPC = new Ventaja("","","","",[],[],false,[],null,"");
    for (var i = 0; i < v.length;i++) {
        //noinspection JSValidateTypes
        var ventaja = new ElementoPCComprado(elementoPC,0,"","");
        parseElementoPCComprado(ventaja,v[i]);
        ventajas.push(ventaja);
    }

    return ventajas;
}

function parseElementoPCComprado(elemento, texto) {
    parseObject(texto,function(k,v) {
        //noinspection FallThroughInSwitchStatementJS
        switch (k) {
            case 'ventaja':
                elemento[k] = parseVentaja(v);
                break;
            case 'repartoCostes':
                elemento[k] = new RepartoCostes();
                parseStandard(elemento[k],v);
                break;
            default:
                elemento[k] = v;
        }
    });
}

function parseVentaja(texto) {
    return getVentaja(texto);
}


/**
 *
 * @param {string} v
 * @returns {ElementoProhibido[]}
 */
function parseArrayElementoProhibido(v) {
    var prohibidos = [];

    for (var i = 0; i < v.length;i++) {
        var proh = new ElementoProhibido("","");
        parseStandard(proh,v[i]);
        prohibidos.push(proh);
    }

    return prohibidos;
}

/**
 *
 * @param {string} v
 * @returns {HabilidadDePersonaje[]}
 */
function parseArrayHabilidadDePersonaje(v) {
    var allHabilidades = [];

    for (var i = 0; i < v.length;i++) {
        var habi = new HabilidadDePersonaje(getHabilidad(HB_ADVERTIR));
        parseHabilidadDePersonaje(habi,v[i]);
        allHabilidades.push(habi);
        personaje_actual[habi.getNombre()] = habi;
    }

    return allHabilidades;
}

function parseHabilidadDePersonaje(elemento,texto) {
    parseObject(texto,function(k,v) {
        switch (k) {
            case 'habilidad':
                elemento[k] = parseHabilidad(v);
                break;
            default:
                elemento[k] = v;
        }
    });
}

function parseHabilidad(texto) {
    return getHabilidad(texto);
}

/**
 *
 * @param {string} v
 * @returns {Arma[]}
 */
function parseArrayArma(v) {
    var armas = [];

    for (var i = 0; i < v.length;i++) {
        armas.push(parseArma(v[i]));
    }

    return armas;
}

function parseArma(texto) {
    return getArma(texto);
}

/**
 *
 * @param {string} v
 * @returns {TablaArmasComprada[]}
 */
function parseArrayTablasArmasComprada(v) {
    var tablas = [];
    var tablaTemp = new TablaArmas("","","",0,"",[],"");

    for (var i = 0; i < v.length;i++) {
        var tabla = new TablaArmasComprada(tablaTemp,"");
        parseTablaArmasComprada(tabla,v[i]);
        tablas.push(tabla);
    }

    return tablas;
}

function parseTablaArmasComprada(elemento, texto) {
    parseObject(texto,function(k,v) {
        switch (k) {
            case 'tablaArmas':
                elemento[k] = getTablaArmas(v);
                break;
            default:
                elemento[k] = v;
        }
    });
}

/**
 *
 * @param {string} v
 * @returns {ArteMarcialComprada[]}
 */
function parseArrayArtesMarcialesCompradas(v) {
    var artesMarcialesCompradas = [];

    for (var i = 0; i < v.length;i++) {
        artesMarcialesCompradas.push(parseArteMarcialComprada(v[i]));
    }

    return artesMarcialesCompradas;
}

function parseArteMarcialComprada(texto) {
    var nombreArteMarcial;
    var anulable;

    parseObject(texto,function(k,v) {
        switch (k) {
            case 'arteMarcial':
                nombreArteMarcial = v;
                break;
            case 'anulable':
                anulable = v;
                break;
        }
    });

    var arteMarcialComprado = new ArteMarcialComprada(getArteMarcial(nombreArteMarcial));
    arteMarcialComprado.anulable = anulable;

    return arteMarcialComprado;
}

/**
 *
 * @param {string} v
 * @returns {HabilidadKiComprada[]}
 */
function parseArrayHabilidadKiComprada(v) {
    var habis = [];

    for (var i = 0; i < v.length;i++) {
        var habKi = new HabilidadKiComprada(getHabilidadKi(HAB_KI_DESTRUCCION_KI),false,false);
        parseHabilidadKiComprada(habKi,v[i]);
        habis.push(habKi);
    }

    return habis;
}

function parseHabilidadKiComprada(elemento,texto) {
    parseObject(texto,function(k,v) {
        switch (k) {
            case 'habilidadKi':
                elemento[k] = parseHabilidadKi(v);
                break;
            default:
                elemento[k] = v;
        }
    });
}

function parseHabilidadKi(texto) {
    return getHabilidadKi(texto);
}

/**
 *
 * @param {string} v
 * @returns {TecnicaKi[]}
 */
function parseArrayTecnicaKi(v) {
    var tecs = [];

    for (var i = 0; i < v.length;i++) {
        var tecnica = new TecnicaKi(1);
        parseTecnicaKi(tecnica,v[i]);
        tecs.push(tecnica);
    }

    return tecs;
}

function parseTecnicaKi(elemento,texto) {
    parseObject(texto,function(k,v) {
        switch (k) {
            case 'efectoPrimario':
                if (v == false) {
                    elemento[k] = false;
                } else {
                    elemento[k] = new EfectoTecnicaElegido();
                    parseEfectoTecnicaElegido(elemento[k], v);
                    elemento.allEfectos[k] = elemento[k];
                }
                break;
            case 'efectosSecundarios':
                elemento[k] = parseArrayEfectoTecnicaElegido(v, elemento);
                break;
            case 'desventajas':
                elemento[k] = parseArrayDesventajaTecnicaElegida(v);
                break;
            case 'ataduraElemental':
                elemento[k] = new ElementosAfines([]);
                parseStandard(elemento[k],v);
                break;
            case 'costeKi':
            case 'costeMantenimiento':
                if (v == false) {
                    elemento[k] = false;
                } else {
                    elemento[k] = new CosteKi(0,0,0,0,0,0,AGI);
                    parseStandard(elemento[k],v);
                }
                break;
            default:
                elemento[k] = v;
        }
    });
}

function parseArrayEfectoTecnicaElegido(v, tecnica) {
    var array = [];

    for (var i = 0; i < v.length;i++) {
        var elemento = new EfectoTecnicaElegido();
        parseEfectoTecnicaElegido(elemento, v[i]);
        tecnica.allEfectos[elemento.getNombre()] = elemento;
        array.push(elemento);
    }

    return array;
}

function parseEfectoTecnicaElegido(elemento, texto) {
    parseObject(texto,function(k,v) {
        switch (k) {
            case 'efectoTecnica':
                elemento[k] = parseEfectoTecnica(v);
                break;
            case 'nivelElegido':
                elemento[k] = parseNivelEfectoTecnica(v);
                break;
            case 'ventajasOpcionalesElegidas':
                elemento[k] = parseArrayVentajaTecnicaElegida(v);
                break;
            case 'caracSec':
                elemento[k] = parseArrayCaracSecunTecnica(v);
                break;
            case 'costeKi':
            case 'costeMantenimiento':
                elemento[k] = new CosteKi(0,0,0,0,0,0,AGI);
                parseStandard(elemento[k],v);
                break;
            default:
                elemento[k] = v;
        }
    });
}

function parseEfectoTecnica(texto) {
    return getEfectoTecnicaKi(texto);
}

function parseNivelEfectoTecnica(texto) {
    var valores = texto.split("--");
    var nombreNivelEfectoTecnica = valores[0];
    var nombreEfectoTecnica = valores[1];
    var efecto = getEfectoTecnicaKi(nombreEfectoTecnica);
    return efecto.getNivelEfectoPorNombre(nombreNivelEfectoTecnica);
}

function parseArrayVentajaTecnicaElegida(v) {
    var array = [];

    for (var i = 0; i < v.length;i++) {
        var elemento = new VentajaTecnicaElegida();
        parseVentajaTecnicaElegida(elemento, v[i]);
        array.push(elemento);
    }

    return array;
}

function parseVentajaTecnicaElegida(elemento, texto) {
    parseObject(texto,function(k,v) {
        switch (k) {
            case 'ventajaTecnica':
                elemento[k] = parseVentajaTecnica(v);
                break;
            case 'nivelElegido':
                elemento[k] = parseNivelVentajaTecnica(v);
                break;
            default:
                elemento[k] = v;
        }
    });
}

function parseVentajaTecnica(texto) {
    var valores = texto.split("--");
    var nombreVentajaTecnica = valores[0];
    var nombreEfectoTecnica = valores[1];
    var efecto = getEfectoTecnicaKi(nombreEfectoTecnica);
    return efecto.getVentajaOpcionalPorNombre(nombreVentajaTecnica);
}

function parseNivelVentajaTecnica(texto) {
    var valores = texto.split("--");
    var nombreNivelVentajaTecnica = valores[0];
    var nombreVentajaTecnica = valores[1];
    var nombreEfectoTecnica = valores[2];
    var efecto = getEfectoTecnicaKi(nombreEfectoTecnica);
    var ventaja = efecto.getVentajaOpcionalPorNombre(nombreVentajaTecnica);
    return ventaja.getNivelPorNombre(nombreNivelVentajaTecnica);
}

function parseArrayDesventajaTecnicaElegida(v) {
    var array = [];

    for (var i = 0; i < v.length;i++) {
        var elemento = new DesventajaTecnicaElegida(new DesventajaTecnica("","",[],[],0,0));
        parseDesventajaTecnicaElegida(elemento, v[i]);
        array.push(elemento);
    }

    return array;
}

function parseDesventajaTecnicaElegida(elemento,texto) {
    parseObject(texto,function(k,v) {
        switch (k) {
            case 'desventajaTecnica':
                elemento[k] = parseDesventajaTecnica(v);
                break;
            case 'ataduraElemental':
                elemento[k] = new ElementosAfines([]);
                parseStandard(elemento[k],v);
                break;
            default:
                elemento[k] = v;
        }
    });
}

function parseDesventajaTecnica(texto) {
    return getDesventajaTecnicaKi(texto);
}

function parseArrayCaracSecunTecnica(v) {
    var array = [];

    for (var i = 0; i < v.length;i++) {
        var elemento = new CaracSecunTecnica("",0);
        parseStandard(elemento,v[i]);
        array.push(elemento);
    }

    return array;
}

/**
 *
 * @param {string} v
 * @returns {DisciplinaPsiquica[]}
 */
function parseArrayDisciplinaPsiquica(v) {
    var array = [];

    for (var i = 0; i < v.length;i++) {
        var elemento = new DisciplinaPsiquica("","");
        parseDisciplinaPsiquica(elemento,v[i]);
        array.push(elemento);
    }

    return array;
}

function parseDisciplinaPsiquica(elemento, texto) {
    parseObject(texto,function(k,v) {
        switch (k) {
            case 'poderesPsiquicos':
                elemento[k] = parseArrayPoderPsiquico(v);
                break;
            default:
                elemento[k] = v;
        }
    });
}

function parseArrayPoderPsiquico(v) {
    var array = [];

    for (var i = 0; i < v.length;i++) {
        array.push(parsePoderPsiquico(v[i]));
    }

    return array;
}

function parsePoderPsiquico(texto) {
    var valores = texto.split("--");
    var nombrePoderPsiquico = valores[0];
    var nombreDisciplinaPsiquica = valores[1];
    var disciplina = getDisciplina(nombreDisciplinaPsiquica);
    return getPoder(disciplina,nombrePoderPsiquico);
}

/**
 *
 * @param {string} v
 * @returns {PoderPsiquicoDominado[]}
 */
function parseArrayPoderPsiquicoDominado(v) {
    var array = [];

    for (var i = 0; i < v.length;i++) {
        var elemento = new PoderPsiquicoDominado();
        parsePoderPsiquicoDominado(elemento,v[i]);
        array.push(elemento);
    }

    return array;
}

function parsePoderPsiquicoDominado(elemento, texto) {
    parseObject(texto,function(k,v) {
        switch (k) {
            case 'poder':
                elemento[k] = parsePoderPsiquico(v);
                break;
            case 'disciplina':
                elemento[k] = new DisciplinaPsiquica("","");
                parseDisciplinaPsiquica(elemento[k],v);
                break;
            default:
                elemento[k] = v;
        }
    });
}

/**
 *
 * @param {string} v
 * @returns {Dinero}
 */
function parseDinero(v) {
    var dinero = new Dinero(0,0,0);

    parseStandard(dinero,v);

    return dinero;
}

function parseNumTecnicas(v) {
    var numTecnicas = {nivel1:0,nivel2:0,nivel3:0};
    parseStandard(numTecnicas,v);
    return numTecnicas;
}

/**
 *
 * @param {string} v
 * @returns {TipoArmadura}
 */
function parseTipoArmadura(v) {
    var tipoArmadura = new TipoArmadura("",[0,0,0,0,0,0],false);
    parseStandard(tipoArmadura,v);
    return tipoArmadura;
}

function cargarPersonaje(cadena) {
    personaje_actual = new Personaje();

    var allHabilidades;

    json_parse(cadena, function(k, v) {
        switch (k) {
            case 'raza' :
                personaje_actual.raza = getRaza(v);
                break;
            case 'categoria':
            case 'proximaCategoria':
                personaje_actual[k] = getCategoria(v);
                break;
            case 'categoriasPorNiveles':
                personaje_actual.categoriasPorNiveles = parseArrayCategorias(v);
                break;
            case 'armaduraNatural':
            case 'capaArmaduraDura':
            case 'capaArmaduraBlanda1':
            case 'capaArmaduraBlanda2':
                personaje_actual[k] = parseTipoArmadura(v);
                break;
            case 'elan':
                personaje_actual[k] = parseArrayElan(v);
                break;
            case 'viasMagia':
                personaje_actual[k] = parseArrayNivelEnVia(v);
                break;
            case 'conjurosSueltos':
                personaje_actual[k] = parseArrayConjuros(v);
                break;
            case 'bonos':
                personaje_actual[k] = parseArrayBonos(v);
                break;
            case 'costesReducidos':
                personaje_actual[k] = parseArrayCostesReducidos(v);
                break;
            case 'bonificadoresNaturales':
                personaje_actual[k] = parseArrayBonificadoresNaturales(v);
                break;
            case 'ventajas':
            case 'desventajas':
                personaje_actual[k] = parseArrayElementoPCComprado(v);
                break;
            case 'prohibidos':
                personaje_actual[k] = parseArrayElementoProhibido(v);
                break;
            case 'allHabilidades':
                allHabilidades = v;
                break;
            case 'manejoArmas':
                personaje_actual[k] = parseArrayArma(v);
                break;
            case 'tablasArmas':
                personaje_actual[k] = parseArrayTablasArmasComprada(v);
                break;
            case 'artesMarciales':
                personaje_actual[k] = parseArrayArtesMarcialesCompradas(v);
                break;
            case 'habilidadesKi':
                personaje_actual[k] = parseArrayHabilidadKiComprada(v);
                break;
            case 'tecnicasKi':
                personaje_actual[k] = parseArrayTecnicaKi(v);
                break;
            case 'numTecnicas':
                personaje_actual.numTecnicas = parseNumTecnicas(v);
                break;
            case 'disciplinasPsiquicas':
                personaje_actual[k] = parseArrayDisciplinaPsiquica(v);
                break;
            case 'poderesPsiquicosDominados':
                personaje_actual[k] = parseArrayPoderPsiquicoDominado(v);
                break;
            case 'dinero':
                personaje_actual[k] = parseDinero(v);
                break;
            default:
                personaje_actual[k] = v;
        }
    });

    personaje_actual['allHabilidades'] = parseArrayHabilidadDePersonaje(allHabilidades);

    mostrarPersonajeActual();
    PERSONAJE_EN_MARCHA = true;
}
animaUnico.inicializar = function() {
    initHabilidades();

    initVentajas();

    initEquipo();

    initArtesMarciales();

    initCategorias();

    muestraControles();

    /*Se extraen los valores de GET*/
    var queryDict = {};
    location.search.substr(1).split("&").forEach(
        function(item) {
            queryDict[item.split("=")[0]] = item.split("=")[1]
        }
    );

    if (queryDict.carga == 1) {
        var idPersonaje = queryDict.id;
        jQuery.ajax('http://helechaloscuro.net/cake/personajes/carga/'+idPersonaje,{
            success : function(json, status, jqxhr) {
                cargarPersonaje(json);
                ALTO_DIALOGO =  $(window).height() * 0.8;
            },
            dataType : 'text',
            error : function(jqxhrm, errorType, exception) {

            } //TODO username / password para autenticación HTTP
        });
    } else {
        personaje_actual = new Personaje();
        personaje_actual.setRaza(getRaza(RAZA_HUMANO));
        personaje_actual.setCategoria(CATEGORIA_NOVEL);

        muestraPersonaje(personaje_actual);

        var primeraVisita = true;

        if (typeof(Storage) !== "undefined") {
            if (localStorage.ultimosCambiosVistos == CURRENT_VERSION) {
                primeraVisita = false;
            }
        }

        if (primeraVisita) {
            mostrarLogCambios();
        }
        ALTO_DIALOGO =  $(window).height() * 0.8;
    }
};

function inicializar() {
    initHabilidades();

    initVentajas();

    initEquipo();

    initArtesMarciales();

    initCategorias();

    muestraControles();

    /*Se extraen los valores de GET*/
    var queryDict = {};
    location.search.substr(1).split("&").forEach(function(item) {queryDict[item.split("=")[0]] = item.split("=")[1]});

    if (queryDict.carga == 1) {
        var idPersonaje = queryDict.id;
        jQuery.ajax('http://helechaloscuro.net/cake/Personaje/carga',{
            success : function(json, status, jqxhr) {
                cargarPersonaje(json);
                ALTO_DIALOGO =  $(window).height() * 0.8;
            },
            data : {
                id : idPersonaje
            },
            dataType : 'text',
            error : function(jqxhrm, errorType, exception) {
                console.log("Error de ajax: " + errorType);
            } //TODO username / password para autenticación HTTP
        });
    } else {
        personaje_actual = new Personaje();
        personaje_actual.setRaza(getRaza(RAZA_HUMANO));
        personaje_actual.setCategoria(CATEGORIA_NOVEL);

        muestraPersonaje(personaje_actual);

        var primeraVisita = true;

        if (typeof(Storage) !== "undefined") {
            if (localStorage.ultimosCambiosVistos == CURRENT_VERSION) {
                primeraVisita = false;
            }
        }

        if (primeraVisita) {
            mostrarLogCambios();
        }
        ALTO_DIALOGO =  $(window).height() * 0.8;
    }

}

function mostrarPersonajeActual() {
    muestraPersonaje(personaje_actual);
}

}( window.animaUnico = window.animaUnico || {}, jQuery ));
